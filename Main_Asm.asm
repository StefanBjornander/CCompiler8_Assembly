	org 100h
	; Initialize Stack Pointer
x256:	mov bp, $StackTop	; 3: 189 224 228
	; Initialize Heap Pointer
x259:	mov word [65534], 65534	; 6: 199 6 254 255 254 255
	; Initialize FPU Control Word, truncate mode => set bit 10 and 11.
x265:	fstcw [bp]	; 4: 155 217 126 0
x269:	or word [bp], 3072	; 5: 129 78 0 0 12
x274:	fldcw [bp]	; 3: 217 110 0
x277:	mov word [$StackTop], 0	; 6: 199 6 224 228 0 0

main:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

main$1:	; Call 6 math_test 0
x283:	mov word [bp + 6], main$2	; 5: 199 70 6 41 1
x288:	mov [bp + 8], bp	; 3: 137 110 8
x291:	add bp, 6	; 3: 131 197 6
x294:	jmp math_test	; 3: 233 247 0

main$2:	; PostCall 6

main$3:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

main$4:	; Call 6 file_test 0
x297:	mov word [bp + 6], main$5	; 5: 199 70 6 55 1
x302:	mov [bp + 8], bp	; 3: 137 110 8
x305:	add bp, 6	; 3: 131 197 6
x308:	jmp file_test	; 3: 233 1 55

main$5:	; PostCall 6

main$6:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

main$7:	; Call 6 time_test 0
x311:	mov word [bp + 6], main$8	; 5: 199 70 6 69 1
x316:	mov [bp + 8], bp	; 3: 137 110 8
x319:	add bp, 6	; 3: 131 197 6
x322:	jmp time_test	; 3: 233 65 117

main$8:	; PostCall 6

main$9:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

main$10:	; Call 6 assert_test 0
x325:	mov word [bp + 6], main$11	; 5: 199 70 6 83 1
x330:	mov [bp + 8], bp	; 3: 137 110 8
x333:	add bp, 6	; 3: 131 197 6
x336:	jmp assert_test	; 3: 233 25 140

main$11:	; PostCall 6

main$12:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

main$13:	; Call 6 malloc_test 0
x339:	mov word [bp + 6], main$14	; 5: 199 70 6 97 1
x344:	mov [bp + 8], bp	; 3: 137 110 8
x347:	add bp, 6	; 3: 131 197 6
x350:	jmp malloc_test	; 3: 233 211 140

main$14:	; PostCall 6

main$15:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

main$16:	; Call 6 print_test 0
x353:	mov word [bp + 6], main$17	; 5: 199 70 6 111 1
x358:	mov [bp + 8], bp	; 3: 137 110 8
x361:	add bp, 6	; 3: 131 197 6
x364:	jmp print_test	; 3: 233 94 145

main$17:	; PostCall 6

main$18:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

main$19:	; Call 6 limits_test 0
x367:	mov word [bp + 6], main$20	; 5: 199 70 6 125 1
x372:	mov [bp + 8], bp	; 3: 137 110 8
x375:	add bp, 6	; 3: 131 197 6
x378:	jmp limits_test	; 3: 233 179 149

main$20:	; PostCall 6

main$21:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

main$22:	; Call 6 float_test 0
x381:	mov word [bp + 6], main$23	; 5: 199 70 6 139 1
x386:	mov [bp + 8], bp	; 3: 137 110 8
x389:	add bp, 6	; 3: 131 197 6
x392:	jmp float_test	; 3: 233 95 152

main$23:	; PostCall 6

main$24:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

main$25:	; Call 6 setjmp_test 0
x395:	mov word [bp + 6], main$26	; 5: 199 70 6 153 1
x400:	mov [bp + 8], bp	; 3: 137 110 8
x403:	add bp, 6	; 3: 131 197 6
x406:	jmp setjmp_test	; 3: 233 92 152

main$26:	; PostCall 6

main$27:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

main$28:	; Call 6 stdio_test 0
x409:	mov word [bp + 6], main$29	; 5: 199 70 6 167 1
x414:	mov [bp + 8], bp	; 3: 137 110 8
x417:	add bp, 6	; 3: 131 197 6
x420:	jmp stdio_test	; 3: 233 10 154

main$29:	; PostCall 6

main$30:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

main$31:	; Call 6 string_test 0
x423:	mov word [bp + 6], main$32	; 5: 199 70 6 181 1
x428:	mov [bp + 8], bp	; 3: 137 110 8
x431:	add bp, 6	; 3: 131 197 6
x434:	jmp string_test	; 3: 233 122 169

main$32:	; PostCall 6

main$33:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

main$34:	; Call 6 stdio_test 0
x437:	mov word [bp + 6], main$35	; 5: 199 70 6 195 1
x442:	mov [bp + 8], bp	; 3: 137 110 8
x445:	add bp, 6	; 3: 131 197 6
x448:	jmp stdio_test	; 3: 233 238 153

main$35:	; PostCall 6

main$36:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

main$37:	; Call 6 stdlib_test 0
x451:	mov word [bp + 6], main$38	; 5: 199 70 6 209 1
x456:	mov [bp + 8], bp	; 3: 137 110 8
x459:	add bp, 6	; 3: 131 197 6
x462:	jmp stdlib_test	; 3: 233 26 183

main$38:	; PostCall 6

main$39:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

main$40:	; Call 6 strtol_test 0
x465:	mov word [bp + 6], main$41	; 5: 199 70 6 223 1
x470:	mov [bp + 8], bp	; 3: 137 110 8
x473:	add bp, 6	; 3: 131 197 6
x476:	jmp strtol_test	; 3: 233 125 194

main$41:	; PostCall 6

main$42:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

main$43:	; Call 6 strtoul_test 0
x479:	mov word [bp + 6], main$44	; 5: 199 70 6 237 1
x484:	mov [bp + 8], bp	; 3: 137 110 8
x487:	add bp, 6	; 3: 131 197 6
x490:	jmp strtoul_test	; 3: 233 63 206

main$44:	; PostCall 6

main$45:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

main$46:	; Call 6 character_test 0
x493:	mov word [bp + 6], main$47	; 5: 199 70 6 251 1
x498:	mov [bp + 8], bp	; 3: 137 110 8
x501:	add bp, 6	; 3: 131 197 6
x504:	jmp character_test	; 3: 233 1 218

main$47:	; PostCall 6

main$48:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

main$49:	; Call 6 locale_test 0
x507:	mov word [bp + 6], main$50	; 5: 199 70 6 9 2
x512:	mov [bp + 8], bp	; 3: 137 110 8
x515:	add bp, 6	; 3: 131 197 6
x518:	jmp locale_test	; 3: 233 204 226

main$50:	; PostCall 6

main$51:	; Return 0
x521:	cmp word [bp], 0	; 4: 131 126 0 0
x525:	je return_label$0	; 2: 116 11
x527:	mov ax, [bp]	; 3: 139 70 0
x530:	mov di, [bp + 4]	; 3: 139 126 4
x533:	mov bp, [bp + 2]	; 3: 139 110 2
x536:	jmp ax	; 2: 255 224

return_label$0:
x538:	mov al, 0	; 2: 176 0
x540:	mov ah, 76	; 2: 180 76
x542:	int 33	; 2: 205 33

main$52:	; FunctionEnd main

math_test:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$1:	; PushFloat 0.333333333
x544:	fld qword [@10215$float8$0.333333333#]	; 4: 221 6 174 4

math_test$2:	; Parameter 6 0.333333333 6
x548:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$3:	; Call 6 math_test_1 0
x551:	mov word [bp + 6], math_test$4	; 5: 199 70 6 53 2
x556:	mov [bp + 8], bp	; 3: 137 110 8
x559:	add bp, 6	; 3: 131 197 6
x562:	jmp math_test_1	; 3: 233 89 3

math_test$4:	; PostCall 6

math_test$5:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$6:	; PushFloat 0.75
x565:	fld qword [@10219$float8$0.75#]	; 4: 221 6 182 4

math_test$7:	; Parameter 6 0.75 6
x569:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$8:	; Call 6 math_test_1 0
x572:	mov word [bp + 6], math_test$9	; 5: 199 70 6 74 2
x577:	mov [bp + 8], bp	; 3: 137 110 8
x580:	add bp, 6	; 3: 131 197 6
x583:	jmp math_test_1	; 3: 233 68 3

math_test$9:	; PostCall 6

math_test$10:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$11:	; PushFloat 1.000010
x586:	fld qword [@10223$float8$1.000010#]	; 4: 221 6 190 4

math_test$12:	; Parameter 6 1.000010 6
x590:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$13:	; Call 6 math_test_1 0
x593:	mov word [bp + 6], math_test$14	; 5: 199 70 6 95 2
x598:	mov [bp + 8], bp	; 3: 137 110 8
x601:	add bp, 6	; 3: 131 197 6
x604:	jmp math_test_1	; 3: 233 47 3

math_test$14:	; PostCall 6

math_test$15:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$16:	; PushFloat 1.0
x607:	fld1	; 2: 217 232

math_test$17:	; Parameter 6 1.0 6
x609:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$18:	; Call 6 math_test_1 0
x612:	mov word [bp + 6], math_test$19	; 5: 199 70 6 114 2
x617:	mov [bp + 8], bp	; 3: 137 110 8
x620:	add bp, 6	; 3: 131 197 6
x623:	jmp math_test_1	; 3: 233 28 3

math_test$19:	; PostCall 6

math_test$20:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$21:	; PushFloat 0.999999
x626:	fld qword [@10231$float8$0.999999#]	; 4: 221 6 198 4

math_test$22:	; Parameter 6 0.999999 6
x630:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$23:	; Call 6 math_test_1 0
x633:	mov word [bp + 6], math_test$24	; 5: 199 70 6 135 2
x638:	mov [bp + 8], bp	; 3: 137 110 8
x641:	add bp, 6	; 3: 131 197 6
x644:	jmp math_test_1	; 3: 233 7 3

math_test$24:	; PostCall 6

math_test$25:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$26:	; PushFloat 0.000010
x647:	fld qword [@10235$float8$0.000010#]	; 4: 221 6 206 4

math_test$27:	; Parameter 6 0.000010 6
x651:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$28:	; Call 6 math_test_1 0
x654:	mov word [bp + 6], math_test$29	; 5: 199 70 6 156 2
x659:	mov [bp + 8], bp	; 3: 137 110 8
x662:	add bp, 6	; 3: 131 197 6
x665:	jmp math_test_1	; 3: 233 242 2

math_test$29:	; PostCall 6

math_test$30:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$31:	; PushZero
x668:	fldz	; 2: 217 238

math_test$32:	; Parameter 6 0 6
x670:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$33:	; Call 6 math_test_1 0
x673:	mov word [bp + 6], math_test$34	; 5: 199 70 6 175 2
x678:	mov [bp + 8], bp	; 3: 137 110 8
x681:	add bp, 6	; 3: 131 197 6
x684:	jmp math_test_1	; 3: 233 223 2

math_test$34:	; PostCall 6

math_test$35:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$36:	; PushFloat -0.000010
x687:	fld qword [@10243$float8$minus0.000010#]	; 4: 221 6 214 4

math_test$37:	; Parameter 6 -0.000010 6
x691:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$38:	; Call 6 math_test_1 0
x694:	mov word [bp + 6], math_test$39	; 5: 199 70 6 196 2
x699:	mov [bp + 8], bp	; 3: 137 110 8
x702:	add bp, 6	; 3: 131 197 6
x705:	jmp math_test_1	; 3: 233 202 2

math_test$39:	; PostCall 6

math_test$40:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$41:	; PushFloat -0.999999
x708:	fld qword [@10247$float8$minus0.999999#]	; 4: 221 6 222 4

math_test$42:	; Parameter 6 -0.999999 6
x712:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$43:	; Call 6 math_test_1 0
x715:	mov word [bp + 6], math_test$44	; 5: 199 70 6 217 2
x720:	mov [bp + 8], bp	; 3: 137 110 8
x723:	add bp, 6	; 3: 131 197 6
x726:	jmp math_test_1	; 3: 233 181 2

math_test$44:	; PostCall 6

math_test$45:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$46:	; PushFloat -1.0
x729:	fld qword [@10251$float8$minus1.0#]	; 4: 221 6 230 4

math_test$47:	; Parameter 6 -1.0 6
x733:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$48:	; Call 6 math_test_1 0
x736:	mov word [bp + 6], math_test$49	; 5: 199 70 6 238 2
x741:	mov [bp + 8], bp	; 3: 137 110 8
x744:	add bp, 6	; 3: 131 197 6
x747:	jmp math_test_1	; 3: 233 160 2

math_test$49:	; PostCall 6

math_test$50:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$51:	; PushFloat -1.000010
x750:	fld qword [@10255$float8$minus1.000010#]	; 4: 221 6 238 4

math_test$52:	; Parameter 6 -1.000010 6
x754:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$53:	; Call 6 math_test_1 0
x757:	mov word [bp + 6], math_test$54	; 5: 199 70 6 3 3
x762:	mov [bp + 8], bp	; 3: 137 110 8
x765:	add bp, 6	; 3: 131 197 6
x768:	jmp math_test_1	; 3: 233 139 2

math_test$54:	; PostCall 6

math_test$55:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$56:	; PushFloat 6.28
x771:	fld qword [@10261$float8$6.28#]	; 4: 221 6 246 4

math_test$57:	; Parameter 6 6.28 6
x775:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$58:	; Call 6 math_test_1 0
x778:	mov word [bp + 6], math_test$59	; 5: 199 70 6 24 3
x783:	mov [bp + 8], bp	; 3: 137 110 8
x786:	add bp, 6	; 3: 131 197 6
x789:	jmp math_test_1	; 3: 233 118 2

math_test$59:	; PostCall 6

math_test$60:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$61:	; PushFloat 3.14
x792:	fld qword [@10265$float8$3.14#]	; 4: 221 6 254 4

math_test$62:	; Parameter 6 3.14 6
x796:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$63:	; Call 6 math_test_1 0
x799:	mov word [bp + 6], math_test$64	; 5: 199 70 6 45 3
x804:	mov [bp + 8], bp	; 3: 137 110 8
x807:	add bp, 6	; 3: 131 197 6
x810:	jmp math_test_1	; 3: 233 97 2

math_test$64:	; PostCall 6

math_test$65:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$66:	; PushFloat 1.57
x813:	fld qword [@10271$float8$1.57#]	; 4: 221 6 6 5

math_test$67:	; Parameter 6 1.57 6
x817:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$68:	; Call 6 math_test_1 0
x820:	mov word [bp + 6], math_test$69	; 5: 199 70 6 66 3
x825:	mov [bp + 8], bp	; 3: 137 110 8
x828:	add bp, 6	; 3: 131 197 6
x831:	jmp math_test_1	; 3: 233 76 2

math_test$69:	; PostCall 6

math_test$70:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$71:	; PushFloat -1.57
x834:	fld qword [@10278$float8$minus1.57#]	; 4: 221 6 14 5

math_test$72:	; Parameter 6 -1.57 6
x838:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$73:	; Call 6 math_test_1 0
x841:	mov word [bp + 6], math_test$74	; 5: 199 70 6 87 3
x846:	mov [bp + 8], bp	; 3: 137 110 8
x849:	add bp, 6	; 3: 131 197 6
x852:	jmp math_test_1	; 3: 233 55 2

math_test$74:	; PostCall 6

math_test$75:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$76:	; PushFloat -3.14
x855:	fld qword [@10283$float8$minus3.14#]	; 4: 221 6 22 5

math_test$77:	; Parameter 6 -3.14 6
x859:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$78:	; Call 6 math_test_1 0
x862:	mov word [bp + 6], math_test$79	; 5: 199 70 6 108 3
x867:	mov [bp + 8], bp	; 3: 137 110 8
x870:	add bp, 6	; 3: 131 197 6
x873:	jmp math_test_1	; 3: 233 34 2

math_test$79:	; PostCall 6

math_test$80:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$81:	; PushFloat -6.28
x876:	fld qword [@10289$float8$minus6.28#]	; 4: 221 6 30 5

math_test$82:	; Parameter 6 -6.28 6
x880:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$83:	; Call 6 math_test_1 0
x883:	mov word [bp + 6], math_test$84	; 5: 199 70 6 129 3
x888:	mov [bp + 8], bp	; 3: 137 110 8
x891:	add bp, 6	; 3: 131 197 6
x894:	jmp math_test_1	; 3: 233 13 2

math_test$84:	; PostCall 6

math_test$85:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$86:	; PushFloat 1.0
x897:	fld1	; 2: 217 232

math_test$87:	; Parameter 6 1.0 6
x899:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$88:	; PushFloat 2.0
x902:	fld qword [@10295$float8$2.0#]	; 4: 221 6 38 5

math_test$89:	; Parameter 6 2.0 14
x906:	fstp qword [bp + 20]	; 3: 221 94 20

math_test$90:	; Call 6 math_test_2 0
x909:	mov word [bp + 6], math_test$91	; 5: 199 70 6 155 3
x914:	mov [bp + 8], bp	; 3: 137 110 8
x917:	add bp, 6	; 3: 131 197 6
x920:	jmp math_test_2	; 3: 233 62 49

math_test$91:	; PostCall 6

math_test$92:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$93:	; PushFloat 3.0
x923:	fld qword [@10300$float8$3.0#]	; 4: 221 6 46 5

math_test$94:	; Parameter 6 3.0 6
x927:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$95:	; PushFloat 4.0
x930:	fld qword [@10302$float8$4.0#]	; 4: 221 6 54 5

math_test$96:	; Parameter 6 4.0 14
x934:	fstp qword [bp + 20]	; 3: 221 94 20

math_test$97:	; Call 6 math_test_2 0
x937:	mov word [bp + 6], math_test$98	; 5: 199 70 6 183 3
x942:	mov [bp + 8], bp	; 3: 137 110 8
x945:	add bp, 6	; 3: 131 197 6
x948:	jmp math_test_2	; 3: 233 34 49

math_test$98:	; PostCall 6

math_test$99:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$100:	; PushZero
x951:	fldz	; 2: 217 238

math_test$101:	; Parameter 6 0 6
x953:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$102:	; PushFloat 2.0
x956:	fld qword [@10309$float8$2.0#]	; 4: 221 6 62 5

math_test$103:	; Parameter 6 2.0 14
x960:	fstp qword [bp + 20]	; 3: 221 94 20

math_test$104:	; Call 6 math_test_2 0
x963:	mov word [bp + 6], math_test$105	; 5: 199 70 6 209 3
x968:	mov [bp + 8], bp	; 3: 137 110 8
x971:	add bp, 6	; 3: 131 197 6
x974:	jmp math_test_2	; 3: 233 8 49

math_test$105:	; PostCall 6

math_test$106:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$107:	; PushZero
x977:	fldz	; 2: 217 238

math_test$108:	; Parameter 6 0 6
x979:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$109:	; PushFloat -2.0
x982:	fld qword [@10316$float8$minus2.0#]	; 4: 221 6 70 5

math_test$110:	; Parameter 6 -2.0 14
x986:	fstp qword [bp + 20]	; 3: 221 94 20

math_test$111:	; Call 6 math_test_2 0
x989:	mov word [bp + 6], math_test$112	; 5: 199 70 6 235 3
x994:	mov [bp + 8], bp	; 3: 137 110 8
x997:	add bp, 6	; 3: 131 197 6
x1000:	jmp math_test_2	; 3: 233 238 48

math_test$112:	; PostCall 6

math_test$113:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$114:	; PushOne
x1003:	fld1	; 2: 217 232

math_test$115:	; Parameter 6 1 6
x1005:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$116:	; PushFloat 2.0
x1008:	fld qword [@10323$float8$2.0#]	; 4: 221 6 78 5

math_test$117:	; Parameter 6 2.0 14
x1012:	fstp qword [bp + 20]	; 3: 221 94 20

math_test$118:	; Call 6 math_test_2 0
x1015:	mov word [bp + 6], math_test$119	; 5: 199 70 6 5 4
x1020:	mov [bp + 8], bp	; 3: 137 110 8
x1023:	add bp, 6	; 3: 131 197 6
x1026:	jmp math_test_2	; 3: 233 212 48

math_test$119:	; PostCall 6

math_test$120:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$121:	; PushOne
x1029:	fld1	; 2: 217 232

math_test$122:	; Parameter 6 1 6
x1031:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$123:	; PushFloat -2.0
x1034:	fld qword [@10330$float8$minus2.0#]	; 4: 221 6 86 5

math_test$124:	; Parameter 6 -2.0 14
x1038:	fstp qword [bp + 20]	; 3: 221 94 20

math_test$125:	; Call 6 math_test_2 0
x1041:	mov word [bp + 6], math_test$126	; 5: 199 70 6 31 4
x1046:	mov [bp + 8], bp	; 3: 137 110 8
x1049:	add bp, 6	; 3: 131 197 6
x1052:	jmp math_test_2	; 3: 233 186 48

math_test$126:	; PostCall 6

math_test$127:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$128:	; PushZero
x1055:	fldz	; 2: 217 238

math_test$129:	; Parameter 6 0 6
x1057:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$130:	; PushZero
x1060:	fldz	; 2: 217 238

math_test$131:	; Parameter 6 0 14
x1062:	fstp qword [bp + 20]	; 3: 221 94 20

math_test$132:	; Call 6 math_test_2 0
x1065:	mov word [bp + 6], math_test$133	; 5: 199 70 6 55 4
x1070:	mov [bp + 8], bp	; 3: 137 110 8
x1073:	add bp, 6	; 3: 131 197 6
x1076:	jmp math_test_2	; 3: 233 162 48

math_test$133:	; PostCall 6

math_test$134:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$135:	; PushFloat 2
x1079:	fld qword [@10343$float8$2#]	; 4: 221 6 94 5

math_test$136:	; Parameter 6 2 6
x1083:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$137:	; PushZero
x1086:	fldz	; 2: 217 238

math_test$138:	; Parameter 6 0 14
x1088:	fstp qword [bp + 20]	; 3: 221 94 20

math_test$139:	; Call 6 math_test_2 0
x1091:	mov word [bp + 6], math_test$140	; 5: 199 70 6 81 4
x1096:	mov [bp + 8], bp	; 3: 137 110 8
x1099:	add bp, 6	; 3: 131 197 6
x1102:	jmp math_test_2	; 3: 233 136 48

math_test$140:	; PostCall 6

math_test$141:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$142:	; PushFloat -2
x1105:	fld qword [@10350$float8$minus2#]	; 4: 221 6 102 5

math_test$143:	; Parameter 6 -2 6
x1109:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$144:	; PushZero
x1112:	fldz	; 2: 217 238

math_test$145:	; Parameter 6 0 14
x1114:	fstp qword [bp + 20]	; 3: 221 94 20

math_test$146:	; Call 6 math_test_2 0
x1117:	mov word [bp + 6], math_test$147	; 5: 199 70 6 107 4
x1122:	mov [bp + 8], bp	; 3: 137 110 8
x1125:	add bp, 6	; 3: 131 197 6
x1128:	jmp math_test_2	; 3: 233 110 48

math_test$147:	; PostCall 6

math_test$148:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$149:	; PushFloat -1.0
x1131:	fld qword [@10356$float8$minus1.0#]	; 4: 221 6 110 5

math_test$150:	; Parameter 6 -1.0 6
x1135:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$151:	; PushFloat -1.0
x1138:	fld qword [@10358$float8$minus1.0#]	; 4: 221 6 118 5

math_test$152:	; Parameter 6 -1.0 14
x1142:	fstp qword [bp + 20]	; 3: 221 94 20

math_test$153:	; Call 6 math_test_2 0
x1145:	mov word [bp + 6], math_test$154	; 5: 199 70 6 135 4
x1150:	mov [bp + 8], bp	; 3: 137 110 8
x1153:	add bp, 6	; 3: 131 197 6
x1156:	jmp math_test_2	; 3: 233 82 48

math_test$154:	; PostCall 6

math_test$155:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$156:	; PushFloat -2.0
x1159:	fld qword [@10363$float8$minus2.0#]	; 4: 221 6 126 5

math_test$157:	; Parameter 6 -2.0 6
x1163:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$158:	; PushFloat -4.0
x1166:	fld qword [@10365$float8$minus4.0#]	; 4: 221 6 134 5

math_test$159:	; Parameter 6 -4.0 14
x1170:	fstp qword [bp + 20]	; 3: 221 94 20

math_test$160:	; Call 6 math_test_2 0
x1173:	mov word [bp + 6], math_test$161	; 5: 199 70 6 163 4
x1178:	mov [bp + 8], bp	; 3: 137 110 8
x1181:	add bp, 6	; 3: 131 197 6
x1184:	jmp math_test_2	; 3: 233 54 48

math_test$161:	; PostCall 6

math_test$162:	; Return 0
x1187:	mov ax, [bp]	; 3: 139 70 0
x1190:	mov di, [bp + 4]	; 3: 139 126 4
x1193:	mov bp, [bp + 2]	; 3: 139 110 2
x1196:	jmp ax	; 2: 255 224

math_test$163:	; FunctionEnd math_test

@10215$float8$0.333333333#:
x1198:	dq 0.333333333	; 8: 22 181 249 84 85 85 213 63

@10219$float8$0.75#:
x1206:	dq 0.75	; 8: 0 0 0 0 0 0 232 63

@10223$float8$1.000010#:
x1214:	dq 1.000010	; 8: 114 196 90 124 10 0 240 63

@10231$float8$0.999999#:
x1222:	dq 0.999999	; 8: 233 11 33 231 253 255 239 63

@10235$float8$0.000010#:
x1230:	dq 0.000010	; 8: 241 104 227 136 181 248 228 62

@10243$float8$minus0.000010#:
x1238:	dq -0.000010	; 8: 241 104 227 136 181 248 228 190

@10247$float8$minus0.999999#:
x1246:	dq -0.999999	; 8: 233 11 33 231 253 255 239 191

@10251$float8$minus1.0#:
x1254:	dq -1.0	; 8: 0 0 0 0 0 0 240 191

@10255$float8$minus1.000010#:
x1262:	dq -1.000010	; 8: 114 196 90 124 10 0 240 191

@10261$float8$6.28#:
x1270:	dq 6.28	; 8: 31 133 235 81 184 30 25 64

@10265$float8$3.14#:
x1278:	dq 3.14	; 8: 31 133 235 81 184 30 9 64

@10271$float8$1.57#:
x1286:	dq 1.57	; 8: 31 133 235 81 184 30 249 63

@10278$float8$minus1.57#:
x1294:	dq -1.57	; 8: 31 133 235 81 184 30 249 191

@10283$float8$minus3.14#:
x1302:	dq -3.14	; 8: 31 133 235 81 184 30 9 192

@10289$float8$minus6.28#:
x1310:	dq -6.28	; 8: 31 133 235 81 184 30 25 192

@10295$float8$2.0#:
x1318:	dq 2.0	; 8: 0 0 0 0 0 0 0 64

@10300$float8$3.0#:
x1326:	dq 3.0	; 8: 0 0 0 0 0 0 8 64

@10302$float8$4.0#:
x1334:	dq 4.0	; 8: 0 0 0 0 0 0 16 64

@10309$float8$2.0#:
x1342:	dq 2.0	; 8: 0 0 0 0 0 0 0 64

@10316$float8$minus2.0#:
x1350:	dq -2.0	; 8: 0 0 0 0 0 0 0 192

@10323$float8$2.0#:
x1358:	dq 2.0	; 8: 0 0 0 0 0 0 0 64

@10330$float8$minus2.0#:
x1366:	dq -2.0	; 8: 0 0 0 0 0 0 0 192

@10343$float8$2#:
x1374:	dq 2.0	; 8: 0 0 0 0 0 0 0 64

@10350$float8$minus2#:
x1382:	dq -2.0	; 8: 0 0 0 0 0 0 0 192

@10356$float8$minus1.0#:
x1390:	dq -1.0	; 8: 0 0 0 0 0 0 240 191

@10358$float8$minus1.0#:
x1398:	dq -1.0	; 8: 0 0 0 0 0 0 240 191

@10363$float8$minus2.0#:
x1406:	dq -2.0	; 8: 0 0 0 0 0 0 0 192

@10365$float8$minus4.0#:
x1414:	dq -4.0	; 8: 0 0 0 0 0 0 16 192

math_test_1:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$1:	; Parameter 14 string_3C25f3E0A# 6
x1422:	mov word [bp + 20], @10410$string_3C25f3E0A#	; 5: 199 70 20 196 10

math_test_1$2:	; PushFloat x
x1427:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$3:	; Parameter 14 x 8
x1430:	fstp qword [bp + 22]	; 3: 221 94 22

math_test_1$4:	; Call 14 printf 0
x1433:	mov word [bp + 14], math_test_1$5	; 5: 199 70 14 172 5
x1438:	mov [bp + 16], bp	; 3: 137 110 16
x1441:	add bp, 14	; 3: 131 197 14
x1444:	mov di, bp	; 2: 137 239
x1446:	add di, 8	; 3: 131 199 8
x1449:	jmp printf	; 3: 233 88 7

math_test_1$5:	; PostCall 14

math_test_1$6:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$7:	; Parameter 14 string_2020sin2825f29203D2025f2C20errno203D2025i0A# 6
x1452:	mov word [bp + 20], @10412$string_2020sin2825f29203D2025f2C20errno203D2025i0A#	; 5: 199 70 20 202 10

math_test_1$8:	; PushFloat x
x1457:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$9:	; Parameter 14 x 8
x1460:	fstp qword [bp + 22]	; 3: 221 94 22

math_test_1$10:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$11:	; PushFloat x
x1463:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$12:	; Parameter 14 x 22
x1466:	fstp qword [bp + 36]	; 3: 221 94 36

math_test_1$13:	; Call 14 sin 16
x1469:	mov word [bp + 30], math_test_1$14	; 5: 199 70 30 203 5
x1474:	mov [bp + 32], bp	; 3: 137 110 32
x1477:	add bp, 30	; 3: 131 197 30
x1480:	jmp sin	; 3: 233 183 37

math_test_1$14:	; PostCall 14

math_test_1$15:	; GetReturnValue £temporary4632

math_test_1$16:	; Parameter 14 £temporary4632 16
x1483:	fstp qword [bp + 30]	; 3: 221 94 30

math_test_1$17:	; Parameter 14 errno 24
x1486:	mov ax, [errno]	; 3: 161 230 10
x1489:	mov [bp + 38], ax	; 3: 137 70 38

math_test_1$18:	; Call 14 printf 0
x1492:	mov word [bp + 14], math_test_1$19	; 5: 199 70 14 231 5
x1497:	mov [bp + 16], bp	; 3: 137 110 16
x1500:	add bp, 14	; 3: 131 197 14
x1503:	mov di, bp	; 2: 137 239
x1505:	add di, 18	; 3: 131 199 18
x1508:	jmp printf	; 3: 233 29 7

math_test_1$19:	; PostCall 14

math_test_1$20:	; Assign errno 0
x1511:	mov word [errno], 0	; 6: 199 6 230 10 0 0

math_test_1$21:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$22:	; Parameter 14 string_2020cos2825f29203D2025f2C20errno203D2025i0A# 6
x1517:	mov word [bp + 20], @10417$string_2020cos2825f29203D2025f2C20errno203D2025i0A#	; 5: 199 70 20 232 10

math_test_1$23:	; PushFloat x
x1522:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$24:	; Parameter 14 x 8
x1525:	fstp qword [bp + 22]	; 3: 221 94 22

math_test_1$25:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$26:	; PushFloat x
x1528:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$27:	; Parameter 14 x 22
x1531:	fstp qword [bp + 36]	; 3: 221 94 36

math_test_1$28:	; Call 14 cos 16
x1534:	mov word [bp + 30], math_test_1$29	; 5: 199 70 30 12 6
x1539:	mov [bp + 32], bp	; 3: 137 110 32
x1542:	add bp, 30	; 3: 131 197 30
x1545:	jmp cos	; 3: 233 231 38

math_test_1$29:	; PostCall 14

math_test_1$30:	; GetReturnValue £temporary4634

math_test_1$31:	; Parameter 14 £temporary4634 16
x1548:	fstp qword [bp + 30]	; 3: 221 94 30

math_test_1$32:	; Parameter 14 errno 24
x1551:	mov ax, [errno]	; 3: 161 230 10
x1554:	mov [bp + 38], ax	; 3: 137 70 38

math_test_1$33:	; Call 14 printf 0
x1557:	mov word [bp + 14], math_test_1$34	; 5: 199 70 14 40 6
x1562:	mov [bp + 16], bp	; 3: 137 110 16
x1565:	add bp, 14	; 3: 131 197 14
x1568:	mov di, bp	; 2: 137 239
x1570:	add di, 18	; 3: 131 199 18
x1573:	jmp printf	; 3: 233 220 6

math_test_1$34:	; PostCall 14

math_test_1$35:	; Assign errno 0
x1576:	mov word [errno], 0	; 6: 199 6 230 10 0 0

math_test_1$36:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$37:	; Parameter 14 string_2020tan2825f29203D2025f2C20errno203D2025i0A# 6
x1582:	mov word [bp + 20], @10422$string_2020tan2825f29203D2025f2C20errno203D2025i0A#	; 5: 199 70 20 4 11

math_test_1$38:	; PushFloat x
x1587:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$39:	; Parameter 14 x 8
x1590:	fstp qword [bp + 22]	; 3: 221 94 22

math_test_1$40:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$41:	; PushFloat x
x1593:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$42:	; Parameter 14 x 22
x1596:	fstp qword [bp + 36]	; 3: 221 94 36

math_test_1$43:	; Call 14 tan 16
x1599:	mov word [bp + 30], math_test_1$44	; 5: 199 70 30 77 6
x1604:	mov [bp + 32], bp	; 3: 137 110 32
x1607:	add bp, 30	; 3: 131 197 30
x1610:	jmp tan	; 3: 233 160 39

math_test_1$44:	; PostCall 14

math_test_1$45:	; GetReturnValue £temporary4636

math_test_1$46:	; Parameter 14 £temporary4636 16
x1613:	fstp qword [bp + 30]	; 3: 221 94 30

math_test_1$47:	; Parameter 14 errno 24
x1616:	mov ax, [errno]	; 3: 161 230 10
x1619:	mov [bp + 38], ax	; 3: 137 70 38

math_test_1$48:	; Call 14 printf 0
x1622:	mov word [bp + 14], math_test_1$49	; 5: 199 70 14 105 6
x1627:	mov [bp + 16], bp	; 3: 137 110 16
x1630:	add bp, 14	; 3: 131 197 14
x1633:	mov di, bp	; 2: 137 239
x1635:	add di, 18	; 3: 131 199 18
x1638:	jmp printf	; 3: 233 155 6

math_test_1$49:	; PostCall 14

math_test_1$50:	; Assign errno 0
x1641:	mov word [errno], 0	; 6: 199 6 230 10 0 0

math_test_1$51:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$52:	; Parameter 14 string_2020asin2825f29203D2025f2C20errno203D2025i0A# 6
x1647:	mov word [bp + 20], @10427$string_2020asin2825f29203D2025f2C20errno203D2025i0A#	; 5: 199 70 20 32 11

math_test_1$53:	; PushFloat x
x1652:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$54:	; Parameter 14 x 8
x1655:	fstp qword [bp + 22]	; 3: 221 94 22

math_test_1$55:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$56:	; PushFloat x
x1658:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$57:	; Parameter 14 x 22
x1661:	fstp qword [bp + 36]	; 3: 221 94 36

math_test_1$58:	; Call 14 asin 16
x1664:	mov word [bp + 30], math_test_1$59	; 5: 199 70 30 142 6
x1669:	mov [bp + 32], bp	; 3: 137 110 32
x1672:	add bp, 30	; 3: 131 197 30
x1675:	jmp asin	; 3: 233 183 39

math_test_1$59:	; PostCall 14

math_test_1$60:	; GetReturnValue £temporary4638

math_test_1$61:	; Parameter 14 £temporary4638 16
x1678:	fstp qword [bp + 30]	; 3: 221 94 30

math_test_1$62:	; Parameter 14 errno 24
x1681:	mov ax, [errno]	; 3: 161 230 10
x1684:	mov [bp + 38], ax	; 3: 137 70 38

math_test_1$63:	; Call 14 printf 0
x1687:	mov word [bp + 14], math_test_1$64	; 5: 199 70 14 170 6
x1692:	mov [bp + 16], bp	; 3: 137 110 16
x1695:	add bp, 14	; 3: 131 197 14
x1698:	mov di, bp	; 2: 137 239
x1700:	add di, 18	; 3: 131 199 18
x1703:	jmp printf	; 3: 233 90 6

math_test_1$64:	; PostCall 14

math_test_1$65:	; Assign errno 0
x1706:	mov word [errno], 0	; 6: 199 6 230 10 0 0

math_test_1$66:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$67:	; Parameter 14 string_2020acos2825f29203D2025f2C20errno203D2025i0A# 6
x1712:	mov word [bp + 20], @10432$string_2020acos2825f29203D2025f2C20errno203D2025i0A#	; 5: 199 70 20 61 11

math_test_1$68:	; PushFloat x
x1717:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$69:	; Parameter 14 x 8
x1720:	fstp qword [bp + 22]	; 3: 221 94 22

math_test_1$70:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$71:	; PushFloat x
x1723:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$72:	; Parameter 14 x 22
x1726:	fstp qword [bp + 36]	; 3: 221 94 36

math_test_1$73:	; Call 14 acos 16
x1729:	mov word [bp + 30], math_test_1$74	; 5: 199 70 30 207 6
x1734:	mov [bp + 32], bp	; 3: 137 110 32
x1737:	add bp, 30	; 3: 131 197 30
x1740:	jmp acos	; 3: 233 70 42

math_test_1$74:	; PostCall 14

math_test_1$75:	; GetReturnValue £temporary4640

math_test_1$76:	; Parameter 14 £temporary4640 16
x1743:	fstp qword [bp + 30]	; 3: 221 94 30

math_test_1$77:	; Parameter 14 errno 24
x1746:	mov ax, [errno]	; 3: 161 230 10
x1749:	mov [bp + 38], ax	; 3: 137 70 38

math_test_1$78:	; Call 14 printf 0
x1752:	mov word [bp + 14], math_test_1$79	; 5: 199 70 14 235 6
x1757:	mov [bp + 16], bp	; 3: 137 110 16
x1760:	add bp, 14	; 3: 131 197 14
x1763:	mov di, bp	; 2: 137 239
x1765:	add di, 18	; 3: 131 199 18
x1768:	jmp printf	; 3: 233 25 6

math_test_1$79:	; PostCall 14

math_test_1$80:	; Assign errno 0
x1771:	mov word [errno], 0	; 6: 199 6 230 10 0 0

math_test_1$81:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$82:	; Parameter 14 string_2020atan2825f29203D2025f2C20errno203D2025i0A# 6
x1777:	mov word [bp + 20], @10437$string_2020atan2825f29203D2025f2C20errno203D2025i0A#	; 5: 199 70 20 90 11

math_test_1$83:	; PushFloat x
x1782:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$84:	; Parameter 14 x 8
x1785:	fstp qword [bp + 22]	; 3: 221 94 22

math_test_1$85:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$86:	; PushFloat x
x1788:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$87:	; Parameter 14 x 22
x1791:	fstp qword [bp + 36]	; 3: 221 94 36

math_test_1$88:	; Call 14 atan 16
x1794:	mov word [bp + 30], math_test_1$89	; 5: 199 70 30 16 7
x1799:	mov [bp + 32], bp	; 3: 137 110 32
x1802:	add bp, 30	; 3: 131 197 30
x1805:	jmp atan	; 3: 233 116 40

math_test_1$89:	; PostCall 14

math_test_1$90:	; GetReturnValue £temporary4642

math_test_1$91:	; Parameter 14 £temporary4642 16
x1808:	fstp qword [bp + 30]	; 3: 221 94 30

math_test_1$92:	; Parameter 14 errno 24
x1811:	mov ax, [errno]	; 3: 161 230 10
x1814:	mov [bp + 38], ax	; 3: 137 70 38

math_test_1$93:	; Call 14 printf 0
x1817:	mov word [bp + 14], math_test_1$94	; 5: 199 70 14 44 7
x1822:	mov [bp + 16], bp	; 3: 137 110 16
x1825:	add bp, 14	; 3: 131 197 14
x1828:	mov di, bp	; 2: 137 239
x1830:	add di, 18	; 3: 131 199 18
x1833:	jmp printf	; 3: 233 216 5

math_test_1$94:	; PostCall 14

math_test_1$95:	; Assign errno 0
x1836:	mov word [errno], 0	; 6: 199 6 230 10 0 0

math_test_1$96:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$97:	; Parameter 14 string_2020exp2825f29203D2025f2C20errno203D2025i0A# 6
x1842:	mov word [bp + 20], @10442$string_2020exp2825f29203D2025f2C20errno203D2025i0A#	; 5: 199 70 20 119 11

math_test_1$98:	; PushFloat x
x1847:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$99:	; Parameter 14 x 8
x1850:	fstp qword [bp + 22]	; 3: 221 94 22

math_test_1$100:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$101:	; PushFloat x
x1853:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$102:	; Parameter 14 x 22
x1856:	fstp qword [bp + 36]	; 3: 221 94 36

math_test_1$103:	; Call 14 exp 16
x1859:	mov word [bp + 30], math_test_1$104	; 5: 199 70 30 81 7
x1864:	mov [bp + 32], bp	; 3: 137 110 32
x1867:	add bp, 30	; 3: 131 197 30
x1870:	jmp exp	; 3: 233 234 34

math_test_1$104:	; PostCall 14

math_test_1$105:	; GetReturnValue £temporary4644

math_test_1$106:	; Parameter 14 £temporary4644 16
x1873:	fstp qword [bp + 30]	; 3: 221 94 30

math_test_1$107:	; Parameter 14 errno 24
x1876:	mov ax, [errno]	; 3: 161 230 10
x1879:	mov [bp + 38], ax	; 3: 137 70 38

math_test_1$108:	; Call 14 printf 0
x1882:	mov word [bp + 14], math_test_1$109	; 5: 199 70 14 109 7
x1887:	mov [bp + 16], bp	; 3: 137 110 16
x1890:	add bp, 14	; 3: 131 197 14
x1893:	mov di, bp	; 2: 137 239
x1895:	add di, 18	; 3: 131 199 18
x1898:	jmp printf	; 3: 233 151 5

math_test_1$109:	; PostCall 14

math_test_1$110:	; Assign errno 0
x1901:	mov word [errno], 0	; 6: 199 6 230 10 0 0

math_test_1$111:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$112:	; Parameter 14 string_2020log2825f29203D2025f2C20errno203D2025i0A# 6
x1907:	mov word [bp + 20], @10447$string_2020log2825f29203D2025f2C20errno203D2025i0A#	; 5: 199 70 20 147 11

math_test_1$113:	; PushFloat x
x1912:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$114:	; Parameter 14 x 8
x1915:	fstp qword [bp + 22]	; 3: 221 94 22

math_test_1$115:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$116:	; PushFloat x
x1918:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$117:	; Parameter 14 x 22
x1921:	fstp qword [bp + 36]	; 3: 221 94 36

math_test_1$118:	; Call 14 log 16
x1924:	mov word [bp + 30], math_test_1$119	; 5: 199 70 30 146 7
x1929:	mov [bp + 32], bp	; 3: 137 110 32
x1932:	add bp, 30	; 3: 131 197 30
x1935:	jmp log	; 3: 233 196 31

math_test_1$119:	; PostCall 14

math_test_1$120:	; GetReturnValue £temporary4646

math_test_1$121:	; Parameter 14 £temporary4646 16
x1938:	fstp qword [bp + 30]	; 3: 221 94 30

math_test_1$122:	; Parameter 14 errno 24
x1941:	mov ax, [errno]	; 3: 161 230 10
x1944:	mov [bp + 38], ax	; 3: 137 70 38

math_test_1$123:	; Call 14 printf 0
x1947:	mov word [bp + 14], math_test_1$124	; 5: 199 70 14 174 7
x1952:	mov [bp + 16], bp	; 3: 137 110 16
x1955:	add bp, 14	; 3: 131 197 14
x1958:	mov di, bp	; 2: 137 239
x1960:	add di, 18	; 3: 131 199 18
x1963:	jmp printf	; 3: 233 86 5

math_test_1$124:	; PostCall 14

math_test_1$125:	; Assign errno 0
x1966:	mov word [errno], 0	; 6: 199 6 230 10 0 0

math_test_1$126:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$127:	; Parameter 14 string_2020log102825f29203D2025f2C20errno203D2025i0A# 6
x1972:	mov word [bp + 20], @10452$string_2020log102825f29203D2025f2C20errno203D2025i0A#	; 5: 199 70 20 175 11

math_test_1$128:	; PushFloat x
x1977:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$129:	; Parameter 14 x 8
x1980:	fstp qword [bp + 22]	; 3: 221 94 22

math_test_1$130:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$131:	; PushFloat x
x1983:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$132:	; Parameter 14 x 22
x1986:	fstp qword [bp + 36]	; 3: 221 94 36

math_test_1$133:	; Call 14 log10 16
x1989:	mov word [bp + 30], math_test_1$134	; 5: 199 70 30 211 7
x1994:	mov [bp + 32], bp	; 3: 137 110 32
x1997:	add bp, 30	; 3: 131 197 30
x2000:	jmp log10	; 3: 233 86 31

math_test_1$134:	; PostCall 14

math_test_1$135:	; GetReturnValue £temporary4648

math_test_1$136:	; Parameter 14 £temporary4648 16
x2003:	fstp qword [bp + 30]	; 3: 221 94 30

math_test_1$137:	; Parameter 14 errno 24
x2006:	mov ax, [errno]	; 3: 161 230 10
x2009:	mov [bp + 38], ax	; 3: 137 70 38

math_test_1$138:	; Call 14 printf 0
x2012:	mov word [bp + 14], math_test_1$139	; 5: 199 70 14 239 7
x2017:	mov [bp + 16], bp	; 3: 137 110 16
x2020:	add bp, 14	; 3: 131 197 14
x2023:	mov di, bp	; 2: 137 239
x2025:	add di, 18	; 3: 131 199 18
x2028:	jmp printf	; 3: 233 21 5

math_test_1$139:	; PostCall 14

math_test_1$140:	; Assign errno 0
x2031:	mov word [errno], 0	; 6: 199 6 230 10 0 0

math_test_1$141:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$142:	; Parameter 14 string_2020sinh2825f29203D2025f2C20errno203D2025i0A# 6
x2037:	mov word [bp + 20], @10457$string_2020sinh2825f29203D2025f2C20errno203D2025i0A#	; 5: 199 70 20 205 11

math_test_1$143:	; PushFloat x
x2042:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$144:	; Parameter 14 x 8
x2045:	fstp qword [bp + 22]	; 3: 221 94 22

math_test_1$145:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$146:	; PushFloat x
x2048:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$147:	; Parameter 14 x 22
x2051:	fstp qword [bp + 36]	; 3: 221 94 36

math_test_1$148:	; Call 14 sinh 16
x2054:	mov word [bp + 30], math_test_1$149	; 5: 199 70 30 20 8
x2059:	mov [bp + 32], bp	; 3: 137 110 32
x2062:	add bp, 30	; 3: 131 197 30
x2065:	jmp sinh	; 3: 233 203 41

math_test_1$149:	; PostCall 14

math_test_1$150:	; GetReturnValue £temporary4650

math_test_1$151:	; Parameter 14 £temporary4650 16
x2068:	fstp qword [bp + 30]	; 3: 221 94 30

math_test_1$152:	; Parameter 14 errno 24
x2071:	mov ax, [errno]	; 3: 161 230 10
x2074:	mov [bp + 38], ax	; 3: 137 70 38

math_test_1$153:	; Call 14 printf 0
x2077:	mov word [bp + 14], math_test_1$154	; 5: 199 70 14 48 8
x2082:	mov [bp + 16], bp	; 3: 137 110 16
x2085:	add bp, 14	; 3: 131 197 14
x2088:	mov di, bp	; 2: 137 239
x2090:	add di, 18	; 3: 131 199 18
x2093:	jmp printf	; 3: 233 212 4

math_test_1$154:	; PostCall 14

math_test_1$155:	; Assign errno 0
x2096:	mov word [errno], 0	; 6: 199 6 230 10 0 0

math_test_1$156:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$157:	; Parameter 14 string_2020cosh2825f29203D2025f2C20errno203D2025i0A# 6
x2102:	mov word [bp + 20], @10462$string_2020cosh2825f29203D2025f2C20errno203D2025i0A#	; 5: 199 70 20 234 11

math_test_1$158:	; PushFloat x
x2107:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$159:	; Parameter 14 x 8
x2110:	fstp qword [bp + 22]	; 3: 221 94 22

math_test_1$160:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$161:	; PushFloat x
x2113:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$162:	; Parameter 14 x 22
x2116:	fstp qword [bp + 36]	; 3: 221 94 36

math_test_1$163:	; Call 14 cosh 16
x2119:	mov word [bp + 30], math_test_1$164	; 5: 199 70 30 85 8
x2124:	mov [bp + 32], bp	; 3: 137 110 32
x2127:	add bp, 30	; 3: 131 197 30
x2130:	jmp cosh	; 3: 233 219 41

math_test_1$164:	; PostCall 14

math_test_1$165:	; GetReturnValue £temporary4652

math_test_1$166:	; Parameter 14 £temporary4652 16
x2133:	fstp qword [bp + 30]	; 3: 221 94 30

math_test_1$167:	; Parameter 14 errno 24
x2136:	mov ax, [errno]	; 3: 161 230 10
x2139:	mov [bp + 38], ax	; 3: 137 70 38

math_test_1$168:	; Call 14 printf 0
x2142:	mov word [bp + 14], math_test_1$169	; 5: 199 70 14 113 8
x2147:	mov [bp + 16], bp	; 3: 137 110 16
x2150:	add bp, 14	; 3: 131 197 14
x2153:	mov di, bp	; 2: 137 239
x2155:	add di, 18	; 3: 131 199 18
x2158:	jmp printf	; 3: 233 147 4

math_test_1$169:	; PostCall 14

math_test_1$170:	; Assign errno 0
x2161:	mov word [errno], 0	; 6: 199 6 230 10 0 0

math_test_1$171:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$172:	; Parameter 14 string_2020tanh2825f29203D2025f2C20errno203D2025i0A# 6
x2167:	mov word [bp + 20], @10467$string_2020tanh2825f29203D2025f2C20errno203D2025i0A#	; 5: 199 70 20 7 12

math_test_1$173:	; PushFloat x
x2172:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$174:	; Parameter 14 x 8
x2175:	fstp qword [bp + 22]	; 3: 221 94 22

math_test_1$175:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$176:	; PushFloat x
x2178:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$177:	; Parameter 14 x 22
x2181:	fstp qword [bp + 36]	; 3: 221 94 36

math_test_1$178:	; Call 14 tanh 16
x2184:	mov word [bp + 30], math_test_1$179	; 5: 199 70 30 150 8
x2189:	mov [bp + 32], bp	; 3: 137 110 32
x2192:	add bp, 30	; 3: 131 197 30
x2195:	jmp tanh	; 3: 233 235 41

math_test_1$179:	; PostCall 14

math_test_1$180:	; GetReturnValue £temporary4654

math_test_1$181:	; Parameter 14 £temporary4654 16
x2198:	fstp qword [bp + 30]	; 3: 221 94 30

math_test_1$182:	; Parameter 14 errno 24
x2201:	mov ax, [errno]	; 3: 161 230 10
x2204:	mov [bp + 38], ax	; 3: 137 70 38

math_test_1$183:	; Call 14 printf 0
x2207:	mov word [bp + 14], math_test_1$184	; 5: 199 70 14 178 8
x2212:	mov [bp + 16], bp	; 3: 137 110 16
x2215:	add bp, 14	; 3: 131 197 14
x2218:	mov di, bp	; 2: 137 239
x2220:	add di, 18	; 3: 131 199 18
x2223:	jmp printf	; 3: 233 82 4

math_test_1$184:	; PostCall 14

math_test_1$185:	; Assign errno 0
x2226:	mov word [errno], 0	; 6: 199 6 230 10 0 0

math_test_1$186:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$187:	; Parameter 14 string_2020sqrt2825f29203D2025f2C20errno203D2025i0A# 6
x2232:	mov word [bp + 20], @10472$string_2020sqrt2825f29203D2025f2C20errno203D2025i0A#	; 5: 199 70 20 36 12

math_test_1$188:	; PushFloat x
x2237:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$189:	; Parameter 14 x 8
x2240:	fstp qword [bp + 22]	; 3: 221 94 22

math_test_1$190:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$191:	; PushFloat x
x2243:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$192:	; Parameter 14 x 22
x2246:	fstp qword [bp + 36]	; 3: 221 94 36

math_test_1$193:	; Call 14 sqrt 16
x2249:	mov word [bp + 30], math_test_1$194	; 5: 199 70 30 215 8
x2254:	mov [bp + 32], bp	; 3: 137 110 32
x2257:	add bp, 30	; 3: 131 197 30
x2260:	jmp sqrt	; 3: 233 44 38

math_test_1$194:	; PostCall 14

math_test_1$195:	; GetReturnValue £temporary4656

math_test_1$196:	; Parameter 14 £temporary4656 16
x2263:	fstp qword [bp + 30]	; 3: 221 94 30

math_test_1$197:	; Parameter 14 errno 24
x2266:	mov ax, [errno]	; 3: 161 230 10
x2269:	mov [bp + 38], ax	; 3: 137 70 38

math_test_1$198:	; Call 14 printf 0
x2272:	mov word [bp + 14], math_test_1$199	; 5: 199 70 14 243 8
x2277:	mov [bp + 16], bp	; 3: 137 110 16
x2280:	add bp, 14	; 3: 131 197 14
x2283:	mov di, bp	; 2: 137 239
x2285:	add di, 18	; 3: 131 199 18
x2288:	jmp printf	; 3: 233 17 4

math_test_1$199:	; PostCall 14

math_test_1$200:	; Assign errno 0
x2291:	mov word [errno], 0	; 6: 199 6 230 10 0 0

math_test_1$201:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$202:	; Parameter 14 string_2020floor2825f29203D2025f2C20errno203D2025i0A# 6
x2297:	mov word [bp + 20], @10477$string_2020floor2825f29203D2025f2C20errno203D2025i0A#	; 5: 199 70 20 65 12

math_test_1$203:	; PushFloat x
x2302:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$204:	; Parameter 14 x 8
x2305:	fstp qword [bp + 22]	; 3: 221 94 22

math_test_1$205:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$206:	; PushFloat x
x2308:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$207:	; Parameter 14 x 22
x2311:	fstp qword [bp + 36]	; 3: 221 94 36

math_test_1$208:	; Call 14 floor 16
x2314:	mov word [bp + 30], math_test_1$209	; 5: 199 70 30 24 9
x2319:	mov [bp + 32], bp	; 3: 137 110 32
x2322:	add bp, 30	; 3: 131 197 30
x2325:	jmp floor	; 3: 233 161 33

math_test_1$209:	; PostCall 14

math_test_1$210:	; GetReturnValue £temporary4658

math_test_1$211:	; Parameter 14 £temporary4658 16
x2328:	fstp qword [bp + 30]	; 3: 221 94 30

math_test_1$212:	; Parameter 14 errno 24
x2331:	mov ax, [errno]	; 3: 161 230 10
x2334:	mov [bp + 38], ax	; 3: 137 70 38

math_test_1$213:	; Call 14 printf 0
x2337:	mov word [bp + 14], math_test_1$214	; 5: 199 70 14 52 9
x2342:	mov [bp + 16], bp	; 3: 137 110 16
x2345:	add bp, 14	; 3: 131 197 14
x2348:	mov di, bp	; 2: 137 239
x2350:	add di, 18	; 3: 131 199 18
x2353:	jmp printf	; 3: 233 208 3

math_test_1$214:	; PostCall 14

math_test_1$215:	; Assign errno 0
x2356:	mov word [errno], 0	; 6: 199 6 230 10 0 0

math_test_1$216:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$217:	; Parameter 14 string_2020ceil2825f29203D2025f2C20errno203D2025i0A# 6
x2362:	mov word [bp + 20], @10482$string_2020ceil2825f29203D2025f2C20errno203D2025i0A#	; 5: 199 70 20 95 12

math_test_1$218:	; PushFloat x
x2367:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$219:	; Parameter 14 x 8
x2370:	fstp qword [bp + 22]	; 3: 221 94 22

math_test_1$220:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$221:	; PushFloat x
x2373:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$222:	; Parameter 14 x 22
x2376:	fstp qword [bp + 36]	; 3: 221 94 36

math_test_1$223:	; Call 14 ceil 16
x2379:	mov word [bp + 30], math_test_1$224	; 5: 199 70 30 89 9
x2384:	mov [bp + 32], bp	; 3: 137 110 32
x2387:	add bp, 30	; 3: 131 197 30
x2390:	jmp ceil	; 3: 233 174 33

math_test_1$224:	; PostCall 14

math_test_1$225:	; GetReturnValue £temporary4660

math_test_1$226:	; Parameter 14 £temporary4660 16
x2393:	fstp qword [bp + 30]	; 3: 221 94 30

math_test_1$227:	; Parameter 14 errno 24
x2396:	mov ax, [errno]	; 3: 161 230 10
x2399:	mov [bp + 38], ax	; 3: 137 70 38

math_test_1$228:	; Call 14 printf 0
x2402:	mov word [bp + 14], math_test_1$229	; 5: 199 70 14 117 9
x2407:	mov [bp + 16], bp	; 3: 137 110 16
x2410:	add bp, 14	; 3: 131 197 14
x2413:	mov di, bp	; 2: 137 239
x2415:	add di, 18	; 3: 131 199 18
x2418:	jmp printf	; 3: 233 143 3

math_test_1$229:	; PostCall 14

math_test_1$230:	; Assign errno 0
x2421:	mov word [errno], 0	; 6: 199 6 230 10 0 0

math_test_1$231:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$232:	; Parameter 14 string_2020fabs2825f29203D2025f2C20errno203D2025i0A# 6
x2427:	mov word [bp + 20], @10487$string_2020fabs2825f29203D2025f2C20errno203D2025i0A#	; 5: 199 70 20 124 12

math_test_1$233:	; PushFloat x
x2432:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$234:	; Parameter 14 x 8
x2435:	fstp qword [bp + 22]	; 3: 221 94 22

math_test_1$235:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$236:	; PushFloat x
x2438:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$237:	; Parameter 14 x 22
x2441:	fstp qword [bp + 36]	; 3: 221 94 36

math_test_1$238:	; Call 14 fabs 16
x2444:	mov word [bp + 30], math_test_1$239	; 5: 199 70 30 154 9
x2449:	mov [bp + 32], bp	; 3: 137 110 32
x2452:	add bp, 30	; 3: 131 197 30
x2455:	jmp fabs	; 3: 233 93 27

math_test_1$239:	; PostCall 14

math_test_1$240:	; GetReturnValue £temporary4662

math_test_1$241:	; Parameter 14 £temporary4662 16
x2458:	fstp qword [bp + 30]	; 3: 221 94 30

math_test_1$242:	; Parameter 14 errno 24
x2461:	mov ax, [errno]	; 3: 161 230 10
x2464:	mov [bp + 38], ax	; 3: 137 70 38

math_test_1$243:	; Call 14 printf 0
x2467:	mov word [bp + 14], math_test_1$244	; 5: 199 70 14 182 9
x2472:	mov [bp + 16], bp	; 3: 137 110 16
x2475:	add bp, 14	; 3: 131 197 14
x2478:	mov di, bp	; 2: 137 239
x2480:	add di, 18	; 3: 131 199 18
x2483:	jmp printf	; 3: 233 78 3

math_test_1$244:	; PostCall 14

math_test_1$245:	; Assign errno 0
x2486:	mov word [errno], 0	; 6: 199 6 230 10 0 0

math_test_1$246:	; Assign j 0
x2492:	mov word [bp + 14], 0	; 5: 199 70 14 0 0

math_test_1$247:	; CallHeader 16 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$248:	; PushFloat x
x2497:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$249:	; Parameter 16 x 6
x2500:	fstp qword [bp + 22]	; 3: 221 94 22

math_test_1$250:	; address £temporary4664 j
x2503:	mov si, bp	; 2: 137 238
x2505:	add si, 14	; 3: 131 198 14

math_test_1$251:	; Parameter 16 £temporary4664 14
x2508:	mov [bp + 30], si	; 3: 137 118 30

math_test_1$252:	; Call 16 frexp 0
x2511:	mov word [bp + 16], math_test_1$253	; 5: 199 70 16 221 9
x2516:	mov [bp + 18], bp	; 3: 137 110 18
x2519:	add bp, 16	; 3: 131 197 16
x2522:	jmp frexp	; 3: 233 229 40

math_test_1$253:	; PostCall 16

math_test_1$254:	; GetReturnValue £temporary4665

math_test_1$255:	; PopFloat z
x2525:	fstp qword [bp + 16]	; 3: 221 94 16

math_test_1$256:	; CallHeader 24 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$257:	; Parameter 24 string_frexp202825f2C20p29203D202825f2C2025i292C20errno203D2025i0A# 6
x2528:	mov word [bp + 30], @10498$string_frexp202825f2C20p29203D202825f2C2025i292C20errno203D2025i0A#	; 5: 199 70 30 153 12

math_test_1$258:	; PushFloat x
x2533:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$259:	; Parameter 24 x 8
x2536:	fstp qword [bp + 32]	; 3: 221 94 32

math_test_1$260:	; PushFloat z
x2539:	fld qword [bp + 16]	; 3: 221 70 16

math_test_1$261:	; Parameter 24 z 16
x2542:	fstp qword [bp + 40]	; 3: 221 94 40

math_test_1$262:	; Parameter 24 j 24
x2545:	mov ax, [bp + 14]	; 3: 139 70 14
x2548:	mov [bp + 48], ax	; 3: 137 70 48

math_test_1$263:	; Parameter 24 errno 26
x2551:	mov ax, [errno]	; 3: 161 230 10
x2554:	mov [bp + 50], ax	; 3: 137 70 50

math_test_1$264:	; Call 24 printf 0
x2557:	mov word [bp + 24], math_test_1$265	; 5: 199 70 24 16 10
x2562:	mov [bp + 26], bp	; 3: 137 110 26
x2565:	add bp, 24	; 3: 131 197 24
x2568:	mov di, bp	; 2: 137 239
x2570:	add di, 20	; 3: 131 199 20
x2573:	jmp printf	; 3: 233 244 2

math_test_1$265:	; PostCall 24

math_test_1$266:	; Equal 272 errno 0
x2576:	cmp word [errno], 0	; 5: 131 62 230 10 0
x2581:	je math_test_1$272	; 2: 116 25

math_test_1$267:	; CallHeader 24 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$268:	; Parameter 24 string_Error20message3A# 6
x2583:	mov word [bp + 30], @10503$string_Error20message3A#	; 5: 199 70 30 191 12

math_test_1$269:	; Call 24 perror 0
x2588:	mov word [bp + 24], math_test_1$270	; 5: 199 70 24 42 10
x2593:	mov [bp + 26], bp	; 3: 137 110 26
x2596:	add bp, 24	; 3: 131 197 24
x2599:	jmp perror	; 3: 233 156 41

math_test_1$270:	; PostCall 24

math_test_1$271:	; Assign errno 0
x2602:	mov word [errno], 0	; 6: 199 6 230 10 0 0

math_test_1$272:	; PushZero
x2608:	fldz	; 2: 217 238

math_test_1$273:	; PopFloat w
x2610:	fstp qword [bp + 14]	; 3: 221 94 14

math_test_1$274:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$275:	; PushFloat x
x2613:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$276:	; Parameter 22 x 6
x2616:	fstp qword [bp + 28]	; 3: 221 94 28

math_test_1$277:	; address £temporary4669 w
x2619:	mov si, bp	; 2: 137 238
x2621:	add si, 14	; 3: 131 198 14

math_test_1$278:	; Parameter 22 £temporary4669 14
x2624:	mov [bp + 36], si	; 3: 137 118 36

math_test_1$279:	; Call 22 modf 0
x2627:	mov word [bp + 22], math_test_1$280	; 5: 199 70 22 81 10
x2632:	mov [bp + 24], bp	; 3: 137 110 24
x2635:	add bp, 22	; 3: 131 197 22
x2638:	jmp modf	; 3: 233 15 42

math_test_1$280:	; PostCall 22

math_test_1$281:	; GetReturnValue £temporary4670

math_test_1$282:	; PopFloat z
x2641:	fstp qword [bp + 22]	; 3: 221 94 22

math_test_1$283:	; CallHeader 30 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$284:	; Parameter 30 string_modf202825f2C20p29203D202825f2C2025f292C20errno203D2025i0A# 6
x2644:	mov word [bp + 36], @10513$string_modf202825f2C20p29203D202825f2C2025f292C20errno203D2025i0A#	; 5: 199 70 36 206 12

math_test_1$285:	; PushFloat x
x2649:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$286:	; Parameter 30 x 8
x2652:	fstp qword [bp + 38]	; 3: 221 94 38

math_test_1$287:	; PushFloat z
x2655:	fld qword [bp + 22]	; 3: 221 70 22

math_test_1$288:	; Parameter 30 z 16
x2658:	fstp qword [bp + 46]	; 3: 221 94 46

math_test_1$289:	; PushFloat w
x2661:	fld qword [bp + 14]	; 3: 221 70 14

math_test_1$290:	; Parameter 30 w 24
x2664:	fstp qword [bp + 54]	; 3: 221 94 54

math_test_1$291:	; Parameter 30 errno 32
x2667:	mov ax, [errno]	; 3: 161 230 10
x2670:	mov [bp + 62], ax	; 3: 137 70 62

math_test_1$292:	; Call 30 printf 0
x2673:	mov word [bp + 30], math_test_1$293	; 5: 199 70 30 132 10
x2678:	mov [bp + 32], bp	; 3: 137 110 32
x2681:	add bp, 30	; 3: 131 197 30
x2684:	mov di, bp	; 2: 137 239
x2686:	add di, 26	; 3: 131 199 26
x2689:	jmp printf	; 3: 233 128 2

math_test_1$293:	; PostCall 30

math_test_1$294:	; Equal 300 errno 0
x2692:	cmp word [errno], 0	; 5: 131 62 230 10 0
x2697:	je math_test_1$300	; 2: 116 25

math_test_1$295:	; CallHeader 30 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$296:	; Parameter 30 string_Error20message3A# 6
x2699:	mov word [bp + 36], @10518$string_Error20message3A#	; 5: 199 70 36 243 12

math_test_1$297:	; Call 30 perror 0
x2704:	mov word [bp + 30], math_test_1$298	; 5: 199 70 30 158 10
x2709:	mov [bp + 32], bp	; 3: 137 110 32
x2712:	add bp, 30	; 3: 131 197 30
x2715:	jmp perror	; 3: 233 40 41

math_test_1$298:	; PostCall 30

math_test_1$299:	; Assign errno 0
x2718:	mov word [errno], 0	; 6: 199 6 230 10 0 0

math_test_1$300:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$301:	; Parameter 14 string_0A# 6
x2724:	mov word [bp + 20], @10522$string_0A#	; 5: 199 70 20 2 13

math_test_1$302:	; Call 14 printf 0
x2729:	mov word [bp + 14], math_test_1$303	; 5: 199 70 14 185 10
x2734:	mov [bp + 16], bp	; 3: 137 110 16
x2737:	add bp, 14	; 3: 131 197 14
x2740:	mov di, bp	; 2: 137 239
x2742:	jmp printf	; 3: 233 75 2

math_test_1$303:	; PostCall 14

math_test_1$304:	; Return 0
x2745:	mov ax, [bp]	; 3: 139 70 0
x2748:	mov di, [bp + 4]	; 3: 139 126 4
x2751:	mov bp, [bp + 2]	; 3: 139 110 2
x2754:	jmp ax	; 2: 255 224

math_test_1$305:	; FunctionEnd math_test_1

@10410$string_3C25f3E0A#:
x2756:	db "<%f>", 10, 0	; 6: 60 37 102 62 10 0

@10412$string_2020sin2825f29203D2025f2C20errno203D2025i0A#:
x2762:	db "  sin(%f) = %f, errno = %i", 10, 0	; 28: 32 32 115 105 110 40 37 102 41 32 61 32 37 102 44 32 101 114 114 110 111 32 61 32 37 105 10 0

errno:
x2790:	dw 0	; 2: 0 0

@10417$string_2020cos2825f29203D2025f2C20errno203D2025i0A#:
x2792:	db "  cos(%f) = %f, errno = %i", 10, 0	; 28: 32 32 99 111 115 40 37 102 41 32 61 32 37 102 44 32 101 114 114 110 111 32 61 32 37 105 10 0

@10422$string_2020tan2825f29203D2025f2C20errno203D2025i0A#:
x2820:	db "  tan(%f) = %f, errno = %i", 10, 0	; 28: 32 32 116 97 110 40 37 102 41 32 61 32 37 102 44 32 101 114 114 110 111 32 61 32 37 105 10 0

@10427$string_2020asin2825f29203D2025f2C20errno203D2025i0A#:
x2848:	db "  asin(%f) = %f, errno = %i", 10, 0	; 29: 32 32 97 115 105 110 40 37 102 41 32 61 32 37 102 44 32 101 114 114 110 111 32 61 32 37 105 10 0

@10432$string_2020acos2825f29203D2025f2C20errno203D2025i0A#:
x2877:	db "  acos(%f) = %f, errno = %i", 10, 0	; 29: 32 32 97 99 111 115 40 37 102 41 32 61 32 37 102 44 32 101 114 114 110 111 32 61 32 37 105 10 0

@10437$string_2020atan2825f29203D2025f2C20errno203D2025i0A#:
x2906:	db "  atan(%f) = %f, errno = %i", 10, 0	; 29: 32 32 97 116 97 110 40 37 102 41 32 61 32 37 102 44 32 101 114 114 110 111 32 61 32 37 105 10 0

@10442$string_2020exp2825f29203D2025f2C20errno203D2025i0A#:
x2935:	db "  exp(%f) = %f, errno = %i", 10, 0	; 28: 32 32 101 120 112 40 37 102 41 32 61 32 37 102 44 32 101 114 114 110 111 32 61 32 37 105 10 0

@10447$string_2020log2825f29203D2025f2C20errno203D2025i0A#:
x2963:	db "  log(%f) = %f, errno = %i", 10, 0	; 28: 32 32 108 111 103 40 37 102 41 32 61 32 37 102 44 32 101 114 114 110 111 32 61 32 37 105 10 0

@10452$string_2020log102825f29203D2025f2C20errno203D2025i0A#:
x2991:	db "  log10(%f) = %f, errno = %i", 10, 0	; 30: 32 32 108 111 103 49 48 40 37 102 41 32 61 32 37 102 44 32 101 114 114 110 111 32 61 32 37 105 10 0

@10457$string_2020sinh2825f29203D2025f2C20errno203D2025i0A#:
x3021:	db "  sinh(%f) = %f, errno = %i", 10, 0	; 29: 32 32 115 105 110 104 40 37 102 41 32 61 32 37 102 44 32 101 114 114 110 111 32 61 32 37 105 10 0

@10462$string_2020cosh2825f29203D2025f2C20errno203D2025i0A#:
x3050:	db "  cosh(%f) = %f, errno = %i", 10, 0	; 29: 32 32 99 111 115 104 40 37 102 41 32 61 32 37 102 44 32 101 114 114 110 111 32 61 32 37 105 10 0

@10467$string_2020tanh2825f29203D2025f2C20errno203D2025i0A#:
x3079:	db "  tanh(%f) = %f, errno = %i", 10, 0	; 29: 32 32 116 97 110 104 40 37 102 41 32 61 32 37 102 44 32 101 114 114 110 111 32 61 32 37 105 10 0

@10472$string_2020sqrt2825f29203D2025f2C20errno203D2025i0A#:
x3108:	db "  sqrt(%f) = %f, errno = %i", 10, 0	; 29: 32 32 115 113 114 116 40 37 102 41 32 61 32 37 102 44 32 101 114 114 110 111 32 61 32 37 105 10 0

@10477$string_2020floor2825f29203D2025f2C20errno203D2025i0A#:
x3137:	db "  floor(%f) = %f, errno = %i", 10, 0	; 30: 32 32 102 108 111 111 114 40 37 102 41 32 61 32 37 102 44 32 101 114 114 110 111 32 61 32 37 105 10 0

@10482$string_2020ceil2825f29203D2025f2C20errno203D2025i0A#:
x3167:	db "  ceil(%f) = %f, errno = %i", 10, 0	; 29: 32 32 99 101 105 108 40 37 102 41 32 61 32 37 102 44 32 101 114 114 110 111 32 61 32 37 105 10 0

@10487$string_2020fabs2825f29203D2025f2C20errno203D2025i0A#:
x3196:	db "  fabs(%f) = %f, errno = %i", 10, 0	; 29: 32 32 102 97 98 115 40 37 102 41 32 61 32 37 102 44 32 101 114 114 110 111 32 61 32 37 105 10 0

@10498$string_frexp202825f2C20p29203D202825f2C2025i292C20errno203D2025i0A#:
x3225:	db "frexp (%f, p) = (%f, %i), errno = %i", 10, 0	; 38: 102 114 101 120 112 32 40 37 102 44 32 112 41 32 61 32 40 37 102 44 32 37 105 41 44 32 101 114 114 110 111 32 61 32 37 105 10 0

@10503$string_Error20message3A#:
x3263:	db "Error message:", 0	; 15: 69 114 114 111 114 32 109 101 115 115 97 103 101 58 0

@10513$string_modf202825f2C20p29203D202825f2C2025f292C20errno203D2025i0A#:
x3278:	db "modf (%f, p) = (%f, %f), errno = %i", 10, 0	; 37: 109 111 100 102 32 40 37 102 44 32 112 41 32 61 32 40 37 102 44 32 37 102 41 44 32 101 114 114 110 111 32 61 32 37 105 10 0

@10518$string_Error20message3A#:
x3315:	db "Error message:", 0	; 15: 69 114 114 111 114 32 109 101 115 115 97 103 101 58 0

@10522$string_0A#:
x3330:	db 10, 0	; 2: 10 0

printf:	; address £temporary2202 format
x3332:	mov si, bp	; 2: 137 238
x3334:	add si, 6	; 3: 131 198 6

printf$1:	; IntegralToIntegral £temporary2203 £temporary2202

printf$2:	; BinaryAdd arg_list £temporary2203 2
x3337:	add si, 2	; 3: 131 198 2
x3340:	mov [di + 8], si	; 3: 137 117 8

printf$3:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printf$4:	; Parameter 10 format 6
x3343:	mov ax, [bp + 6]	; 3: 139 70 6
x3346:	mov [di + 16], ax	; 3: 137 69 16

printf$5:	; Parameter 10 arg_list 8
x3349:	mov ax, [di + 8]	; 3: 139 69 8
x3352:	mov [di + 18], ax	; 3: 137 69 18

printf$6:	; Call 10 vprintf 0
x3355:	mov word [di + 10], printf$7	; 5: 199 69 10 46 13
x3360:	mov [di + 12], bp	; 3: 137 109 12
x3363:	mov [di + 14], di	; 3: 137 125 14
x3366:	add di, 10	; 3: 131 199 10
x3369:	mov bp, di	; 2: 137 253
x3371:	nop	; 1: 144
x3372:	jmp vprintf	; 2: 235 11

printf$7:	; PostCall 10

printf$8:	; GetReturnValue £temporary2205

printf$9:	; SetReturnValue £temporary2205

printf$10:	; Return £temporary2205
x3374:	mov ax, [bp]	; 3: 139 70 0
x3377:	mov di, [bp + 4]	; 3: 139 126 4
x3380:	mov bp, [bp + 2]	; 3: 139 110 2
x3383:	jmp ax	; 2: 255 224

printf$11:	; FunctionEnd printf

vprintf:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

vprintf$1:	; Parameter 10 stdout 6
x3385:	mov ax, [stdout]	; 3: 161 100 13
x3388:	mov [bp + 16], ax	; 3: 137 70 16

vprintf$2:	; Parameter 10 format 8
x3391:	mov ax, [bp + 6]	; 3: 139 70 6
x3394:	mov [bp + 18], ax	; 3: 137 70 18

vprintf$3:	; Parameter 10 arg_list 10
x3397:	mov ax, [bp + 8]	; 3: 139 70 8
x3400:	mov [bp + 20], ax	; 3: 137 70 20

vprintf$4:	; Call 10 vfprintf 0
x3403:	mov word [bp + 10], vprintf$5	; 5: 199 70 10 89 13
x3408:	mov [bp + 12], bp	; 3: 137 110 12
x3411:	add bp, 10	; 3: 131 197 10
x3414:	jmp vfprintf	; 3: 233 81 2

vprintf$5:	; PostCall 10

vprintf$6:	; GetReturnValue £temporary2209

vprintf$7:	; SetReturnValue £temporary2209

vprintf$8:	; Return £temporary2209
x3417:	mov ax, [bp]	; 3: 139 70 0
x3420:	mov di, [bp + 4]	; 3: 139 126 4
x3423:	mov bp, [bp + 2]	; 3: 139 110 2
x3426:	jmp ax	; 2: 255 224

vprintf$9:	; FunctionEnd vprintf

stdout:
x3428:	dw g_fileArray + 29	; 2: 131 13

g_fileArray:
x3430:	dw 1	; 2: 1 0
x3432:	dw 0	; 2: 0 0
x3434:	db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0	; 25: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
x3459:	dw 1	; 2: 1 0
x3461:	dw 1	; 2: 1 0
x3463:	db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0	; 25: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
x3488:	dw 1	; 2: 1 0
x3490:	dw 2	; 2: 2 0
x3492:	db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0	; 25: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
x3517:	db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0	; 493: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0

vfprintf:	; Assign g_outStatus 0
x4010:	mov word [g_outStatus], 0	; 6: 199 6 219 15 0 0

vfprintf$1:	; IntegralToIntegral £temporary2221 outStream
x4016:	mov ax, [bp + 6]	; 3: 139 70 6

vfprintf$2:	; Assign g_outDevice £temporary2221
x4019:	mov [g_outDevice], ax	; 3: 163 221 15

vfprintf$3:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

vfprintf$4:	; Parameter 12 format 6
x4022:	mov ax, [bp + 8]	; 3: 139 70 8
x4025:	mov [bp + 18], ax	; 3: 137 70 18

vfprintf$5:	; Parameter 12 arg_list 8
x4028:	mov ax, [bp + 10]	; 3: 139 70 10
x4031:	mov [bp + 20], ax	; 3: 137 70 20

vfprintf$6:	; Call 12 printFormat 0
x4034:	mov word [bp + 12], vfprintf$7	; 5: 199 70 12 208 15
x4039:	mov [bp + 14], bp	; 3: 137 110 14
x4042:	add bp, 12	; 3: 131 197 12
x4045:	nop	; 1: 144
x4046:	jmp printFormat	; 2: 235 15

vfprintf$7:	; PostCall 12

vfprintf$8:	; GetReturnValue £temporary2222

vfprintf$9:	; SetReturnValue £temporary2222

vfprintf$10:	; Return £temporary2222
x4048:	mov ax, [bp]	; 3: 139 70 0
x4051:	mov di, [bp + 4]	; 3: 139 126 4
x4054:	mov bp, [bp + 2]	; 3: 139 110 2
x4057:	jmp ax	; 2: 255 224

vfprintf$11:	; FunctionEnd vfprintf

g_outStatus:
x4059:	db 0, 0	; 2: 0 0

g_outDevice:
x4061:	db 0, 0	; 2: 0 0

printFormat:	; Assign width 0
x4063:	mov word [bp + 12], 0	; 5: 199 70 12 0 0

printFormat$1:	; Assign precision 0
x4068:	mov word [bp + 14], 0	; 5: 199 70 14 0 0

printFormat$2:	; Assign percent 0
x4073:	mov word [bp + 16], 0	; 5: 199 70 16 0 0

printFormat$3:	; Assign plus 0
x4078:	mov word [bp + 18], 0	; 5: 199 70 18 0 0

printFormat$4:	; Assign minus 0
x4083:	mov word [bp + 20], 0	; 5: 199 70 20 0 0

printFormat$5:	; Assign space 0
x4088:	mov word [bp + 22], 0	; 5: 199 70 22 0 0

printFormat$6:	; Assign zero 0
x4093:	mov word [bp + 24], 0	; 5: 199 70 24 0 0

printFormat$7:	; Assign grid 0
x4098:	mov word [bp + 26], 0	; 5: 199 70 26 0 0

printFormat$8:	; Assign widthStar 0
x4103:	mov word [bp + 28], 0	; 5: 199 70 28 0 0

printFormat$9:	; Assign period 0
x4108:	mov word [bp + 30], 0	; 5: 199 70 30 0 0

printFormat$10:	; Assign precisionStar 0
x4113:	mov word [bp + 32], 0	; 5: 199 70 32 0 0

printFormat$11:	; Assign shortInt 0
x4118:	mov word [bp + 34], 0	; 5: 199 70 34 0 0

printFormat$12:	; Assign longInt 0
x4123:	mov word [bp + 36], 0	; 5: 199 70 36 0 0

printFormat$13:	; Assign longDouble 0
x4128:	mov word [bp + 38], 0	; 5: 199 70 38 0 0

printFormat$14:	; Assign g_outChars 0
x4133:	mov word [g_outChars], 0	; 6: 199 6 55 21 0 0

printFormat$15:	; Assign index 0
x4139:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

printFormat$16:	; BinaryAdd £temporary2053 format index
x4144:	mov si, [bp + 6]	; 3: 139 118 6
x4147:	add si, [bp + 10]	; 3: 3 118 10

printFormat$17:	; Deref £temporary2052 -> £temporary2053 £temporary2053 0

printFormat$18:	; Equal 284 £temporary2052 -> £temporary2053 0
x4150:	cmp byte [si], 0	; 3: 128 60 0
x4153:	je printFormat$284	; 4: 15 132 212 4

printFormat$19:	; BinaryAdd £temporary2057 format index
x4157:	mov si, [bp + 6]	; 3: 139 118 6
x4160:	add si, [bp + 10]	; 3: 3 118 10

printFormat$20:	; Deref £temporary2056 -> £temporary2057 £temporary2057 0

printFormat$21:	; Assign c £temporary2056 -> £temporary2057
x4163:	mov al, [si]	; 2: 138 4
x4165:	mov [bp + 40], al	; 3: 136 70 40

printFormat$22:	; Equal 262 percent 0
x4168:	cmp word [bp + 16], 0	; 4: 131 126 16 0
x4172:	je printFormat$262	; 4: 15 132 89 4

printFormat$23:	; Case 52 c 43
x4176:	mov al, [bp + 40]	; 3: 138 70 40
x4179:	cmp al, 43	; 2: 60 43
x4181:	je printFormat$52	; 4: 15 132 143 0

printFormat$24:	; Case 54 c 45
x4185:	cmp al, 45	; 2: 60 45
x4187:	je printFormat$54	; 4: 15 132 145 0

printFormat$25:	; Case 56 c 32
x4191:	cmp al, 32	; 2: 60 32
x4193:	je printFormat$56	; 4: 15 132 147 0

printFormat$26:	; Case 58 c 48
x4197:	cmp al, 48	; 2: 60 48
x4199:	je printFormat$58	; 4: 15 132 149 0

printFormat$27:	; Case 60 c 35
x4203:	cmp al, 35	; 2: 60 35
x4205:	je printFormat$60	; 4: 15 132 151 0

printFormat$28:	; Case 62 c 46
x4209:	cmp al, 46	; 2: 60 46
x4211:	je printFormat$62	; 4: 15 132 153 0

printFormat$29:	; Case 64 c 42
x4215:	cmp al, 42	; 2: 60 42
x4217:	je printFormat$64	; 4: 15 132 155 0

printFormat$30:	; Case 69 c 104
x4221:	cmp al, 104	; 2: 60 104
x4223:	je printFormat$69	; 4: 15 132 171 0

printFormat$31:	; Case 71 c 108
x4227:	cmp al, 108	; 2: 60 108
x4229:	je printFormat$71	; 4: 15 132 173 0

printFormat$32:	; Case 73 c 76
x4233:	cmp al, 76	; 2: 60 76
x4235:	je printFormat$73	; 4: 15 132 175 0

printFormat$33:	; Case 75 c 37
x4239:	cmp al, 37	; 2: 60 37
x4241:	je printFormat$75	; 4: 15 132 177 0

printFormat$34:	; Case 75 c 110
x4245:	cmp al, 110	; 2: 60 110
x4247:	je printFormat$75	; 4: 15 132 171 0

printFormat$35:	; Case 75 c 112
x4251:	cmp al, 112	; 2: 60 112
x4253:	je printFormat$75	; 4: 15 132 165 0

printFormat$36:	; Case 75 c 71
x4257:	cmp al, 71	; 2: 60 71
x4259:	je printFormat$75	; 4: 15 132 159 0

printFormat$37:	; Case 75 c 103
x4263:	cmp al, 103	; 2: 60 103
x4265:	je printFormat$75	; 4: 15 132 153 0

printFormat$38:	; Case 75 c 69
x4269:	cmp al, 69	; 2: 60 69
x4271:	je printFormat$75	; 4: 15 132 147 0

printFormat$39:	; Case 75 c 101
x4275:	cmp al, 101	; 2: 60 101
x4277:	je printFormat$75	; 4: 15 132 141 0

printFormat$40:	; Case 75 c 102
x4281:	cmp al, 102	; 2: 60 102
x4283:	je printFormat$75	; 4: 15 132 135 0

printFormat$41:	; Case 75 c 115
x4287:	cmp al, 115	; 2: 60 115
x4289:	je printFormat$75	; 4: 15 132 129 0

printFormat$42:	; Case 75 c 99
x4293:	cmp al, 99	; 2: 60 99
x4295:	je printFormat$75	; 2: 116 125

printFormat$43:	; Case 75 c 88
x4297:	cmp al, 88	; 2: 60 88
x4299:	je printFormat$75	; 2: 116 121

printFormat$44:	; Case 75 c 120
x4301:	cmp al, 120	; 2: 60 120
x4303:	je printFormat$75	; 2: 116 117

printFormat$45:	; Case 75 c 111
x4305:	cmp al, 111	; 2: 60 111
x4307:	je printFormat$75	; 2: 116 113

printFormat$46:	; Case 75 c 98
x4309:	cmp al, 98	; 2: 60 98
x4311:	je printFormat$75	; 2: 116 109

printFormat$47:	; Case 75 c 117
x4313:	cmp al, 117	; 2: 60 117
x4315:	je printFormat$75	; 2: 116 105

printFormat$48:	; Case 75 c 100
x4317:	cmp al, 100	; 2: 60 100
x4319:	je printFormat$75	; 2: 116 101

printFormat$49:	; Case 75 c 105
x4321:	cmp al, 105	; 2: 60 105
x4323:	je printFormat$75	; 2: 116 97

printFormat$50:	; CaseEnd c

printFormat$51:	; Goto 239
x4325:	jmp printFormat$239	; 3: 233 78 3

printFormat$52:	; Assign plus 1
x4328:	mov word [bp + 18], 1	; 5: 199 70 18 1 0

printFormat$53:	; Goto 282
x4333:	jmp printFormat$282	; 3: 233 27 4

printFormat$54:	; Assign minus 1
x4336:	mov word [bp + 20], 1	; 5: 199 70 20 1 0

printFormat$55:	; Goto 282
x4341:	jmp printFormat$282	; 3: 233 19 4

printFormat$56:	; Assign space 1
x4344:	mov word [bp + 22], 1	; 5: 199 70 22 1 0

printFormat$57:	; Goto 282
x4349:	jmp printFormat$282	; 3: 233 11 4

printFormat$58:	; Assign zero 1
x4352:	mov word [bp + 24], 1	; 5: 199 70 24 1 0

printFormat$59:	; Goto 282
x4357:	jmp printFormat$282	; 3: 233 3 4

printFormat$60:	; Assign grid 1
x4360:	mov word [bp + 26], 1	; 5: 199 70 26 1 0

printFormat$61:	; Goto 282
x4365:	jmp printFormat$282	; 3: 233 251 3

printFormat$62:	; Assign period 1
x4368:	mov word [bp + 30], 1	; 5: 199 70 30 1 0

printFormat$63:	; Goto 282
x4373:	jmp printFormat$282	; 3: 233 243 3

printFormat$64:	; NotEqual 67 period 0
x4376:	cmp word [bp + 30], 0	; 4: 131 126 30 0
x4380:	jne printFormat$67	; 2: 117 8

printFormat$65:	; Assign width -1
x4382:	mov word [bp + 12], -1	; 5: 199 70 12 255 255

printFormat$66:	; Goto 282
x4387:	jmp printFormat$282	; 3: 233 229 3

printFormat$67:	; Assign precision -1
x4390:	mov word [bp + 14], -1	; 5: 199 70 14 255 255

printFormat$68:	; Goto 282
x4395:	jmp printFormat$282	; 3: 233 221 3

printFormat$69:	; Assign shortInt 1
x4398:	mov word [bp + 34], 1	; 5: 199 70 34 1 0

printFormat$70:	; Goto 282
x4403:	jmp printFormat$282	; 3: 233 213 3

printFormat$71:	; Assign longInt 1
x4406:	mov word [bp + 36], 1	; 5: 199 70 36 1 0

printFormat$72:	; Goto 282
x4411:	jmp printFormat$282	; 3: 233 205 3

printFormat$73:	; Assign longDouble 1
x4414:	mov word [bp + 38], 1	; 5: 199 70 38 1 0

printFormat$74:	; Goto 282
x4419:	jmp printFormat$282	; 3: 233 197 3

printFormat$75:	; Equal 107 minus 0
x4422:	cmp word [bp + 20], 0	; 4: 131 126 20 0
x4426:	je printFormat$107	; 4: 15 132 140 0

printFormat$76:	; Assign startChars g_outChars
x4430:	mov ax, [g_outChars]	; 3: 161 55 21
x4433:	mov [bp + 41], ax	; 3: 137 70 41

printFormat$77:	; CallHeader 43 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printFormat$78:	; BinaryAdd £temporary2061 format index
x4436:	mov si, [bp + 6]	; 3: 139 118 6
x4439:	add si, [bp + 10]	; 3: 3 118 10

printFormat$79:	; Deref £temporary2060 -> £temporary2061 £temporary2061 0

printFormat$80:	; address £temporary2062 £temporary2060 -> £temporary2061

printFormat$81:	; Parameter 43 £temporary2062 6
x4442:	mov [bp + 49], si	; 3: 137 118 49

printFormat$82:	; Parameter 43 arg_list 8
x4445:	mov ax, [bp + 8]	; 3: 139 70 8
x4448:	mov [bp + 51], ax	; 3: 137 70 51

printFormat$83:	; Parameter 43 plus 10
x4451:	mov ax, [bp + 18]	; 3: 139 70 18
x4454:	mov [bp + 53], ax	; 3: 137 70 53

printFormat$84:	; Parameter 43 space 12
x4457:	mov ax, [bp + 22]	; 3: 139 70 22
x4460:	mov [bp + 55], ax	; 3: 137 70 55

printFormat$85:	; Parameter 43 grid 14
x4463:	mov ax, [bp + 26]	; 3: 139 70 26
x4466:	mov [bp + 57], ax	; 3: 137 70 57

printFormat$86:	; address £temporary2063 width
x4469:	mov si, bp	; 2: 137 238
x4471:	add si, 12	; 3: 131 198 12

printFormat$87:	; Parameter 43 £temporary2063 16
x4474:	mov [bp + 59], si	; 3: 137 118 59

printFormat$88:	; Parameter 43 precision 18
x4477:	mov ax, [bp + 14]	; 3: 139 70 14
x4480:	mov [bp + 61], ax	; 3: 137 70 61

printFormat$89:	; Parameter 43 shortInt 20
x4483:	mov ax, [bp + 34]	; 3: 139 70 34
x4486:	mov [bp + 63], ax	; 3: 137 70 63

printFormat$90:	; Parameter 43 longInt 22
x4489:	mov ax, [bp + 36]	; 3: 139 70 36
x4492:	mov [bp + 65], ax	; 3: 137 70 65

printFormat$91:	; Parameter 43 longDouble 24
x4495:	mov ax, [bp + 38]	; 3: 139 70 38
x4498:	mov [bp + 67], ax	; 3: 137 70 67

printFormat$92:	; Parameter 43 1 26
x4501:	mov word [bp + 69], 1	; 5: 199 70 69 1 0

printFormat$93:	; Parameter 43 0 28
x4506:	mov word [bp + 71], 0	; 5: 199 70 71 0 0

printFormat$94:	; Call 43 printArgument 0
x4511:	mov word [bp + 43], printFormat$95	; 5: 199 70 43 173 17
x4516:	mov [bp + 45], bp	; 3: 137 110 45
x4519:	add bp, 43	; 3: 131 197 43
x4522:	jmp printArgument	; 3: 233 142 3

printFormat$95:	; PostCall 43

printFormat$96:	; GetReturnValue £temporary2064

printFormat$97:	; Assign arg_list £temporary2064
x4525:	mov [bp + 8], bx	; 3: 137 94 8

printFormat$98:	; BinarySubtract field g_outChars startChars
x4528:	mov ax, [g_outChars]	; 3: 161 55 21
x4531:	sub ax, [bp + 41]	; 3: 43 70 41
x4534:	mov [bp + 43], ax	; 3: 137 70 43

printFormat$99:	; Assign £temporary2066 field
x4537:	mov ax, [bp + 43]	; 3: 139 70 43

printFormat$100:	; Increment field
x4540:	inc word [bp + 43]	; 3: 255 70 43

printFormat$101:	; SignedGreaterThanEqual 237 £temporary2066 width
x4543:	cmp ax, [bp + 12]	; 3: 59 70 12
x4546:	jge printFormat$237	; 4: 15 141 104 2

printFormat$102:	; CallHeader 45 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printFormat$103:	; Parameter 45 32 6
x4550:	mov byte [bp + 51], 32	; 4: 198 70 51 32

printFormat$104:	; Call 45 printChar 0
x4554:	mov word [bp + 45], printFormat$105	; 5: 199 70 45 216 17
x4559:	mov [bp + 47], bp	; 3: 137 110 47
x4562:	add bp, 45	; 3: 131 197 45
x4565:	jmp printChar	; 3: 233 118 10

printFormat$105:	; PostCall 45

printFormat$106:	; Goto 99
x4568:	jmp printFormat$99	; 2: 235 223

printFormat$107:	; Equal 184 zero 0
x4570:	cmp word [bp + 24], 0	; 4: 131 126 24 0
x4574:	je printFormat$184	; 4: 15 132 84 1

printFormat$108:	; Assign startChars g_outChars
x4578:	mov ax, [g_outChars]	; 3: 161 55 21
x4581:	mov [bp + 41], ax	; 3: 137 70 41

printFormat$109:	; Assign oldOutStatus g_outStatus
x4584:	mov ax, [g_outStatus]	; 3: 161 219 15
x4587:	mov [bp + 43], ax	; 3: 137 70 43

printFormat$110:	; Assign negative 0
x4590:	mov word [bp + 45], 0	; 5: 199 70 45 0 0

printFormat$111:	; Assign g_outStatus 2
x4595:	mov word [g_outStatus], 2	; 6: 199 6 219 15 2 0

printFormat$112:	; CallHeader 47 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printFormat$113:	; BinaryAdd £temporary2071 format index
x4601:	mov si, [bp + 6]	; 3: 139 118 6
x4604:	add si, [bp + 10]	; 3: 3 118 10

printFormat$114:	; Deref £temporary2070 -> £temporary2071 £temporary2071 0

printFormat$115:	; address £temporary2072 £temporary2070 -> £temporary2071

printFormat$116:	; Parameter 47 £temporary2072 6
x4607:	mov [bp + 53], si	; 3: 137 118 53

printFormat$117:	; Parameter 47 arg_list 8
x4610:	mov ax, [bp + 8]	; 3: 139 70 8
x4613:	mov [bp + 55], ax	; 3: 137 70 55

printFormat$118:	; Parameter 47 0 10
x4616:	mov word [bp + 57], 0	; 5: 199 70 57 0 0

printFormat$119:	; Parameter 47 0 12
x4621:	mov word [bp + 59], 0	; 5: 199 70 59 0 0

printFormat$120:	; Parameter 47 grid 14
x4626:	mov ax, [bp + 26]	; 3: 139 70 26
x4629:	mov [bp + 61], ax	; 3: 137 70 61

printFormat$121:	; address £temporary2073 width
x4632:	mov si, bp	; 2: 137 238
x4634:	add si, 12	; 3: 131 198 12

printFormat$122:	; Parameter 47 £temporary2073 16
x4637:	mov [bp + 63], si	; 3: 137 118 63

printFormat$123:	; Parameter 47 precision 18
x4640:	mov ax, [bp + 14]	; 3: 139 70 14
x4643:	mov [bp + 65], ax	; 3: 137 70 65

printFormat$124:	; Parameter 47 shortInt 20
x4646:	mov ax, [bp + 34]	; 3: 139 70 34
x4649:	mov [bp + 67], ax	; 3: 137 70 67

printFormat$125:	; Parameter 47 longInt 22
x4652:	mov ax, [bp + 36]	; 3: 139 70 36
x4655:	mov [bp + 69], ax	; 3: 137 70 69

printFormat$126:	; Parameter 47 longDouble 24
x4658:	mov ax, [bp + 38]	; 3: 139 70 38
x4661:	mov [bp + 71], ax	; 3: 137 70 71

printFormat$127:	; Parameter 47 0 26
x4664:	mov word [bp + 73], 0	; 5: 199 70 73 0 0

printFormat$128:	; address £temporary2074 negative
x4669:	mov si, bp	; 2: 137 238
x4671:	add si, 45	; 3: 131 198 45

printFormat$129:	; Parameter 47 £temporary2074 28
x4674:	mov [bp + 75], si	; 3: 137 118 75

printFormat$130:	; Call 47 printArgument 0
x4677:	mov word [bp + 47], printFormat$131	; 5: 199 70 47 83 18
x4682:	mov [bp + 49], bp	; 3: 137 110 49
x4685:	add bp, 47	; 3: 131 197 47
x4688:	jmp printArgument	; 3: 233 232 2

printFormat$131:	; PostCall 47

printFormat$132:	; Assign g_outStatus oldOutStatus
x4691:	mov ax, [bp + 43]	; 3: 139 70 43
x4694:	mov [g_outStatus], ax	; 3: 163 219 15

printFormat$133:	; BinarySubtract field g_outChars startChars
x4697:	mov ax, [g_outChars]	; 3: 161 55 21
x4700:	sub ax, [bp + 41]	; 3: 43 70 41
x4703:	mov [bp + 47], ax	; 3: 137 70 47

printFormat$134:	; Assign g_outChars startChars
x4706:	mov ax, [bp + 41]	; 3: 139 70 41
x4709:	mov [g_outChars], ax	; 3: 163 55 21

printFormat$135:	; Equal 142 negative 0
x4712:	cmp word [bp + 45], 0	; 4: 131 126 45 0
x4716:	je printFormat$142	; 2: 116 23

printFormat$136:	; CallHeader 49 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printFormat$137:	; Parameter 49 45 6
x4718:	mov byte [bp + 55], 45	; 4: 198 70 55 45

printFormat$138:	; Call 49 printChar 0
x4722:	mov word [bp + 49], printFormat$139	; 5: 199 70 49 128 18
x4727:	mov [bp + 51], bp	; 3: 137 110 51
x4730:	add bp, 49	; 3: 131 197 49
x4733:	jmp printChar	; 3: 233 206 9

printFormat$139:	; PostCall 49

printFormat$140:	; Increment field
x4736:	inc word [bp + 47]	; 3: 255 70 47

printFormat$141:	; Goto 155
x4739:	jmp printFormat$155	; 2: 235 56

printFormat$142:	; Equal 149 plus 0
x4741:	cmp word [bp + 18], 0	; 4: 131 126 18 0
x4745:	je printFormat$149	; 2: 116 23

printFormat$143:	; CallHeader 49 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printFormat$144:	; Parameter 49 43 6
x4747:	mov byte [bp + 55], 43	; 4: 198 70 55 43

printFormat$145:	; Call 49 printChar 0
x4751:	mov word [bp + 49], printFormat$146	; 5: 199 70 49 157 18
x4756:	mov [bp + 51], bp	; 3: 137 110 51
x4759:	add bp, 49	; 3: 131 197 49
x4762:	jmp printChar	; 3: 233 177 9

printFormat$146:	; PostCall 49

printFormat$147:	; Increment field
x4765:	inc word [bp + 47]	; 3: 255 70 47

printFormat$148:	; Goto 155
x4768:	jmp printFormat$155	; 2: 235 27

printFormat$149:	; Equal 155 space 0
x4770:	cmp word [bp + 22], 0	; 4: 131 126 22 0
x4774:	je printFormat$155	; 2: 116 21

printFormat$150:	; CallHeader 49 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printFormat$151:	; Parameter 49 32 6
x4776:	mov byte [bp + 55], 32	; 4: 198 70 55 32

printFormat$152:	; Call 49 printChar 0
x4780:	mov word [bp + 49], printFormat$153	; 5: 199 70 49 186 18
x4785:	mov [bp + 51], bp	; 3: 137 110 51
x4788:	add bp, 49	; 3: 131 197 49
x4791:	jmp printChar	; 3: 233 148 9

printFormat$153:	; PostCall 49

printFormat$154:	; Increment field
x4794:	inc word [bp + 47]	; 3: 255 70 47

printFormat$155:	; Assign £temporary2086 field
x4797:	mov ax, [bp + 47]	; 3: 139 70 47

printFormat$156:	; Increment field
x4800:	inc word [bp + 47]	; 3: 255 70 47

printFormat$157:	; SignedGreaterThanEqual 163 £temporary2086 width
x4803:	cmp ax, [bp + 12]	; 3: 59 70 12
x4806:	jge printFormat$163	; 2: 125 20

printFormat$158:	; CallHeader 49 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printFormat$159:	; Parameter 49 48 6
x4808:	mov byte [bp + 55], 48	; 4: 198 70 55 48

printFormat$160:	; Call 49 printChar 0
x4812:	mov word [bp + 49], printFormat$161	; 5: 199 70 49 218 18
x4817:	mov [bp + 51], bp	; 3: 137 110 51
x4820:	add bp, 49	; 3: 131 197 49
x4823:	jmp printChar	; 3: 233 116 9

printFormat$161:	; PostCall 49

printFormat$162:	; Goto 155
x4826:	jmp printFormat$155	; 2: 235 225

printFormat$163:	; CallHeader 49 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printFormat$164:	; BinaryAdd £temporary2091 format index
x4828:	mov si, [bp + 6]	; 3: 139 118 6
x4831:	add si, [bp + 10]	; 3: 3 118 10

printFormat$165:	; Deref £temporary2090 -> £temporary2091 £temporary2091 0

printFormat$166:	; address £temporary2092 £temporary2090 -> £temporary2091

printFormat$167:	; Parameter 49 £temporary2092 6
x4834:	mov [bp + 55], si	; 3: 137 118 55

printFormat$168:	; Parameter 49 arg_list 8
x4837:	mov ax, [bp + 8]	; 3: 139 70 8
x4840:	mov [bp + 57], ax	; 3: 137 70 57

printFormat$169:	; Parameter 49 0 10
x4843:	mov word [bp + 59], 0	; 5: 199 70 59 0 0

printFormat$170:	; Parameter 49 0 12
x4848:	mov word [bp + 61], 0	; 5: 199 70 61 0 0

printFormat$171:	; Parameter 49 grid 14
x4853:	mov ax, [bp + 26]	; 3: 139 70 26
x4856:	mov [bp + 63], ax	; 3: 137 70 63

printFormat$172:	; Parameter 49 0 16
x4859:	mov word [bp + 65], 0	; 5: 199 70 65 0 0

printFormat$173:	; Parameter 49 precision 18
x4864:	mov ax, [bp + 14]	; 3: 139 70 14
x4867:	mov [bp + 67], ax	; 3: 137 70 67

printFormat$174:	; Parameter 49 shortInt 20
x4870:	mov ax, [bp + 34]	; 3: 139 70 34
x4873:	mov [bp + 69], ax	; 3: 137 70 69

printFormat$175:	; Parameter 49 longInt 22
x4876:	mov ax, [bp + 36]	; 3: 139 70 36
x4879:	mov [bp + 71], ax	; 3: 137 70 71

printFormat$176:	; Parameter 49 longDouble 24
x4882:	mov ax, [bp + 38]	; 3: 139 70 38
x4885:	mov [bp + 73], ax	; 3: 137 70 73

printFormat$177:	; Parameter 49 0 26
x4888:	mov word [bp + 75], 0	; 5: 199 70 75 0 0

printFormat$178:	; Parameter 49 0 28
x4893:	mov word [bp + 77], 0	; 5: 199 70 77 0 0

printFormat$179:	; Call 49 printArgument 0
x4898:	mov word [bp + 49], printFormat$180	; 5: 199 70 49 48 19
x4903:	mov [bp + 51], bp	; 3: 137 110 51
x4906:	add bp, 49	; 3: 131 197 49
x4909:	jmp printArgument	; 3: 233 11 2

printFormat$180:	; PostCall 49

printFormat$181:	; GetReturnValue £temporary2093

printFormat$182:	; Assign arg_list £temporary2093
x4912:	mov [bp + 8], bx	; 3: 137 94 8

printFormat$183:	; Goto 237
x4915:	jmp printFormat$237	; 3: 233 248 0

printFormat$184:	; Assign startChars g_outChars
x4918:	mov ax, [g_outChars]	; 3: 161 55 21
x4921:	mov [bp + 41], ax	; 3: 137 70 41

printFormat$185:	; Assign oldOutStatus g_outStatus
x4924:	mov ax, [g_outStatus]	; 3: 161 219 15
x4927:	mov [bp + 43], ax	; 3: 137 70 43

printFormat$186:	; Assign g_outStatus 2
x4930:	mov word [g_outStatus], 2	; 6: 199 6 219 15 2 0

printFormat$187:	; CallHeader 45 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printFormat$188:	; BinaryAdd £temporary2095 format index
x4936:	mov si, [bp + 6]	; 3: 139 118 6
x4939:	add si, [bp + 10]	; 3: 3 118 10

printFormat$189:	; Deref £temporary2094 -> £temporary2095 £temporary2095 0

printFormat$190:	; address £temporary2096 £temporary2094 -> £temporary2095

printFormat$191:	; Parameter 45 £temporary2096 6
x4942:	mov [bp + 51], si	; 3: 137 118 51

printFormat$192:	; Parameter 45 arg_list 8
x4945:	mov ax, [bp + 8]	; 3: 139 70 8
x4948:	mov [bp + 53], ax	; 3: 137 70 53

printFormat$193:	; Parameter 45 plus 10
x4951:	mov ax, [bp + 18]	; 3: 139 70 18
x4954:	mov [bp + 55], ax	; 3: 137 70 55

printFormat$194:	; Parameter 45 space 12
x4957:	mov ax, [bp + 22]	; 3: 139 70 22
x4960:	mov [bp + 57], ax	; 3: 137 70 57

printFormat$195:	; Parameter 45 grid 14
x4963:	mov ax, [bp + 26]	; 3: 139 70 26
x4966:	mov [bp + 59], ax	; 3: 137 70 59

printFormat$196:	; address £temporary2097 width
x4969:	mov si, bp	; 2: 137 238
x4971:	add si, 12	; 3: 131 198 12

printFormat$197:	; Parameter 45 £temporary2097 16
x4974:	mov [bp + 61], si	; 3: 137 118 61

printFormat$198:	; Parameter 45 precision 18
x4977:	mov ax, [bp + 14]	; 3: 139 70 14
x4980:	mov [bp + 63], ax	; 3: 137 70 63

printFormat$199:	; Parameter 45 shortInt 20
x4983:	mov ax, [bp + 34]	; 3: 139 70 34
x4986:	mov [bp + 65], ax	; 3: 137 70 65

printFormat$200:	; Parameter 45 longInt 22
x4989:	mov ax, [bp + 36]	; 3: 139 70 36
x4992:	mov [bp + 67], ax	; 3: 137 70 67

printFormat$201:	; Parameter 45 longDouble 24
x4995:	mov ax, [bp + 38]	; 3: 139 70 38
x4998:	mov [bp + 69], ax	; 3: 137 70 69

printFormat$202:	; Parameter 45 1 26
x5001:	mov word [bp + 71], 1	; 5: 199 70 71 1 0

printFormat$203:	; Parameter 45 0 28
x5006:	mov word [bp + 73], 0	; 5: 199 70 73 0 0

printFormat$204:	; Call 45 printArgument 0
x5011:	mov word [bp + 45], printFormat$205	; 5: 199 70 45 161 19
x5016:	mov [bp + 47], bp	; 3: 137 110 47
x5019:	add bp, 45	; 3: 131 197 45
x5022:	jmp printArgument	; 3: 233 154 1

printFormat$205:	; PostCall 45

printFormat$206:	; Assign g_outStatus oldOutStatus
x5025:	mov ax, [bp + 43]	; 3: 139 70 43
x5028:	mov [g_outStatus], ax	; 3: 163 219 15

printFormat$207:	; BinarySubtract field g_outChars startChars
x5031:	mov ax, [g_outChars]	; 3: 161 55 21
x5034:	sub ax, [bp + 41]	; 3: 43 70 41
x5037:	mov [bp + 45], ax	; 3: 137 70 45

printFormat$208:	; Assign g_outChars startChars
x5040:	mov ax, [bp + 41]	; 3: 139 70 41
x5043:	mov [g_outChars], ax	; 3: 163 55 21

printFormat$209:	; Assign £temporary2100 field
x5046:	mov ax, [bp + 45]	; 3: 139 70 45

printFormat$210:	; Increment field
x5049:	inc word [bp + 45]	; 3: 255 70 45

printFormat$211:	; SignedGreaterThanEqual 217 £temporary2100 width
x5052:	cmp ax, [bp + 12]	; 3: 59 70 12
x5055:	jge printFormat$217	; 2: 125 20

printFormat$212:	; CallHeader 47 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printFormat$213:	; Parameter 47 32 6
x5057:	mov byte [bp + 53], 32	; 4: 198 70 53 32

printFormat$214:	; Call 47 printChar 0
x5061:	mov word [bp + 47], printFormat$215	; 5: 199 70 47 211 19
x5066:	mov [bp + 49], bp	; 3: 137 110 49
x5069:	add bp, 47	; 3: 131 197 47
x5072:	jmp printChar	; 3: 233 123 8

printFormat$215:	; PostCall 47

printFormat$216:	; Goto 209
x5075:	jmp printFormat$209	; 2: 235 225

printFormat$217:	; CallHeader 47 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printFormat$218:	; BinaryAdd £temporary2105 format index
x5077:	mov si, [bp + 6]	; 3: 139 118 6
x5080:	add si, [bp + 10]	; 3: 3 118 10

printFormat$219:	; Deref £temporary2104 -> £temporary2105 £temporary2105 0

printFormat$220:	; address £temporary2106 £temporary2104 -> £temporary2105

printFormat$221:	; Parameter 47 £temporary2106 6
x5083:	mov [bp + 53], si	; 3: 137 118 53

printFormat$222:	; Parameter 47 arg_list 8
x5086:	mov ax, [bp + 8]	; 3: 139 70 8
x5089:	mov [bp + 55], ax	; 3: 137 70 55

printFormat$223:	; Parameter 47 plus 10
x5092:	mov ax, [bp + 18]	; 3: 139 70 18
x5095:	mov [bp + 57], ax	; 3: 137 70 57

printFormat$224:	; Parameter 47 space 12
x5098:	mov ax, [bp + 22]	; 3: 139 70 22
x5101:	mov [bp + 59], ax	; 3: 137 70 59

printFormat$225:	; Parameter 47 grid 14
x5104:	mov ax, [bp + 26]	; 3: 139 70 26
x5107:	mov [bp + 61], ax	; 3: 137 70 61

printFormat$226:	; Parameter 47 0 16
x5110:	mov word [bp + 63], 0	; 5: 199 70 63 0 0

printFormat$227:	; Parameter 47 precision 18
x5115:	mov ax, [bp + 14]	; 3: 139 70 14
x5118:	mov [bp + 65], ax	; 3: 137 70 65

printFormat$228:	; Parameter 47 shortInt 20
x5121:	mov ax, [bp + 34]	; 3: 139 70 34
x5124:	mov [bp + 67], ax	; 3: 137 70 67

printFormat$229:	; Parameter 47 longInt 22
x5127:	mov ax, [bp + 36]	; 3: 139 70 36
x5130:	mov [bp + 69], ax	; 3: 137 70 69

printFormat$230:	; Parameter 47 longDouble 24
x5133:	mov ax, [bp + 38]	; 3: 139 70 38
x5136:	mov [bp + 71], ax	; 3: 137 70 71

printFormat$231:	; Parameter 47 1 26
x5139:	mov word [bp + 73], 1	; 5: 199 70 73 1 0

printFormat$232:	; Parameter 47 0 28
x5144:	mov word [bp + 75], 0	; 5: 199 70 75 0 0

printFormat$233:	; Call 47 printArgument 0
x5149:	mov word [bp + 47], printFormat$234	; 5: 199 70 47 43 20
x5154:	mov [bp + 49], bp	; 3: 137 110 49
x5157:	add bp, 47	; 3: 131 197 47
x5160:	jmp printArgument	; 3: 233 16 1

printFormat$234:	; PostCall 47

printFormat$235:	; GetReturnValue £temporary2107

printFormat$236:	; Assign arg_list £temporary2107
x5163:	mov [bp + 8], bx	; 3: 137 94 8

printFormat$237:	; Assign percent 0
x5166:	mov word [bp + 16], 0	; 5: 199 70 16 0 0

printFormat$238:	; Goto 282
x5171:	jmp printFormat$282	; 3: 233 213 0

printFormat$239:	; Assign value 0
x5174:	mov word [bp + 41], 0	; 5: 199 70 41 0 0

printFormat$240:	; CallHeader 43 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printFormat$241:	; IntegralToIntegral £temporary2110 c
x5179:	mov al, [bp + 40]	; 3: 138 70 40
x5182:	and ax, 255	; 3: 37 255 0
x5185:	cmp al, 0	; 2: 60 0
x5187:	jge printFormat$242	; 2: 125 4
x5189:	neg al	; 2: 246 216
x5191:	neg ax	; 2: 247 216

printFormat$242:	; Parameter 43 £temporary2110 6
x5193:	mov [bp + 49], ax	; 3: 137 70 49

printFormat$243:	; Call 43 isdigit 0
x5196:	mov word [bp + 43], printFormat$244	; 5: 199 70 43 90 20
x5201:	mov [bp + 45], bp	; 3: 137 110 45
x5204:	add bp, 43	; 3: 131 197 43
x5207:	jmp isdigit	; 3: 233 9 23

printFormat$244:	; PostCall 43

printFormat$245:	; GetReturnValue £temporary2111

printFormat$246:	; Equal 256 £temporary2111 0
x5210:	cmp bx, 0	; 3: 131 251 0
x5213:	je printFormat$256	; 2: 116 49

printFormat$247:	; SignedMultiply £temporary2112 value 10
x5215:	mov ax, [bp + 41]	; 3: 139 70 41
x5218:	xor dx, dx	; 2: 49 210
x5220:	imul word [@4839$int2$10#]	; 4: 247 46 57 21

printFormat$248:	; BinarySubtract £temporary2113 c 48
x5224:	mov bl, [bp + 40]	; 3: 138 94 40
x5227:	sub bl, 48	; 3: 128 235 48

printFormat$249:	; IntegralToIntegral £temporary2114 £temporary2113
x5230:	and bx, 255	; 4: 129 227 255 0
x5234:	cmp bl, 0	; 3: 128 251 0
x5237:	jge printFormat$250	; 2: 125 4
x5239:	neg bl	; 2: 246 219
x5241:	neg bx	; 2: 247 219

printFormat$250:	; BinaryAdd value £temporary2112 £temporary2114
x5243:	add ax, bx	; 2: 1 216
x5245:	mov [bp + 41], ax	; 3: 137 70 41

printFormat$251:	; Increment index
x5248:	inc word [bp + 10]	; 3: 255 70 10

printFormat$252:	; BinaryAdd £temporary2118 format index
x5251:	mov si, [bp + 6]	; 3: 139 118 6
x5254:	add si, [bp + 10]	; 3: 3 118 10

printFormat$253:	; Deref £temporary2117 -> £temporary2118 £temporary2118 0

printFormat$254:	; Assign c £temporary2117 -> £temporary2118
x5257:	mov al, [si]	; 2: 138 4
x5259:	mov [bp + 40], al	; 3: 136 70 40

printFormat$255:	; Goto 240
x5262:	jmp printFormat$240	; 2: 235 171

printFormat$256:	; Decrement index
x5264:	dec word [bp + 10]	; 3: 255 78 10

printFormat$257:	; NotEqual 260 period 0
x5267:	cmp word [bp + 30], 0	; 4: 131 126 30 0
x5271:	jne printFormat$260	; 2: 117 8

printFormat$258:	; Assign width value
x5273:	mov ax, [bp + 41]	; 3: 139 70 41
x5276:	mov [bp + 12], ax	; 3: 137 70 12

printFormat$259:	; Goto 282
x5279:	jmp printFormat$282	; 2: 235 106

printFormat$260:	; Assign precision value
x5281:	mov ax, [bp + 41]	; 3: 139 70 41
x5284:	mov [bp + 14], ax	; 3: 137 70 14

printFormat$261:	; Goto 282
x5287:	jmp printFormat$282	; 2: 235 98

printFormat$262:	; NotEqual 278 c 37
x5289:	cmp byte [bp + 40], 37	; 4: 128 126 40 37
x5293:	jne printFormat$278	; 2: 117 72

printFormat$263:	; Assign percent 1
x5295:	mov word [bp + 16], 1	; 5: 199 70 16 1 0

printFormat$264:	; Assign plus 0
x5300:	mov word [bp + 18], 0	; 5: 199 70 18 0 0

printFormat$265:	; Assign minus 0
x5305:	mov word [bp + 20], 0	; 5: 199 70 20 0 0

printFormat$266:	; Assign space 0
x5310:	mov word [bp + 22], 0	; 5: 199 70 22 0 0

printFormat$267:	; Assign zero 0
x5315:	mov word [bp + 24], 0	; 5: 199 70 24 0 0

printFormat$268:	; Assign grid 0
x5320:	mov word [bp + 26], 0	; 5: 199 70 26 0 0

printFormat$269:	; Assign widthStar 0
x5325:	mov word [bp + 28], 0	; 5: 199 70 28 0 0

printFormat$270:	; Assign period 0
x5330:	mov word [bp + 30], 0	; 5: 199 70 30 0 0

printFormat$271:	; Assign precisionStar 0
x5335:	mov word [bp + 32], 0	; 5: 199 70 32 0 0

printFormat$272:	; Assign shortInt 0
x5340:	mov word [bp + 34], 0	; 5: 199 70 34 0 0

printFormat$273:	; Assign longInt 0
x5345:	mov word [bp + 36], 0	; 5: 199 70 36 0 0

printFormat$274:	; Assign longDouble 0
x5350:	mov word [bp + 38], 0	; 5: 199 70 38 0 0

printFormat$275:	; Assign width 0
x5355:	mov word [bp + 12], 0	; 5: 199 70 12 0 0

printFormat$276:	; Assign precision 0
x5360:	mov word [bp + 14], 0	; 5: 199 70 14 0 0

printFormat$277:	; Goto 282
x5365:	jmp printFormat$282	; 2: 235 20

printFormat$278:	; CallHeader 41 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printFormat$279:	; Parameter 41 c 6
x5367:	mov al, [bp + 40]	; 3: 138 70 40
x5370:	mov [bp + 47], al	; 3: 136 70 47

printFormat$280:	; Call 41 printChar 0
x5373:	mov word [bp + 41], printFormat$281	; 5: 199 70 41 11 21
x5378:	mov [bp + 43], bp	; 3: 137 110 43
x5381:	add bp, 41	; 3: 131 197 41
x5384:	jmp printChar	; 3: 233 67 7

printFormat$281:	; PostCall 41

printFormat$282:	; Increment index
x5387:	inc word [bp + 10]	; 3: 255 70 10

printFormat$283:	; Goto 16
x5390:	jmp printFormat$16	; 3: 233 31 251

printFormat$284:	; NotEqual 290 g_outStatus 1
x5393:	cmp word [g_outStatus], 1	; 5: 131 62 219 15 1
x5398:	jne printFormat$290	; 2: 117 16

printFormat$285:	; IntegralToIntegral £temporary2127 g_outDevice
x5400:	mov ax, [g_outDevice]	; 3: 161 221 15

printFormat$286:	; Assign outString £temporary2127
x5403:	mov [bp + 40], ax	; 3: 137 70 40

printFormat$287:	; BinaryAdd £temporary2129 outString g_outChars
x5406:	mov si, [bp + 40]	; 3: 139 118 40
x5409:	add si, [g_outChars]	; 4: 3 54 55 21

printFormat$288:	; Deref £temporary2128 -> £temporary2129 £temporary2129 0

printFormat$289:	; Assign £temporary2128 -> £temporary2129 0
x5413:	mov byte [si], 0	; 3: 198 4 0

printFormat$290:	; SetReturnValue g_outChars
x5416:	mov bx, [g_outChars]	; 4: 139 30 55 21

printFormat$291:	; Return g_outChars
x5420:	mov ax, [bp]	; 3: 139 70 0
x5423:	mov di, [bp + 4]	; 3: 139 126 4
x5426:	mov bp, [bp + 2]	; 3: 139 110 2
x5429:	jmp ax	; 2: 255 224

printFormat$292:	; FunctionEnd printFormat

g_outChars:
x5431:	db 0, 0	; 2: 0 0

@4839$int2$10#:
x5433:	dw 10	; 2: 10 0

printArgument:	; Deref £temporary1825 -> format format 0
x5435:	mov si, [bp + 6]	; 3: 139 118 6

printArgument$1:	; Assign c £temporary1825 -> format
x5438:	mov al, [si]	; 2: 138 4
x5440:	mov [bp + 30], al	; 3: 136 70 30

printArgument$2:	; Case 21 c 100
x5443:	mov al, [bp + 30]	; 3: 138 70 30
x5446:	cmp al, 100	; 2: 60 100
x5448:	je printArgument$21	; 2: 116 97

printArgument$3:	; Case 21 c 105
x5450:	cmp al, 105	; 2: 60 105
x5452:	je printArgument$21	; 2: 116 93

printArgument$4:	; Case 73 c 99
x5454:	cmp al, 99	; 2: 60 99
x5456:	je printArgument$73	; 4: 15 132 68 1

printArgument$5:	; Case 93 c 115
x5460:	cmp al, 115	; 2: 60 115
x5462:	je printArgument$93	; 4: 15 132 146 1

printArgument$6:	; Case 113 c 88
x5466:	cmp al, 88	; 2: 60 88
x5468:	je printArgument$113	; 4: 15 132 221 1

printArgument$7:	; Case 113 c 120
x5472:	cmp al, 120	; 2: 60 120
x5474:	je printArgument$113	; 4: 15 132 215 1

printArgument$8:	; Case 113 c 98
x5478:	cmp al, 98	; 2: 60 98
x5480:	je printArgument$113	; 4: 15 132 209 1

printArgument$9:	; Case 113 c 111
x5484:	cmp al, 111	; 2: 60 111
x5486:	je printArgument$113	; 4: 15 132 203 1

printArgument$10:	; Case 113 c 117
x5490:	cmp al, 117	; 2: 60 117
x5492:	je printArgument$113	; 4: 15 132 197 1

printArgument$11:	; Case 173 c 71
x5496:	cmp al, 71	; 2: 60 71
x5498:	je printArgument$173	; 4: 15 132 186 2

printArgument$12:	; Case 173 c 103
x5502:	cmp al, 103	; 2: 60 103
x5504:	je printArgument$173	; 4: 15 132 180 2

printArgument$13:	; Case 173 c 69
x5508:	cmp al, 69	; 2: 60 69
x5510:	je printArgument$173	; 4: 15 132 174 2

printArgument$14:	; Case 173 c 101
x5514:	cmp al, 101	; 2: 60 101
x5516:	je printArgument$173	; 4: 15 132 168 2

printArgument$15:	; Case 173 c 102
x5520:	cmp al, 102	; 2: 60 102
x5522:	je printArgument$173	; 4: 15 132 162 2

printArgument$16:	; Case 299 c 112
x5526:	cmp al, 112	; 2: 60 112
x5528:	je printArgument$299	; 4: 15 132 177 4

printArgument$17:	; Case 325 c 110
x5532:	cmp al, 110	; 2: 60 110
x5534:	je printArgument$325	; 4: 15 132 25 5

printArgument$18:	; Case 347 c 37
x5538:	cmp al, 37	; 2: 60 37
x5540:	je printArgument$347	; 4: 15 132 96 5

printArgument$19:	; CaseEnd c

printArgument$20:	; Goto 360
x5544:	jmp printArgument$360	; 3: 233 148 5

printArgument$21:	; Equal 30 shortInt 0
x5547:	cmp word [bp + 20], 0	; 4: 131 126 20 0
x5551:	je printArgument$30	; 2: 116 42

printArgument$22:	; BinaryAdd arg_list arg_list 2
x5553:	add word [bp + 8], 2	; 4: 131 70 8 2

printArgument$23:	; BinarySubtract £temporary1827 arg_list 2
x5557:	mov si, [bp + 8]	; 3: 139 118 8
x5560:	sub si, 2	; 3: 131 238 2

printArgument$24:	; IntegralToIntegral £temporary1828 £temporary1827

printArgument$25:	; Deref £temporary1829 -> £temporary1828 £temporary1828 0

printArgument$26:	; IntegralToIntegral £temporary1830 £temporary1829 -> £temporary1828
x5563:	mov ax, [si]	; 2: 139 4
x5565:	cmp ax, 0	; 3: 131 248 0
x5568:	jge printArgument$27	; 2: 125 4
x5570:	neg ax	; 2: 247 216
x5572:	neg al	; 2: 246 216

printArgument$27:	; IntegralToIntegral £temporary1831 £temporary1830
x5574:	and eax, 255	; 6: 102 37 255 0 0 0
x5580:	cmp al, 0	; 2: 60 0
x5582:	jge printArgument$28	; 2: 125 5
x5584:	neg al	; 2: 246 216
x5586:	neg eax	; 3: 102 247 216

printArgument$28:	; Assign longValue £temporary1831
x5589:	mov [bp + 44], eax	; 4: 102 137 70 44

printArgument$29:	; Goto 43
x5593:	jmp printArgument$43	; 2: 235 57

printArgument$30:	; Equal 37 longInt 0
x5595:	cmp word [bp + 22], 0	; 4: 131 126 22 0
x5599:	je printArgument$37	; 2: 116 19

printArgument$31:	; BinaryAdd arg_list arg_list 4
x5601:	add word [bp + 8], 4	; 4: 131 70 8 4

printArgument$32:	; BinarySubtract £temporary1833 arg_list 4
x5605:	mov si, [bp + 8]	; 3: 139 118 8
x5608:	sub si, 4	; 3: 131 238 4

printArgument$33:	; IntegralToIntegral £temporary1834 £temporary1833

printArgument$34:	; Deref £temporary1835 -> £temporary1834 £temporary1834 0

printArgument$35:	; Assign longValue £temporary1835 -> £temporary1834
x5611:	mov eax, [si]	; 3: 102 139 4
x5614:	mov [bp + 44], eax	; 4: 102 137 70 44

printArgument$36:	; Goto 43
x5618:	jmp printArgument$43	; 2: 235 32

printArgument$37:	; BinaryAdd arg_list arg_list 2
x5620:	add word [bp + 8], 2	; 4: 131 70 8 2

printArgument$38:	; BinarySubtract £temporary1837 arg_list 2
x5624:	mov si, [bp + 8]	; 3: 139 118 8
x5627:	sub si, 2	; 3: 131 238 2

printArgument$39:	; IntegralToIntegral £temporary1838 £temporary1837

printArgument$40:	; Deref £temporary1839 -> £temporary1838 £temporary1838 0

printArgument$41:	; IntegralToIntegral £temporary1840 £temporary1839 -> £temporary1838
x5630:	mov ax, [si]	; 2: 139 4
x5632:	and eax, 65535	; 6: 102 37 255 255 0 0
x5638:	cmp ax, 0	; 3: 131 248 0
x5641:	jge printArgument$42	; 2: 125 5
x5643:	neg ax	; 2: 247 216
x5645:	neg eax	; 3: 102 247 216

printArgument$42:	; Assign longValue £temporary1840
x5648:	mov [bp + 44], eax	; 4: 102 137 70 44

printArgument$43:	; Equal 50 negativePtr 0
x5652:	cmp word [bp + 28], 0	; 4: 131 126 28 0
x5656:	je printArgument$50	; 2: 116 20

printArgument$44:	; Deref £temporary1844 -> negativePtr negativePtr 0
x5658:	mov si, [bp + 28]	; 3: 139 118 28

printArgument$45:	; SignedGreaterThanEqual 48 longValue 0
x5661:	cmp dword [bp + 44], 0	; 5: 102 131 126 44 0
x5666:	jge printArgument$48	; 2: 125 5

printArgument$46:	; Assign £temporary1846 1
x5668:	mov ax, 1	; 3: 184 1 0

printArgument$47:	; Goto 49
x5671:	jmp printArgument$49	; 2: 235 3

printArgument$48:	; Assign £temporary1846 0
x5673:	mov ax, 0	; 3: 184 0 0

printArgument$49:	; Assign £temporary1844 -> negativePtr £temporary1846
x5676:	mov [si], ax	; 2: 137 4

printArgument$50:	; NotEqual 57 sign 0
x5678:	cmp word [bp + 26], 0	; 4: 131 126 26 0
x5682:	jne printArgument$57	; 2: 117 26

printArgument$51:	; CallHeader 48 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$52:	; Parameter 48 longValue 6
x5684:	mov eax, [bp + 44]	; 4: 102 139 70 44
x5688:	mov [bp + 54], eax	; 4: 102 137 70 54

printArgument$53:	; Call 48 labs 0
x5692:	mov word [bp + 48], printArgument$54	; 5: 199 70 48 74 22
x5697:	mov [bp + 50], bp	; 3: 137 110 50
x5700:	add bp, 48	; 3: 131 197 48
x5703:	jmp labs	; 3: 233 5 5

printArgument$54:	; PostCall 48

printArgument$55:	; GetReturnValue £temporary1849

printArgument$56:	; Assign longValue £temporary1849
x5706:	mov [bp + 44], ebx	; 4: 102 137 94 44

printArgument$57:	; CallHeader 48 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$58:	; Parameter 48 arg_list 6
x5710:	mov ax, [bp + 8]	; 3: 139 70 8
x5713:	mov [bp + 54], ax	; 3: 137 70 54

printArgument$59:	; Parameter 48 widthPtr 8
x5716:	mov ax, [bp + 16]	; 3: 139 70 16
x5719:	mov [bp + 56], ax	; 3: 137 70 56

printArgument$60:	; address £temporary1850 precision
x5722:	mov si, bp	; 2: 137 238
x5724:	add si, 18	; 3: 131 198 18

printArgument$61:	; Parameter 48 £temporary1850 10
x5727:	mov [bp + 58], si	; 3: 137 118 58

printArgument$62:	; Call 48 checkWidthAndPrecision 0
x5730:	mov word [bp + 48], printArgument$63	; 5: 199 70 48 112 22
x5735:	mov [bp + 50], bp	; 3: 137 110 50
x5738:	add bp, 48	; 3: 131 197 48
x5741:	jmp checkWidthAndPrecision	; 3: 233 254 4

printArgument$63:	; PostCall 48

printArgument$64:	; GetReturnValue £temporary1851

printArgument$65:	; Assign arg_list £temporary1851
x5744:	mov [bp + 8], bx	; 3: 137 94 8

printArgument$66:	; CallHeader 48 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$67:	; Parameter 48 longValue 6
x5747:	mov eax, [bp + 44]	; 4: 102 139 70 44
x5751:	mov [bp + 54], eax	; 4: 102 137 70 54

printArgument$68:	; Parameter 48 plus 10
x5755:	mov ax, [bp + 10]	; 3: 139 70 10
x5758:	mov [bp + 58], ax	; 3: 137 70 58

printArgument$69:	; Parameter 48 space 12
x5761:	mov ax, [bp + 12]	; 3: 139 70 12
x5764:	mov [bp + 60], ax	; 3: 137 70 60

printArgument$70:	; Call 48 printLongInt 0
x5767:	mov word [bp + 48], printArgument$71	; 5: 199 70 48 149 22
x5772:	mov [bp + 50], bp	; 3: 137 110 50
x5775:	add bp, 48	; 3: 131 197 48
x5778:	jmp printLongInt	; 3: 233 37 5

printArgument$71:	; PostCall 48

printArgument$72:	; Goto 360
x5781:	jmp printArgument$360	; 3: 233 167 4

printArgument$73:	; BinaryAdd arg_list arg_list 2
x5784:	add word [bp + 8], 2	; 4: 131 70 8 2

printArgument$74:	; BinarySubtract £temporary1854 arg_list 2
x5788:	mov si, [bp + 8]	; 3: 139 118 8
x5791:	sub si, 2	; 3: 131 238 2

printArgument$75:	; IntegralToIntegral £temporary1855 £temporary1854

printArgument$76:	; Deref £temporary1856 -> £temporary1855 £temporary1855 0

printArgument$77:	; IntegralToIntegral £temporary1857 £temporary1856 -> £temporary1855
x5794:	mov ax, [si]	; 2: 139 4
x5796:	cmp ax, 0	; 3: 131 248 0
x5799:	jge printArgument$78	; 2: 125 4
x5801:	neg ax	; 2: 247 216
x5803:	neg al	; 2: 246 216

printArgument$78:	; Assign charValue £temporary1857
x5805:	mov [bp + 31], al	; 3: 136 70 31

printArgument$79:	; CallHeader 44 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$80:	; Parameter 44 arg_list 6
x5808:	mov ax, [bp + 8]	; 3: 139 70 8
x5811:	mov [bp + 50], ax	; 3: 137 70 50

printArgument$81:	; Parameter 44 widthPtr 8
x5814:	mov ax, [bp + 16]	; 3: 139 70 16
x5817:	mov [bp + 52], ax	; 3: 137 70 52

printArgument$82:	; address £temporary1858 precision
x5820:	mov si, bp	; 2: 137 238
x5822:	add si, 18	; 3: 131 198 18

printArgument$83:	; Parameter 44 £temporary1858 10
x5825:	mov [bp + 54], si	; 3: 137 118 54

printArgument$84:	; Call 44 checkWidthAndPrecision 0
x5828:	mov word [bp + 44], printArgument$85	; 5: 199 70 44 210 22
x5833:	mov [bp + 46], bp	; 3: 137 110 46
x5836:	add bp, 44	; 3: 131 197 44
x5839:	jmp checkWidthAndPrecision	; 3: 233 156 4

printArgument$85:	; PostCall 44

printArgument$86:	; GetReturnValue £temporary1859

printArgument$87:	; Assign arg_list £temporary1859
x5842:	mov [bp + 8], bx	; 3: 137 94 8

printArgument$88:	; CallHeader 44 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$89:	; Parameter 44 charValue 6
x5845:	mov al, [bp + 31]	; 3: 138 70 31
x5848:	mov [bp + 50], al	; 3: 136 70 50

printArgument$90:	; Call 44 printChar 0
x5851:	mov word [bp + 44], printArgument$91	; 5: 199 70 44 233 22
x5856:	mov [bp + 46], bp	; 3: 137 110 46
x5859:	add bp, 44	; 3: 131 197 44
x5862:	jmp printChar	; 3: 233 101 5

printArgument$91:	; PostCall 44

printArgument$92:	; Goto 360
x5865:	jmp printArgument$360	; 3: 233 83 4

printArgument$93:	; BinaryAdd arg_list arg_list 2
x5868:	add word [bp + 8], 2	; 4: 131 70 8 2

printArgument$94:	; BinarySubtract £temporary1862 arg_list 2
x5872:	mov si, [bp + 8]	; 3: 139 118 8
x5875:	sub si, 2	; 3: 131 238 2

printArgument$95:	; IntegralToIntegral £temporary1863 £temporary1862

printArgument$96:	; Deref £temporary1864 -> £temporary1863 £temporary1863 0

printArgument$97:	; Assign stringValue £temporary1864 -> £temporary1863
x5878:	mov ax, [si]	; 2: 139 4
x5880:	mov [bp + 44], ax	; 3: 137 70 44

printArgument$98:	; CallHeader 46 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$99:	; Parameter 46 arg_list 6
x5883:	mov ax, [bp + 8]	; 3: 139 70 8
x5886:	mov [bp + 52], ax	; 3: 137 70 52

printArgument$100:	; Parameter 46 widthPtr 8
x5889:	mov ax, [bp + 16]	; 3: 139 70 16
x5892:	mov [bp + 54], ax	; 3: 137 70 54

printArgument$101:	; address £temporary1865 precision
x5895:	mov si, bp	; 2: 137 238
x5897:	add si, 18	; 3: 131 198 18

printArgument$102:	; Parameter 46 £temporary1865 10
x5900:	mov [bp + 56], si	; 3: 137 118 56

printArgument$103:	; Call 46 checkWidthAndPrecision 0
x5903:	mov word [bp + 46], printArgument$104	; 5: 199 70 46 29 23
x5908:	mov [bp + 48], bp	; 3: 137 110 48
x5911:	add bp, 46	; 3: 131 197 46
x5914:	jmp checkWidthAndPrecision	; 3: 233 81 4

printArgument$104:	; PostCall 46

printArgument$105:	; GetReturnValue £temporary1866

printArgument$106:	; Assign arg_list £temporary1866
x5917:	mov [bp + 8], bx	; 3: 137 94 8

printArgument$107:	; CallHeader 46 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$108:	; Parameter 46 stringValue 6
x5920:	mov ax, [bp + 44]	; 3: 139 70 44
x5923:	mov [bp + 52], ax	; 3: 137 70 52

printArgument$109:	; Parameter 46 precision 8
x5926:	mov ax, [bp + 18]	; 3: 139 70 18
x5929:	mov [bp + 54], ax	; 3: 137 70 54

printArgument$110:	; Call 46 printString 0
x5932:	mov word [bp + 46], printArgument$111	; 5: 199 70 46 58 23
x5937:	mov [bp + 48], bp	; 3: 137 110 48
x5940:	add bp, 46	; 3: 131 197 46
x5943:	jmp printString	; 3: 233 224 5

printArgument$111:	; PostCall 46

printArgument$112:	; Goto 360
x5946:	jmp printArgument$360	; 3: 233 2 4

printArgument$113:	; NotEqual 116 c 117
x5949:	cmp byte [bp + 30], 117	; 4: 128 126 30 117
x5953:	jne printArgument$116	; 2: 117 8

printArgument$114:	; Assign £temporary1882 10
x5955:	mov eax, 10	; 6: 102 184 10 0 0 0

printArgument$115:	; Goto 125
x5961:	jmp printArgument$125	; 2: 235 34

printArgument$116:	; NotEqual 119 c 111
x5963:	cmp byte [bp + 30], 111	; 4: 128 126 30 111
x5967:	jne printArgument$119	; 2: 117 8

printArgument$117:	; Assign £temporary1878 8
x5969:	mov eax, 8	; 6: 102 184 8 0 0 0

printArgument$118:	; Goto 124
x5975:	jmp printArgument$124	; 2: 235 20

printArgument$119:	; NotEqual 122 c 98
x5977:	cmp byte [bp + 30], 98	; 4: 128 126 30 98
x5981:	jne printArgument$122	; 2: 117 8

printArgument$120:	; Assign £temporary1874 2
x5983:	mov eax, 2	; 6: 102 184 2 0 0 0

printArgument$121:	; Goto 123
x5989:	jmp printArgument$123	; 2: 235 6

printArgument$122:	; Assign £temporary1874 16
x5991:	mov eax, 16	; 6: 102 184 16 0 0 0

printArgument$123:	; Assign £temporary1878 £temporary1874

printArgument$124:	; Assign £temporary1882 £temporary1878

printArgument$125:	; Assign base £temporary1882
x5997:	mov [bp + 44], eax	; 4: 102 137 70 44

printArgument$126:	; Equal 135 shortInt 0
x6001:	cmp word [bp + 20], 0	; 4: 131 126 20 0
x6005:	je printArgument$135	; 2: 116 24

printArgument$127:	; BinaryAdd arg_list arg_list 2
x6007:	add word [bp + 8], 2	; 4: 131 70 8 2

printArgument$128:	; BinarySubtract £temporary1884 arg_list 2
x6011:	mov si, [bp + 8]	; 3: 139 118 8
x6014:	sub si, 2	; 3: 131 238 2

printArgument$129:	; IntegralToIntegral £temporary1885 £temporary1884

printArgument$130:	; Deref £temporary1886 -> £temporary1885 £temporary1885 0

printArgument$131:	; IntegralToIntegral £temporary1887 £temporary1886 -> £temporary1885
x6017:	mov ax, [si]	; 2: 139 4

printArgument$132:	; IntegralToIntegral £temporary1888 £temporary1887
x6019:	and eax, 255	; 6: 102 37 255 0 0 0

printArgument$133:	; Assign value £temporary1888
x6025:	mov [bp + 48], eax	; 4: 102 137 70 48

printArgument$134:	; Goto 148
x6029:	jmp printArgument$148	; 2: 235 47

printArgument$135:	; Equal 142 longInt 0
x6031:	cmp word [bp + 22], 0	; 4: 131 126 22 0
x6035:	je printArgument$142	; 2: 116 19

printArgument$136:	; BinaryAdd arg_list arg_list 4
x6037:	add word [bp + 8], 4	; 4: 131 70 8 4

printArgument$137:	; BinarySubtract £temporary1890 arg_list 4
x6041:	mov si, [bp + 8]	; 3: 139 118 8
x6044:	sub si, 4	; 3: 131 238 4

printArgument$138:	; IntegralToIntegral £temporary1891 £temporary1890

printArgument$139:	; Deref £temporary1892 -> £temporary1891 £temporary1891 0

printArgument$140:	; Assign value £temporary1892 -> £temporary1891
x6047:	mov eax, [si]	; 3: 102 139 4
x6050:	mov [bp + 48], eax	; 4: 102 137 70 48

printArgument$141:	; Goto 148
x6054:	jmp printArgument$148	; 2: 235 22

printArgument$142:	; BinaryAdd arg_list arg_list 2
x6056:	add word [bp + 8], 2	; 4: 131 70 8 2

printArgument$143:	; BinarySubtract £temporary1894 arg_list 2
x6060:	mov si, [bp + 8]	; 3: 139 118 8
x6063:	sub si, 2	; 3: 131 238 2

printArgument$144:	; IntegralToIntegral £temporary1895 £temporary1894

printArgument$145:	; Deref £temporary1896 -> £temporary1895 £temporary1895 0

printArgument$146:	; IntegralToIntegral £temporary1897 £temporary1896 -> £temporary1895
x6066:	mov ax, [si]	; 2: 139 4
x6068:	and eax, 65535	; 6: 102 37 255 255 0 0

printArgument$147:	; Assign value £temporary1897
x6074:	mov [bp + 48], eax	; 4: 102 137 70 48

printArgument$148:	; CallHeader 52 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$149:	; Parameter 52 arg_list 6
x6078:	mov ax, [bp + 8]	; 3: 139 70 8
x6081:	mov [bp + 58], ax	; 3: 137 70 58

printArgument$150:	; Parameter 52 widthPtr 8
x6084:	mov ax, [bp + 16]	; 3: 139 70 16
x6087:	mov [bp + 60], ax	; 3: 137 70 60

printArgument$151:	; address £temporary1900 precision
x6090:	mov si, bp	; 2: 137 238
x6092:	add si, 18	; 3: 131 198 18

printArgument$152:	; Parameter 52 £temporary1900 10
x6095:	mov [bp + 62], si	; 3: 137 118 62

printArgument$153:	; Call 52 checkWidthAndPrecision 0
x6098:	mov word [bp + 52], printArgument$154	; 5: 199 70 52 224 23
x6103:	mov [bp + 54], bp	; 3: 137 110 54
x6106:	add bp, 52	; 3: 131 197 52
x6109:	jmp checkWidthAndPrecision	; 3: 233 142 3

printArgument$154:	; PostCall 52

printArgument$155:	; GetReturnValue £temporary1901

printArgument$156:	; Assign arg_list £temporary1901
x6112:	mov [bp + 8], bx	; 3: 137 94 8

printArgument$157:	; CallHeader 52 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$158:	; Parameter 52 value 6
x6115:	mov eax, [bp + 48]	; 4: 102 139 70 48
x6119:	mov [bp + 58], eax	; 4: 102 137 70 58

printArgument$159:	; Parameter 52 plus 10
x6123:	mov ax, [bp + 10]	; 3: 139 70 10
x6126:	mov [bp + 62], ax	; 3: 137 70 62

printArgument$160:	; Parameter 52 space 12
x6129:	mov ax, [bp + 12]	; 3: 139 70 12
x6132:	mov [bp + 64], ax	; 3: 137 70 64

printArgument$161:	; Parameter 52 grid 14
x6135:	mov ax, [bp + 14]	; 3: 139 70 14
x6138:	mov [bp + 66], ax	; 3: 137 70 66

printArgument$162:	; Parameter 52 base 16
x6141:	mov eax, [bp + 44]	; 4: 102 139 70 44
x6145:	mov [bp + 68], eax	; 4: 102 137 70 68

printArgument$163:	; CallHeader 52 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$164:	; IntegralToIntegral £temporary1902 c
x6149:	mov al, [bp + 30]	; 3: 138 70 30
x6152:	and ax, 255	; 3: 37 255 0
x6155:	cmp al, 0	; 2: 60 0
x6157:	jge printArgument$165	; 2: 125 4
x6159:	neg al	; 2: 246 216
x6161:	neg ax	; 2: 247 216

printArgument$165:	; Parameter 52 £temporary1902 26
x6163:	mov [bp + 78], ax	; 3: 137 70 78

printArgument$166:	; Call 52 isupper 20
x6166:	mov word [bp + 72], printArgument$167	; 5: 199 70 72 36 24
x6171:	mov [bp + 74], bp	; 3: 137 110 74
x6174:	add bp, 72	; 3: 131 197 72
x6177:	jmp isupper	; 3: 233 230 5

printArgument$167:	; PostCall 52

printArgument$168:	; GetReturnValue £temporary1903

printArgument$169:	; Parameter 52 £temporary1903 20
x6180:	mov [bp + 72], bx	; 3: 137 94 72

printArgument$170:	; Call 52 printUnsignedLong 0
x6183:	mov word [bp + 52], printArgument$171	; 5: 199 70 52 53 24
x6188:	mov [bp + 54], bp	; 3: 137 110 54
x6191:	add bp, 52	; 3: 131 197 52
x6194:	jmp printUnsignedLong	; 3: 233 214 9

printArgument$171:	; PostCall 52

printArgument$172:	; Goto 360
x6197:	jmp printArgument$360	; 3: 233 7 3

printArgument$173:	; Equal 190 longDouble 0
x6200:	cmp word [bp + 24], 0	; 4: 131 126 24 0
x6204:	je printArgument$190	; 2: 116 57

printArgument$174:	; BinaryAdd arg_list arg_list 8
x6206:	add word [bp + 8], 8	; 4: 131 70 8 8

printArgument$175:	; BinarySubtract £temporary1906 arg_list 8
x6210:	mov si, [bp + 8]	; 3: 139 118 8
x6213:	sub si, 8	; 3: 131 238 8

printArgument$176:	; IntegralToIntegral £temporary1907 £temporary1906

printArgument$177:	; Deref £temporary1908 -> £temporary1907 £temporary1907 0

printArgument$178:	; PushFloat £temporary1908 -> £temporary1907
x6216:	fld qword [si]	; 2: 221 4

printArgument$179:	; PopFloat longDoubleValue
x6218:	fstp qword [bp + 34]	; 3: 221 94 34

printArgument$180:	; CallHeader 44 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$181:	; PushFloat longDoubleValue
x6221:	fld qword [bp + 34]	; 3: 221 70 34

printArgument$182:	; Parameter 44 longDoubleValue 6
x6224:	fstp qword [bp + 50]	; 3: 221 94 50

printArgument$183:	; Parameter 44 0 14
x6227:	mov word [bp + 58], 0	; 5: 199 70 58 0 0

printArgument$184:	; Parameter 44 0 16
x6232:	mov word [bp + 60], 0	; 5: 199 70 60 0 0

printArgument$185:	; Parameter 44 0 18
x6237:	mov word [bp + 62], 0	; 5: 199 70 62 0 0

printArgument$186:	; Parameter 44 3 20
x6242:	mov word [bp + 64], 3	; 5: 199 70 64 3 0

printArgument$187:	; Call 44 printLongDoublePlain 0
x6247:	mov word [bp + 44], printArgument$188	; 5: 199 70 44 117 24
x6252:	mov [bp + 46], bp	; 3: 137 110 46
x6255:	add bp, 44	; 3: 131 197 44
x6258:	jmp printLongDoublePlain	; 3: 233 65 11

printArgument$188:	; PostCall 44

printArgument$189:	; Goto 196
x6261:	jmp printArgument$196	; 2: 235 15

printArgument$190:	; BinaryAdd arg_list arg_list 8
x6263:	add word [bp + 8], 8	; 4: 131 70 8 8

printArgument$191:	; BinarySubtract £temporary1911 arg_list 8
x6267:	mov si, [bp + 8]	; 3: 139 118 8
x6270:	sub si, 8	; 3: 131 238 8

printArgument$192:	; IntegralToIntegral £temporary1912 £temporary1911

printArgument$193:	; Deref £temporary1913 -> £temporary1912 £temporary1912 0

printArgument$194:	; PushFloat £temporary1913 -> £temporary1912
x6273:	fld qword [si]	; 2: 221 4

printArgument$195:	; PopFloat longDoubleValue
x6275:	fstp qword [bp + 34]	; 3: 221 94 34

printArgument$196:	; Equal 205 negativePtr 0
x6278:	cmp word [bp + 28], 0	; 4: 131 126 28 0
x6282:	je printArgument$205	; 2: 116 26

printArgument$197:	; Deref £temporary1917 -> negativePtr negativePtr 0
x6284:	mov si, [bp + 28]	; 3: 139 118 28

printArgument$198:	; PushFloat longDoubleValue
x6287:	fld qword [bp + 34]	; 3: 221 70 34

printArgument$199:	; PushZero
x6290:	fldz	; 2: 217 238

printArgument$200:	; SignedGreaterThanEqual 203 longDoubleValue 0
x6292:	fcompp	; 2: 222 217
x6294:	fstsw ax	; 3: 155 223 224
x6297:	sahf	; 1: 158
x6298:	jbe printArgument$203	; 2: 118 5

printArgument$201:	; Assign £temporary1919 1
x6300:	mov ax, 1	; 3: 184 1 0

printArgument$202:	; Goto 204
x6303:	jmp printArgument$204	; 2: 235 3

printArgument$203:	; Assign £temporary1919 0
x6305:	mov ax, 0	; 3: 184 0 0

printArgument$204:	; Assign £temporary1917 -> negativePtr £temporary1919
x6308:	mov [si], ax	; 2: 137 4

printArgument$205:	; NotEqual 213 sign 0
x6310:	cmp word [bp + 26], 0	; 4: 131 126 26 0
x6314:	jne printArgument$213	; 2: 117 23

printArgument$206:	; CallHeader 44 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$207:	; PushFloat longDoubleValue
x6316:	fld qword [bp + 34]	; 3: 221 70 34

printArgument$208:	; Parameter 44 longDoubleValue 6
x6319:	fstp qword [bp + 50]	; 3: 221 94 50

printArgument$209:	; Call 44 fabs 0
x6322:	mov word [bp + 44], printArgument$210	; 5: 199 70 44 192 24
x6327:	mov [bp + 46], bp	; 3: 137 110 46
x6330:	add bp, 44	; 3: 131 197 44
x6333:	jmp fabs	; 3: 233 55 12

printArgument$210:	; PostCall 44

printArgument$211:	; GetReturnValue £temporary1922

printArgument$212:	; PopFloat longDoubleValue
x6336:	fstp qword [bp + 34]	; 3: 221 94 34

printArgument$213:	; CallHeader 44 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$214:	; Parameter 44 arg_list 6
x6339:	mov ax, [bp + 8]	; 3: 139 70 8
x6342:	mov [bp + 50], ax	; 3: 137 70 50

printArgument$215:	; Parameter 44 widthPtr 8
x6345:	mov ax, [bp + 16]	; 3: 139 70 16
x6348:	mov [bp + 52], ax	; 3: 137 70 52

printArgument$216:	; address £temporary1923 precision
x6351:	mov si, bp	; 2: 137 238
x6353:	add si, 18	; 3: 131 198 18

printArgument$217:	; Parameter 44 £temporary1923 10
x6356:	mov [bp + 54], si	; 3: 137 118 54

printArgument$218:	; Call 44 checkWidthAndPrecision 0
x6359:	mov word [bp + 44], printArgument$219	; 5: 199 70 44 229 24
x6364:	mov [bp + 46], bp	; 3: 137 110 46
x6367:	add bp, 44	; 3: 131 197 44
x6370:	jmp checkWidthAndPrecision	; 3: 233 137 2

printArgument$219:	; PostCall 44

printArgument$220:	; GetReturnValue £temporary1924

printArgument$221:	; Assign arg_list £temporary1924
x6373:	mov [bp + 8], bx	; 3: 137 94 8

printArgument$222:	; NotEqual 233 c 102
x6376:	cmp byte [bp + 30], 102	; 4: 128 126 30 102
x6380:	jne printArgument$233	; 2: 117 47

printArgument$223:	; CallHeader 44 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$224:	; PushFloat longDoubleValue
x6382:	fld qword [bp + 34]	; 3: 221 70 34

printArgument$225:	; Parameter 44 longDoubleValue 6
x6385:	fstp qword [bp + 50]	; 3: 221 94 50

printArgument$226:	; Parameter 44 plus 14
x6388:	mov ax, [bp + 10]	; 3: 139 70 10
x6391:	mov [bp + 58], ax	; 3: 137 70 58

printArgument$227:	; Parameter 44 space 16
x6394:	mov ax, [bp + 12]	; 3: 139 70 12
x6397:	mov [bp + 60], ax	; 3: 137 70 60

printArgument$228:	; Parameter 44 grid 18
x6400:	mov ax, [bp + 14]	; 3: 139 70 14
x6403:	mov [bp + 62], ax	; 3: 137 70 62

printArgument$229:	; Parameter 44 precision 20
x6406:	mov ax, [bp + 18]	; 3: 139 70 18
x6409:	mov [bp + 64], ax	; 3: 137 70 64

printArgument$230:	; Call 44 printLongDoublePlain 0
x6412:	mov word [bp + 44], printArgument$231	; 5: 199 70 44 26 25
x6417:	mov [bp + 46], bp	; 3: 137 110 46
x6420:	add bp, 44	; 3: 131 197 44
x6423:	jmp printLongDoublePlain	; 3: 233 156 10

printArgument$231:	; PostCall 44

printArgument$232:	; Goto 360
x6426:	jmp printArgument$360	; 3: 233 34 2

printArgument$233:	; CallHeader 44 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$234:	; IntegralToIntegral £temporary1927 c
x6429:	mov al, [bp + 30]	; 3: 138 70 30
x6432:	and ax, 255	; 3: 37 255 0
x6435:	cmp al, 0	; 2: 60 0
x6437:	jge printArgument$235	; 2: 125 4
x6439:	neg al	; 2: 246 216
x6441:	neg ax	; 2: 247 216

printArgument$235:	; Parameter 44 £temporary1927 6
x6443:	mov [bp + 50], ax	; 3: 137 70 50

printArgument$236:	; Call 44 tolower 0
x6446:	mov word [bp + 44], printArgument$237	; 5: 199 70 44 60 25
x6451:	mov [bp + 46], bp	; 3: 137 110 46
x6454:	add bp, 44	; 3: 131 197 44
x6457:	jmp tolower	; 3: 233 221 11

printArgument$237:	; PostCall 44

printArgument$238:	; GetReturnValue £temporary1928

printArgument$239:	; NotEqual 257 £temporary1928 101
x6460:	cmp bx, 101	; 3: 131 251 101
x6463:	jne printArgument$257	; 2: 117 81

printArgument$240:	; CallHeader 44 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$241:	; PushFloat longDoubleValue
x6465:	fld qword [bp + 34]	; 3: 221 70 34

printArgument$242:	; Parameter 44 longDoubleValue 6
x6468:	fstp qword [bp + 50]	; 3: 221 94 50

printArgument$243:	; Parameter 44 plus 14
x6471:	mov ax, [bp + 10]	; 3: 139 70 10
x6474:	mov [bp + 58], ax	; 3: 137 70 58

printArgument$244:	; Parameter 44 space 16
x6477:	mov ax, [bp + 12]	; 3: 139 70 12
x6480:	mov [bp + 60], ax	; 3: 137 70 60

printArgument$245:	; Parameter 44 grid 18
x6483:	mov ax, [bp + 14]	; 3: 139 70 14
x6486:	mov [bp + 62], ax	; 3: 137 70 62

printArgument$246:	; Parameter 44 precision 20
x6489:	mov ax, [bp + 18]	; 3: 139 70 18
x6492:	mov [bp + 64], ax	; 3: 137 70 64

printArgument$247:	; CallHeader 44 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$248:	; IntegralToIntegral £temporary1930 c
x6495:	mov al, [bp + 30]	; 3: 138 70 30
x6498:	and ax, 255	; 3: 37 255 0
x6501:	cmp al, 0	; 2: 60 0
x6503:	jge printArgument$249	; 2: 125 4
x6505:	neg al	; 2: 246 216
x6507:	neg ax	; 2: 247 216

printArgument$249:	; Parameter 44 £temporary1930 28
x6509:	mov [bp + 72], ax	; 3: 137 70 72

printArgument$250:	; Call 44 isupper 22
x6512:	mov word [bp + 66], printArgument$251	; 5: 199 70 66 126 25
x6517:	mov [bp + 68], bp	; 3: 137 110 68
x6520:	add bp, 66	; 3: 131 197 66
x6523:	jmp isupper	; 3: 233 140 4

printArgument$251:	; PostCall 44

printArgument$252:	; GetReturnValue £temporary1931

printArgument$253:	; Parameter 44 £temporary1931 22
x6526:	mov [bp + 66], bx	; 3: 137 94 66

printArgument$254:	; Call 44 printLongDoubleExpo 0
x6529:	mov word [bp + 44], printArgument$255	; 5: 199 70 44 143 25
x6534:	mov [bp + 46], bp	; 3: 137 110 46
x6537:	add bp, 44	; 3: 131 197 44
x6540:	jmp printLongDoubleExpo	; 3: 233 43 12

printArgument$255:	; PostCall 44

printArgument$256:	; Goto 360
x6543:	jmp printArgument$360	; 3: 233 173 1

printArgument$257:	; CallHeader 44 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$258:	; CallHeader 44 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$259:	; PushFloat longDoubleValue
x6546:	fld qword [bp + 34]	; 3: 221 70 34

printArgument$260:	; Parameter 44 longDoubleValue 6
x6549:	fstp qword [bp + 50]	; 3: 221 94 50

printArgument$261:	; Call 44 fabs 0
x6552:	mov word [bp + 44], printArgument$262	; 5: 199 70 44 166 25
x6557:	mov [bp + 46], bp	; 3: 137 110 46
x6560:	add bp, 44	; 3: 131 197 44
x6563:	jmp fabs	; 3: 233 81 11

printArgument$262:	; PostCall 44

printArgument$263:	; GetReturnValue £temporary1933

printArgument$264:	; Parameter 44 £temporary1933 6
x6566:	fstp qword [bp + 50]	; 3: 221 94 50

printArgument$265:	; Call 44 log10 0
x6569:	mov word [bp + 44], printArgument$266	; 5: 199 70 44 183 25
x6574:	mov [bp + 46], bp	; 3: 137 110 46
x6577:	add bp, 44	; 3: 131 197 44
x6580:	jmp log10	; 3: 233 114 13

printArgument$266:	; PostCall 44

printArgument$267:	; GetReturnValue £temporary1934

printArgument$268:	; FloatingToIntegral £temporary1935 £temporary1934
x6583:	fistp word [container2bytes#]	; 4: 223 30 77 27
x6587:	mov ax, [container2bytes#]	; 3: 161 77 27

printArgument$269:	; Assign expo £temporary1935
x6590:	mov [bp + 44], ax	; 3: 137 70 44

printArgument$270:	; SignedLessThan 282 expo -3
x6593:	cmp word [bp + 44], -3	; 4: 131 126 44 253
x6597:	jl printArgument$282	; 2: 124 53

printArgument$271:	; SignedGreaterThan 282 expo 2
x6599:	cmp word [bp + 44], 2	; 4: 131 126 44 2
x6603:	jg printArgument$282	; 2: 127 47

printArgument$272:	; CallHeader 46 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$273:	; PushFloat longDoubleValue
x6605:	fld qword [bp + 34]	; 3: 221 70 34

printArgument$274:	; Parameter 46 longDoubleValue 6
x6608:	fstp qword [bp + 52]	; 3: 221 94 52

printArgument$275:	; Parameter 46 plus 14
x6611:	mov ax, [bp + 10]	; 3: 139 70 10
x6614:	mov [bp + 60], ax	; 3: 137 70 60

printArgument$276:	; Parameter 46 space 16
x6617:	mov ax, [bp + 12]	; 3: 139 70 12
x6620:	mov [bp + 62], ax	; 3: 137 70 62

printArgument$277:	; Parameter 46 grid 18
x6623:	mov ax, [bp + 14]	; 3: 139 70 14
x6626:	mov [bp + 64], ax	; 3: 137 70 64

printArgument$278:	; Parameter 46 precision 20
x6629:	mov ax, [bp + 18]	; 3: 139 70 18
x6632:	mov [bp + 66], ax	; 3: 137 70 66

printArgument$279:	; Call 46 printLongDoublePlain 0
x6635:	mov word [bp + 46], printArgument$280	; 5: 199 70 46 249 25
x6640:	mov [bp + 48], bp	; 3: 137 110 48
x6643:	add bp, 46	; 3: 131 197 46
x6646:	jmp printLongDoublePlain	; 3: 233 189 9

printArgument$280:	; PostCall 46

printArgument$281:	; Goto 360
x6649:	jmp printArgument$360	; 3: 233 67 1

printArgument$282:	; CallHeader 46 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$283:	; PushFloat longDoubleValue
x6652:	fld qword [bp + 34]	; 3: 221 70 34

printArgument$284:	; Parameter 46 longDoubleValue 6
x6655:	fstp qword [bp + 52]	; 3: 221 94 52

printArgument$285:	; Parameter 46 plus 14
x6658:	mov ax, [bp + 10]	; 3: 139 70 10
x6661:	mov [bp + 60], ax	; 3: 137 70 60

printArgument$286:	; Parameter 46 space 16
x6664:	mov ax, [bp + 12]	; 3: 139 70 12
x6667:	mov [bp + 62], ax	; 3: 137 70 62

printArgument$287:	; Parameter 46 grid 18
x6670:	mov ax, [bp + 14]	; 3: 139 70 14
x6673:	mov [bp + 64], ax	; 3: 137 70 64

printArgument$288:	; Parameter 46 precision 20
x6676:	mov ax, [bp + 18]	; 3: 139 70 18
x6679:	mov [bp + 66], ax	; 3: 137 70 66

printArgument$289:	; CallHeader 46 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$290:	; IntegralToIntegral £temporary1940 c
x6682:	mov al, [bp + 30]	; 3: 138 70 30
x6685:	and ax, 255	; 3: 37 255 0
x6688:	cmp al, 0	; 2: 60 0
x6690:	jge printArgument$291	; 2: 125 4
x6692:	neg al	; 2: 246 216
x6694:	neg ax	; 2: 247 216

printArgument$291:	; Parameter 46 £temporary1940 28
x6696:	mov [bp + 74], ax	; 3: 137 70 74

printArgument$292:	; Call 46 isupper 22
x6699:	mov word [bp + 68], printArgument$293	; 5: 199 70 68 57 26
x6704:	mov [bp + 70], bp	; 3: 137 110 70
x6707:	add bp, 68	; 3: 131 197 68
x6710:	jmp isupper	; 3: 233 209 3

printArgument$293:	; PostCall 46

printArgument$294:	; GetReturnValue £temporary1941

printArgument$295:	; Parameter 46 £temporary1941 22
x6713:	mov [bp + 68], bx	; 3: 137 94 68

printArgument$296:	; Call 46 printLongDoubleExpo 0
x6716:	mov word [bp + 46], printArgument$297	; 5: 199 70 46 74 26
x6721:	mov [bp + 48], bp	; 3: 137 110 48
x6724:	add bp, 46	; 3: 131 197 46
x6727:	jmp printLongDoubleExpo	; 3: 233 112 11

printArgument$297:	; PostCall 46

printArgument$298:	; Goto 360
x6730:	jmp printArgument$360	; 3: 233 242 0

printArgument$299:	; BinaryAdd arg_list arg_list 2
x6733:	add word [bp + 8], 2	; 4: 131 70 8 2

printArgument$300:	; BinarySubtract £temporary1944 arg_list 2
x6737:	mov si, [bp + 8]	; 3: 139 118 8
x6740:	sub si, 2	; 3: 131 238 2

printArgument$301:	; IntegralToIntegral £temporary1945 £temporary1944

printArgument$302:	; Deref £temporary1946 -> £temporary1945 £temporary1945 0

printArgument$303:	; Assign ptrValue £temporary1946 -> £temporary1945
x6743:	mov ax, [si]	; 2: 139 4
x6745:	mov [bp + 42], ax	; 3: 137 70 42

printArgument$304:	; CallHeader 44 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$305:	; Parameter 44 arg_list 6
x6748:	mov ax, [bp + 8]	; 3: 139 70 8
x6751:	mov [bp + 50], ax	; 3: 137 70 50

printArgument$306:	; Parameter 44 widthPtr 8
x6754:	mov ax, [bp + 16]	; 3: 139 70 16
x6757:	mov [bp + 52], ax	; 3: 137 70 52

printArgument$307:	; address £temporary1947 precision
x6760:	mov si, bp	; 2: 137 238
x6762:	add si, 18	; 3: 131 198 18

printArgument$308:	; Parameter 44 £temporary1947 10
x6765:	mov [bp + 54], si	; 3: 137 118 54

printArgument$309:	; Call 44 checkWidthAndPrecision 0
x6768:	mov word [bp + 44], printArgument$310	; 5: 199 70 44 126 26
x6773:	mov [bp + 46], bp	; 3: 137 110 46
x6776:	add bp, 44	; 3: 131 197 44
x6779:	jmp checkWidthAndPrecision	; 3: 233 240 0

printArgument$310:	; PostCall 44

printArgument$311:	; GetReturnValue £temporary1948

printArgument$312:	; Assign arg_list £temporary1948
x6782:	mov [bp + 8], bx	; 3: 137 94 8

printArgument$313:	; CallHeader 44 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$314:	; IntegralToIntegral £temporary1949 ptrValue
x6785:	mov ax, [bp + 42]	; 3: 139 70 42

printArgument$315:	; IntegralToIntegral £temporary1950 £temporary1949
x6788:	and eax, 65535	; 6: 102 37 255 255 0 0

printArgument$316:	; Parameter 44 £temporary1950 6
x6794:	mov [bp + 50], eax	; 4: 102 137 70 50

printArgument$317:	; Parameter 44 0 10
x6798:	mov word [bp + 54], 0	; 5: 199 70 54 0 0

printArgument$318:	; Parameter 44 0 12
x6803:	mov word [bp + 56], 0	; 5: 199 70 56 0 0

printArgument$319:	; Parameter 44 0 14
x6808:	mov word [bp + 58], 0	; 5: 199 70 58 0 0

printArgument$320:	; Parameter 44 10 16
x6813:	mov dword [bp + 60], 10	; 8: 102 199 70 60 10 0 0 0

printArgument$321:	; Parameter 44 0 20
x6821:	mov word [bp + 64], 0	; 5: 199 70 64 0 0

printArgument$322:	; Call 44 printUnsignedLong 0
x6826:	mov word [bp + 44], printArgument$323	; 5: 199 70 44 184 26
x6831:	mov [bp + 46], bp	; 3: 137 110 46
x6834:	add bp, 44	; 3: 131 197 44
x6837:	jmp printUnsignedLong	; 3: 233 83 7

printArgument$323:	; PostCall 44

printArgument$324:	; Goto 360
x6840:	jmp printArgument$360	; 3: 233 132 0

printArgument$325:	; BinaryAdd arg_list arg_list 2
x6843:	add word [bp + 8], 2	; 4: 131 70 8 2

printArgument$326:	; BinarySubtract £temporary1953 arg_list 2
x6847:	mov si, [bp + 8]	; 3: 139 118 8
x6850:	sub si, 2	; 3: 131 238 2

printArgument$327:	; IntegralToIntegral £temporary1954 £temporary1953

printArgument$328:	; Deref £temporary1955 -> £temporary1954 £temporary1954 0

printArgument$329:	; Assign ptrValue £temporary1955 -> £temporary1954
x6853:	mov ax, [si]	; 2: 139 4
x6855:	mov [bp + 42], ax	; 3: 137 70 42

printArgument$330:	; BinaryAdd arg_list arg_list 2
x6858:	add word [bp + 8], 2	; 4: 131 70 8 2

printArgument$331:	; BinarySubtract £temporary1957 arg_list 2
x6862:	mov si, [bp + 8]	; 3: 139 118 8
x6865:	sub si, 2	; 3: 131 238 2

printArgument$332:	; IntegralToIntegral £temporary1958 £temporary1957

printArgument$333:	; Deref £temporary1959 -> £temporary1958 £temporary1958 0

printArgument$334:	; Assign intPtr £temporary1959 -> £temporary1958
x6868:	mov ax, [si]	; 2: 139 4
x6870:	mov [bp + 32], ax	; 3: 137 70 32

printArgument$335:	; CallHeader 44 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$336:	; Parameter 44 arg_list 6
x6873:	mov ax, [bp + 8]	; 3: 139 70 8
x6876:	mov [bp + 50], ax	; 3: 137 70 50

printArgument$337:	; Parameter 44 widthPtr 8
x6879:	mov ax, [bp + 16]	; 3: 139 70 16
x6882:	mov [bp + 52], ax	; 3: 137 70 52

printArgument$338:	; address £temporary1960 precision
x6885:	mov si, bp	; 2: 137 238
x6887:	add si, 18	; 3: 131 198 18

printArgument$339:	; Parameter 44 £temporary1960 10
x6890:	mov [bp + 54], si	; 3: 137 118 54

printArgument$340:	; Call 44 checkWidthAndPrecision 0
x6893:	mov word [bp + 44], printArgument$341	; 5: 199 70 44 251 26
x6898:	mov [bp + 46], bp	; 3: 137 110 46
x6901:	add bp, 44	; 3: 131 197 44
x6904:	nop	; 1: 144
x6905:	jmp checkWidthAndPrecision	; 2: 235 115

printArgument$341:	; PostCall 44

printArgument$342:	; GetReturnValue £temporary1961

printArgument$343:	; Assign arg_list £temporary1961
x6907:	mov [bp + 8], bx	; 3: 137 94 8

printArgument$344:	; Deref £temporary1962 -> intPtr intPtr 0
x6910:	mov si, [bp + 32]	; 3: 139 118 32

printArgument$345:	; Assign £temporary1962 -> intPtr g_outChars
x6913:	mov ax, [g_outChars]	; 3: 161 55 21
x6916:	mov [si], ax	; 2: 137 4

printArgument$346:	; Goto 360
x6918:	jmp printArgument$360	; 2: 235 55

printArgument$347:	; CallHeader 44 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$348:	; Parameter 44 arg_list 6
x6920:	mov ax, [bp + 8]	; 3: 139 70 8
x6923:	mov [bp + 50], ax	; 3: 137 70 50

printArgument$349:	; Parameter 44 widthPtr 8
x6926:	mov ax, [bp + 16]	; 3: 139 70 16
x6929:	mov [bp + 52], ax	; 3: 137 70 52

printArgument$350:	; address £temporary1963 precision
x6932:	mov si, bp	; 2: 137 238
x6934:	add si, 18	; 3: 131 198 18

printArgument$351:	; Parameter 44 £temporary1963 10
x6937:	mov [bp + 54], si	; 3: 137 118 54

printArgument$352:	; Call 44 checkWidthAndPrecision 0
x6940:	mov word [bp + 44], printArgument$353	; 5: 199 70 44 42 27
x6945:	mov [bp + 46], bp	; 3: 137 110 46
x6948:	add bp, 44	; 3: 131 197 44
x6951:	nop	; 1: 144
x6952:	jmp checkWidthAndPrecision	; 2: 235 68

printArgument$353:	; PostCall 44

printArgument$354:	; GetReturnValue £temporary1964

printArgument$355:	; Assign arg_list £temporary1964
x6954:	mov [bp + 8], bx	; 3: 137 94 8

printArgument$356:	; CallHeader 44 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$357:	; Parameter 44 37 6
x6957:	mov byte [bp + 50], 37	; 4: 198 70 50 37

printArgument$358:	; Call 44 printChar 0
x6961:	mov word [bp + 44], printArgument$359	; 5: 199 70 44 63 27
x6966:	mov [bp + 46], bp	; 3: 137 110 46
x6969:	add bp, 44	; 3: 131 197 44
x6972:	jmp printChar	; 3: 233 15 1

printArgument$359:	; PostCall 44

printArgument$360:	; SetReturnValue arg_list
x6975:	mov bx, [bp + 8]	; 3: 139 94 8

printArgument$361:	; Return arg_list
x6978:	mov ax, [bp]	; 3: 139 70 0
x6981:	mov di, [bp + 4]	; 3: 139 126 4
x6984:	mov bp, [bp + 2]	; 3: 139 110 2
x6987:	jmp ax	; 2: 255 224

printArgument$362:	; FunctionEnd printArgument

container2bytes#:
x6989:	db 0, 0	; 2: 0 0

labs:	; SignedGreaterThanEqual 4 value 0
x6991:	cmp dword [bp + 6], 0	; 5: 102 131 126 6 0
x6996:	jge labs$4	; 2: 125 9

labs$1:	; UnarySubtract £temporary3215 value
x6998:	mov ebx, [bp + 6]	; 4: 102 139 94 6
x7002:	neg ebx	; 3: 102 247 219

labs$2:	; Assign £temporary3219 £temporary3215

labs$3:	; Goto 5
x7005:	jmp labs$5	; 2: 235 4

labs$4:	; Assign £temporary3219 value
x7007:	mov ebx, [bp + 6]	; 4: 102 139 94 6

labs$5:	; SetReturnValue £temporary3219

labs$6:	; Return £temporary3219
x7011:	mov ax, [bp]	; 3: 139 70 0
x7014:	mov di, [bp + 4]	; 3: 139 126 4
x7017:	mov bp, [bp + 2]	; 3: 139 110 2
x7020:	jmp ax	; 2: 255 224

labs$7:	; FunctionEnd labs

checkWidthAndPrecision:	; Equal 9 widthPtr 0
x7022:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x7026:	je checkWidthAndPrecision$9	; 2: 116 25

checkWidthAndPrecision$1:	; Deref £temporary1808 -> widthPtr widthPtr 0
x7028:	mov si, [bp + 8]	; 3: 139 118 8

checkWidthAndPrecision$2:	; NotEqual 9 £temporary1808 -> widthPtr -1
x7031:	cmp word [si], -1	; 3: 131 60 255
x7034:	jne checkWidthAndPrecision$9	; 2: 117 17

checkWidthAndPrecision$3:	; Deref £temporary1811 -> widthPtr widthPtr 0
x7036:	mov si, [bp + 8]	; 3: 139 118 8

checkWidthAndPrecision$4:	; BinaryAdd arg_list arg_list 2
x7039:	add word [bp + 6], 2	; 4: 131 70 6 2

checkWidthAndPrecision$5:	; BinarySubtract £temporary1813 arg_list 2
x7043:	mov di, [bp + 6]	; 3: 139 126 6
x7046:	sub di, 2	; 3: 131 239 2

checkWidthAndPrecision$6:	; IntegralToIntegral £temporary1814 £temporary1813

checkWidthAndPrecision$7:	; Deref £temporary1815 -> £temporary1814 £temporary1814 0

checkWidthAndPrecision$8:	; Assign £temporary1811 -> widthPtr £temporary1815 -> £temporary1814
x7049:	mov ax, [di]	; 2: 139 5
x7051:	mov [si], ax	; 2: 137 4

checkWidthAndPrecision$9:	; Equal 18 precisionPtr 0
x7053:	cmp word [bp + 10], 0	; 4: 131 126 10 0
x7057:	je checkWidthAndPrecision$18	; 2: 116 25

checkWidthAndPrecision$10:	; Deref £temporary1817 -> precisionPtr precisionPtr 0
x7059:	mov si, [bp + 10]	; 3: 139 118 10

checkWidthAndPrecision$11:	; NotEqual 18 £temporary1817 -> precisionPtr -1
x7062:	cmp word [si], -1	; 3: 131 60 255
x7065:	jne checkWidthAndPrecision$18	; 2: 117 17

checkWidthAndPrecision$12:	; Deref £temporary1820 -> precisionPtr precisionPtr 0
x7067:	mov si, [bp + 10]	; 3: 139 118 10

checkWidthAndPrecision$13:	; BinaryAdd arg_list arg_list 2
x7070:	add word [bp + 6], 2	; 4: 131 70 6 2

checkWidthAndPrecision$14:	; BinarySubtract £temporary1822 arg_list 2
x7074:	mov di, [bp + 6]	; 3: 139 126 6
x7077:	sub di, 2	; 3: 131 239 2

checkWidthAndPrecision$15:	; IntegralToIntegral £temporary1823 £temporary1822

checkWidthAndPrecision$16:	; Deref £temporary1824 -> £temporary1823 £temporary1823 0

checkWidthAndPrecision$17:	; Assign £temporary1820 -> precisionPtr £temporary1824 -> £temporary1823
x7080:	mov ax, [di]	; 2: 139 5
x7082:	mov [si], ax	; 2: 137 4

checkWidthAndPrecision$18:	; SetReturnValue arg_list
x7084:	mov bx, [bp + 6]	; 3: 139 94 6

checkWidthAndPrecision$19:	; Return arg_list
x7087:	mov ax, [bp]	; 3: 139 70 0
x7090:	mov di, [bp + 4]	; 3: 139 126 4
x7093:	mov bp, [bp + 2]	; 3: 139 110 2
x7096:	jmp ax	; 2: 255 224

checkWidthAndPrecision$20:	; FunctionEnd checkWidthAndPrecision

printLongInt:	; SignedGreaterThanEqual 8 longValue 0
x7098:	cmp dword [bp + 6], 0	; 5: 102 131 126 6 0
x7103:	jge printLongInt$8	; 2: 125 31

printLongInt$1:	; UnarySubtract £temporary1662 longValue
x7105:	mov eax, [bp + 6]	; 4: 102 139 70 6
x7109:	neg eax	; 3: 102 247 216

printLongInt$2:	; Assign longValue £temporary1662
x7112:	mov [bp + 6], eax	; 4: 102 137 70 6

printLongInt$3:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printLongInt$4:	; Parameter 14 45 6
x7116:	mov byte [bp + 20], 45	; 4: 198 70 20 45

printLongInt$5:	; Call 14 printChar 0
x7120:	mov word [bp + 14], printLongInt$6	; 5: 199 70 14 222 27
x7125:	mov [bp + 16], bp	; 3: 137 110 16
x7128:	add bp, 14	; 3: 131 197 14
x7131:	nop	; 1: 144
x7132:	jmp printChar	; 2: 235 112

printLongInt$6:	; PostCall 14

printLongInt$7:	; Goto 19
x7134:	jmp printLongInt$19	; 2: 235 50

printLongInt$8:	; Equal 14 space 0
x7136:	cmp word [bp + 12], 0	; 4: 131 126 12 0
x7140:	je printLongInt$14	; 2: 116 20

printLongInt$9:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printLongInt$10:	; Parameter 14 32 6
x7142:	mov byte [bp + 20], 32	; 4: 198 70 20 32

printLongInt$11:	; Call 14 printChar 0
x7146:	mov word [bp + 14], printLongInt$12	; 5: 199 70 14 248 27
x7151:	mov [bp + 16], bp	; 3: 137 110 16
x7154:	add bp, 14	; 3: 131 197 14
x7157:	nop	; 1: 144
x7158:	jmp printChar	; 2: 235 86

printLongInt$12:	; PostCall 14

printLongInt$13:	; Goto 19
x7160:	jmp printLongInt$19	; 2: 235 24

printLongInt$14:	; Equal 19 plus 0
x7162:	cmp word [bp + 10], 0	; 4: 131 126 10 0
x7166:	je printLongInt$19	; 2: 116 18

printLongInt$15:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printLongInt$16:	; Parameter 14 43 6
x7168:	mov byte [bp + 20], 43	; 4: 198 70 20 43

printLongInt$17:	; Call 14 printChar 0
x7172:	mov word [bp + 14], printLongInt$18	; 5: 199 70 14 18 28
x7177:	mov [bp + 16], bp	; 3: 137 110 16
x7180:	add bp, 14	; 3: 131 197 14
x7183:	nop	; 1: 144
x7184:	jmp printChar	; 2: 235 60

printLongInt$18:	; PostCall 14

printLongInt$19:	; NotEqual 25 longValue 0
x7186:	cmp dword [bp + 6], 0	; 5: 102 131 126 6 0
x7191:	jne printLongInt$25	; 2: 117 20

printLongInt$20:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printLongInt$21:	; Parameter 14 48 6
x7193:	mov byte [bp + 20], 48	; 4: 198 70 20 48

printLongInt$22:	; Call 14 printChar 0
x7197:	mov word [bp + 14], printLongInt$23	; 5: 199 70 14 43 28
x7202:	mov [bp + 16], bp	; 3: 137 110 16
x7205:	add bp, 14	; 3: 131 197 14
x7208:	nop	; 1: 144
x7209:	jmp printChar	; 2: 235 35

printLongInt$23:	; PostCall 14

printLongInt$24:	; Goto 29
x7211:	jmp printLongInt$29	; 2: 235 22

printLongInt$25:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printLongInt$26:	; Parameter 14 longValue 6
x7213:	mov eax, [bp + 6]	; 4: 102 139 70 6
x7217:	mov [bp + 20], eax	; 4: 102 137 70 20

printLongInt$27:	; Call 14 printLongIntRec 0
x7221:	mov word [bp + 14], printLongInt$28	; 5: 199 70 14 67 28
x7226:	mov [bp + 16], bp	; 3: 137 110 16
x7229:	add bp, 14	; 3: 131 197 14
x7232:	nop	; 1: 144
x7233:	jmp printLongIntRec	; 2: 235 101

printLongInt$28:	; PostCall 14

printLongInt$29:	; Return 0
x7235:	mov ax, [bp]	; 3: 139 70 0
x7238:	mov di, [bp + 4]	; 3: 139 126 4
x7241:	mov bp, [bp + 2]	; 3: 139 110 2
x7244:	jmp ax	; 2: 255 224

printLongInt$30:	; FunctionEnd printLongInt

printChar:	; Case 5 g_outStatus 0
x7246:	mov ax, [g_outStatus]	; 3: 161 219 15
x7249:	cmp ax, 0	; 3: 131 248 0
x7252:	je printChar$5	; 2: 116 12

printChar$1:	; Case 16 g_outStatus 1
x7254:	cmp ax, 1	; 3: 131 248 1
x7257:	je printChar$16	; 2: 116 37

printChar$2:	; Case 24 g_outStatus 2
x7259:	cmp ax, 2	; 3: 131 248 2
x7262:	je printChar$24	; 2: 116 57

printChar$3:	; CaseEnd g_outStatus

printChar$4:	; Goto 25
x7264:	jmp printChar$25	; 2: 235 59

printChar$5:	; IntegralToIntegral £temporary1601 g_outDevice
x7266:	mov ax, [g_outDevice]	; 3: 161 221 15

printChar$6:	; Assign stream £temporary1601
x7269:	mov [bp + 11], ax	; 3: 137 70 11

printChar$7:	; AssignRegister ah 64
x7272:	mov ah, 64	; 2: 180 64

printChar$8:	; Deref £temporary1604 -> stream stream 2
x7274:	mov si, [bp + 11]	; 3: 139 118 11

printChar$9:	; AssignRegister bx £temporary1604 -> stream
x7277:	mov bx, [si + 2]	; 3: 139 92 2

printChar$10:	; AssignRegister cx 1
x7280:	mov cx, 1	; 3: 185 1 0

printChar$11:	; address £temporary1607 c
x7283:	mov dx, bp	; 2: 137 234
x7285:	add dx, 6	; 3: 131 194 6

printChar$12:	; AssignRegister dx £temporary1607

printChar$13:	; Interrupt 33
x7288:	int 33	; 2: 205 33

printChar$14:	; Increment g_outChars
x7290:	inc word [g_outChars]	; 4: 255 6 55 21

printChar$15:	; Goto 25
x7294:	jmp printChar$25	; 2: 235 29

printChar$16:	; IntegralToIntegral £temporary1609 g_outDevice
x7296:	mov ax, [g_outDevice]	; 3: 161 221 15

printChar$17:	; Assign outString £temporary1609
x7299:	mov [bp + 9], ax	; 3: 137 70 9

printChar$18:	; Assign £temporary1610 g_outChars
x7302:	mov ax, [g_outChars]	; 3: 161 55 21

printChar$19:	; Increment g_outChars
x7305:	inc word [g_outChars]	; 4: 255 6 55 21

printChar$20:	; BinaryAdd £temporary1613 outString £temporary1610
x7309:	mov si, [bp + 9]	; 3: 139 118 9
x7312:	add si, ax	; 2: 1 198

printChar$21:	; Deref £temporary1612 -> £temporary1613 £temporary1613 0

printChar$22:	; Assign £temporary1612 -> £temporary1613 c
x7314:	mov al, [bp + 6]	; 3: 138 70 6
x7317:	mov [si], al	; 2: 136 4

printChar$23:	; Goto 25
x7319:	jmp printChar$25	; 2: 235 4

printChar$24:	; Increment g_outChars
x7321:	inc word [g_outChars]	; 4: 255 6 55 21

printChar$25:	; Return 0
x7325:	mov ax, [bp]	; 3: 139 70 0
x7328:	mov di, [bp + 4]	; 3: 139 126 4
x7331:	mov bp, [bp + 2]	; 3: 139 110 2
x7334:	jmp ax	; 2: 255 224

printChar$26:	; FunctionEnd printChar

printLongIntRec:	; Equal 15 longValue 0
x7336:	cmp dword [bp + 6], 0	; 5: 102 131 126 6 0
x7341:	je printLongIntRec$15	; 2: 116 88

printLongIntRec$1:	; SignedModulo £temporary1652 longValue 10
x7343:	mov eax, [bp + 6]	; 4: 102 139 70 6
x7347:	xor edx, edx	; 3: 102 49 210
x7350:	idiv dword [@3780$int4$10#]	; 5: 102 247 62 18 29

printLongIntRec$2:	; IntegralToIntegral £temporary1653 £temporary1652
x7355:	cmp edx, 0	; 4: 102 131 250 0
x7359:	jge printLongIntRec$3	; 2: 125 5
x7361:	neg edx	; 3: 102 247 218
x7364:	neg dx	; 2: 247 218

printLongIntRec$3:	; Assign digit £temporary1653
x7366:	mov [bp + 10], dx	; 3: 137 86 10

printLongIntRec$4:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printLongIntRec$5:	; SignedDivide £temporary1654 longValue 10
x7369:	mov eax, [bp + 6]	; 4: 102 139 70 6
x7373:	xor edx, edx	; 3: 102 49 210
x7376:	idiv dword [@3785$int4$10#]	; 5: 102 247 62 22 29

printLongIntRec$6:	; Parameter 12 £temporary1654 6
x7381:	mov [bp + 18], eax	; 4: 102 137 70 18

printLongIntRec$7:	; Call 12 printLongIntRec 0
x7385:	mov word [bp + 12], printLongIntRec$8	; 5: 199 70 12 231 28
x7390:	mov [bp + 14], bp	; 3: 137 110 14
x7393:	add bp, 12	; 3: 131 197 12
x7396:	nop	; 1: 144
x7397:	jmp printLongIntRec	; 2: 235 193

printLongIntRec$8:	; PostCall 12

printLongIntRec$9:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printLongIntRec$10:	; BinaryAdd £temporary1656 digit 48
x7399:	mov ax, [bp + 10]	; 3: 139 70 10
x7402:	add ax, 48	; 3: 131 192 48

printLongIntRec$11:	; IntegralToIntegral £temporary1657 £temporary1656
x7405:	cmp ax, 0	; 3: 131 248 0
x7408:	jge printLongIntRec$12	; 2: 125 4
x7410:	neg ax	; 2: 247 216
x7412:	neg al	; 2: 246 216

printLongIntRec$12:	; Parameter 12 £temporary1657 6
x7414:	mov [bp + 18], al	; 3: 136 70 18

printLongIntRec$13:	; Call 12 printChar 0
x7417:	mov word [bp + 12], printLongIntRec$14	; 5: 199 70 12 7 29
x7422:	mov [bp + 14], bp	; 3: 137 110 14
x7425:	add bp, 12	; 3: 131 197 12
x7428:	jmp printChar	; 3: 233 71 255

printLongIntRec$14:	; PostCall 12

printLongIntRec$15:	; Return 0
x7431:	mov ax, [bp]	; 3: 139 70 0
x7434:	mov di, [bp + 4]	; 3: 139 126 4
x7437:	mov bp, [bp + 2]	; 3: 139 110 2
x7440:	jmp ax	; 2: 255 224

printLongIntRec$16:	; FunctionEnd printLongIntRec

@3780$int4$10#:
x7442:	dd 10	; 4: 10 0 0 0

@3785$int4$10#:
x7446:	dd 10	; 4: 10 0 0 0

printString:	; Equal 29 s 0
x7450:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x7454:	je printString$29	; 2: 116 115

printString$1:	; NotEqual 14 precision 0
x7456:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x7460:	jne printString$14	; 2: 117 48

printString$2:	; Assign index 0
x7462:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

printString$3:	; BinaryAdd £temporary1620 s index
x7467:	mov si, [bp + 6]	; 3: 139 118 6
x7470:	add si, [bp + 10]	; 3: 3 118 10

printString$4:	; Deref £temporary1619 -> £temporary1620 £temporary1620 0

printString$5:	; Equal 53 £temporary1619 -> £temporary1620 0
x7473:	cmp byte [si], 0	; 3: 128 60 0
x7476:	je printString$53	; 4: 15 132 199 0

printString$6:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printString$7:	; BinaryAdd £temporary1624 s index
x7480:	mov si, [bp + 6]	; 3: 139 118 6
x7483:	add si, [bp + 10]	; 3: 3 118 10

printString$8:	; Deref £temporary1623 -> £temporary1624 £temporary1624 0

printString$9:	; Parameter 12 £temporary1623 -> £temporary1624 6
x7486:	mov al, [si]	; 2: 138 4
x7488:	mov [bp + 18], al	; 3: 136 70 18

printString$10:	; Call 12 printChar 0
x7491:	mov word [bp + 12], printString$11	; 5: 199 70 12 81 29
x7496:	mov [bp + 14], bp	; 3: 137 110 14
x7499:	add bp, 12	; 3: 131 197 12
x7502:	jmp printChar	; 3: 233 253 254

printString$11:	; PostCall 12

printString$12:	; Increment index
x7505:	inc word [bp + 10]	; 3: 255 70 10

printString$13:	; Goto 3
x7508:	jmp printString$3	; 2: 235 213

printString$14:	; Assign index 0
x7510:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

printString$15:	; Assign £temporary1626 precision
x7515:	mov ax, [bp + 8]	; 3: 139 70 8

printString$16:	; Decrement precision
x7518:	dec word [bp + 8]	; 3: 255 78 8

printString$17:	; SignedLessThanEqual 53 £temporary1626 0
x7521:	cmp ax, 0	; 3: 131 248 0
x7524:	jle printString$53	; 4: 15 142 151 0

printString$18:	; BinaryAdd £temporary1630 s index
x7528:	mov si, [bp + 6]	; 3: 139 118 6
x7531:	add si, [bp + 10]	; 3: 3 118 10

printString$19:	; Deref £temporary1629 -> £temporary1630 £temporary1630 0

printString$20:	; Equal 53 £temporary1629 -> £temporary1630 0
x7534:	cmp byte [si], 0	; 3: 128 60 0
x7537:	je printString$53	; 4: 15 132 138 0

printString$21:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printString$22:	; BinaryAdd £temporary1635 s index
x7541:	mov si, [bp + 6]	; 3: 139 118 6
x7544:	add si, [bp + 10]	; 3: 3 118 10

printString$23:	; Deref £temporary1634 -> £temporary1635 £temporary1635 0

printString$24:	; Parameter 12 £temporary1634 -> £temporary1635 6
x7547:	mov al, [si]	; 2: 138 4
x7549:	mov [bp + 18], al	; 3: 136 70 18

printString$25:	; Call 12 printChar 0
x7552:	mov word [bp + 12], printString$26	; 5: 199 70 12 142 29
x7557:	mov [bp + 14], bp	; 3: 137 110 14
x7560:	add bp, 12	; 3: 131 197 12
x7563:	jmp printChar	; 3: 233 192 254

printString$26:	; PostCall 12

printString$27:	; Increment index
x7566:	inc word [bp + 10]	; 3: 255 70 10

printString$28:	; Goto 15
x7569:	jmp printString$15	; 2: 235 200

printString$29:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printString$30:	; Parameter 10 60 6
x7571:	mov byte [bp + 16], 60	; 4: 198 70 16 60

printString$31:	; Call 10 printChar 0
x7575:	mov word [bp + 10], printString$32	; 5: 199 70 10 165 29
x7580:	mov [bp + 12], bp	; 3: 137 110 12
x7583:	add bp, 10	; 3: 131 197 10
x7586:	jmp printChar	; 3: 233 169 254

printString$32:	; PostCall 10

printString$33:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printString$34:	; Parameter 10 78 6
x7589:	mov byte [bp + 16], 78	; 4: 198 70 16 78

printString$35:	; Call 10 printChar 0
x7593:	mov word [bp + 10], printString$36	; 5: 199 70 10 183 29
x7598:	mov [bp + 12], bp	; 3: 137 110 12
x7601:	add bp, 10	; 3: 131 197 10
x7604:	jmp printChar	; 3: 233 151 254

printString$36:	; PostCall 10

printString$37:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printString$38:	; Parameter 10 85 6
x7607:	mov byte [bp + 16], 85	; 4: 198 70 16 85

printString$39:	; Call 10 printChar 0
x7611:	mov word [bp + 10], printString$40	; 5: 199 70 10 201 29
x7616:	mov [bp + 12], bp	; 3: 137 110 12
x7619:	add bp, 10	; 3: 131 197 10
x7622:	jmp printChar	; 3: 233 133 254

printString$40:	; PostCall 10

printString$41:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printString$42:	; Parameter 10 76 6
x7625:	mov byte [bp + 16], 76	; 4: 198 70 16 76

printString$43:	; Call 10 printChar 0
x7629:	mov word [bp + 10], printString$44	; 5: 199 70 10 219 29
x7634:	mov [bp + 12], bp	; 3: 137 110 12
x7637:	add bp, 10	; 3: 131 197 10
x7640:	jmp printChar	; 3: 233 115 254

printString$44:	; PostCall 10

printString$45:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printString$46:	; Parameter 10 76 6
x7643:	mov byte [bp + 16], 76	; 4: 198 70 16 76

printString$47:	; Call 10 printChar 0
x7647:	mov word [bp + 10], printString$48	; 5: 199 70 10 237 29
x7652:	mov [bp + 12], bp	; 3: 137 110 12
x7655:	add bp, 10	; 3: 131 197 10
x7658:	jmp printChar	; 3: 233 97 254

printString$48:	; PostCall 10

printString$49:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printString$50:	; Parameter 10 62 6
x7661:	mov byte [bp + 16], 62	; 4: 198 70 16 62

printString$51:	; Call 10 printChar 0
x7665:	mov word [bp + 10], printString$52	; 5: 199 70 10 255 29
x7670:	mov [bp + 12], bp	; 3: 137 110 12
x7673:	add bp, 10	; 3: 131 197 10
x7676:	jmp printChar	; 3: 233 79 254

printString$52:	; PostCall 10

printString$53:	; Return 0
x7679:	mov ax, [bp]	; 3: 139 70 0
x7682:	mov di, [bp + 4]	; 3: 139 126 4
x7685:	mov bp, [bp + 2]	; 3: 139 110 2
x7688:	jmp ax	; 2: 255 224

printString$54:	; FunctionEnd printString

isupper:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

isupper$1:	; Call 8 localeconv 0
x7690:	mov word [bp + 8], isupper$2	; 5: 199 70 8 24 30
x7695:	mov [bp + 10], bp	; 3: 137 110 10
x7698:	add bp, 8	; 3: 131 197 8
x7701:	nop	; 1: 144
x7702:	jmp localeconv	; 2: 235 93

isupper$2:	; PostCall 8

isupper$3:	; GetReturnValue £temporary172

isupper$4:	; Assign localeConvPtr £temporary172
x7704:	mov [bp + 8], bx	; 3: 137 94 8

isupper$5:	; Equal 19 localeConvPtr 0
x7707:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x7711:	je isupper$19	; 2: 116 53

isupper$6:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

isupper$7:	; Deref £temporary174 -> localeConvPtr localeConvPtr 14
x7713:	mov si, [bp + 8]	; 3: 139 118 8

isupper$8:	; Parameter 10 £temporary174 -> localeConvPtr 6
x7716:	mov ax, [si + 14]	; 3: 139 68 14
x7719:	mov [bp + 16], ax	; 3: 137 70 16

isupper$9:	; Parameter 10 c 8
x7722:	mov ax, [bp + 6]	; 3: 139 70 6
x7725:	mov [bp + 18], ax	; 3: 137 70 18

isupper$10:	; Call 10 strchr 0
x7728:	mov word [bp + 10], isupper$11	; 5: 199 70 10 62 30
x7733:	mov [bp + 12], bp	; 3: 137 110 12
x7736:	add bp, 10	; 3: 131 197 10
x7739:	jmp strchr	; 3: 233 125 3

isupper$11:	; PostCall 10

isupper$12:	; GetReturnValue £temporary175

isupper$13:	; Equal 16 £temporary175 0
x7742:	cmp bx, 0	; 3: 131 251 0
x7745:	je isupper$16	; 2: 116 5

isupper$14:	; Assign £temporary177 1
x7747:	mov bx, 1	; 3: 187 1 0

isupper$15:	; Goto 17
x7750:	jmp isupper$17	; 2: 235 3

isupper$16:	; Assign £temporary177 0
x7752:	mov bx, 0	; 3: 187 0 0

isupper$17:	; SetReturnValue £temporary177

isupper$18:	; Return £temporary177
x7755:	mov ax, [bp]	; 3: 139 70 0
x7758:	mov di, [bp + 4]	; 3: 139 126 4
x7761:	mov bp, [bp + 2]	; 3: 139 110 2
x7764:	jmp ax	; 2: 255 224

isupper$19:	; SignedLessThan 23 c 65
x7766:	cmp word [bp + 6], 65	; 4: 131 126 6 65
x7770:	jl isupper$23	; 2: 124 11

isupper$20:	; SignedGreaterThan 23 c 90
x7772:	cmp word [bp + 6], 90	; 4: 131 126 6 90
x7776:	jg isupper$23	; 2: 127 5

isupper$21:	; Assign £temporary181 1
x7778:	mov bx, 1	; 3: 187 1 0

isupper$22:	; Goto 24
x7781:	jmp isupper$24	; 2: 235 3

isupper$23:	; Assign £temporary181 0
x7783:	mov bx, 0	; 3: 187 0 0

isupper$24:	; SetReturnValue £temporary181

isupper$25:	; Return £temporary181
x7786:	mov ax, [bp]	; 3: 139 70 0
x7789:	mov di, [bp + 4]	; 3: 139 126 4
x7792:	mov bp, [bp + 2]	; 3: 139 110 2
x7795:	jmp ax	; 2: 255 224

isupper$26:	; FunctionEnd isupper

localeconv:	; Equal 4 g_currStructPtr 0
x7797:	cmp word [@771$g_currStructPtr], 0	; 5: 131 62 147 30 0
x7802:	je localeconv$4	; 2: 116 9

localeconv$1:	; Deref £temporary305 -> g_currStructPtr g_currStructPtr 2
x7804:	mov si, [@771$g_currStructPtr]	; 4: 139 54 147 30

localeconv$2:	; Assign £temporary309 £temporary305 -> g_currStructPtr
x7808:	mov bx, [si + 2]	; 3: 139 92 2

localeconv$3:	; Goto 5
x7811:	jmp localeconv$5	; 2: 235 3

localeconv$4:	; Assign £temporary309 0
x7813:	mov bx, 0	; 3: 187 0 0

localeconv$5:	; SetReturnValue £temporary309

localeconv$6:	; Return £temporary309
x7816:	mov ax, [bp]	; 3: 139 70 0
x7819:	mov di, [bp + 4]	; 3: 139 126 4
x7822:	mov bp, [bp + 2]	; 3: 139 110 2
x7825:	jmp ax	; 2: 255 224

localeconv$7:	; FunctionEnd localeconv

@771$g_currStructPtr:
x7827:	dw @762$g_sArray	; 2: 149 30

@762$g_sArray:
x7829:	dw @756$string_# ; 2: 161 30
x7831:	dw @751$en_US_utf8	; 2: 162 30
x7833:	dw @758$string_C# ; 2: 182 33
x7835:	dw @751$en_US_utf8	; 2: 162 30
x7837:	dw @760$string_US# ; 2: 184 33
x7839:	dw @751$en_US_utf8	; 2: 162 30

@756$string_#:
x7841:	db 0	; 1: 0

@751$en_US_utf8:
x7842:	dw 1	; 2: 1 0
x7844:	dw 1	; 2: 1 0
x7846:	dw @692$enShortDayList ; 2: 180 30
x7848:	dw @700$enLongDayList ; 2: 222 30
x7850:	dw @713$enShortMonthList ; 2: 37 31
x7852:	dw @726$enLongMonthList ; 2: 109 31
x7854:	dw @749$string_abcdefghijklmnopqrstuvwxyz# ; 2: 219 31
x7856:	dw @750$string_ABCDEFGHIJKLMNOPQRSTUVWXYZ# ; 2: 246 31
x7858:	dw enMessageList ; 2: 17 32

@692$enShortDayList:
x7860:	dw @685$string_Sun# ; 2: 194 30
x7862:	dw @686$string_Mon# ; 2: 198 30
x7864:	dw @687$string_Tue# ; 2: 202 30
x7866:	dw @688$string_Wed# ; 2: 206 30
x7868:	dw @689$string_Thu# ; 2: 210 30
x7870:	dw @690$string_Fri# ; 2: 214 30
x7872:	dw @691$string_Sat# ; 2: 218 30

@685$string_Sun#:
x7874:	db "Sun", 0	; 4: 83 117 110 0

@686$string_Mon#:
x7878:	db "Mon", 0	; 4: 77 111 110 0

@687$string_Tue#:
x7882:	db "Tue", 0	; 4: 84 117 101 0

@688$string_Wed#:
x7886:	db "Wed", 0	; 4: 87 101 100 0

@689$string_Thu#:
x7890:	db "Thu", 0	; 4: 84 104 117 0

@690$string_Fri#:
x7894:	db "Fri", 0	; 4: 70 114 105 0

@691$string_Sat#:
x7898:	db "Sat", 0	; 4: 83 97 116 0

@700$enLongDayList:
x7902:	dw @693$string_Sunday# ; 2: 236 30
x7904:	dw @694$string_Monday# ; 2: 243 30
x7906:	dw @695$string_Tuesday# ; 2: 250 30
x7908:	dw @696$string_Wednesday# ; 2: 2 31
x7910:	dw @697$string_Thursday# ; 2: 12 31
x7912:	dw @698$string_Friday# ; 2: 21 31
x7914:	dw @699$string_Saturday# ; 2: 28 31

@693$string_Sunday#:
x7916:	db "Sunday", 0	; 7: 83 117 110 100 97 121 0

@694$string_Monday#:
x7923:	db "Monday", 0	; 7: 77 111 110 100 97 121 0

@695$string_Tuesday#:
x7930:	db "Tuesday", 0	; 8: 84 117 101 115 100 97 121 0

@696$string_Wednesday#:
x7938:	db "Wednesday", 0	; 10: 87 101 100 110 101 115 100 97 121 0

@697$string_Thursday#:
x7948:	db "Thursday", 0	; 9: 84 104 117 114 115 100 97 121 0

@698$string_Friday#:
x7957:	db "Friday", 0	; 7: 70 114 105 100 97 121 0

@699$string_Saturday#:
x7964:	db "Saturday", 0	; 9: 83 97 116 117 114 100 97 121 0

@713$enShortMonthList:
x7973:	dw @701$string_Jan# ; 2: 61 31
x7975:	dw @702$string_Feb# ; 2: 65 31
x7977:	dw @703$string_Mar# ; 2: 69 31
x7979:	dw @704$string_Apr# ; 2: 73 31
x7981:	dw @705$string_May# ; 2: 77 31
x7983:	dw @706$string_Jun# ; 2: 81 31
x7985:	dw @707$string_Jul# ; 2: 85 31
x7987:	dw @708$string_Aug# ; 2: 89 31
x7989:	dw @709$string_Sep# ; 2: 93 31
x7991:	dw @710$string_Oct# ; 2: 97 31
x7993:	dw @711$string_Nov# ; 2: 101 31
x7995:	dw @712$string_Dec# ; 2: 105 31

@701$string_Jan#:
x7997:	db "Jan", 0	; 4: 74 97 110 0

@702$string_Feb#:
x8001:	db "Feb", 0	; 4: 70 101 98 0

@703$string_Mar#:
x8005:	db "Mar", 0	; 4: 77 97 114 0

@704$string_Apr#:
x8009:	db "Apr", 0	; 4: 65 112 114 0

@705$string_May#:
x8013:	db "May", 0	; 4: 77 97 121 0

@706$string_Jun#:
x8017:	db "Jun", 0	; 4: 74 117 110 0

@707$string_Jul#:
x8021:	db "Jul", 0	; 4: 74 117 108 0

@708$string_Aug#:
x8025:	db "Aug", 0	; 4: 65 117 103 0

@709$string_Sep#:
x8029:	db "Sep", 0	; 4: 83 101 112 0

@710$string_Oct#:
x8033:	db "Oct", 0	; 4: 79 99 116 0

@711$string_Nov#:
x8037:	db "Nov", 0	; 4: 78 111 118 0

@712$string_Dec#:
x8041:	db "Dec", 0	; 4: 68 101 99 0

@726$enLongMonthList:
x8045:	dw @714$string_January# ; 2: 133 31
x8047:	dw @715$string_February# ; 2: 141 31
x8049:	dw @716$string_March# ; 2: 150 31
x8051:	dw @717$string_April# ; 2: 156 31
x8053:	dw @718$string_May# ; 2: 162 31
x8055:	dw @719$string_June# ; 2: 166 31
x8057:	dw @720$string_July# ; 2: 171 31
x8059:	dw @721$string_August# ; 2: 176 31
x8061:	dw @722$string_September# ; 2: 183 31
x8063:	dw @723$string_October# ; 2: 193 31
x8065:	dw @724$string_November# ; 2: 201 31
x8067:	dw @725$string_December# ; 2: 210 31

@714$string_January#:
x8069:	db "January", 0	; 8: 74 97 110 117 97 114 121 0

@715$string_February#:
x8077:	db "February", 0	; 9: 70 101 98 114 117 97 114 121 0

@716$string_March#:
x8086:	db "March", 0	; 6: 77 97 114 99 104 0

@717$string_April#:
x8092:	db "April", 0	; 6: 65 112 114 105 108 0

@718$string_May#:
x8098:	db "May", 0	; 4: 77 97 121 0

@719$string_June#:
x8102:	db "June", 0	; 5: 74 117 110 101 0

@720$string_July#:
x8107:	db "July", 0	; 5: 74 117 108 121 0

@721$string_August#:
x8112:	db "August", 0	; 7: 65 117 103 117 115 116 0

@722$string_September#:
x8119:	db "September", 0	; 10: 83 101 112 116 101 109 98 101 114 0

@723$string_October#:
x8129:	db "October", 0	; 8: 79 99 116 111 98 101 114 0

@724$string_November#:
x8137:	db "November", 0	; 9: 78 111 118 101 109 98 101 114 0

@725$string_December#:
x8146:	db "December", 0	; 9: 68 101 99 101 109 98 101 114 0

@749$string_abcdefghijklmnopqrstuvwxyz#:
x8155:	db "abcdefghijklmnopqrstuvwxyz", 0	; 27: 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 0

@750$string_ABCDEFGHIJKLMNOPQRSTUVWXYZ#:
x8182:	db "ABCDEFGHIJKLMNOPQRSTUVWXYZ", 0	; 27: 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 0

enMessageList:
x8209:	dw @727$string_no20error# ; 2: 57 32
x8211:	dw @728$string_function20number20invalid# ; 2: 66 32
x8213:	dw @729$string_file20not20found# ; 2: 90 32
x8215:	dw @730$string_path20not20found# ; 2: 105 32
x8217:	dw @731$string_no20handle20available# ; 2: 120 32
x8219:	dw @732$string_access20denied# ; 2: 140 32
x8221:	dw @733$string_out20of20domain# ; 2: 154 32
x8223:	dw @734$string_out20of20range# ; 2: 168 32
x8225:	dw @735$string_invalid20multibyte20sequence# ; 2: 181 32
x8227:	dw @736$string_error20while20opening# ; 2: 208 32
x8229:	dw @737$string_error20while20flushing# ; 2: 228 32
x8231:	dw @738$string_error20while20closing# ; 2: 249 32
x8233:	dw @739$string_open20mode20invalid# ; 2: 13 33
x8235:	dw @740$string_error20while20writing# ; 2: 31 33
x8237:	dw @741$string_error20while20reading# ; 2: 51 33
x8239:	dw @742$string_error20while20seeking# ; 2: 71 33
x8241:	dw @743$string_error20while20telling# ; 2: 91 33
x8243:	dw @744$string_error20while20sizing# ; 2: 111 33
x8245:	dw @745$string_error20while20removing20file# ; 2: 130 33
x8247:	dw @746$string_error20while20renaming20file# ; 2: 156 33

@727$string_no20error#:
x8249:	db "no error", 0	; 9: 110 111 32 101 114 114 111 114 0

@728$string_function20number20invalid#:
x8258:	db "function number invalid", 0	; 24: 102 117 110 99 116 105 111 110 32 110 117 109 98 101 114 32 105 110 118 97 108 105 100 0

@729$string_file20not20found#:
x8282:	db "file not found", 0	; 15: 102 105 108 101 32 110 111 116 32 102 111 117 110 100 0

@730$string_path20not20found#:
x8297:	db "path not found", 0	; 15: 112 97 116 104 32 110 111 116 32 102 111 117 110 100 0

@731$string_no20handle20available#:
x8312:	db "no handle available", 0	; 20: 110 111 32 104 97 110 100 108 101 32 97 118 97 105 108 97 98 108 101 0

@732$string_access20denied#:
x8332:	db "access denied", 0	; 14: 97 99 99 101 115 115 32 100 101 110 105 101 100 0

@733$string_out20of20domain#:
x8346:	db "out of domain", 0	; 14: 111 117 116 32 111 102 32 100 111 109 97 105 110 0

@734$string_out20of20range#:
x8360:	db "out of range", 0	; 13: 111 117 116 32 111 102 32 114 97 110 103 101 0

@735$string_invalid20multibyte20sequence#:
x8373:	db "invalid multibyte sequence", 0	; 27: 105 110 118 97 108 105 100 32 109 117 108 116 105 98 121 116 101 32 115 101 113 117 101 110 99 101 0

@736$string_error20while20opening#:
x8400:	db "error while opening", 0	; 20: 101 114 114 111 114 32 119 104 105 108 101 32 111 112 101 110 105 110 103 0

@737$string_error20while20flushing#:
x8420:	db "error while flushing", 0	; 21: 101 114 114 111 114 32 119 104 105 108 101 32 102 108 117 115 104 105 110 103 0

@738$string_error20while20closing#:
x8441:	db "error while closing", 0	; 20: 101 114 114 111 114 32 119 104 105 108 101 32 99 108 111 115 105 110 103 0

@739$string_open20mode20invalid#:
x8461:	db "open mode invalid", 0	; 18: 111 112 101 110 32 109 111 100 101 32 105 110 118 97 108 105 100 0

@740$string_error20while20writing#:
x8479:	db "error while writing", 0	; 20: 101 114 114 111 114 32 119 104 105 108 101 32 119 114 105 116 105 110 103 0

@741$string_error20while20reading#:
x8499:	db "error while reading", 0	; 20: 101 114 114 111 114 32 119 104 105 108 101 32 114 101 97 100 105 110 103 0

@742$string_error20while20seeking#:
x8519:	db "error while seeking", 0	; 20: 101 114 114 111 114 32 119 104 105 108 101 32 115 101 101 107 105 110 103 0

@743$string_error20while20telling#:
x8539:	db "error while telling", 0	; 20: 101 114 114 111 114 32 119 104 105 108 101 32 116 101 108 108 105 110 103 0

@744$string_error20while20sizing#:
x8559:	db "error while sizing", 0	; 19: 101 114 114 111 114 32 119 104 105 108 101 32 115 105 122 105 110 103 0

@745$string_error20while20removing20file#:
x8578:	db "error while removing file", 0	; 26: 101 114 114 111 114 32 119 104 105 108 101 32 114 101 109 111 118 105 110 103 32 102 105 108 101 0

@746$string_error20while20renaming20file#:
x8604:	db "error while renaming file", 0	; 26: 101 114 114 111 114 32 119 104 105 108 101 32 114 101 110 97 109 105 110 103 32 102 105 108 101 0

@758$string_C#:
x8630:	db "C", 0	; 2: 67 0

@760$string_US#:
x8632:	db "US", 0	; 3: 85 83 0

strchr:	; IntegralToIntegral £temporary3791 i
x8635:	mov ax, [bp + 8]	; 3: 139 70 8
x8638:	cmp ax, 0	; 3: 131 248 0
x8641:	jge strchr$1	; 2: 125 4
x8643:	neg ax	; 2: 247 216
x8645:	neg al	; 2: 246 216

strchr$1:	; Assign c £temporary3791
x8647:	mov [bp + 12], al	; 3: 136 70 12

strchr$2:	; Assign index 0
x8650:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

strchr$3:	; BinaryAdd £temporary3793 text index
x8655:	mov si, [bp + 6]	; 3: 139 118 6
x8658:	add si, [bp + 10]	; 3: 3 118 10

strchr$4:	; Deref £temporary3792 -> £temporary3793 £temporary3793 0

strchr$5:	; Equal 16 £temporary3792 -> £temporary3793 0
x8661:	cmp byte [si], 0	; 3: 128 60 0
x8664:	je strchr$16	; 2: 116 35

strchr$6:	; BinaryAdd £temporary3797 text index
x8666:	mov si, [bp + 6]	; 3: 139 118 6
x8669:	add si, [bp + 10]	; 3: 3 118 10

strchr$7:	; Deref £temporary3796 -> £temporary3797 £temporary3797 0

strchr$8:	; NotEqual 14 £temporary3796 -> £temporary3797 c
x8672:	mov al, [bp + 12]	; 3: 138 70 12
x8675:	cmp [si], al	; 2: 56 4
x8677:	jne strchr$14	; 2: 117 17

strchr$9:	; BinaryAdd £temporary3800 text index
x8679:	mov bx, [bp + 6]	; 3: 139 94 6
x8682:	add bx, [bp + 10]	; 3: 3 94 10

strchr$10:	; Deref £temporary3799 -> £temporary3800 £temporary3800 0

strchr$11:	; address £temporary3801 £temporary3799 -> £temporary3800

strchr$12:	; SetReturnValue £temporary3801

strchr$13:	; Return £temporary3801
x8685:	mov ax, [bp]	; 3: 139 70 0
x8688:	mov di, [bp + 4]	; 3: 139 126 4
x8691:	mov bp, [bp + 2]	; 3: 139 110 2
x8694:	jmp ax	; 2: 255 224

strchr$14:	; Increment index
x8696:	inc word [bp + 10]	; 3: 255 70 10

strchr$15:	; Goto 3
x8699:	jmp strchr$3	; 2: 235 210

strchr$16:	; SetReturnValue 0
x8701:	mov bx, 0	; 3: 187 0 0

strchr$17:	; Return 0
x8704:	mov ax, [bp]	; 3: 139 70 0
x8707:	mov di, [bp + 4]	; 3: 139 126 4
x8710:	mov bp, [bp + 2]	; 3: 139 110 2
x8713:	jmp ax	; 2: 255 224

strchr$18:	; FunctionEnd strchr

printUnsignedLong:	; Equal 5 plus 0
x8715:	cmp word [bp + 10], 0	; 4: 131 126 10 0
x8719:	je printUnsignedLong$5	; 2: 116 18

printUnsignedLong$1:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printUnsignedLong$2:	; Parameter 22 43 6
x8721:	mov byte [bp + 28], 43	; 4: 198 70 28 43

printUnsignedLong$3:	; Call 22 printChar 0
x8725:	mov word [bp + 22], printUnsignedLong$4	; 5: 199 70 22 35 34
x8730:	mov [bp + 24], bp	; 3: 137 110 24
x8733:	add bp, 22	; 3: 131 197 22
x8736:	jmp printChar	; 3: 233 43 250

printUnsignedLong$4:	; PostCall 22

printUnsignedLong$5:	; Equal 10 space 0
x8739:	cmp word [bp + 12], 0	; 4: 131 126 12 0
x8743:	je printUnsignedLong$10	; 2: 116 18

printUnsignedLong$6:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printUnsignedLong$7:	; Parameter 22 32 6
x8745:	mov byte [bp + 28], 32	; 4: 198 70 28 32

printUnsignedLong$8:	; Call 22 printChar 0
x8749:	mov word [bp + 22], printUnsignedLong$9	; 5: 199 70 22 59 34
x8754:	mov [bp + 24], bp	; 3: 137 110 24
x8757:	add bp, 22	; 3: 131 197 22
x8760:	jmp printChar	; 3: 233 19 250

printUnsignedLong$9:	; PostCall 22

printUnsignedLong$10:	; Equal 29 grid 0
x8763:	cmp word [bp + 14], 0	; 4: 131 126 14 0
x8767:	je printUnsignedLong$29	; 2: 116 79

printUnsignedLong$11:	; NotEqual 16 base 8
x8769:	cmp dword [bp + 16], 8	; 5: 102 131 126 16 8
x8774:	jne printUnsignedLong$16	; 2: 117 18

printUnsignedLong$12:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printUnsignedLong$13:	; Parameter 22 48 6
x8776:	mov byte [bp + 28], 48	; 4: 198 70 28 48

printUnsignedLong$14:	; Call 22 printChar 0
x8780:	mov word [bp + 22], printUnsignedLong$15	; 5: 199 70 22 90 34
x8785:	mov [bp + 24], bp	; 3: 137 110 24
x8788:	add bp, 22	; 3: 131 197 22
x8791:	jmp printChar	; 3: 233 244 249

printUnsignedLong$15:	; PostCall 22

printUnsignedLong$16:	; NotEqual 29 base 16
x8794:	cmp dword [bp + 16], 16	; 5: 102 131 126 16 16
x8799:	jne printUnsignedLong$29	; 2: 117 47

printUnsignedLong$17:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printUnsignedLong$18:	; Parameter 22 48 6
x8801:	mov byte [bp + 28], 48	; 4: 198 70 28 48

printUnsignedLong$19:	; Call 22 printChar 0
x8805:	mov word [bp + 22], printUnsignedLong$20	; 5: 199 70 22 115 34
x8810:	mov [bp + 24], bp	; 3: 137 110 24
x8813:	add bp, 22	; 3: 131 197 22
x8816:	jmp printChar	; 3: 233 219 249

printUnsignedLong$20:	; PostCall 22

printUnsignedLong$21:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printUnsignedLong$22:	; Equal 25 capital 0
x8819:	cmp word [bp + 20], 0	; 4: 131 126 20 0
x8823:	je printUnsignedLong$25	; 2: 116 4

printUnsignedLong$23:	; Assign £temporary1711 88
x8825:	mov al, 88	; 2: 176 88

printUnsignedLong$24:	; Goto 26
x8827:	jmp printUnsignedLong$26	; 2: 235 2

printUnsignedLong$25:	; Assign £temporary1711 120
x8829:	mov al, 120	; 2: 176 120

printUnsignedLong$26:	; Parameter 22 £temporary1711 6
x8831:	mov [bp + 28], al	; 3: 136 70 28

printUnsignedLong$27:	; Call 22 printChar 0
x8834:	mov word [bp + 22], printUnsignedLong$28	; 5: 199 70 22 144 34
x8839:	mov [bp + 24], bp	; 3: 137 110 24
x8842:	add bp, 22	; 3: 131 197 22
x8845:	jmp printChar	; 3: 233 190 249

printUnsignedLong$28:	; PostCall 22

printUnsignedLong$29:	; NotEqual 35 unsignedValue 0
x8848:	cmp dword [bp + 6], 0	; 5: 102 131 126 6 0
x8853:	jne printUnsignedLong$35	; 2: 117 20

printUnsignedLong$30:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printUnsignedLong$31:	; Parameter 22 48 6
x8855:	mov byte [bp + 28], 48	; 4: 198 70 28 48

printUnsignedLong$32:	; Call 22 printChar 0
x8859:	mov word [bp + 22], printUnsignedLong$33	; 5: 199 70 22 169 34
x8864:	mov [bp + 24], bp	; 3: 137 110 24
x8867:	add bp, 22	; 3: 131 197 22
x8870:	jmp printChar	; 3: 233 165 249

printUnsignedLong$33:	; PostCall 22

printUnsignedLong$34:	; Goto 41
x8873:	jmp printUnsignedLong$41	; 2: 235 36

printUnsignedLong$35:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printUnsignedLong$36:	; Parameter 22 unsignedValue 6
x8875:	mov eax, [bp + 6]	; 4: 102 139 70 6
x8879:	mov [bp + 28], eax	; 4: 102 137 70 28

printUnsignedLong$37:	; Parameter 22 base 10
x8883:	mov eax, [bp + 16]	; 4: 102 139 70 16
x8887:	mov [bp + 32], eax	; 4: 102 137 70 32

printUnsignedLong$38:	; Parameter 22 capital 14
x8891:	mov ax, [bp + 20]	; 3: 139 70 20
x8894:	mov [bp + 36], ax	; 3: 137 70 36

printUnsignedLong$39:	; Call 22 printUnsignedLongRec 0
x8897:	mov word [bp + 22], printUnsignedLong$40	; 5: 199 70 22 207 34
x8902:	mov [bp + 24], bp	; 3: 137 110 24
x8905:	add bp, 22	; 3: 131 197 22
x8908:	nop	; 1: 144
x8909:	jmp printUnsignedLongRec	; 2: 235 11

printUnsignedLong$40:	; PostCall 22

printUnsignedLong$41:	; Return 0
x8911:	mov ax, [bp]	; 3: 139 70 0
x8914:	mov di, [bp + 4]	; 3: 139 126 4
x8917:	mov bp, [bp + 2]	; 3: 139 110 2
x8920:	jmp ax	; 2: 255 224

printUnsignedLong$42:	; FunctionEnd printUnsignedLong

printUnsignedLongRec:	; UnsignedLessThanEqual 22 unsignedValue 0
x8922:	cmp dword [bp + 6], 0	; 5: 102 131 126 6 0
x8927:	jbe printUnsignedLongRec$22	; 2: 118 106

printUnsignedLongRec$1:	; UnsignedModulo £temporary1687 unsignedValue base
x8929:	mov eax, [bp + 6]	; 4: 102 139 70 6
x8933:	xor edx, edx	; 3: 102 49 210
x8936:	div dword [bp + 10]	; 4: 102 247 118 10

printUnsignedLongRec$2:	; IntegralToIntegral £temporary1688 £temporary1687

printUnsignedLongRec$3:	; Assign digit £temporary1688
x8940:	mov [bp + 16], dx	; 3: 137 86 16

printUnsignedLongRec$4:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printUnsignedLongRec$5:	; UnsignedDivide £temporary1689 unsignedValue base
x8943:	mov eax, [bp + 6]	; 4: 102 139 70 6
x8947:	xor edx, edx	; 3: 102 49 210
x8950:	div dword [bp + 10]	; 4: 102 247 118 10

printUnsignedLongRec$6:	; Parameter 18 £temporary1689 6
x8954:	mov [bp + 24], eax	; 4: 102 137 70 24

printUnsignedLongRec$7:	; Parameter 18 base 10
x8958:	mov eax, [bp + 10]	; 4: 102 139 70 10
x8962:	mov [bp + 28], eax	; 4: 102 137 70 28

printUnsignedLongRec$8:	; Parameter 18 capital 14
x8966:	mov ax, [bp + 14]	; 3: 139 70 14
x8969:	mov [bp + 32], ax	; 3: 137 70 32

printUnsignedLongRec$9:	; Call 18 printUnsignedLongRec 0
x8972:	mov word [bp + 18], printUnsignedLongRec$10	; 5: 199 70 18 26 35
x8977:	mov [bp + 20], bp	; 3: 137 110 20
x8980:	add bp, 18	; 3: 131 197 18
x8983:	nop	; 1: 144
x8984:	jmp printUnsignedLongRec	; 2: 235 192

printUnsignedLongRec$10:	; PostCall 18

printUnsignedLongRec$11:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printUnsignedLongRec$12:	; Parameter 18 digit 6
x8986:	mov ax, [bp + 16]	; 3: 139 70 16
x8989:	mov [bp + 24], ax	; 3: 137 70 24

printUnsignedLongRec$13:	; Parameter 18 capital 8
x8992:	mov ax, [bp + 14]	; 3: 139 70 14
x8995:	mov [bp + 26], ax	; 3: 137 70 26

printUnsignedLongRec$14:	; Call 18 digitToChar 0
x8998:	mov word [bp + 18], printUnsignedLongRec$15	; 5: 199 70 18 52 35
x9003:	mov [bp + 20], bp	; 3: 137 110 20
x9006:	add bp, 18	; 3: 131 197 18
x9009:	nop	; 1: 144
x9010:	jmp digitToChar	; 2: 235 34

printUnsignedLongRec$15:	; PostCall 18

printUnsignedLongRec$16:	; GetReturnValue £temporary1691

printUnsignedLongRec$17:	; Assign c £temporary1691
x9012:	mov [bp + 18], bl	; 3: 136 94 18

printUnsignedLongRec$18:	; CallHeader 19 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printUnsignedLongRec$19:	; Parameter 19 c 6
x9015:	mov al, [bp + 18]	; 3: 138 70 18
x9018:	mov [bp + 25], al	; 3: 136 70 25

printUnsignedLongRec$20:	; Call 19 printChar 0
x9021:	mov word [bp + 19], printUnsignedLongRec$21	; 5: 199 70 19 75 35
x9026:	mov [bp + 21], bp	; 3: 137 110 21
x9029:	add bp, 19	; 3: 131 197 19
x9032:	jmp printChar	; 3: 233 3 249

printUnsignedLongRec$21:	; PostCall 19

printUnsignedLongRec$22:	; Return 0
x9035:	mov ax, [bp]	; 3: 139 70 0
x9038:	mov di, [bp + 4]	; 3: 139 126 4
x9041:	mov bp, [bp + 2]	; 3: 139 110 2
x9044:	jmp ax	; 2: 255 224

printUnsignedLongRec$23:	; FunctionEnd printUnsignedLongRec

digitToChar:	; SignedGreaterThanEqual 5 digit 10
x9046:	cmp word [bp + 6], 10	; 4: 131 126 6 10
x9050:	jge digitToChar$5	; 2: 125 26

digitToChar$1:	; BinaryAdd £temporary1677 digit 48
x9052:	mov bx, [bp + 6]	; 3: 139 94 6
x9055:	add bx, 48	; 3: 131 195 48

digitToChar$2:	; IntegralToIntegral £temporary1678 £temporary1677
x9058:	cmp bx, 0	; 3: 131 251 0
x9061:	jge digitToChar$3	; 2: 125 4
x9063:	neg bx	; 2: 247 219
x9065:	neg bl	; 2: 246 219

digitToChar$3:	; SetReturnValue £temporary1678

digitToChar$4:	; Return £temporary1678
x9067:	mov ax, [bp]	; 3: 139 70 0
x9070:	mov di, [bp + 4]	; 3: 139 126 4
x9073:	mov bp, [bp + 2]	; 3: 139 110 2
x9076:	jmp ax	; 2: 255 224

digitToChar$5:	; Equal 11 capital 0
x9078:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x9082:	je digitToChar$11	; 2: 116 29

digitToChar$6:	; BinarySubtract £temporary1679 digit 10
x9084:	mov bx, [bp + 6]	; 3: 139 94 6
x9087:	sub bx, 10	; 3: 131 235 10

digitToChar$7:	; BinaryAdd £temporary1680 £temporary1679 65
x9090:	add bx, 65	; 3: 131 195 65

digitToChar$8:	; IntegralToIntegral £temporary1681 £temporary1680
x9093:	cmp bx, 0	; 3: 131 251 0
x9096:	jge digitToChar$9	; 2: 125 4
x9098:	neg bx	; 2: 247 219
x9100:	neg bl	; 2: 246 219

digitToChar$9:	; SetReturnValue £temporary1681

digitToChar$10:	; Return £temporary1681
x9102:	mov ax, [bp]	; 3: 139 70 0
x9105:	mov di, [bp + 4]	; 3: 139 126 4
x9108:	mov bp, [bp + 2]	; 3: 139 110 2
x9111:	jmp ax	; 2: 255 224

digitToChar$11:	; BinarySubtract £temporary1682 digit 10
x9113:	mov bx, [bp + 6]	; 3: 139 94 6
x9116:	sub bx, 10	; 3: 131 235 10

digitToChar$12:	; BinaryAdd £temporary1683 £temporary1682 97
x9119:	add bx, 97	; 3: 131 195 97

digitToChar$13:	; IntegralToIntegral £temporary1684 £temporary1683
x9122:	cmp bx, 0	; 3: 131 251 0
x9125:	jge digitToChar$14	; 2: 125 4
x9127:	neg bx	; 2: 247 219
x9129:	neg bl	; 2: 246 219

digitToChar$14:	; SetReturnValue £temporary1684

digitToChar$15:	; Return £temporary1684
x9131:	mov ax, [bp]	; 3: 139 70 0
x9134:	mov di, [bp + 4]	; 3: 139 126 4
x9137:	mov bp, [bp + 2]	; 3: 139 110 2
x9140:	jmp ax	; 2: 255 224

digitToChar$16:	; FunctionEnd digitToChar

printLongDoublePlain:	; PushFloat longDoubleValue
x9142:	fld qword [bp + 6]	; 3: 221 70 6

printLongDoublePlain$1:	; PushFloat 0.0
x9145:	fldz	; 2: 217 238

printLongDoublePlain$2:	; SignedGreaterThanEqual 12 longDoubleValue 0.0
x9147:	fcompp	; 2: 222 217
x9149:	fstsw ax	; 3: 155 223 224
x9152:	sahf	; 1: 158
x9153:	jbe printLongDoublePlain$12	; 2: 118 36

printLongDoublePlain$3:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printLongDoublePlain$4:	; Parameter 22 45 6
x9155:	mov byte [bp + 28], 45	; 4: 198 70 28 45

printLongDoublePlain$5:	; Call 22 printChar 0
x9159:	mov word [bp + 22], printLongDoublePlain$6	; 5: 199 70 22 213 35
x9164:	mov [bp + 24], bp	; 3: 137 110 24
x9167:	add bp, 22	; 3: 131 197 22
x9170:	jmp printChar	; 3: 233 121 248

printLongDoublePlain$6:	; PostCall 22

printLongDoublePlain$7:	; PushFloat longDoubleValue
x9173:	fld qword [bp + 6]	; 3: 221 70 6

printLongDoublePlain$8:	; UnarySubtract £temporary1748 longDoubleValue
x9176:	fchs	; 2: 217 224

printLongDoublePlain$9:	; PopFloat longDoubleValue
x9178:	fstp qword [bp + 6]	; 3: 221 94 6

printLongDoublePlain$10:	; Assign plus 0
x9181:	mov word [bp + 14], 0	; 5: 199 70 14 0 0

printLongDoublePlain$11:	; Assign space 0
x9186:	mov word [bp + 16], 0	; 5: 199 70 16 0 0

printLongDoublePlain$12:	; PushFloat longDoubleValue
x9191:	fld qword [bp + 6]	; 3: 221 70 6

printLongDoublePlain$13:	; FloatingToIntegral £temporary1749 longDoubleValue
x9194:	fistp dword [container4bytes#]	; 4: 219 30 78 36
x9198:	mov eax, [container4bytes#]	; 4: 102 161 78 36

printLongDoublePlain$14:	; Assign longValue £temporary1749
x9202:	mov [bp + 22], eax	; 4: 102 137 70 22

printLongDoublePlain$15:	; CallHeader 26 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printLongDoublePlain$16:	; Parameter 26 longValue 6
x9206:	mov eax, [bp + 22]	; 4: 102 139 70 22
x9210:	mov [bp + 32], eax	; 4: 102 137 70 32

printLongDoublePlain$17:	; Parameter 26 plus 10
x9214:	mov ax, [bp + 14]	; 3: 139 70 14
x9217:	mov [bp + 36], ax	; 3: 137 70 36

printLongDoublePlain$18:	; Parameter 26 space 12
x9220:	mov ax, [bp + 16]	; 3: 139 70 16
x9223:	mov [bp + 38], ax	; 3: 137 70 38

printLongDoublePlain$19:	; Call 26 printLongInt 0
x9226:	mov word [bp + 26], printLongDoublePlain$20	; 5: 199 70 26 24 36
x9231:	mov [bp + 28], bp	; 3: 137 110 28
x9234:	add bp, 26	; 3: 131 197 26
x9237:	jmp printLongInt	; 3: 233 162 247

printLongDoublePlain$20:	; PostCall 26

printLongDoublePlain$21:	; PushFloat longDoubleValue
x9240:	fld qword [bp + 6]	; 3: 221 70 6

printLongDoublePlain$22:	; IntegralToFloating £temporary1751 longValue
x9243:	fild dword [bp + 22]	; 3: 219 70 22

printLongDoublePlain$23:	; BinarySubtract £temporary1752 longDoubleValue £temporary1751
x9246:	fsub	; 2: 222 233

printLongDoublePlain$24:	; PopFloat longDoubleValue
x9248:	fstp qword [bp + 6]	; 3: 221 94 6

printLongDoublePlain$25:	; CallHeader 26 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printLongDoublePlain$26:	; PushFloat longDoubleValue
x9251:	fld qword [bp + 6]	; 3: 221 70 6

printLongDoublePlain$27:	; Parameter 26 longDoubleValue 6
x9254:	fstp qword [bp + 32]	; 3: 221 94 32

printLongDoublePlain$28:	; Parameter 26 grid 14
x9257:	mov ax, [bp + 18]	; 3: 139 70 18
x9260:	mov [bp + 40], ax	; 3: 137 70 40

printLongDoublePlain$29:	; Parameter 26 precision 16
x9263:	mov ax, [bp + 20]	; 3: 139 70 20
x9266:	mov [bp + 42], ax	; 3: 137 70 42

printLongDoublePlain$30:	; Call 26 printLongDoubleFraction 0
x9269:	mov word [bp + 26], printLongDoublePlain$31	; 5: 199 70 26 67 36
x9274:	mov [bp + 28], bp	; 3: 137 110 28
x9277:	add bp, 26	; 3: 131 197 26
x9280:	nop	; 1: 144
x9281:	jmp printLongDoubleFraction	; 2: 235 15

printLongDoublePlain$31:	; PostCall 26

printLongDoublePlain$32:	; Return 0
x9283:	mov ax, [bp]	; 3: 139 70 0
x9286:	mov di, [bp + 4]	; 3: 139 126 4
x9289:	mov bp, [bp + 2]	; 3: 139 110 2
x9292:	jmp ax	; 2: 255 224

printLongDoublePlain$33:	; FunctionEnd printLongDoublePlain

container4bytes#:
x9294:	db 0, 0, 0, 0	; 4: 0 0 0 0

printLongDoubleFraction:	; PushFloat longDoubleValue
x9298:	fld qword [bp + 6]	; 3: 221 70 6

printLongDoubleFraction$1:	; PushFloat longDoubleValue
x9301:	fld qword [bp + 6]	; 3: 221 70 6

printLongDoubleFraction$2:	; FloatingToIntegral £temporary1726 longDoubleValue
x9304:	fistp dword [container4bytes#]	; 4: 219 30 78 36
x9308:	mov eax, [container4bytes#]	; 4: 102 161 78 36

printLongDoubleFraction$3:	; IntegralToFloating £temporary1727 £temporary1726
x9312:	mov [container4bytes#], eax	; 4: 102 163 78 36
x9316:	fild dword [container4bytes#]	; 4: 219 6 78 36

printLongDoubleFraction$4:	; BinarySubtract £temporary1728 longDoubleValue £temporary1727
x9320:	fsub	; 2: 222 233

printLongDoubleFraction$5:	; PopFloat longDoubleValue
x9322:	fstp qword [bp + 6]	; 3: 221 94 6

printLongDoubleFraction$6:	; NotEqual 8 precision 0
x9325:	cmp word [bp + 16], 0	; 4: 131 126 16 0
x9329:	jne printLongDoubleFraction$8	; 2: 117 5

printLongDoubleFraction$7:	; Assign precision 6
x9331:	mov word [bp + 16], 6	; 5: 199 70 16 6 0

printLongDoubleFraction$8:	; NotEqual 10 grid 0
x9336:	cmp word [bp + 14], 0	; 4: 131 126 14 0
x9340:	jne printLongDoubleFraction$10	; 2: 117 6

printLongDoubleFraction$9:	; SignedLessThanEqual 14 precision 0
x9342:	cmp word [bp + 16], 0	; 4: 131 126 16 0
x9346:	jle printLongDoubleFraction$14	; 2: 126 18

printLongDoubleFraction$10:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printLongDoubleFraction$11:	; Parameter 18 46 6
x9348:	mov byte [bp + 24], 46	; 4: 198 70 24 46

printLongDoubleFraction$12:	; Call 18 printChar 0
x9352:	mov word [bp + 18], printLongDoubleFraction$13	; 5: 199 70 18 150 36
x9357:	mov [bp + 20], bp	; 3: 137 110 20
x9360:	add bp, 18	; 3: 131 197 18
x9363:	jmp printChar	; 3: 233 184 247

printLongDoubleFraction$13:	; PostCall 18

printLongDoubleFraction$14:	; Assign £temporary1734 precision
x9366:	mov ax, [bp + 16]	; 3: 139 70 16

printLongDoubleFraction$15:	; Decrement precision
x9369:	dec word [bp + 16]	; 3: 255 78 16

printLongDoubleFraction$16:	; SignedLessThanEqual 34 £temporary1734 0
x9372:	cmp ax, 0	; 3: 131 248 0
x9375:	jle printLongDoubleFraction$34	; 2: 126 67

printLongDoubleFraction$17:	; PushFloat 10.0
x9377:	fld qword [@3956$float8$10.0#]	; 4: 221 6 239 36

printLongDoubleFraction$18:	; PushFloat longDoubleValue
x9381:	fld qword [bp + 6]	; 3: 221 70 6

printLongDoubleFraction$19:	; SignedMultiply £temporary1737 10.0 longDoubleValue
x9384:	fmul	; 2: 222 201

printLongDoubleFraction$20:	; TopFloat longDoubleValue10
x9386:	fst qword [bp + 18]	; 3: 221 86 18

printLongDoubleFraction$21:	; FloatingToIntegral £temporary1738 longDoubleValue10
x9389:	fistp word [container2bytes#]	; 4: 223 30 77 27
x9393:	mov ax, [container2bytes#]	; 3: 161 77 27

printLongDoubleFraction$22:	; Assign digitValue £temporary1738
x9396:	mov [bp + 26], ax	; 3: 137 70 26

printLongDoubleFraction$23:	; CallHeader 28 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printLongDoubleFraction$24:	; BinaryAdd £temporary1739 digitValue 48
x9399:	mov ax, [bp + 26]	; 3: 139 70 26
x9402:	add ax, 48	; 3: 131 192 48

printLongDoubleFraction$25:	; IntegralToIntegral £temporary1740 £temporary1739
x9405:	cmp ax, 0	; 3: 131 248 0
x9408:	jge printLongDoubleFraction$26	; 2: 125 4
x9410:	neg ax	; 2: 247 216
x9412:	neg al	; 2: 246 216

printLongDoubleFraction$26:	; Parameter 28 £temporary1740 6
x9414:	mov [bp + 34], al	; 3: 136 70 34

printLongDoubleFraction$27:	; Call 28 printChar 0
x9417:	mov word [bp + 28], printLongDoubleFraction$28	; 5: 199 70 28 215 36
x9422:	mov [bp + 30], bp	; 3: 137 110 30
x9425:	add bp, 28	; 3: 131 197 28
x9428:	jmp printChar	; 3: 233 119 247

printLongDoubleFraction$28:	; PostCall 28

printLongDoubleFraction$29:	; PushFloat longDoubleValue10
x9431:	fld qword [bp + 18]	; 3: 221 70 18

printLongDoubleFraction$30:	; IntegralToFloating £temporary1742 digitValue
x9434:	fild word [bp + 26]	; 3: 223 70 26

printLongDoubleFraction$31:	; BinarySubtract £temporary1743 longDoubleValue10 £temporary1742
x9437:	fsub	; 2: 222 233

printLongDoubleFraction$32:	; PopFloat longDoubleValue
x9439:	fstp qword [bp + 6]	; 3: 221 94 6

printLongDoubleFraction$33:	; Goto 14
x9442:	jmp printLongDoubleFraction$14	; 2: 235 178

printLongDoubleFraction$34:	; Return 0
x9444:	mov ax, [bp]	; 3: 139 70 0
x9447:	mov di, [bp + 4]	; 3: 139 126 4
x9450:	mov bp, [bp + 2]	; 3: 139 110 2
x9453:	jmp ax	; 2: 255 224

printLongDoubleFraction$35:	; FunctionEnd printLongDoubleFraction

@3956$float8$10.0#:
x9455:	dq 10.0	; 8: 0 0 0 0 0 0 36 64

fabs:	; PushFloat x
x9463:	fld qword [bp + 6]	; 3: 221 70 6

fabs$1:	; PushZero
x9466:	fldz	; 2: 217 238

fabs$2:	; SignedGreaterThanEqual 7 x 0
x9468:	fcompp	; 2: 222 217
x9470:	fstsw ax	; 3: 155 223 224
x9473:	sahf	; 1: 158
x9474:	jbe fabs$7	; 2: 118 7

fabs$3:	; PushFloat x
x9476:	fld qword [bp + 6]	; 3: 221 70 6

fabs$4:	; UnarySubtract £temporary623 x
x9479:	fchs	; 2: 217 224

fabs$5:	; DecreaseStack

fabs$6:	; Goto 8
x9481:	jmp fabs$8	; 2: 235 3

fabs$7:	; PushFloat x
x9483:	fld qword [bp + 6]	; 3: 221 70 6

fabs$8:	; SetReturnValue £temporary627

fabs$9:	; Return £temporary627
x9486:	mov ax, [bp]	; 3: 139 70 0
x9489:	mov di, [bp + 4]	; 3: 139 126 4
x9492:	mov bp, [bp + 2]	; 3: 139 110 2
x9495:	jmp ax	; 2: 255 224

fabs$10:	; FunctionEnd fabs

tolower:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

tolower$1:	; Parameter 8 c 6
x9497:	mov ax, [bp + 6]	; 3: 139 70 6
x9500:	mov [bp + 14], ax	; 3: 137 70 14

tolower$2:	; Call 8 isupper 0
x9503:	mov word [bp + 8], tolower$3	; 5: 199 70 8 45 37
x9508:	mov [bp + 10], bp	; 3: 137 110 10
x9511:	add bp, 8	; 3: 131 197 8
x9514:	jmp isupper	; 3: 233 221 248

tolower$3:	; PostCall 8

tolower$4:	; GetReturnValue £temporary252

tolower$5:	; Equal 31 £temporary252 0
x9517:	cmp bx, 0	; 3: 131 251 0
x9520:	je tolower$31	; 2: 116 122

tolower$6:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

tolower$7:	; Call 8 localeconv 0
x9522:	mov word [bp + 8], tolower$8	; 5: 199 70 8 64 37
x9527:	mov [bp + 10], bp	; 3: 137 110 10
x9530:	add bp, 8	; 3: 131 197 8
x9533:	jmp localeconv	; 3: 233 53 249

tolower$8:	; PostCall 8

tolower$9:	; GetReturnValue £temporary253

tolower$10:	; Assign localeConvPtr £temporary253
x9536:	mov [bp + 8], bx	; 3: 137 94 8

tolower$11:	; Equal 28 localeConvPtr 0
x9539:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x9543:	je tolower$28	; 2: 116 82

tolower$12:	; Deref £temporary255 -> localeConvPtr localeConvPtr 12
x9545:	mov si, [bp + 8]	; 3: 139 118 8

tolower$13:	; Assign lowerCase £temporary255 -> localeConvPtr
x9548:	mov ax, [si + 12]	; 3: 139 68 12
x9551:	mov [bp + 10], ax	; 3: 137 70 10

tolower$14:	; Deref £temporary256 -> localeConvPtr localeConvPtr 14
x9554:	mov si, [bp + 8]	; 3: 139 118 8

tolower$15:	; Assign upperCase £temporary256 -> localeConvPtr
x9557:	mov ax, [si + 14]	; 3: 139 68 14
x9560:	mov [bp + 12], ax	; 3: 137 70 12

tolower$16:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

tolower$17:	; Parameter 14 upperCase 6
x9563:	mov ax, [bp + 12]	; 3: 139 70 12
x9566:	mov [bp + 20], ax	; 3: 137 70 20

tolower$18:	; Parameter 14 c 8
x9569:	mov ax, [bp + 6]	; 3: 139 70 6
x9572:	mov [bp + 22], ax	; 3: 137 70 22

tolower$19:	; Call 14 strchr 0
x9575:	mov word [bp + 14], tolower$20	; 5: 199 70 14 117 37
x9580:	mov [bp + 16], bp	; 3: 137 110 16
x9583:	add bp, 14	; 3: 131 197 14
x9586:	jmp strchr	; 3: 233 70 252

tolower$20:	; PostCall 14

tolower$21:	; GetReturnValue £temporary257

tolower$22:	; BinarySubtract index £temporary257 upperCase
x9589:	sub bx, [bp + 12]	; 3: 43 94 12
x9592:	mov [bp + 14], bx	; 3: 137 94 14

tolower$23:	; BinaryAdd £temporary260 lowerCase index
x9595:	mov si, [bp + 10]	; 3: 139 118 10
x9598:	add si, [bp + 14]	; 3: 3 118 14

tolower$24:	; Deref £temporary259 -> £temporary260 £temporary260 0

tolower$25:	; IntegralToIntegral £temporary261 £temporary259 -> £temporary260
x9601:	mov bl, [si]	; 2: 138 28
x9603:	and bx, 255	; 4: 129 227 255 0
x9607:	cmp bl, 0	; 3: 128 251 0
x9610:	jge tolower$26	; 2: 125 4
x9612:	neg bl	; 2: 246 219
x9614:	neg bx	; 2: 247 219

tolower$26:	; SetReturnValue £temporary261

tolower$27:	; Return £temporary261
x9616:	mov ax, [bp]	; 3: 139 70 0
x9619:	mov di, [bp + 4]	; 3: 139 126 4
x9622:	mov bp, [bp + 2]	; 3: 139 110 2
x9625:	jmp ax	; 2: 255 224

tolower$28:	; BinaryAdd £temporary262 c 32
x9627:	mov bx, [bp + 6]	; 3: 139 94 6
x9630:	add bx, 32	; 3: 131 195 32

tolower$29:	; SetReturnValue £temporary262

tolower$30:	; Return £temporary262
x9633:	mov ax, [bp]	; 3: 139 70 0
x9636:	mov di, [bp + 4]	; 3: 139 126 4
x9639:	mov bp, [bp + 2]	; 3: 139 110 2
x9642:	jmp ax	; 2: 255 224

tolower$31:	; SetReturnValue c
x9644:	mov bx, [bp + 6]	; 3: 139 94 6

tolower$32:	; Return c
x9647:	mov ax, [bp]	; 3: 139 70 0
x9650:	mov di, [bp + 4]	; 3: 139 126 4
x9653:	mov bp, [bp + 2]	; 3: 139 110 2
x9656:	jmp ax	; 2: 255 224

tolower$33:	; FunctionEnd tolower

printLongDoubleExpo:	; PushFloat value
x9658:	fld qword [bp + 6]	; 3: 221 70 6

printLongDoubleExpo$1:	; PushFloat 0.0
x9661:	fldz	; 2: 217 238

printLongDoubleExpo$2:	; NotEqual 27 value 0.0
x9663:	fcompp	; 2: 222 217
x9665:	fstsw ax	; 3: 155 223 224
x9668:	sahf	; 1: 158
x9669:	jne printLongDoubleExpo$27	; 2: 117 99

printLongDoubleExpo$3:	; CallHeader 24 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printLongDoubleExpo$4:	; Parameter 24 48 6
x9671:	mov byte [bp + 30], 48	; 4: 198 70 30 48

printLongDoubleExpo$5:	; Call 24 printChar 0
x9675:	mov word [bp + 24], printLongDoubleExpo$6	; 5: 199 70 24 217 37
x9680:	mov [bp + 26], bp	; 3: 137 110 26
x9683:	add bp, 24	; 3: 131 197 24
x9686:	jmp printChar	; 3: 233 117 246

printLongDoubleExpo$6:	; PostCall 24

printLongDoubleExpo$7:	; CallHeader 24 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printLongDoubleExpo$8:	; PushFloat 0.0
x9689:	fldz	; 2: 217 238

printLongDoubleExpo$9:	; Parameter 24 0.0 6
x9691:	fstp qword [bp + 30]	; 3: 221 94 30

printLongDoubleExpo$10:	; Parameter 24 precision 14
x9694:	mov ax, [bp + 20]	; 3: 139 70 20
x9697:	mov [bp + 38], ax	; 3: 137 70 38

printLongDoubleExpo$11:	; Parameter 24 grid 16
x9700:	mov ax, [bp + 18]	; 3: 139 70 18
x9703:	mov [bp + 40], ax	; 3: 137 70 40

printLongDoubleExpo$12:	; Call 24 printLongDoubleFraction 0
x9706:	mov word [bp + 24], printLongDoubleExpo$13	; 5: 199 70 24 248 37
x9711:	mov [bp + 26], bp	; 3: 137 110 26
x9714:	add bp, 24	; 3: 131 197 24
x9717:	jmp printLongDoubleFraction	; 3: 233 90 254

printLongDoubleExpo$13:	; PostCall 24

printLongDoubleExpo$14:	; CallHeader 24 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printLongDoubleExpo$15:	; Equal 18 capital 0
x9720:	cmp word [bp + 22], 0	; 4: 131 126 22 0
x9724:	je printLongDoubleExpo$18	; 2: 116 4

printLongDoubleExpo$16:	; Assign £temporary1768 69
x9726:	mov al, 69	; 2: 176 69

printLongDoubleExpo$17:	; Goto 19
x9728:	jmp printLongDoubleExpo$19	; 2: 235 2

printLongDoubleExpo$18:	; Assign £temporary1768 101
x9730:	mov al, 101	; 2: 176 101

printLongDoubleExpo$19:	; Parameter 24 £temporary1768 6
x9732:	mov [bp + 30], al	; 3: 136 70 30

printLongDoubleExpo$20:	; Call 24 printChar 0
x9735:	mov word [bp + 24], printLongDoubleExpo$21	; 5: 199 70 24 21 38
x9740:	mov [bp + 26], bp	; 3: 137 110 26
x9743:	add bp, 24	; 3: 131 197 24
x9746:	jmp printChar	; 3: 233 57 246

printLongDoubleExpo$21:	; PostCall 24

printLongDoubleExpo$22:	; CallHeader 24 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printLongDoubleExpo$23:	; Parameter 24 48 6
x9749:	mov byte [bp + 30], 48	; 4: 198 70 30 48

printLongDoubleExpo$24:	; Call 24 printChar 0
x9753:	mov word [bp + 24], printLongDoubleExpo$25	; 5: 199 70 24 39 38
x9758:	mov [bp + 26], bp	; 3: 137 110 26
x9761:	add bp, 24	; 3: 131 197 24
x9764:	jmp printChar	; 3: 233 39 246

printLongDoubleExpo$25:	; PostCall 24

printLongDoubleExpo$26:	; Goto 80
x9767:	jmp printLongDoubleExpo$80	; 3: 233 236 0

printLongDoubleExpo$27:	; PushFloat value
x9770:	fld qword [bp + 6]	; 3: 221 70 6

printLongDoubleExpo$28:	; PushFloat 0.0
x9773:	fldz	; 2: 217 238

printLongDoubleExpo$29:	; SignedGreaterThanEqual 37 value 0.0
x9775:	fcompp	; 2: 222 217
x9777:	fstsw ax	; 3: 155 223 224
x9780:	sahf	; 1: 158
x9781:	jbe printLongDoubleExpo$37	; 2: 118 26

printLongDoubleExpo$30:	; CallHeader 24 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printLongDoubleExpo$31:	; Parameter 24 45 6
x9783:	mov byte [bp + 30], 45	; 4: 198 70 30 45

printLongDoubleExpo$32:	; Call 24 printChar 0
x9787:	mov word [bp + 24], printLongDoubleExpo$33	; 5: 199 70 24 73 38
x9792:	mov [bp + 26], bp	; 3: 137 110 26
x9795:	add bp, 24	; 3: 131 197 24
x9798:	jmp printChar	; 3: 233 5 246

printLongDoubleExpo$33:	; PostCall 24

printLongDoubleExpo$34:	; PushFloat value
x9801:	fld qword [bp + 6]	; 3: 221 70 6

printLongDoubleExpo$35:	; UnarySubtract £temporary1773 value
x9804:	fchs	; 2: 217 224

printLongDoubleExpo$36:	; PopFloat value
x9806:	fstp qword [bp + 6]	; 3: 221 94 6

printLongDoubleExpo$37:	; CallHeader 24 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printLongDoubleExpo$38:	; PushFloat value
x9809:	fld qword [bp + 6]	; 3: 221 70 6

printLongDoubleExpo$39:	; Parameter 24 value 6
x9812:	fstp qword [bp + 30]	; 3: 221 94 30

printLongDoubleExpo$40:	; Call 24 log10 0
x9815:	mov word [bp + 24], printLongDoubleExpo$41	; 5: 199 70 24 101 38
x9820:	mov [bp + 26], bp	; 3: 137 110 26
x9823:	add bp, 24	; 3: 131 197 24
x9826:	jmp log10	; 3: 233 196 0

printLongDoubleExpo$41:	; PostCall 24

printLongDoubleExpo$42:	; GetReturnValue £temporary1774

printLongDoubleExpo$43:	; FloatingToIntegral £temporary1775 £temporary1774
x9829:	fistp word [container2bytes#]	; 4: 223 30 77 27
x9833:	mov ax, [container2bytes#]	; 3: 161 77 27

printLongDoubleExpo$44:	; Assign expo £temporary1775
x9836:	mov [bp + 24], ax	; 3: 137 70 24

printLongDoubleExpo$45:	; PushFloat value
x9839:	fld qword [bp + 6]	; 3: 221 70 6

printLongDoubleExpo$46:	; CallHeader 26 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 1
x9842:	fstp qword [bp + 26]	; 3: 221 94 26

printLongDoubleExpo$47:	; PushFloat 10.0
x9845:	fld qword [@4037$float8$10.0#]	; 4: 221 6 33 39

printLongDoubleExpo$48:	; Parameter 26 10.0 6
x9849:	fstp qword [bp + 40]	; 3: 221 94 40

printLongDoubleExpo$49:	; IntegralToFloating £temporary1776 expo
x9852:	fild word [bp + 24]	; 3: 223 70 24

printLongDoubleExpo$50:	; Parameter 26 £temporary1776 14
x9855:	fstp qword [bp + 48]	; 3: 221 94 48

printLongDoubleExpo$51:	; Call 26 pow 0
x9858:	mov word [bp + 34], printLongDoubleExpo$52	; 5: 199 70 34 144 38
x9863:	mov [bp + 36], bp	; 3: 137 110 36
x9866:	add bp, 34	; 3: 131 197 34
x9869:	jmp pow	; 3: 233 2 2

printLongDoubleExpo$52:	; PostCall 26
x9872:	fstp qword [bp + 34]	; 3: 221 94 34
x9875:	fld qword [bp + 26]	; 3: 221 70 26
x9878:	fld qword [bp + 34]	; 3: 221 70 34

printLongDoubleExpo$53:	; GetReturnValue £temporary1777

printLongDoubleExpo$54:	; SignedDivide £temporary1778 value £temporary1777
x9881:	fdiv	; 2: 222 249

printLongDoubleExpo$55:	; PopFloat value
x9883:	fstp qword [bp + 6]	; 3: 221 94 6

printLongDoubleExpo$56:	; CallHeader 26 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printLongDoubleExpo$57:	; PushFloat value
x9886:	fld qword [bp + 6]	; 3: 221 70 6

printLongDoubleExpo$58:	; Parameter 26 value 6
x9889:	fstp qword [bp + 32]	; 3: 221 94 32

printLongDoubleExpo$59:	; Parameter 26 plus 14
x9892:	mov ax, [bp + 14]	; 3: 139 70 14
x9895:	mov [bp + 40], ax	; 3: 137 70 40

printLongDoubleExpo$60:	; Parameter 26 space 16
x9898:	mov ax, [bp + 16]	; 3: 139 70 16
x9901:	mov [bp + 42], ax	; 3: 137 70 42

printLongDoubleExpo$61:	; Parameter 26 grid 18
x9904:	mov ax, [bp + 18]	; 3: 139 70 18
x9907:	mov [bp + 44], ax	; 3: 137 70 44

printLongDoubleExpo$62:	; Parameter 26 precision 20
x9910:	mov ax, [bp + 20]	; 3: 139 70 20
x9913:	mov [bp + 46], ax	; 3: 137 70 46

printLongDoubleExpo$63:	; Call 26 printLongDoublePlain 0
x9916:	mov word [bp + 26], printLongDoubleExpo$64	; 5: 199 70 26 202 38
x9921:	mov [bp + 28], bp	; 3: 137 110 28
x9924:	add bp, 26	; 3: 131 197 26
x9927:	jmp printLongDoublePlain	; 3: 233 236 252

printLongDoubleExpo$64:	; PostCall 26

printLongDoubleExpo$65:	; CallHeader 26 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printLongDoubleExpo$66:	; Equal 69 capital 0
x9930:	cmp word [bp + 22], 0	; 4: 131 126 22 0
x9934:	je printLongDoubleExpo$69	; 2: 116 4

printLongDoubleExpo$67:	; Assign £temporary1784 69
x9936:	mov al, 69	; 2: 176 69

printLongDoubleExpo$68:	; Goto 70
x9938:	jmp printLongDoubleExpo$70	; 2: 235 2

printLongDoubleExpo$69:	; Assign £temporary1784 101
x9940:	mov al, 101	; 2: 176 101

printLongDoubleExpo$70:	; Parameter 26 £temporary1784 6
x9942:	mov [bp + 32], al	; 3: 136 70 32

printLongDoubleExpo$71:	; Call 26 printChar 0
x9945:	mov word [bp + 26], printLongDoubleExpo$72	; 5: 199 70 26 231 38
x9950:	mov [bp + 28], bp	; 3: 137 110 28
x9953:	add bp, 26	; 3: 131 197 26
x9956:	jmp printChar	; 3: 233 103 245

printLongDoubleExpo$72:	; PostCall 26

printLongDoubleExpo$73:	; CallHeader 26 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printLongDoubleExpo$74:	; IntegralToIntegral £temporary1786 expo
x9959:	mov ax, [bp + 24]	; 3: 139 70 24
x9962:	and eax, 65535	; 6: 102 37 255 255 0 0
x9968:	cmp ax, 0	; 3: 131 248 0
x9971:	jge printLongDoubleExpo$75	; 2: 125 5
x9973:	neg ax	; 2: 247 216
x9975:	neg eax	; 3: 102 247 216

printLongDoubleExpo$75:	; Parameter 26 £temporary1786 6
x9978:	mov [bp + 32], eax	; 4: 102 137 70 32

printLongDoubleExpo$76:	; Parameter 26 1 10
x9982:	mov word [bp + 36], 1	; 5: 199 70 36 1 0

printLongDoubleExpo$77:	; Parameter 26 0 12
x9987:	mov word [bp + 38], 0	; 5: 199 70 38 0 0

printLongDoubleExpo$78:	; Call 26 printLongInt 0
x9992:	mov word [bp + 26], printLongDoubleExpo$79	; 5: 199 70 26 22 39
x9997:	mov [bp + 28], bp	; 3: 137 110 28
x10000:	add bp, 26	; 3: 131 197 26
x10003:	jmp printLongInt	; 3: 233 164 244

printLongDoubleExpo$79:	; PostCall 26

printLongDoubleExpo$80:	; Return 0
x10006:	mov ax, [bp]	; 3: 139 70 0
x10009:	mov di, [bp + 4]	; 3: 139 126 4
x10012:	mov bp, [bp + 2]	; 3: 139 110 2
x10015:	jmp ax	; 2: 255 224

printLongDoubleExpo$81:	; FunctionEnd printLongDoubleExpo

@4037$float8$10.0#:
x10017:	dq 10.0	; 8: 0 0 0 0 0 0 36 64

log10:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

log10$1:	; PushFloat x
x10025:	fld qword [bp + 6]	; 3: 221 70 6

log10$2:	; Parameter 14 x 6
x10028:	fstp qword [bp + 20]	; 3: 221 94 20

log10$3:	; Call 14 log 0
x10031:	mov word [bp + 14], log10$4	; 5: 199 70 14 61 39
x10036:	mov [bp + 16], bp	; 3: 137 110 16
x10039:	add bp, 14	; 3: 131 197 14
x10042:	nop	; 1: 144
x10043:	jmp log	; 2: 235 25

log10$4:	; PostCall 14

log10$5:	; GetReturnValue £temporary340

log10$6:	; PushFloat 2.30
x10045:	fld qword [@926$float8$2.30#]	; 4: 221 6 78 39

log10$7:	; SignedDivide £temporary341 £temporary340 2.30
x10049:	fdiv	; 2: 222 249

log10$8:	; SetReturnValue £temporary341

log10$9:	; Return £temporary341
x10051:	mov ax, [bp]	; 3: 139 70 0
x10054:	mov di, [bp + 4]	; 3: 139 126 4
x10057:	mov bp, [bp + 2]	; 3: 139 110 2
x10060:	jmp ax	; 2: 255 224

log10$10:	; FunctionEnd log10

@926$float8$2.30#:
x10062:	dq 2.30	; 8: 102 102 102 102 102 102 2 64

log:	; PushFloat x
x10070:	fld qword [bp + 6]	; 3: 221 70 6

log$1:	; PushZero
x10073:	fldz	; 2: 217 238

log$2:	; SignedLessThanEqual 74 x 0
x10075:	fcompp	; 2: 222 217
x10077:	fstsw ax	; 3: 155 223 224
x10080:	sahf	; 1: 158
x10081:	jae log$74	; 4: 15 131 234 0

log$3:	; Assign n 0
x10085:	mov word [bp + 14], 0	; 5: 199 70 14 0 0

log$4:	; PushFloat x
x10090:	fld qword [bp + 6]	; 3: 221 70 6

log$5:	; PushOne
x10093:	fld1	; 2: 217 232

log$6:	; SignedLessThanEqual 16 x 1
x10095:	fcompp	; 2: 222 217
x10097:	fstsw ax	; 3: 155 223 224
x10100:	sahf	; 1: 158
x10101:	jae log$16	; 2: 115 30

log$7:	; PushFloat x
x10103:	fld qword [bp + 6]	; 3: 221 70 6

log$8:	; PushOne
x10106:	fld1	; 2: 217 232

log$9:	; SignedLessThanEqual 28 x 1
x10108:	fcompp	; 2: 222 217
x10110:	fstsw ax	; 3: 155 223 224
x10113:	sahf	; 1: 158
x10114:	jae log$28	; 2: 115 64

log$10:	; PushFloat x
x10116:	fld qword [bp + 6]	; 3: 221 70 6

log$11:	; PushFloat 2.71
x10119:	fld qword [@872$float8$2.71#]	; 4: 221 6 98 40

log$12:	; SignedDivide £temporary322 x 2.71
x10123:	fdiv	; 2: 222 249

log$13:	; PopFloat x
x10125:	fstp qword [bp + 6]	; 3: 221 94 6

log$14:	; Increment n
x10128:	inc word [bp + 14]	; 3: 255 70 14

log$15:	; Goto 7
x10131:	jmp log$7	; 2: 235 226

log$16:	; PushFloat x
x10133:	fld qword [bp + 6]	; 3: 221 70 6

log$17:	; PushFloat 0.368
x10136:	fld qword [@878$float8$0.368#]	; 4: 221 6 106 40

log$18:	; SignedGreaterThanEqual 28 x 0.368
x10140:	fcompp	; 2: 222 217
x10142:	fstsw ax	; 3: 155 223 224
x10145:	sahf	; 1: 158
x10146:	jbe log$28	; 2: 118 32

log$19:	; PushFloat x
x10148:	fld qword [bp + 6]	; 3: 221 70 6

log$20:	; PushFloat 0.368
x10151:	fld qword [@881$float8$0.368#]	; 4: 221 6 114 40

log$21:	; SignedGreaterThanEqual 28 x 0.368
x10155:	fcompp	; 2: 222 217
x10157:	fstsw ax	; 3: 155 223 224
x10160:	sahf	; 1: 158
x10161:	jbe log$28	; 2: 118 17

log$22:	; PushFloat x
x10163:	fld qword [bp + 6]	; 3: 221 70 6

log$23:	; PushFloat 2.71
x10166:	fld qword [@884$float8$2.71#]	; 4: 221 6 122 40

log$24:	; SignedMultiply £temporary326 x 2.71
x10170:	fmul	; 2: 222 201

log$25:	; PopFloat x
x10172:	fstp qword [bp + 6]	; 3: 221 94 6

log$26:	; Decrement n
x10175:	dec word [bp + 14]	; 3: 255 78 14

log$27:	; Goto 19
x10178:	jmp log$19	; 2: 235 224

log$28:	; PushOne
x10180:	fld1	; 2: 217 232

log$29:	; PopFloat index
x10182:	fstp qword [bp + 16]	; 3: 221 94 16

log$30:	; PushZero
x10185:	fldz	; 2: 217 238

log$31:	; PopFloat sum
x10187:	fstp qword [bp + 32]	; 3: 221 94 32

log$32:	; PushOne
x10190:	fld1	; 2: 217 232

log$33:	; PopFloat sign
x10192:	fstp qword [bp + 40]	; 3: 221 94 40

log$34:	; PushFloat x
x10195:	fld qword [bp + 6]	; 3: 221 70 6

log$35:	; PushOne
x10198:	fld1	; 2: 217 232

log$36:	; BinarySubtract £temporary328 x 1
x10200:	fsub	; 2: 222 233

log$37:	; TopFloat x_minus_1
x10202:	fst qword [bp + 48]	; 3: 221 86 48

log$38:	; PopFloat power
x10205:	fstp qword [bp + 56]	; 3: 221 94 56

log$39:	; PushFloat sign
x10208:	fld qword [bp + 40]	; 3: 221 70 40

log$40:	; PushFloat power
x10211:	fld qword [bp + 56]	; 3: 221 70 56

log$41:	; SignedMultiply £temporary329 sign power
x10214:	fmul	; 2: 222 201

log$42:	; PushFloat index
x10216:	fld qword [bp + 16]	; 3: 221 70 16

log$43:	; PushFloat index
x10219:	fld qword [bp + 16]	; 3: 221 70 16

log$44:	; PushOne
x10222:	fld1	; 2: 217 232

log$45:	; BinaryAdd index index 1
x10224:	fadd	; 2: 222 193

log$46:	; PopFloat index
x10226:	fstp qword [bp + 16]	; 3: 221 94 16

log$47:	; SignedDivide £temporary331 £temporary329 £temporary330
x10229:	fdiv	; 2: 222 249

log$48:	; PopFloat term
x10231:	fstp qword [bp + 24]	; 3: 221 94 24

log$49:	; PushFloat sum
x10234:	fld qword [bp + 32]	; 3: 221 70 32

log$50:	; PushFloat term
x10237:	fld qword [bp + 24]	; 3: 221 70 24

log$51:	; BinaryAdd £temporary332 sum term
x10240:	fadd	; 2: 222 193

log$52:	; PopFloat sum
x10242:	fstp qword [bp + 32]	; 3: 221 94 32

log$53:	; PushFloat power
x10245:	fld qword [bp + 56]	; 3: 221 70 56

log$54:	; PushFloat x_minus_1
x10248:	fld qword [bp + 48]	; 3: 221 70 48

log$55:	; SignedMultiply £temporary333 power x_minus_1
x10251:	fmul	; 2: 222 201

log$56:	; PopFloat power
x10253:	fstp qword [bp + 56]	; 3: 221 94 56

log$57:	; PushFloat sign
x10256:	fld qword [bp + 40]	; 3: 221 70 40

log$58:	; PushFloat -1.0
x10259:	fld qword [@911$float8$minus1.0#]	; 4: 221 6 130 40

log$59:	; SignedMultiply £temporary334 sign -1.0
x10263:	fmul	; 2: 222 201

log$60:	; PopFloat sign
x10265:	fstp qword [bp + 40]	; 3: 221 94 40

log$61:	; CallHeader 64 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

log$62:	; PushFloat term
x10268:	fld qword [bp + 24]	; 3: 221 70 24

log$63:	; Parameter 64 term 6
x10271:	fstp qword [bp + 70]	; 3: 221 94 70

log$64:	; Call 64 fabs 0
x10274:	mov word [bp + 64], log$65	; 5: 199 70 64 48 40
x10279:	mov [bp + 66], bp	; 3: 137 110 66
x10282:	add bp, 64	; 3: 131 197 64
x10285:	jmp fabs	; 3: 233 199 252

log$65:	; PostCall 64

log$66:	; GetReturnValue £temporary335

log$67:	; PushFloat 0.000000001
x10288:	fld qword [@915$float8$0.000000001#]	; 4: 221 6 138 40

log$68:	; SignedGreaterThanEqual 39 £temporary335 0.000000001
x10292:	fcompp	; 2: 222 217
x10294:	fstsw ax	; 3: 155 223 224
x10297:	sahf	; 1: 158
x10298:	jbe log$39	; 2: 118 164

log$69:	; PushFloat sum
x10300:	fld qword [bp + 32]	; 3: 221 70 32

log$70:	; IntegralToFloating £temporary337 n
x10303:	fild word [bp + 14]	; 3: 223 70 14

log$71:	; BinaryAdd £temporary338 sum £temporary337
x10306:	fadd	; 2: 222 193

log$72:	; SetReturnValue £temporary338

log$73:	; Return £temporary338
x10308:	mov ax, [bp]	; 3: 139 70 0
x10311:	mov di, [bp + 4]	; 3: 139 126 4
x10314:	mov bp, [bp + 2]	; 3: 139 110 2
x10317:	jmp ax	; 2: 255 224

log$74:	; Assign errno 6
x10319:	mov word [errno], 6	; 6: 199 6 230 10 6 0

log$75:	; PushZero
x10325:	fldz	; 2: 217 238

log$76:	; SetReturnValue 0

log$77:	; Return 0
x10327:	mov ax, [bp]	; 3: 139 70 0
x10330:	mov di, [bp + 4]	; 3: 139 126 4
x10333:	mov bp, [bp + 2]	; 3: 139 110 2
x10336:	jmp ax	; 2: 255 224

log$78:	; FunctionEnd log

@872$float8$2.71#:
x10338:	dq 2.71	; 8: 174 71 225 122 20 174 5 64

@878$float8$0.368#:
x10346:	dq 0.368	; 8: 90 100 59 223 79 141 215 63

@881$float8$0.368#:
x10354:	dq 0.368	; 8: 90 100 59 223 79 141 215 63

@884$float8$2.71#:
x10362:	dq 2.71	; 8: 174 71 225 122 20 174 5 64

@911$float8$minus1.0#:
x10370:	dq -1.0	; 8: 0 0 0 0 0 0 240 191

@915$float8$0.000000001#:
x10378:	dq 0.000000001	; 8: 149 214 38 232 11 46 17 62

pow:	; PushFloat x
x10386:	fld qword [bp + 6]	; 3: 221 70 6

pow$1:	; PushZero
x10389:	fldz	; 2: 217 238

pow$2:	; SignedLessThanEqual 18 x 0
x10391:	fcompp	; 2: 222 217
x10393:	fstsw ax	; 3: 155 223 224
x10396:	sahf	; 1: 158
x10397:	jae pow$18	; 2: 115 65

pow$3:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

pow$4:	; PushFloat y
x10399:	fld qword [bp + 14]	; 3: 221 70 14

pow$5:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 1
x10402:	fstp qword [bp + 22]	; 3: 221 94 22

pow$6:	; PushFloat x
x10405:	fld qword [bp + 6]	; 3: 221 70 6

pow$7:	; Parameter 22 x 6
x10408:	fstp qword [bp + 36]	; 3: 221 94 36

pow$8:	; Call 22 log 0
x10411:	mov word [bp + 30], pow$9	; 5: 199 70 30 185 40
x10416:	mov [bp + 32], bp	; 3: 137 110 32
x10419:	add bp, 30	; 3: 131 197 30
x10422:	jmp log	; 3: 233 157 254

pow$9:	; PostCall 22
x10425:	fstp qword [bp + 30]	; 3: 221 94 30
x10428:	fld qword [bp + 22]	; 3: 221 70 22
x10431:	fld qword [bp + 30]	; 3: 221 70 30

pow$10:	; GetReturnValue £temporary344

pow$11:	; SignedMultiply £temporary345 y £temporary344
x10434:	fmul	; 2: 222 201

pow$12:	; Parameter 22 £temporary345 6
x10436:	fstp qword [bp + 28]	; 3: 221 94 28

pow$13:	; Call 22 exp 0
x10439:	mov word [bp + 22], pow$14	; 5: 199 70 22 213 40
x10444:	mov [bp + 24], bp	; 3: 137 110 24
x10447:	add bp, 22	; 3: 131 197 22
x10450:	jmp exp	; 3: 233 102 1

pow$14:	; PostCall 22

pow$15:	; GetReturnValue £temporary346

pow$16:	; SetReturnValue £temporary346

pow$17:	; Return £temporary346
x10453:	mov ax, [bp]	; 3: 139 70 0
x10456:	mov di, [bp + 4]	; 3: 139 126 4
x10459:	mov bp, [bp + 2]	; 3: 139 110 2
x10462:	jmp ax	; 2: 255 224

pow$18:	; PushFloat x
x10464:	fld qword [bp + 6]	; 3: 221 70 6

pow$19:	; PushZero
x10467:	fldz	; 2: 217 238

pow$20:	; NotEqual 27 x 0
x10469:	fcompp	; 2: 222 217
x10471:	fstsw ax	; 3: 155 223 224
x10474:	sahf	; 1: 158
x10475:	jne pow$27	; 2: 117 26

pow$21:	; PushFloat y
x10477:	fld qword [bp + 14]	; 3: 221 70 14

pow$22:	; PushZero
x10480:	fldz	; 2: 217 238

pow$23:	; NotEqual 27 y 0
x10482:	fcompp	; 2: 222 217
x10484:	fstsw ax	; 3: 155 223 224
x10487:	sahf	; 1: 158
x10488:	jne pow$27	; 2: 117 13

pow$24:	; PushOne
x10490:	fld1	; 2: 217 232

pow$25:	; SetReturnValue 1

pow$26:	; Return 1
x10492:	mov ax, [bp]	; 3: 139 70 0
x10495:	mov di, [bp + 4]	; 3: 139 126 4
x10498:	mov bp, [bp + 2]	; 3: 139 110 2
x10501:	jmp ax	; 2: 255 224

pow$27:	; PushFloat x
x10503:	fld qword [bp + 6]	; 3: 221 70 6

pow$28:	; PushZero
x10506:	fldz	; 2: 217 238

pow$29:	; NotEqual 36 x 0
x10508:	fcompp	; 2: 222 217
x10510:	fstsw ax	; 3: 155 223 224
x10513:	sahf	; 1: 158
x10514:	jne pow$36	; 2: 117 26

pow$30:	; PushFloat y
x10516:	fld qword [bp + 14]	; 3: 221 70 14

pow$31:	; PushZero
x10519:	fldz	; 2: 217 238

pow$32:	; SignedLessThanEqual 36 y 0
x10521:	fcompp	; 2: 222 217
x10523:	fstsw ax	; 3: 155 223 224
x10526:	sahf	; 1: 158
x10527:	jae pow$36	; 2: 115 13

pow$33:	; PushZero
x10529:	fldz	; 2: 217 238

pow$34:	; SetReturnValue 0

pow$35:	; Return 0
x10531:	mov ax, [bp]	; 3: 139 70 0
x10534:	mov di, [bp + 4]	; 3: 139 126 4
x10537:	mov bp, [bp + 2]	; 3: 139 110 2
x10540:	jmp ax	; 2: 255 224

pow$36:	; PushFloat x
x10542:	fld qword [bp + 6]	; 3: 221 70 6

pow$37:	; PushZero
x10545:	fldz	; 2: 217 238

pow$38:	; SignedGreaterThanEqual 90 x 0
x10547:	fcompp	; 2: 222 217
x10549:	fstsw ax	; 3: 155 223 224
x10552:	sahf	; 1: 158
x10553:	jbe pow$90	; 4: 15 134 231 0

pow$39:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

pow$40:	; PushFloat y
x10557:	fld qword [bp + 14]	; 3: 221 70 14

pow$41:	; Parameter 22 y 6
x10560:	fstp qword [bp + 28]	; 3: 221 94 28

pow$42:	; Call 22 floor 0
x10563:	mov word [bp + 22], pow$43	; 5: 199 70 22 81 41
x10568:	mov [bp + 24], bp	; 3: 137 110 24
x10571:	add bp, 22	; 3: 131 197 22
x10574:	jmp floor	; 3: 233 104 1

pow$43:	; PostCall 22

pow$44:	; GetReturnValue £temporary354

pow$45:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 1
x10577:	fstp qword [bp + 22]	; 3: 221 94 22

pow$46:	; PushFloat y
x10580:	fld qword [bp + 14]	; 3: 221 70 14

pow$47:	; Parameter 22 y 6
x10583:	fstp qword [bp + 36]	; 3: 221 94 36

pow$48:	; Call 22 ceil 0
x10586:	mov word [bp + 30], pow$49	; 5: 199 70 30 104 41
x10591:	mov [bp + 32], bp	; 3: 137 110 32
x10594:	add bp, 30	; 3: 131 197 30
x10597:	jmp ceil	; 3: 233 159 1

pow$49:	; PostCall 22
x10600:	fstp qword [bp + 30]	; 3: 221 94 30
x10603:	fld qword [bp + 22]	; 3: 221 70 22
x10606:	fld qword [bp + 30]	; 3: 221 70 30

pow$50:	; GetReturnValue £temporary355

pow$51:	; NotEqual 90 £temporary354 £temporary355
x10609:	fcompp	; 2: 222 217
x10611:	fstsw ax	; 3: 155 223 224
x10614:	sahf	; 1: 158
x10615:	jne pow$90	; 4: 15 133 169 0

pow$52:	; PushFloat y
x10619:	fld qword [bp + 14]	; 3: 221 70 14

pow$53:	; FloatingToIntegral £temporary358 y
x10622:	fistp dword [container4bytes#]	; 4: 219 30 78 36
x10626:	mov eax, [container4bytes#]	; 4: 102 161 78 36

pow$54:	; Assign long_y £temporary358
x10630:	mov [bp + 22], eax	; 4: 102 137 70 22

pow$55:	; SignedModulo £temporary359 long_y 2
x10634:	mov eax, [bp + 22]	; 4: 102 139 70 22
x10638:	xor edx, edx	; 3: 102 49 210
x10641:	idiv dword [@965$int4$2#]	; 5: 102 247 62 55 42

pow$56:	; NotEqual 73 £temporary359 0
x10646:	cmp edx, 0	; 4: 102 131 250 0
x10650:	jne pow$73	; 2: 117 67

pow$57:	; CallHeader 26 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

pow$58:	; PushFloat y
x10652:	fld qword [bp + 14]	; 3: 221 70 14

pow$59:	; CallHeader 26 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 1
x10655:	fstp qword [bp + 26]	; 3: 221 94 26

pow$60:	; PushFloat x
x10658:	fld qword [bp + 6]	; 3: 221 70 6

pow$61:	; UnarySubtract £temporary361 x
x10661:	fchs	; 2: 217 224

pow$62:	; Parameter 26 £temporary361 6
x10663:	fstp qword [bp + 40]	; 3: 221 94 40

pow$63:	; Call 26 log 0
x10666:	mov word [bp + 34], pow$64	; 5: 199 70 34 184 41
x10671:	mov [bp + 36], bp	; 3: 137 110 36
x10674:	add bp, 34	; 3: 131 197 34
x10677:	jmp log	; 3: 233 158 253

pow$64:	; PostCall 26
x10680:	fstp qword [bp + 34]	; 3: 221 94 34
x10683:	fld qword [bp + 26]	; 3: 221 70 26
x10686:	fld qword [bp + 34]	; 3: 221 70 34

pow$65:	; GetReturnValue £temporary362

pow$66:	; SignedMultiply £temporary363 y £temporary362
x10689:	fmul	; 2: 222 201

pow$67:	; Parameter 26 £temporary363 6
x10691:	fstp qword [bp + 32]	; 3: 221 94 32

pow$68:	; Call 26 exp 0
x10694:	mov word [bp + 26], pow$69	; 5: 199 70 26 212 41
x10699:	mov [bp + 28], bp	; 3: 137 110 28
x10702:	add bp, 26	; 3: 131 197 26
x10705:	nop	; 1: 144
x10706:	jmp exp	; 2: 235 103

pow$69:	; PostCall 26

pow$70:	; GetReturnValue £temporary364

pow$71:	; SetReturnValue £temporary364

pow$72:	; Return £temporary364
x10708:	mov ax, [bp]	; 3: 139 70 0
x10711:	mov di, [bp + 4]	; 3: 139 126 4
x10714:	mov bp, [bp + 2]	; 3: 139 110 2
x10717:	jmp ax	; 2: 255 224

pow$73:	; CallHeader 26 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

pow$74:	; PushFloat y
x10719:	fld qword [bp + 14]	; 3: 221 70 14

pow$75:	; CallHeader 26 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 1
x10722:	fstp qword [bp + 26]	; 3: 221 94 26

pow$76:	; PushFloat x
x10725:	fld qword [bp + 6]	; 3: 221 70 6

pow$77:	; UnarySubtract £temporary365 x
x10728:	fchs	; 2: 217 224

pow$78:	; Parameter 26 £temporary365 6
x10730:	fstp qword [bp + 40]	; 3: 221 94 40

pow$79:	; Call 26 log 0
x10733:	mov word [bp + 34], pow$80	; 5: 199 70 34 251 41
x10738:	mov [bp + 36], bp	; 3: 137 110 36
x10741:	add bp, 34	; 3: 131 197 34
x10744:	jmp log	; 3: 233 91 253

pow$80:	; PostCall 26
x10747:	fstp qword [bp + 34]	; 3: 221 94 34
x10750:	fld qword [bp + 26]	; 3: 221 70 26
x10753:	fld qword [bp + 34]	; 3: 221 70 34

pow$81:	; GetReturnValue £temporary366

pow$82:	; SignedMultiply £temporary367 y £temporary366
x10756:	fmul	; 2: 222 201

pow$83:	; Parameter 26 £temporary367 6
x10758:	fstp qword [bp + 32]	; 3: 221 94 32

pow$84:	; Call 26 exp 0
x10761:	mov word [bp + 26], pow$85	; 5: 199 70 26 23 42
x10766:	mov [bp + 28], bp	; 3: 137 110 28
x10769:	add bp, 26	; 3: 131 197 26
x10772:	nop	; 1: 144
x10773:	jmp exp	; 2: 235 36

pow$85:	; PostCall 26

pow$86:	; GetReturnValue £temporary368

pow$87:	; UnarySubtract £temporary369 £temporary368
x10775:	fchs	; 2: 217 224

pow$88:	; SetReturnValue £temporary369

pow$89:	; Return £temporary369
x10777:	mov ax, [bp]	; 3: 139 70 0
x10780:	mov di, [bp + 4]	; 3: 139 126 4
x10783:	mov bp, [bp + 2]	; 3: 139 110 2
x10786:	jmp ax	; 2: 255 224

pow$90:	; Assign errno 6
x10788:	mov word [errno], 6	; 6: 199 6 230 10 6 0

pow$91:	; PushZero
x10794:	fldz	; 2: 217 238

pow$92:	; SetReturnValue 0

pow$93:	; Return 0
x10796:	mov ax, [bp]	; 3: 139 70 0
x10799:	mov di, [bp + 4]	; 3: 139 126 4
x10802:	mov bp, [bp + 2]	; 3: 139 110 2
x10805:	jmp ax	; 2: 255 224

pow$94:	; FunctionEnd pow

@965$int4$2#:
x10807:	dd 2	; 4: 2 0 0 0

exp:	; PushOne
x10811:	fld1	; 2: 217 232

exp$1:	; PopFloat index
x10813:	fstp qword [bp + 14]	; 3: 221 94 14

exp$2:	; PushOne
x10816:	fld1	; 2: 217 232

exp$3:	; PopFloat sum
x10818:	fstp qword [bp + 30]	; 3: 221 94 30

exp$4:	; PushOne
x10821:	fld1	; 2: 217 232

exp$5:	; PopFloat faculty
x10823:	fstp qword [bp + 38]	; 3: 221 94 38

exp$6:	; PushFloat x
x10826:	fld qword [bp + 6]	; 3: 221 70 6

exp$7:	; PopFloat power
x10829:	fstp qword [bp + 46]	; 3: 221 94 46

exp$8:	; PushFloat power
x10832:	fld qword [bp + 46]	; 3: 221 70 46

exp$9:	; PushFloat faculty
x10835:	fld qword [bp + 38]	; 3: 221 70 38

exp$10:	; SignedDivide £temporary310 power faculty
x10838:	fdiv	; 2: 222 249

exp$11:	; PopFloat term
x10840:	fstp qword [bp + 22]	; 3: 221 94 22

exp$12:	; PushFloat sum
x10843:	fld qword [bp + 30]	; 3: 221 70 30

exp$13:	; PushFloat term
x10846:	fld qword [bp + 22]	; 3: 221 70 22

exp$14:	; BinaryAdd £temporary311 sum term
x10849:	fadd	; 2: 222 193

exp$15:	; PopFloat sum
x10851:	fstp qword [bp + 30]	; 3: 221 94 30

exp$16:	; PushFloat power
x10854:	fld qword [bp + 46]	; 3: 221 70 46

exp$17:	; PushFloat x
x10857:	fld qword [bp + 6]	; 3: 221 70 6

exp$18:	; SignedMultiply £temporary312 power x
x10860:	fmul	; 2: 222 201

exp$19:	; PopFloat power
x10862:	fstp qword [bp + 46]	; 3: 221 94 46

exp$20:	; PushFloat faculty
x10865:	fld qword [bp + 38]	; 3: 221 70 38

exp$21:	; PushFloat index
x10868:	fld qword [bp + 14]	; 3: 221 70 14

exp$22:	; PushOne
x10871:	fld1	; 2: 217 232

exp$23:	; BinaryAdd £temporary314 index £temporary313
x10873:	fadd	; 2: 222 193

exp$24:	; TopFloat index
x10875:	fst qword [bp + 14]	; 3: 221 86 14

exp$25:	; SignedMultiply £temporary315 faculty index
x10878:	fmul	; 2: 222 201

exp$26:	; PopFloat faculty
x10880:	fstp qword [bp + 38]	; 3: 221 94 38

exp$27:	; CallHeader 54 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

exp$28:	; PushFloat term
x10883:	fld qword [bp + 22]	; 3: 221 70 22

exp$29:	; Parameter 54 term 6
x10886:	fstp qword [bp + 60]	; 3: 221 94 60

exp$30:	; Call 54 fabs 0
x10889:	mov word [bp + 54], exp$31	; 5: 199 70 54 151 42
x10894:	mov [bp + 56], bp	; 3: 137 110 56
x10897:	add bp, 54	; 3: 131 197 54
x10900:	jmp fabs	; 3: 233 96 250

exp$31:	; PostCall 54

exp$32:	; GetReturnValue £temporary316

exp$33:	; PushFloat 0.000000001
x10903:	fld qword [@855$float8$0.000000001#]	; 4: 221 6 177 42

exp$34:	; SignedGreaterThanEqual 8 £temporary316 0.000000001
x10907:	fcompp	; 2: 222 217
x10909:	fstsw ax	; 3: 155 223 224
x10912:	sahf	; 1: 158
x10913:	jbe exp$8	; 2: 118 173

exp$35:	; PushFloat sum
x10915:	fld qword [bp + 30]	; 3: 221 70 30

exp$36:	; SetReturnValue sum

exp$37:	; Return sum
x10918:	mov ax, [bp]	; 3: 139 70 0
x10921:	mov di, [bp + 4]	; 3: 139 126 4
x10924:	mov bp, [bp + 2]	; 3: 139 110 2
x10927:	jmp ax	; 2: 255 224

exp$38:	; FunctionEnd exp

@855$float8$0.000000001#:
x10929:	dq 0.000000001	; 8: 149 214 38 232 11 46 17 62

floor:	; PushFloat x
x10937:	fld qword [bp + 6]	; 3: 221 70 6

floor$1:	; PushZero
x10940:	fldz	; 2: 217 238

floor$2:	; SignedGreaterThanEqual 13 x 0
x10942:	fcompp	; 2: 222 217
x10944:	fstsw ax	; 3: 155 223 224
x10947:	sahf	; 1: 158
x10948:	jbe floor$13	; 2: 118 35

floor$3:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

floor$4:	; PushFloat x
x10950:	fld qword [bp + 6]	; 3: 221 70 6

floor$5:	; UnarySubtract £temporary599 x
x10953:	fchs	; 2: 217 224

floor$6:	; Parameter 14 £temporary599 6
x10955:	fstp qword [bp + 20]	; 3: 221 94 20

floor$7:	; Call 14 ceil 0
x10958:	mov word [bp + 14], floor$8	; 5: 199 70 14 220 42
x10963:	mov [bp + 16], bp	; 3: 137 110 16
x10966:	add bp, 14	; 3: 131 197 14
x10969:	nop	; 1: 144
x10970:	jmp ceil	; 2: 235 43

floor$8:	; PostCall 14

floor$9:	; GetReturnValue £temporary600

floor$10:	; UnarySubtract £temporary601 £temporary600
x10972:	fchs	; 2: 217 224

floor$11:	; SetReturnValue £temporary601

floor$12:	; Return £temporary601
x10974:	mov ax, [bp]	; 3: 139 70 0
x10977:	mov di, [bp + 4]	; 3: 139 126 4
x10980:	mov bp, [bp + 2]	; 3: 139 110 2
x10983:	jmp ax	; 2: 255 224

floor$13:	; PushFloat x
x10985:	fld qword [bp + 6]	; 3: 221 70 6

floor$14:	; FloatingToIntegral £temporary602 x
x10988:	fistp dword [container4bytes#]	; 4: 219 30 78 36
x10992:	mov eax, [container4bytes#]	; 4: 102 161 78 36

floor$15:	; IntegralToFloating £temporary603 £temporary602
x10996:	mov [container4bytes#], eax	; 4: 102 163 78 36
x11000:	fild dword [container4bytes#]	; 4: 219 6 78 36

floor$16:	; SetReturnValue £temporary603

floor$17:	; Return £temporary603
x11004:	mov ax, [bp]	; 3: 139 70 0
x11007:	mov di, [bp + 4]	; 3: 139 126 4
x11010:	mov bp, [bp + 2]	; 3: 139 110 2
x11013:	jmp ax	; 2: 255 224

floor$18:	; FunctionEnd floor

ceil:	; PushFloat x
x11015:	fld qword [bp + 6]	; 3: 221 70 6

ceil$1:	; PushZero
x11018:	fldz	; 2: 217 238

ceil$2:	; SignedGreaterThanEqual 13 x 0
x11020:	fcompp	; 2: 222 217
x11022:	fstsw ax	; 3: 155 223 224
x11025:	sahf	; 1: 158
x11026:	jbe ceil$13	; 2: 118 35

ceil$3:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

ceil$4:	; PushFloat x
x11028:	fld qword [bp + 6]	; 3: 221 70 6

ceil$5:	; UnarySubtract £temporary606 x
x11031:	fchs	; 2: 217 224

ceil$6:	; Parameter 14 £temporary606 6
x11033:	fstp qword [bp + 20]	; 3: 221 94 20

ceil$7:	; Call 14 floor 0
x11036:	mov word [bp + 14], ceil$8	; 5: 199 70 14 42 43
x11041:	mov [bp + 16], bp	; 3: 137 110 16
x11044:	add bp, 14	; 3: 131 197 14
x11047:	nop	; 1: 144
x11048:	jmp floor	; 2: 235 143

ceil$8:	; PostCall 14

ceil$9:	; GetReturnValue £temporary607

ceil$10:	; UnarySubtract £temporary608 £temporary607
x11050:	fchs	; 2: 217 224

ceil$11:	; SetReturnValue £temporary608

ceil$12:	; Return £temporary608
x11052:	mov ax, [bp]	; 3: 139 70 0
x11055:	mov di, [bp + 4]	; 3: 139 126 4
x11058:	mov bp, [bp + 2]	; 3: 139 110 2
x11061:	jmp ax	; 2: 255 224

ceil$13:	; PushFloat x
x11063:	fld qword [bp + 6]	; 3: 221 70 6

ceil$14:	; PushFloat 0.999999999999
x11066:	fld qword [@1467$float8$0.999999999999#]	; 4: 221 6 91 43

ceil$15:	; BinaryAdd £temporary609 x 0.999999999999
x11070:	fadd	; 2: 222 193

ceil$16:	; FloatingToIntegral £temporary610 £temporary609
x11072:	fistp dword [container4bytes#]	; 4: 219 30 78 36
x11076:	mov eax, [container4bytes#]	; 4: 102 161 78 36

ceil$17:	; IntegralToFloating £temporary611 £temporary610
x11080:	mov [container4bytes#], eax	; 4: 102 163 78 36
x11084:	fild dword [container4bytes#]	; 4: 219 6 78 36

ceil$18:	; SetReturnValue £temporary611

ceil$19:	; Return £temporary611
x11088:	mov ax, [bp]	; 3: 139 70 0
x11091:	mov di, [bp + 4]	; 3: 139 126 4
x11094:	mov bp, [bp + 2]	; 3: 139 110 2
x11097:	jmp ax	; 2: 255 224

ceil$20:	; FunctionEnd ceil

@1467$float8$0.999999999999#:
x11099:	dq 0.999999999999	; 8: 209 220 255 255 255 255 239 63

isdigit:	; SignedLessThan 4 c 48
x11107:	cmp word [bp + 6], 48	; 4: 131 126 6 48
x11111:	jl isdigit$4	; 2: 124 11

isdigit$1:	; SignedGreaterThan 4 c 57
x11113:	cmp word [bp + 6], 57	; 4: 131 126 6 57
x11117:	jg isdigit$4	; 2: 127 5

isdigit$2:	; Assign £temporary195 1
x11119:	mov bx, 1	; 3: 187 1 0

isdigit$3:	; Goto 5
x11122:	jmp isdigit$5	; 2: 235 3

isdigit$4:	; Assign £temporary195 0
x11124:	mov bx, 0	; 3: 187 0 0

isdigit$5:	; SetReturnValue £temporary195

isdigit$6:	; Return £temporary195
x11127:	mov ax, [bp]	; 3: 139 70 0
x11130:	mov di, [bp + 4]	; 3: 139 126 4
x11133:	mov bp, [bp + 2]	; 3: 139 110 2
x11136:	jmp ax	; 2: 255 224

isdigit$7:	; FunctionEnd isdigit

sin:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

sin$1:	; PushFloat x
x11138:	fld qword [bp + 6]	; 3: 221 70 6

sin$2:	; Parameter 14 x 6
x11141:	fstp qword [bp + 20]	; 3: 221 94 20

sin$3:	; Call 14 fabs 0
x11144:	mov word [bp + 14], sin$4	; 5: 199 70 14 150 43
x11149:	mov [bp + 16], bp	; 3: 137 110 16
x11152:	add bp, 14	; 3: 131 197 14
x11155:	jmp fabs	; 3: 233 97 249

sin$4:	; PostCall 14

sin$5:	; GetReturnValue £temporary449

sin$6:	; PushFloat 6.28
x11158:	fld qword [@1129$float8$6.28#]	; 4: 221 6 93 44

sin$7:	; SignedLessThanEqual 17 £temporary449 6.28
x11162:	fcompp	; 2: 222 217
x11164:	fstsw ax	; 3: 155 223 224
x11167:	sahf	; 1: 158
x11168:	jae sin$17	; 2: 115 30

sin$8:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

sin$9:	; PushFloat x
x11170:	fld qword [bp + 6]	; 3: 221 70 6

sin$10:	; Parameter 14 x 6
x11173:	fstp qword [bp + 20]	; 3: 221 94 20

sin$11:	; PushFloat 6.28
x11176:	fld qword [@1134$float8$6.28#]	; 4: 221 6 101 44

sin$12:	; Parameter 14 6.28 14
x11180:	fstp qword [bp + 28]	; 3: 221 94 28

sin$13:	; Call 14 fmod 0
x11183:	mov word [bp + 14], sin$14	; 5: 199 70 14 189 43
x11188:	mov [bp + 16], bp	; 3: 137 110 16
x11191:	add bp, 14	; 3: 131 197 14
x11194:	jmp fmod	; 3: 233 192 0

sin$14:	; PostCall 14

sin$15:	; GetReturnValue £temporary451

sin$16:	; PopFloat x
x11197:	fstp qword [bp + 6]	; 3: 221 94 6

sin$17:	; PushOne
x11200:	fld1	; 2: 217 232

sin$18:	; PopFloat index
x11202:	fstp qword [bp + 14]	; 3: 221 94 14

sin$19:	; PushZero
x11205:	fldz	; 2: 217 238

sin$20:	; PopFloat sum
x11207:	fstp qword [bp + 30]	; 3: 221 94 30

sin$21:	; PushOne
x11210:	fld1	; 2: 217 232

sin$22:	; PopFloat sign
x11212:	fstp qword [bp + 38]	; 3: 221 94 38

sin$23:	; PushFloat x
x11215:	fld qword [bp + 6]	; 3: 221 70 6

sin$24:	; PopFloat power
x11218:	fstp qword [bp + 46]	; 3: 221 94 46

sin$25:	; PushOne
x11221:	fld1	; 2: 217 232

sin$26:	; PopFloat faculty
x11223:	fstp qword [bp + 54]	; 3: 221 94 54

sin$27:	; PushFloat sign
x11226:	fld qword [bp + 38]	; 3: 221 70 38

sin$28:	; PushFloat power
x11229:	fld qword [bp + 46]	; 3: 221 70 46

sin$29:	; SignedMultiply £temporary452 sign power
x11232:	fmul	; 2: 222 201

sin$30:	; PushFloat faculty
x11234:	fld qword [bp + 54]	; 3: 221 70 54

sin$31:	; SignedDivide £temporary453 £temporary452 faculty
x11237:	fdiv	; 2: 222 249

sin$32:	; PopFloat term
x11239:	fstp qword [bp + 22]	; 3: 221 94 22

sin$33:	; PushFloat sum
x11242:	fld qword [bp + 30]	; 3: 221 70 30

sin$34:	; PushFloat term
x11245:	fld qword [bp + 22]	; 3: 221 70 22

sin$35:	; BinaryAdd £temporary454 sum term
x11248:	fadd	; 2: 222 193

sin$36:	; PopFloat sum
x11250:	fstp qword [bp + 30]	; 3: 221 94 30

sin$37:	; PushFloat sign
x11253:	fld qword [bp + 38]	; 3: 221 70 38

sin$38:	; PushFloat -1
x11256:	fld qword [@1156$float8$minus1#]	; 4: 221 6 109 44

sin$39:	; SignedMultiply £temporary455 sign -1
x11260:	fmul	; 2: 222 201

sin$40:	; PopFloat sign
x11262:	fstp qword [bp + 38]	; 3: 221 94 38

sin$41:	; PushFloat power
x11265:	fld qword [bp + 46]	; 3: 221 70 46

sin$42:	; PushFloat x
x11268:	fld qword [bp + 6]	; 3: 221 70 6

sin$43:	; PushFloat x
x11271:	fld qword [bp + 6]	; 3: 221 70 6

sin$44:	; SignedMultiply £temporary456 x x
x11274:	fmul	; 2: 222 201

sin$45:	; SignedMultiply £temporary457 power £temporary456
x11276:	fmul	; 2: 222 201

sin$46:	; PopFloat power
x11278:	fstp qword [bp + 46]	; 3: 221 94 46

sin$47:	; PushFloat faculty
x11281:	fld qword [bp + 54]	; 3: 221 70 54

sin$48:	; PushFloat index
x11284:	fld qword [bp + 14]	; 3: 221 70 14

sin$49:	; PushOne
x11287:	fld1	; 2: 217 232

sin$50:	; BinaryAdd £temporary459 index £temporary458
x11289:	fadd	; 2: 222 193

sin$51:	; TopFloat index
x11291:	fst qword [bp + 14]	; 3: 221 86 14

sin$52:	; PushFloat index
x11294:	fld qword [bp + 14]	; 3: 221 70 14

sin$53:	; PushOne
x11297:	fld1	; 2: 217 232

sin$54:	; BinaryAdd £temporary461 index £temporary460
x11299:	fadd	; 2: 222 193

sin$55:	; TopFloat index
x11301:	fst qword [bp + 14]	; 3: 221 86 14

sin$56:	; SignedMultiply £temporary462 index index
x11304:	fmul	; 2: 222 201

sin$57:	; SignedMultiply £temporary463 faculty £temporary462
x11306:	fmul	; 2: 222 201

sin$58:	; PopFloat faculty
x11308:	fstp qword [bp + 54]	; 3: 221 94 54

sin$59:	; CallHeader 62 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

sin$60:	; PushFloat term
x11311:	fld qword [bp + 22]	; 3: 221 70 22

sin$61:	; Parameter 62 term 6
x11314:	fstp qword [bp + 68]	; 3: 221 94 68

sin$62:	; Call 62 fabs 0
x11317:	mov word [bp + 62], sin$63	; 5: 199 70 62 67 44
x11322:	mov [bp + 64], bp	; 3: 137 110 64
x11325:	add bp, 62	; 3: 131 197 62
x11328:	jmp fabs	; 3: 233 180 248

sin$63:	; PostCall 62

sin$64:	; GetReturnValue £temporary464

sin$65:	; PushFloat 0.000000001
x11331:	fld qword [@1167$float8$0.000000001#]	; 4: 221 6 117 44

sin$66:	; SignedGreaterThanEqual 27 £temporary464 0.000000001
x11335:	fcompp	; 2: 222 217
x11337:	fstsw ax	; 3: 155 223 224
x11340:	sahf	; 1: 158
x11341:	jbe sin$27	; 2: 118 139

sin$67:	; PushFloat sum
x11343:	fld qword [bp + 30]	; 3: 221 70 30

sin$68:	; SetReturnValue sum

sin$69:	; Return sum
x11346:	mov ax, [bp]	; 3: 139 70 0
x11349:	mov di, [bp + 4]	; 3: 139 126 4
x11352:	mov bp, [bp + 2]	; 3: 139 110 2
x11355:	jmp ax	; 2: 255 224

sin$70:	; FunctionEnd sin

@1129$float8$6.28#:
x11357:	dq 6.28	; 8: 31 133 235 81 184 30 25 64

@1134$float8$6.28#:
x11365:	dq 6.28	; 8: 31 133 235 81 184 30 25 64

@1156$float8$minus1#:
x11373:	dq -1.0	; 8: 0 0 0 0 0 0 240 191

@1167$float8$0.000000001#:
x11381:	dq 0.000000001	; 8: 149 214 38 232 11 46 17 62

fmod:	; PushFloat y
x11389:	fld qword [bp + 14]	; 3: 221 70 14

fmod$1:	; PushZero
x11392:	fldz	; 2: 217 238

fmod$2:	; Equal 28 y 0
x11394:	fcompp	; 2: 222 217
x11396:	fstsw ax	; 3: 155 223 224
x11399:	sahf	; 1: 158
x11400:	je fmod$28	; 2: 116 86

fmod$3:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

fmod$4:	; PushFloat x
x11402:	fld qword [bp + 6]	; 3: 221 70 6

fmod$5:	; PushFloat y
x11405:	fld qword [bp + 14]	; 3: 221 70 14

fmod$6:	; PushFloat x
x11408:	fld qword [bp + 6]	; 3: 221 70 6

fmod$7:	; PushFloat y
x11411:	fld qword [bp + 14]	; 3: 221 70 14

fmod$8:	; SignedDivide £temporary436 x y
x11414:	fdiv	; 2: 222 249

fmod$9:	; FloatingToIntegral £temporary437 £temporary436
x11416:	fistp word [container2bytes#]	; 4: 223 30 77 27
x11420:	mov ax, [container2bytes#]	; 3: 161 77 27

fmod$10:	; IntegralToFloating £temporary438 £temporary437
x11423:	mov [container2bytes#], ax	; 3: 163 77 27
x11426:	fild word [container2bytes#]	; 4: 223 6 77 27

fmod$11:	; SignedMultiply £temporary439 y £temporary438
x11430:	fmul	; 2: 222 201

fmod$12:	; BinarySubtract £temporary440 x £temporary439
x11432:	fsub	; 2: 222 233

fmod$13:	; Parameter 22 £temporary440 6
x11434:	fstp qword [bp + 28]	; 3: 221 94 28

fmod$14:	; Call 22 fabs 0
x11437:	mov word [bp + 22], fmod$15	; 5: 199 70 22 187 44
x11442:	mov [bp + 24], bp	; 3: 137 110 24
x11445:	add bp, 22	; 3: 131 197 22
x11448:	jmp fabs	; 3: 233 60 248

fmod$15:	; PostCall 22

fmod$16:	; GetReturnValue £temporary441

fmod$17:	; PopFloat remainder
x11451:	fstp qword [bp + 22]	; 3: 221 94 22

fmod$18:	; PushFloat x
x11454:	fld qword [bp + 6]	; 3: 221 70 6

fmod$19:	; PushZero
x11457:	fldz	; 2: 217 238

fmod$20:	; SignedLessThanEqual 24 x 0
x11459:	fcompp	; 2: 222 217
x11461:	fstsw ax	; 3: 155 223 224
x11464:	sahf	; 1: 158
x11465:	jae fmod$24	; 2: 115 5

fmod$21:	; PushFloat remainder
x11467:	fld qword [bp + 22]	; 3: 221 70 22

fmod$22:	; DecreaseStack

fmod$23:	; Goto 26
x11470:	jmp fmod$26	; 2: 235 5

fmod$24:	; PushFloat remainder
x11472:	fld qword [bp + 22]	; 3: 221 70 22

fmod$25:	; UnarySubtract £temporary443 remainder
x11475:	fchs	; 2: 217 224

fmod$26:	; SetReturnValue £temporary447

fmod$27:	; Return £temporary447
x11477:	mov ax, [bp]	; 3: 139 70 0
x11480:	mov di, [bp + 4]	; 3: 139 126 4
x11483:	mov bp, [bp + 2]	; 3: 139 110 2
x11486:	jmp ax	; 2: 255 224

fmod$28:	; Assign errno 6
x11488:	mov word [errno], 6	; 6: 199 6 230 10 6 0

fmod$29:	; PushZero
x11494:	fldz	; 2: 217 238

fmod$30:	; SetReturnValue 0

fmod$31:	; Return 0
x11496:	mov ax, [bp]	; 3: 139 70 0
x11499:	mov di, [bp + 4]	; 3: 139 126 4
x11502:	mov bp, [bp + 2]	; 3: 139 110 2
x11505:	jmp ax	; 2: 255 224

fmod$32:	; FunctionEnd fmod

cos:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

cos$1:	; PushFloat x
x11507:	fld qword [bp + 6]	; 3: 221 70 6

cos$2:	; Parameter 14 x 6
x11510:	fstp qword [bp + 20]	; 3: 221 94 20

cos$3:	; Call 14 fabs 0
x11513:	mov word [bp + 14], cos$4	; 5: 199 70 14 7 45
x11518:	mov [bp + 16], bp	; 3: 137 110 16
x11521:	add bp, 14	; 3: 131 197 14
x11524:	jmp fabs	; 3: 233 240 247

cos$4:	; PostCall 14

cos$5:	; GetReturnValue £temporary470

cos$6:	; PushFloat 6.28
x11527:	fld qword [@1178$float8$6.28#]	; 4: 221 6 205 45

cos$7:	; SignedLessThanEqual 17 £temporary470 6.28
x11531:	fcompp	; 2: 222 217
x11533:	fstsw ax	; 3: 155 223 224
x11536:	sahf	; 1: 158
x11537:	jae cos$17	; 2: 115 30

cos$8:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

cos$9:	; PushFloat x
x11539:	fld qword [bp + 6]	; 3: 221 70 6

cos$10:	; Parameter 14 x 6
x11542:	fstp qword [bp + 20]	; 3: 221 94 20

cos$11:	; PushFloat 6.28
x11545:	fld qword [@1183$float8$6.28#]	; 4: 221 6 213 45

cos$12:	; Parameter 14 6.28 14
x11549:	fstp qword [bp + 28]	; 3: 221 94 28

cos$13:	; Call 14 fmod 0
x11552:	mov word [bp + 14], cos$14	; 5: 199 70 14 46 45
x11557:	mov [bp + 16], bp	; 3: 137 110 16
x11560:	add bp, 14	; 3: 131 197 14
x11563:	jmp fmod	; 3: 233 79 255

cos$14:	; PostCall 14

cos$15:	; GetReturnValue £temporary472

cos$16:	; PopFloat x
x11566:	fstp qword [bp + 6]	; 3: 221 94 6

cos$17:	; PushZero
x11569:	fldz	; 2: 217 238

cos$18:	; PopFloat index
x11571:	fstp qword [bp + 14]	; 3: 221 94 14

cos$19:	; PushZero
x11574:	fldz	; 2: 217 238

cos$20:	; PopFloat sum
x11576:	fstp qword [bp + 30]	; 3: 221 94 30

cos$21:	; PushOne
x11579:	fld1	; 2: 217 232

cos$22:	; PopFloat sign
x11581:	fstp qword [bp + 38]	; 3: 221 94 38

cos$23:	; PushOne
x11584:	fld1	; 2: 217 232

cos$24:	; PopFloat power
x11586:	fstp qword [bp + 46]	; 3: 221 94 46

cos$25:	; PushOne
x11589:	fld1	; 2: 217 232

cos$26:	; PopFloat faculty
x11591:	fstp qword [bp + 54]	; 3: 221 94 54

cos$27:	; PushFloat sign
x11594:	fld qword [bp + 38]	; 3: 221 70 38

cos$28:	; PushFloat power
x11597:	fld qword [bp + 46]	; 3: 221 70 46

cos$29:	; SignedMultiply £temporary473 sign power
x11600:	fmul	; 2: 222 201

cos$30:	; PushFloat faculty
x11602:	fld qword [bp + 54]	; 3: 221 70 54

cos$31:	; SignedDivide £temporary474 £temporary473 faculty
x11605:	fdiv	; 2: 222 249

cos$32:	; PopFloat term
x11607:	fstp qword [bp + 22]	; 3: 221 94 22

cos$33:	; PushFloat sum
x11610:	fld qword [bp + 30]	; 3: 221 70 30

cos$34:	; PushFloat term
x11613:	fld qword [bp + 22]	; 3: 221 70 22

cos$35:	; BinaryAdd £temporary475 sum term
x11616:	fadd	; 2: 222 193

cos$36:	; PopFloat sum
x11618:	fstp qword [bp + 30]	; 3: 221 94 30

cos$37:	; PushFloat sign
x11621:	fld qword [bp + 38]	; 3: 221 70 38

cos$38:	; PushFloat -1
x11624:	fld qword [@1207$float8$minus1#]	; 4: 221 6 221 45

cos$39:	; SignedMultiply £temporary476 sign -1
x11628:	fmul	; 2: 222 201

cos$40:	; PopFloat sign
x11630:	fstp qword [bp + 38]	; 3: 221 94 38

cos$41:	; PushFloat power
x11633:	fld qword [bp + 46]	; 3: 221 70 46

cos$42:	; PushFloat x
x11636:	fld qword [bp + 6]	; 3: 221 70 6

cos$43:	; PushFloat x
x11639:	fld qword [bp + 6]	; 3: 221 70 6

cos$44:	; SignedMultiply £temporary477 x x
x11642:	fmul	; 2: 222 201

cos$45:	; SignedMultiply £temporary478 power £temporary477
x11644:	fmul	; 2: 222 201

cos$46:	; PopFloat power
x11646:	fstp qword [bp + 46]	; 3: 221 94 46

cos$47:	; PushFloat faculty
x11649:	fld qword [bp + 54]	; 3: 221 70 54

cos$48:	; PushFloat index
x11652:	fld qword [bp + 14]	; 3: 221 70 14

cos$49:	; PushOne
x11655:	fld1	; 2: 217 232

cos$50:	; BinaryAdd £temporary480 index £temporary479
x11657:	fadd	; 2: 222 193

cos$51:	; TopFloat index
x11659:	fst qword [bp + 14]	; 3: 221 86 14

cos$52:	; PushFloat index
x11662:	fld qword [bp + 14]	; 3: 221 70 14

cos$53:	; PushOne
x11665:	fld1	; 2: 217 232

cos$54:	; BinaryAdd £temporary482 index £temporary481
x11667:	fadd	; 2: 222 193

cos$55:	; TopFloat index
x11669:	fst qword [bp + 14]	; 3: 221 86 14

cos$56:	; SignedMultiply £temporary483 index index
x11672:	fmul	; 2: 222 201

cos$57:	; SignedMultiply £temporary484 faculty £temporary483
x11674:	fmul	; 2: 222 201

cos$58:	; PopFloat faculty
x11676:	fstp qword [bp + 54]	; 3: 221 94 54

cos$59:	; CallHeader 62 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

cos$60:	; PushFloat term
x11679:	fld qword [bp + 22]	; 3: 221 70 22

cos$61:	; Parameter 62 term 6
x11682:	fstp qword [bp + 68]	; 3: 221 94 68

cos$62:	; Call 62 fabs 0
x11685:	mov word [bp + 62], cos$63	; 5: 199 70 62 179 45
x11690:	mov [bp + 64], bp	; 3: 137 110 64
x11693:	add bp, 62	; 3: 131 197 62
x11696:	jmp fabs	; 3: 233 68 247

cos$63:	; PostCall 62

cos$64:	; GetReturnValue £temporary485

cos$65:	; PushFloat 0.000000001
x11699:	fld qword [@1218$float8$0.000000001#]	; 4: 221 6 229 45

cos$66:	; SignedGreaterThanEqual 27 £temporary485 0.000000001
x11703:	fcompp	; 2: 222 217
x11705:	fstsw ax	; 3: 155 223 224
x11708:	sahf	; 1: 158
x11709:	jbe cos$27	; 2: 118 139

cos$67:	; PushFloat sum
x11711:	fld qword [bp + 30]	; 3: 221 70 30

cos$68:	; SetReturnValue sum

cos$69:	; Return sum
x11714:	mov ax, [bp]	; 3: 139 70 0
x11717:	mov di, [bp + 4]	; 3: 139 126 4
x11720:	mov bp, [bp + 2]	; 3: 139 110 2
x11723:	jmp ax	; 2: 255 224

cos$70:	; FunctionEnd cos

@1178$float8$6.28#:
x11725:	dq 6.28	; 8: 31 133 235 81 184 30 25 64

@1183$float8$6.28#:
x11733:	dq 6.28	; 8: 31 133 235 81 184 30 25 64

@1207$float8$minus1#:
x11741:	dq -1.0	; 8: 0 0 0 0 0 0 240 191

@1218$float8$0.000000001#:
x11749:	dq 0.000000001	; 8: 149 214 38 232 11 46 17 62

tan:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

tan$1:	; PushFloat x
x11757:	fld qword [bp + 6]	; 3: 221 70 6

tan$2:	; Parameter 14 x 6
x11760:	fstp qword [bp + 20]	; 3: 221 94 20

tan$3:	; Call 14 cos 0
x11763:	mov word [bp + 14], tan$4	; 5: 199 70 14 1 46
x11768:	mov [bp + 16], bp	; 3: 137 110 16
x11771:	add bp, 14	; 3: 131 197 14
x11774:	jmp cos	; 3: 233 242 254

tan$4:	; PostCall 14

tan$5:	; GetReturnValue £temporary491

tan$6:	; TopFloat cos_of_x
x11777:	fst qword [bp + 14]	; 3: 221 86 14

tan$7:	; PushZero
x11780:	fldz	; 2: 217 238

tan$8:	; Equal 19 cos_of_x 0
x11782:	fcompp	; 2: 222 217
x11784:	fstsw ax	; 3: 155 223 224
x11787:	sahf	; 1: 158
x11788:	je tan$19	; 2: 116 36

tan$9:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

tan$10:	; PushFloat x
x11790:	fld qword [bp + 6]	; 3: 221 70 6

tan$11:	; Parameter 22 x 6
x11793:	fstp qword [bp + 28]	; 3: 221 94 28

tan$12:	; Call 22 sin 0
x11796:	mov word [bp + 22], tan$13	; 5: 199 70 22 34 46
x11801:	mov [bp + 24], bp	; 3: 137 110 24
x11804:	add bp, 22	; 3: 131 197 22
x11807:	jmp sin	; 3: 233 96 253

tan$13:	; PostCall 22

tan$14:	; GetReturnValue £temporary493

tan$15:	; PushFloat cos_of_x
x11810:	fld qword [bp + 14]	; 3: 221 70 14

tan$16:	; SignedDivide £temporary494 £temporary493 cos_of_x
x11813:	fdiv	; 2: 222 249

tan$17:	; SetReturnValue £temporary494

tan$18:	; Return £temporary494
x11815:	mov ax, [bp]	; 3: 139 70 0
x11818:	mov di, [bp + 4]	; 3: 139 126 4
x11821:	mov bp, [bp + 2]	; 3: 139 110 2
x11824:	jmp ax	; 2: 255 224

tan$19:	; Assign errno 6
x11826:	mov word [errno], 6	; 6: 199 6 230 10 6 0

tan$20:	; PushZero
x11832:	fldz	; 2: 217 238

tan$21:	; SetReturnValue 0

tan$22:	; Return 0
x11834:	mov ax, [bp]	; 3: 139 70 0
x11837:	mov di, [bp + 4]	; 3: 139 126 4
x11840:	mov bp, [bp + 2]	; 3: 139 110 2
x11843:	jmp ax	; 2: 255 224

tan$23:	; FunctionEnd tan

asin:	; PushFloat x
x11845:	fld qword [bp + 6]	; 3: 221 70 6

asin$1:	; PushOne
x11848:	fld1	; 2: 217 232

asin$2:	; NotEqual 6 x 1
x11850:	fcompp	; 2: 222 217
x11852:	fstsw ax	; 3: 155 223 224
x11855:	sahf	; 1: 158
x11856:	jne asin$6	; 2: 117 15

asin$3:	; PushFloat 1.57
x11858:	fld qword [@1244$float8$1.57#]	; 4: 221 6 251 46

asin$4:	; SetReturnValue 1.57

asin$5:	; Return 1.57
x11862:	mov ax, [bp]	; 3: 139 70 0
x11865:	mov di, [bp + 4]	; 3: 139 126 4
x11868:	mov bp, [bp + 2]	; 3: 139 110 2
x11871:	jmp ax	; 2: 255 224

asin$6:	; PushFloat x
x11873:	fld qword [bp + 6]	; 3: 221 70 6

asin$7:	; PushZero
x11876:	fldz	; 2: 217 238

asin$8:	; SignedGreaterThanEqual 19 x 0
x11878:	fcompp	; 2: 222 217
x11880:	fstsw ax	; 3: 155 223 224
x11883:	sahf	; 1: 158
x11884:	jbe asin$19	; 2: 118 35

asin$9:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

asin$10:	; PushFloat x
x11886:	fld qword [bp + 6]	; 3: 221 70 6

asin$11:	; UnarySubtract £temporary499 x
x11889:	fchs	; 2: 217 224

asin$12:	; Parameter 14 £temporary499 6
x11891:	fstp qword [bp + 20]	; 3: 221 94 20

asin$13:	; Call 14 asin 0
x11894:	mov word [bp + 14], asin$14	; 5: 199 70 14 132 46
x11899:	mov [bp + 16], bp	; 3: 137 110 16
x11902:	add bp, 14	; 3: 131 197 14
x11905:	nop	; 1: 144
x11906:	jmp asin	; 2: 235 193

asin$14:	; PostCall 14

asin$15:	; GetReturnValue £temporary500

asin$16:	; UnarySubtract £temporary501 £temporary500
x11908:	fchs	; 2: 217 224

asin$17:	; SetReturnValue £temporary501

asin$18:	; Return £temporary501
x11910:	mov ax, [bp]	; 3: 139 70 0
x11913:	mov di, [bp + 4]	; 3: 139 126 4
x11916:	mov bp, [bp + 2]	; 3: 139 110 2
x11919:	jmp ax	; 2: 255 224

asin$19:	; PushFloat x
x11921:	fld qword [bp + 6]	; 3: 221 70 6

asin$20:	; PushOne
x11924:	fld1	; 2: 217 232

asin$21:	; SignedGreaterThanEqual 41 x 1
x11926:	fcompp	; 2: 222 217
x11928:	fstsw ax	; 3: 155 223 224
x11931:	sahf	; 1: 158
x11932:	jbe asin$41	; 2: 118 74

asin$22:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

asin$23:	; PushFloat x
x11934:	fld qword [bp + 6]	; 3: 221 70 6

asin$24:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 1
x11937:	fstp qword [bp + 14]	; 3: 221 94 14

asin$25:	; PushOne
x11940:	fld1	; 2: 217 232

asin$26:	; PushFloat x
x11942:	fld qword [bp + 6]	; 3: 221 70 6

asin$27:	; PushFloat x
x11945:	fld qword [bp + 6]	; 3: 221 70 6

asin$28:	; SignedMultiply £temporary503 x x
x11948:	fmul	; 2: 222 201

asin$29:	; BinarySubtract £temporary504 1 £temporary503
x11950:	fsub	; 2: 222 233

asin$30:	; Parameter 14 £temporary504 6
x11952:	fstp qword [bp + 28]	; 3: 221 94 28

asin$31:	; Call 14 sqrt 0
x11955:	mov word [bp + 22], asin$32	; 5: 199 70 22 193 46
x11960:	mov [bp + 24], bp	; 3: 137 110 24
x11963:	add bp, 22	; 3: 131 197 22
x11966:	nop	; 1: 144
x11967:	jmp sqrt	; 2: 235 66

asin$32:	; PostCall 14
x11969:	fstp qword [bp + 22]	; 3: 221 94 22
x11972:	fld qword [bp + 14]	; 3: 221 70 14
x11975:	fld qword [bp + 22]	; 3: 221 70 22

asin$33:	; GetReturnValue £temporary505

asin$34:	; SignedDivide £temporary506 x £temporary505
x11978:	fdiv	; 2: 222 249

asin$35:	; Parameter 14 £temporary506 6
x11980:	fstp qword [bp + 20]	; 3: 221 94 20

asin$36:	; Call 14 atan 0
x11983:	mov word [bp + 14], asin$37	; 5: 199 70 14 221 46
x11988:	mov [bp + 16], bp	; 3: 137 110 16
x11991:	add bp, 14	; 3: 131 197 14
x11994:	jmp atan	; 3: 233 167 0

asin$37:	; PostCall 14

asin$38:	; GetReturnValue £temporary507

asin$39:	; SetReturnValue £temporary507

asin$40:	; Return £temporary507
x11997:	mov ax, [bp]	; 3: 139 70 0
x12000:	mov di, [bp + 4]	; 3: 139 126 4
x12003:	mov bp, [bp + 2]	; 3: 139 110 2
x12006:	jmp ax	; 2: 255 224

asin$41:	; Assign errno 6
x12008:	mov word [errno], 6	; 6: 199 6 230 10 6 0

asin$42:	; PushZero
x12014:	fldz	; 2: 217 238

asin$43:	; SetReturnValue 0

asin$44:	; Return 0
x12016:	mov ax, [bp]	; 3: 139 70 0
x12019:	mov di, [bp + 4]	; 3: 139 126 4
x12022:	mov bp, [bp + 2]	; 3: 139 110 2
x12025:	jmp ax	; 2: 255 224

asin$45:	; FunctionEnd asin

@1244$float8$1.57#:
x12027:	dq 1.57	; 8: 31 133 235 81 184 30 249 63

sqrt:	; PushFloat x
x12035:	fld qword [bp + 6]	; 3: 221 70 6

sqrt$1:	; PushZero
x12038:	fldz	; 2: 217 238

sqrt$2:	; SignedLessThan 27 x 0
x12040:	fcompp	; 2: 222 217
x12042:	fstsw ax	; 3: 155 223 224
x12045:	sahf	; 1: 158
x12046:	ja sqrt$27	; 2: 119 81

sqrt$3:	; PushOne
x12048:	fld1	; 2: 217 232

sqrt$4:	; PopFloat root_i_plus_1
x12050:	fstp qword [bp + 22]	; 3: 221 94 22

sqrt$5:	; PushFloat root_i_plus_1
x12053:	fld qword [bp + 22]	; 3: 221 70 22

sqrt$6:	; TopFloat root_i
x12056:	fst qword [bp + 14]	; 3: 221 86 14

sqrt$7:	; PushFloat x
x12059:	fld qword [bp + 6]	; 3: 221 70 6

sqrt$8:	; PushFloat root_i
x12062:	fld qword [bp + 14]	; 3: 221 70 14

sqrt$9:	; SignedDivide £temporary409 x root_i
x12065:	fdiv	; 2: 222 249

sqrt$10:	; BinaryAdd £temporary410 root_i £temporary409
x12067:	fadd	; 2: 222 193

sqrt$11:	; PushFloat 2
x12069:	fld qword [@1061$float8$2#]	; 4: 221 6 116 47

sqrt$12:	; SignedDivide £temporary411 £temporary410 2
x12073:	fdiv	; 2: 222 249

sqrt$13:	; PopFloat root_i_plus_1
x12075:	fstp qword [bp + 22]	; 3: 221 94 22

sqrt$14:	; CallHeader 30 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

sqrt$15:	; PushFloat root_i_plus_1
x12078:	fld qword [bp + 22]	; 3: 221 70 22

sqrt$16:	; PushFloat root_i
x12081:	fld qword [bp + 14]	; 3: 221 70 14

sqrt$17:	; BinarySubtract £temporary412 root_i_plus_1 root_i
x12084:	fsub	; 2: 222 233

sqrt$18:	; Parameter 30 £temporary412 6
x12086:	fstp qword [bp + 36]	; 3: 221 94 36

sqrt$19:	; Call 30 fabs 0
x12089:	mov word [bp + 30], sqrt$20	; 5: 199 70 30 71 47
x12094:	mov [bp + 32], bp	; 3: 137 110 32
x12097:	add bp, 30	; 3: 131 197 30
x12100:	jmp fabs	; 3: 233 176 245

sqrt$20:	; PostCall 30

sqrt$21:	; GetReturnValue £temporary413

sqrt$22:	; PushFloat 0.000000001
x12103:	fld qword [@1065$float8$0.000000001#]	; 4: 221 6 124 47

sqrt$23:	; SignedGreaterThanEqual 5 £temporary413 0.000000001
x12107:	fcompp	; 2: 222 217
x12109:	fstsw ax	; 3: 155 223 224
x12112:	sahf	; 1: 158
x12113:	jbe sqrt$5	; 2: 118 194

sqrt$24:	; PushFloat root_i_plus_1
x12115:	fld qword [bp + 22]	; 3: 221 70 22

sqrt$25:	; SetReturnValue root_i_plus_1

sqrt$26:	; Return root_i_plus_1
x12118:	mov ax, [bp]	; 3: 139 70 0
x12121:	mov di, [bp + 4]	; 3: 139 126 4
x12124:	mov bp, [bp + 2]	; 3: 139 110 2
x12127:	jmp ax	; 2: 255 224

sqrt$27:	; Assign errno 6
x12129:	mov word [errno], 6	; 6: 199 6 230 10 6 0

sqrt$28:	; PushZero
x12135:	fldz	; 2: 217 238

sqrt$29:	; SetReturnValue 0

sqrt$30:	; Return 0
x12137:	mov ax, [bp]	; 3: 139 70 0
x12140:	mov di, [bp + 4]	; 3: 139 126 4
x12143:	mov bp, [bp + 2]	; 3: 139 110 2
x12146:	jmp ax	; 2: 255 224

sqrt$31:	; FunctionEnd sqrt

@1061$float8$2#:
x12148:	dq 2.0	; 8: 0 0 0 0 0 0 0 64

@1065$float8$0.000000001#:
x12156:	dq 0.000000001	; 8: 149 214 38 232 11 46 17 62

atan:	; PushFloat x
x12164:	fld qword [bp + 6]	; 3: 221 70 6

atan$1:	; PushZero
x12167:	fldz	; 2: 217 238

atan$2:	; SignedGreaterThanEqual 13 x 0
x12169:	fcompp	; 2: 222 217
x12171:	fstsw ax	; 3: 155 223 224
x12174:	sahf	; 1: 158
x12175:	jbe atan$13	; 2: 118 35

atan$3:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

atan$4:	; PushFloat x
x12177:	fld qword [bp + 6]	; 3: 221 70 6

atan$5:	; UnarySubtract £temporary526 x
x12180:	fchs	; 2: 217 224

atan$6:	; Parameter 14 £temporary526 6
x12182:	fstp qword [bp + 20]	; 3: 221 94 20

atan$7:	; Call 14 atan 0
x12185:	mov word [bp + 14], atan$8	; 5: 199 70 14 167 47
x12190:	mov [bp + 16], bp	; 3: 137 110 16
x12193:	add bp, 14	; 3: 131 197 14
x12196:	nop	; 1: 144
x12197:	jmp atan	; 2: 235 221

atan$8:	; PostCall 14

atan$9:	; GetReturnValue £temporary527

atan$10:	; UnarySubtract £temporary528 £temporary527
x12199:	fchs	; 2: 217 224

atan$11:	; SetReturnValue £temporary528

atan$12:	; Return £temporary528
x12201:	mov ax, [bp]	; 3: 139 70 0
x12204:	mov di, [bp + 4]	; 3: 139 126 4
x12207:	mov bp, [bp + 2]	; 3: 139 110 2
x12210:	jmp ax	; 2: 255 224

atan$13:	; PushFloat x
x12212:	fld qword [bp + 6]	; 3: 221 70 6

atan$14:	; PushOne
x12215:	fld1	; 2: 217 232

atan$15:	; SignedLessThanEqual 28 x 1
x12217:	fcompp	; 2: 222 217
x12219:	fstsw ax	; 3: 155 223 224
x12222:	sahf	; 1: 158
x12223:	jae atan$28	; 2: 115 53

atan$16:	; PushFloat 1.57
x12225:	fld qword [@1312$float8$1.57#]	; 4: 221 6 237 48

atan$17:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 1
x12229:	fstp qword [bp + 14]	; 3: 221 94 14

atan$18:	; PushOne
x12232:	fld1	; 2: 217 232

atan$19:	; PushFloat x
x12234:	fld qword [bp + 6]	; 3: 221 70 6

atan$20:	; SignedDivide £temporary530 1 x
x12237:	fdiv	; 2: 222 249

atan$21:	; Parameter 14 £temporary530 6
x12239:	fstp qword [bp + 28]	; 3: 221 94 28

atan$22:	; Call 14 atan 0
x12242:	mov word [bp + 22], atan$23	; 5: 199 70 22 224 47
x12247:	mov [bp + 24], bp	; 3: 137 110 24
x12250:	add bp, 22	; 3: 131 197 22
x12253:	nop	; 1: 144
x12254:	jmp atan	; 2: 235 164

atan$23:	; PostCall 14
x12256:	fstp qword [bp + 22]	; 3: 221 94 22
x12259:	fld qword [bp + 14]	; 3: 221 70 14
x12262:	fld qword [bp + 22]	; 3: 221 70 22

atan$24:	; GetReturnValue £temporary531

atan$25:	; BinarySubtract £temporary532 1.57 £temporary531
x12265:	fsub	; 2: 222 233

atan$26:	; SetReturnValue £temporary532

atan$27:	; Return £temporary532
x12267:	mov ax, [bp]	; 3: 139 70 0
x12270:	mov di, [bp + 4]	; 3: 139 126 4
x12273:	mov bp, [bp + 2]	; 3: 139 110 2
x12276:	jmp ax	; 2: 255 224

atan$28:	; PushFloat x
x12278:	fld qword [bp + 6]	; 3: 221 70 6

atan$29:	; PushFloat 0.5
x12281:	fld qword [@1319$float8$0.5#]	; 4: 221 6 245 48

atan$30:	; SignedLessThanEqual 54 x 0.5
x12285:	fcompp	; 2: 222 217
x12287:	fstsw ax	; 3: 155 223 224
x12290:	sahf	; 1: 158
x12291:	jae atan$54	; 2: 115 102

atan$31:	; PushFloat 2
x12293:	fld qword [@1333$float8$2#]	; 4: 221 6 253 48

atan$32:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 1
x12297:	fstp qword [bp + 14]	; 3: 221 94 14

atan$33:	; PushFloat x
x12300:	fld qword [bp + 6]	; 3: 221 70 6

atan$34:	; PushOne
x12303:	fld1	; 2: 217 232

atan$35:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 3
x12305:	fstp qword [bp + 22]	; 3: 221 94 22
x12308:	fstp qword [bp + 30]	; 3: 221 94 30

atan$36:	; PushOne
x12311:	fld1	; 2: 217 232

atan$37:	; PushFloat x
x12313:	fld qword [bp + 6]	; 3: 221 70 6

atan$38:	; PushFloat x
x12316:	fld qword [bp + 6]	; 3: 221 70 6

atan$39:	; SignedMultiply £temporary534 x x
x12319:	fmul	; 2: 222 201

atan$40:	; BinaryAdd £temporary535 1 £temporary534
x12321:	fadd	; 2: 222 193

atan$41:	; Parameter 14 £temporary535 14
x12323:	fstp qword [bp + 52]	; 3: 221 94 52

atan$42:	; Call 14 sqrt 0
x12326:	mov word [bp + 46], atan$43	; 5: 199 70 46 52 48
x12331:	mov [bp + 48], bp	; 3: 137 110 48
x12334:	add bp, 46	; 3: 131 197 46
x12337:	jmp sqrt	; 3: 233 207 254

atan$43:	; PostCall 14
x12340:	fstp qword [bp + 38]	; 3: 221 94 38
x12343:	fld qword [bp + 30]	; 3: 221 70 30
x12346:	fld qword [bp + 22]	; 3: 221 70 22
x12349:	fld qword [bp + 38]	; 3: 221 70 38

atan$44:	; GetReturnValue £temporary536

atan$45:	; BinaryAdd £temporary537 1 £temporary536
x12352:	fadd	; 2: 222 193

atan$46:	; SignedDivide £temporary538 x £temporary537
x12354:	fdiv	; 2: 222 249

atan$47:	; Parameter 14 £temporary538 6
x12356:	fstp qword [bp + 28]	; 3: 221 94 28

atan$48:	; Call 14 atan 0
x12359:	mov word [bp + 22], atan$49	; 5: 199 70 22 85 48
x12364:	mov [bp + 24], bp	; 3: 137 110 24
x12367:	add bp, 22	; 3: 131 197 22
x12370:	jmp atan	; 3: 233 47 255

atan$49:	; PostCall 14
x12373:	fstp qword [bp + 22]	; 3: 221 94 22
x12376:	fld qword [bp + 14]	; 3: 221 70 14
x12379:	fld qword [bp + 22]	; 3: 221 70 22

atan$50:	; GetReturnValue £temporary539

atan$51:	; SignedMultiply £temporary540 2 £temporary539
x12382:	fmul	; 2: 222 201

atan$52:	; SetReturnValue £temporary540

atan$53:	; Return £temporary540
x12384:	mov ax, [bp]	; 3: 139 70 0
x12387:	mov di, [bp + 4]	; 3: 139 126 4
x12390:	mov bp, [bp + 2]	; 3: 139 110 2
x12393:	jmp ax	; 2: 255 224

atan$54:	; PushZero
x12395:	fldz	; 2: 217 238

atan$55:	; PopFloat sum
x12397:	fstp qword [bp + 22]	; 3: 221 94 22

atan$56:	; PushOne
x12400:	fld1	; 2: 217 232

atan$57:	; PopFloat sign
x12402:	fstp qword [bp + 30]	; 3: 221 94 30

atan$58:	; PushOne
x12405:	fld1	; 2: 217 232

atan$59:	; PopFloat denominator
x12407:	fstp qword [bp + 38]	; 3: 221 94 38

atan$60:	; PushFloat x
x12410:	fld qword [bp + 6]	; 3: 221 70 6

atan$61:	; PopFloat product
x12413:	fstp qword [bp + 46]	; 3: 221 94 46

atan$62:	; PushFloat sign
x12416:	fld qword [bp + 30]	; 3: 221 70 30

atan$63:	; PushFloat product
x12419:	fld qword [bp + 46]	; 3: 221 70 46

atan$64:	; SignedMultiply £temporary541 sign product
x12422:	fmul	; 2: 222 201

atan$65:	; PushFloat denominator
x12424:	fld qword [bp + 38]	; 3: 221 70 38

atan$66:	; SignedDivide £temporary542 £temporary541 denominator
x12427:	fdiv	; 2: 222 249

atan$67:	; PopFloat term
x12429:	fstp qword [bp + 14]	; 3: 221 94 14

atan$68:	; PushFloat sum
x12432:	fld qword [bp + 22]	; 3: 221 70 22

atan$69:	; PushFloat term
x12435:	fld qword [bp + 14]	; 3: 221 70 14

atan$70:	; BinaryAdd £temporary543 sum term
x12438:	fadd	; 2: 222 193

atan$71:	; PopFloat sum
x12440:	fstp qword [bp + 22]	; 3: 221 94 22

atan$72:	; PushFloat sign
x12443:	fld qword [bp + 30]	; 3: 221 70 30

atan$73:	; UnarySubtract £temporary544 sign
x12446:	fchs	; 2: 217 224

atan$74:	; PopFloat sign
x12448:	fstp qword [bp + 30]	; 3: 221 94 30

atan$75:	; PushFloat product
x12451:	fld qword [bp + 46]	; 3: 221 70 46

atan$76:	; PushFloat x
x12454:	fld qword [bp + 6]	; 3: 221 70 6

atan$77:	; PushFloat x
x12457:	fld qword [bp + 6]	; 3: 221 70 6

atan$78:	; SignedMultiply £temporary545 x x
x12460:	fmul	; 2: 222 201

atan$79:	; SignedMultiply £temporary546 product £temporary545
x12462:	fmul	; 2: 222 201

atan$80:	; PopFloat product
x12464:	fstp qword [bp + 46]	; 3: 221 94 46

atan$81:	; PushFloat denominator
x12467:	fld qword [bp + 38]	; 3: 221 70 38

atan$82:	; PushFloat 2
x12470:	fld qword [@1353$float8$2#]	; 4: 221 6 5 49

atan$83:	; BinaryAdd £temporary547 denominator 2
x12474:	fadd	; 2: 222 193

atan$84:	; PopFloat denominator
x12476:	fstp qword [bp + 38]	; 3: 221 94 38

atan$85:	; CallHeader 54 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

atan$86:	; PushFloat term
x12479:	fld qword [bp + 14]	; 3: 221 70 14

atan$87:	; Parameter 54 term 6
x12482:	fstp qword [bp + 60]	; 3: 221 94 60

atan$88:	; Call 54 fabs 0
x12485:	mov word [bp + 54], atan$89	; 5: 199 70 54 211 48
x12490:	mov [bp + 56], bp	; 3: 137 110 56
x12493:	add bp, 54	; 3: 131 197 54
x12496:	jmp fabs	; 3: 233 36 244

atan$89:	; PostCall 54

atan$90:	; GetReturnValue £temporary548

atan$91:	; PushFloat 0.000000001
x12499:	fld qword [@1356$float8$0.000000001#]	; 4: 221 6 13 49

atan$92:	; SignedGreaterThanEqual 62 £temporary548 0.000000001
x12503:	fcompp	; 2: 222 217
x12505:	fstsw ax	; 3: 155 223 224
x12508:	sahf	; 1: 158
x12509:	jbe atan$62	; 2: 118 161

atan$93:	; PushFloat sum
x12511:	fld qword [bp + 22]	; 3: 221 70 22

atan$94:	; SetReturnValue sum

atan$95:	; Return sum
x12514:	mov ax, [bp]	; 3: 139 70 0
x12517:	mov di, [bp + 4]	; 3: 139 126 4
x12520:	mov bp, [bp + 2]	; 3: 139 110 2
x12523:	jmp ax	; 2: 255 224

atan$96:	; FunctionEnd atan

@1312$float8$1.57#:
x12525:	dq 1.57	; 8: 31 133 235 81 184 30 249 63

@1319$float8$0.5#:
x12533:	dq 0.5	; 8: 0 0 0 0 0 0 224 63

@1333$float8$2#:
x12541:	dq 2.0	; 8: 0 0 0 0 0 0 0 64

@1353$float8$2#:
x12549:	dq 2.0	; 8: 0 0 0 0 0 0 0 64

@1356$float8$0.000000001#:
x12557:	dq 0.000000001	; 8: 149 214 38 232 11 46 17 62

acos:	; PushFloat x
x12565:	fld qword [bp + 6]	; 3: 221 70 6

acos$1:	; PushZero
x12568:	fldz	; 2: 217 238

acos$2:	; NotEqual 6 x 0
x12570:	fcompp	; 2: 222 217
x12572:	fstsw ax	; 3: 155 223 224
x12575:	sahf	; 1: 158
x12576:	jne acos$6	; 2: 117 15

acos$3:	; PushFloat 1.57
x12578:	fld qword [@1274$float8$1.57#]	; 4: 221 6 207 49

acos$4:	; SetReturnValue 1.57

acos$5:	; Return 1.57
x12582:	mov ax, [bp]	; 3: 139 70 0
x12585:	mov di, [bp + 4]	; 3: 139 126 4
x12588:	mov bp, [bp + 2]	; 3: 139 110 2
x12591:	jmp ax	; 2: 255 224

acos$6:	; PushFloat x
x12593:	fld qword [bp + 6]	; 3: 221 70 6

acos$7:	; PushZero
x12596:	fldz	; 2: 217 238

acos$8:	; SignedGreaterThanEqual 20 x 0
x12598:	fcompp	; 2: 222 217
x12600:	fstsw ax	; 3: 155 223 224
x12603:	sahf	; 1: 158
x12604:	jbe acos$20	; 2: 118 51

acos$9:	; PushFloat 3.14
x12606:	fld qword [@1279$float8$3.14#]	; 4: 221 6 215 49

acos$10:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 1
x12610:	fstp qword [bp + 14]	; 3: 221 94 14

acos$11:	; PushFloat x
x12613:	fld qword [bp + 6]	; 3: 221 70 6

acos$12:	; UnarySubtract £temporary513 x
x12616:	fchs	; 2: 217 224

acos$13:	; Parameter 14 £temporary513 6
x12618:	fstp qword [bp + 28]	; 3: 221 94 28

acos$14:	; Call 14 acos 0
x12621:	mov word [bp + 22], acos$15	; 5: 199 70 22 91 49
x12626:	mov [bp + 24], bp	; 3: 137 110 24
x12629:	add bp, 22	; 3: 131 197 22
x12632:	nop	; 1: 144
x12633:	jmp acos	; 2: 235 186

acos$15:	; PostCall 14
x12635:	fstp qword [bp + 22]	; 3: 221 94 22
x12638:	fld qword [bp + 14]	; 3: 221 70 14
x12641:	fld qword [bp + 22]	; 3: 221 70 22

acos$16:	; GetReturnValue £temporary514

acos$17:	; BinarySubtract £temporary515 3.14 £temporary514
x12644:	fsub	; 2: 222 233

acos$18:	; SetReturnValue £temporary515

acos$19:	; Return £temporary515
x12646:	mov ax, [bp]	; 3: 139 70 0
x12649:	mov di, [bp + 4]	; 3: 139 126 4
x12652:	mov bp, [bp + 2]	; 3: 139 110 2
x12655:	jmp ax	; 2: 255 224

acos$20:	; PushFloat x
x12657:	fld qword [bp + 6]	; 3: 221 70 6

acos$21:	; PushOne
x12660:	fld1	; 2: 217 232

acos$22:	; SignedGreaterThan 42 x 1
x12662:	fcompp	; 2: 222 217
x12664:	fstsw ax	; 3: 155 223 224
x12667:	sahf	; 1: 158
x12668:	jb acos$42	; 2: 114 62

acos$23:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

acos$24:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

acos$25:	; PushOne
x12670:	fld1	; 2: 217 232

acos$26:	; PushFloat x
x12672:	fld qword [bp + 6]	; 3: 221 70 6

acos$27:	; PushFloat x
x12675:	fld qword [bp + 6]	; 3: 221 70 6

acos$28:	; SignedMultiply £temporary517 x x
x12678:	fmul	; 2: 222 201

acos$29:	; BinarySubtract £temporary518 1 £temporary517
x12680:	fsub	; 2: 222 233

acos$30:	; Parameter 14 £temporary518 6
x12682:	fstp qword [bp + 20]	; 3: 221 94 20

acos$31:	; Call 14 sqrt 0
x12685:	mov word [bp + 14], acos$32	; 5: 199 70 14 155 49
x12690:	mov [bp + 16], bp	; 3: 137 110 16
x12693:	add bp, 14	; 3: 131 197 14
x12696:	jmp sqrt	; 3: 233 104 253

acos$32:	; PostCall 14

acos$33:	; GetReturnValue £temporary519

acos$34:	; PushFloat x
x12699:	fld qword [bp + 6]	; 3: 221 70 6

acos$35:	; SignedDivide £temporary520 £temporary519 x
x12702:	fdiv	; 2: 222 249

acos$36:	; Parameter 14 £temporary520 6
x12704:	fstp qword [bp + 20]	; 3: 221 94 20

acos$37:	; Call 14 atan 0
x12707:	mov word [bp + 14], acos$38	; 5: 199 70 14 177 49
x12712:	mov [bp + 16], bp	; 3: 137 110 16
x12715:	add bp, 14	; 3: 131 197 14
x12718:	jmp atan	; 3: 233 211 253

acos$38:	; PostCall 14

acos$39:	; GetReturnValue £temporary521

acos$40:	; SetReturnValue £temporary521

acos$41:	; Return £temporary521
x12721:	mov ax, [bp]	; 3: 139 70 0
x12724:	mov di, [bp + 4]	; 3: 139 126 4
x12727:	mov bp, [bp + 2]	; 3: 139 110 2
x12730:	jmp ax	; 2: 255 224

acos$42:	; Assign errno 6
x12732:	mov word [errno], 6	; 6: 199 6 230 10 6 0

acos$43:	; PushZero
x12738:	fldz	; 2: 217 238

acos$44:	; SetReturnValue 0

acos$45:	; Return 0
x12740:	mov ax, [bp]	; 3: 139 70 0
x12743:	mov di, [bp + 4]	; 3: 139 126 4
x12746:	mov bp, [bp + 2]	; 3: 139 110 2
x12749:	jmp ax	; 2: 255 224

acos$46:	; FunctionEnd acos

@1274$float8$1.57#:
x12751:	dq 1.57	; 8: 31 133 235 81 184 30 249 63

@1279$float8$3.14#:
x12759:	dq 3.14	; 8: 31 133 235 81 184 30 9 64

sinh:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

sinh$1:	; PushFloat x
x12767:	fld qword [bp + 6]	; 3: 221 70 6

sinh$2:	; Parameter 14 x 6
x12770:	fstp qword [bp + 20]	; 3: 221 94 20

sinh$3:	; Call 14 exp 0
x12773:	mov word [bp + 14], sinh$4	; 5: 199 70 14 243 49
x12778:	mov [bp + 16], bp	; 3: 137 110 16
x12781:	add bp, 14	; 3: 131 197 14
x12784:	jmp exp	; 3: 233 72 248

sinh$4:	; PostCall 14

sinh$5:	; GetReturnValue £temporary579

sinh$6:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 1
x12787:	fstp qword [bp + 14]	; 3: 221 94 14

sinh$7:	; PushFloat x
x12790:	fld qword [bp + 6]	; 3: 221 70 6

sinh$8:	; UnarySubtract £temporary580 x
x12793:	fchs	; 2: 217 224

sinh$9:	; Parameter 14 £temporary580 6
x12795:	fstp qword [bp + 28]	; 3: 221 94 28

sinh$10:	; Call 14 exp 0
x12798:	mov word [bp + 22], sinh$11	; 5: 199 70 22 12 50
x12803:	mov [bp + 24], bp	; 3: 137 110 24
x12806:	add bp, 22	; 3: 131 197 22
x12809:	jmp exp	; 3: 233 47 248

sinh$11:	; PostCall 14
x12812:	fstp qword [bp + 22]	; 3: 221 94 22
x12815:	fld qword [bp + 14]	; 3: 221 70 14
x12818:	fld qword [bp + 22]	; 3: 221 70 22

sinh$12:	; GetReturnValue £temporary581

sinh$13:	; BinarySubtract £temporary582 £temporary579 £temporary581
x12821:	fsub	; 2: 222 233

sinh$14:	; PushFloat 2
x12823:	fld qword [@1430$float8$2#]	; 4: 221 6 40 50

sinh$15:	; SignedDivide £temporary583 £temporary582 2
x12827:	fdiv	; 2: 222 249

sinh$16:	; SetReturnValue £temporary583

sinh$17:	; Return £temporary583
x12829:	mov ax, [bp]	; 3: 139 70 0
x12832:	mov di, [bp + 4]	; 3: 139 126 4
x12835:	mov bp, [bp + 2]	; 3: 139 110 2
x12838:	jmp ax	; 2: 255 224

sinh$18:	; FunctionEnd sinh

@1430$float8$2#:
x12840:	dq 2.0	; 8: 0 0 0 0 0 0 0 64

cosh:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

cosh$1:	; PushFloat x
x12848:	fld qword [bp + 6]	; 3: 221 70 6

cosh$2:	; Parameter 14 x 6
x12851:	fstp qword [bp + 20]	; 3: 221 94 20

cosh$3:	; Call 14 exp 0
x12854:	mov word [bp + 14], cosh$4	; 5: 199 70 14 68 50
x12859:	mov [bp + 16], bp	; 3: 137 110 16
x12862:	add bp, 14	; 3: 131 197 14
x12865:	jmp exp	; 3: 233 247 247

cosh$4:	; PostCall 14

cosh$5:	; GetReturnValue £temporary586

cosh$6:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 1
x12868:	fstp qword [bp + 14]	; 3: 221 94 14

cosh$7:	; PushFloat x
x12871:	fld qword [bp + 6]	; 3: 221 70 6

cosh$8:	; UnarySubtract £temporary587 x
x12874:	fchs	; 2: 217 224

cosh$9:	; Parameter 14 £temporary587 6
x12876:	fstp qword [bp + 28]	; 3: 221 94 28

cosh$10:	; Call 14 exp 0
x12879:	mov word [bp + 22], cosh$11	; 5: 199 70 22 93 50
x12884:	mov [bp + 24], bp	; 3: 137 110 24
x12887:	add bp, 22	; 3: 131 197 22
x12890:	jmp exp	; 3: 233 222 247

cosh$11:	; PostCall 14
x12893:	fstp qword [bp + 22]	; 3: 221 94 22
x12896:	fld qword [bp + 14]	; 3: 221 70 14
x12899:	fld qword [bp + 22]	; 3: 221 70 22

cosh$12:	; GetReturnValue £temporary588

cosh$13:	; BinaryAdd £temporary589 £temporary586 £temporary588
x12902:	fadd	; 2: 222 193

cosh$14:	; PushFloat 2
x12904:	fld qword [@1440$float8$2#]	; 4: 221 6 121 50

cosh$15:	; SignedDivide £temporary590 £temporary589 2
x12908:	fdiv	; 2: 222 249

cosh$16:	; SetReturnValue £temporary590

cosh$17:	; Return £temporary590
x12910:	mov ax, [bp]	; 3: 139 70 0
x12913:	mov di, [bp + 4]	; 3: 139 126 4
x12916:	mov bp, [bp + 2]	; 3: 139 110 2
x12919:	jmp ax	; 2: 255 224

cosh$18:	; FunctionEnd cosh

@1440$float8$2#:
x12921:	dq 2.0	; 8: 0 0 0 0 0 0 0 64

tanh:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

tanh$1:	; PushFloat x
x12929:	fld qword [bp + 6]	; 3: 221 70 6

tanh$2:	; Parameter 14 x 6
x12932:	fstp qword [bp + 20]	; 3: 221 94 20

tanh$3:	; Call 14 sinh 0
x12935:	mov word [bp + 14], tanh$4	; 5: 199 70 14 149 50
x12940:	mov [bp + 16], bp	; 3: 137 110 16
x12943:	add bp, 14	; 3: 131 197 14
x12946:	jmp sinh	; 3: 233 74 255

tanh$4:	; PostCall 14

tanh$5:	; GetReturnValue £temporary593

tanh$6:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 1
x12949:	fstp qword [bp + 14]	; 3: 221 94 14

tanh$7:	; PushFloat x
x12952:	fld qword [bp + 6]	; 3: 221 70 6

tanh$8:	; Parameter 14 x 6
x12955:	fstp qword [bp + 28]	; 3: 221 94 28

tanh$9:	; Call 14 cosh 0
x12958:	mov word [bp + 22], tanh$10	; 5: 199 70 22 172 50
x12963:	mov [bp + 24], bp	; 3: 137 110 24
x12966:	add bp, 22	; 3: 131 197 22
x12969:	nop	; 1: 144
x12970:	jmp cosh	; 2: 235 132

tanh$10:	; PostCall 14
x12972:	fstp qword [bp + 22]	; 3: 221 94 22
x12975:	fld qword [bp + 14]	; 3: 221 70 14
x12978:	fld qword [bp + 22]	; 3: 221 70 22

tanh$11:	; GetReturnValue £temporary594

tanh$12:	; SignedDivide £temporary595 £temporary593 £temporary594
x12981:	fdiv	; 2: 222 249

tanh$13:	; SetReturnValue £temporary595

tanh$14:	; Return £temporary595
x12983:	mov ax, [bp]	; 3: 139 70 0
x12986:	mov di, [bp + 4]	; 3: 139 126 4
x12989:	mov bp, [bp + 2]	; 3: 139 110 2
x12992:	jmp ax	; 2: 255 224

tanh$15:	; FunctionEnd tanh

frexp:	; PushFloat x
x12994:	fld qword [bp + 6]	; 3: 221 70 6

frexp$1:	; PushZero
x12997:	fldz	; 2: 217 238

frexp$2:	; Equal 42 x 0
x12999:	fcompp	; 2: 222 217
x13001:	fstsw ax	; 3: 155 223 224
x13004:	sahf	; 1: 158
x13005:	je frexp$42	; 4: 15 132 150 0

frexp$3:	; CallHeader 16 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

frexp$4:	; CallHeader 16 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

frexp$5:	; PushFloat x
x13009:	fld qword [bp + 6]	; 3: 221 70 6

frexp$6:	; Parameter 16 x 6
x13012:	fstp qword [bp + 22]	; 3: 221 94 22

frexp$7:	; Call 16 fabs 0
x13015:	mov word [bp + 16], frexp$8	; 5: 199 70 16 229 50
x13020:	mov [bp + 18], bp	; 3: 137 110 18
x13023:	add bp, 16	; 3: 131 197 16
x13026:	jmp fabs	; 3: 233 18 242

frexp$8:	; PostCall 16

frexp$9:	; GetReturnValue £temporary388

frexp$10:	; Parameter 16 £temporary388 6
x13029:	fstp qword [bp + 22]	; 3: 221 94 22

frexp$11:	; Call 16 log2 0
x13032:	mov word [bp + 16], frexp$12	; 5: 199 70 16 246 50
x13037:	mov [bp + 18], bp	; 3: 137 110 18
x13040:	add bp, 16	; 3: 131 197 16
x13043:	jmp @1000$log2	; 3: 233 155 0

frexp$12:	; PostCall 16

frexp$13:	; GetReturnValue £temporary389

frexp$14:	; IntegralToIntegral £temporary390 £temporary389

frexp$15:	; Assign exponent £temporary390
x13046:	mov [bp + 16], bx	; 3: 137 94 16

frexp$16:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

frexp$17:	; PushFloat 2
x13049:	fld qword [@1016$float8$2#]	; 4: 221 6 129 51

frexp$18:	; Parameter 18 2 6
x13053:	fstp qword [bp + 24]	; 3: 221 94 24

frexp$19:	; IntegralToFloating £temporary391 exponent
x13056:	fild word [bp + 16]	; 3: 223 70 16

frexp$20:	; Parameter 18 £temporary391 14
x13059:	fstp qword [bp + 32]	; 3: 221 94 32

frexp$21:	; Call 18 pow 0
x13062:	mov word [bp + 18], frexp$22	; 5: 199 70 18 20 51
x13067:	mov [bp + 20], bp	; 3: 137 110 20
x13070:	add bp, 18	; 3: 131 197 18
x13073:	jmp pow	; 3: 233 126 245

frexp$22:	; PostCall 18

frexp$23:	; GetReturnValue £temporary392

frexp$24:	; PushFloat x
x13076:	fld qword [bp + 6]	; 3: 221 70 6

frexp$25:	; SignedGreaterThanEqual 27 £temporary392 x
x13079:	fcompp	; 2: 222 217
x13081:	fstsw ax	; 3: 155 223 224
x13084:	sahf	; 1: 158
x13085:	jbe frexp$27	; 2: 118 3

frexp$26:	; Increment exponent
x13087:	inc word [bp + 16]	; 3: 255 70 16

frexp$27:	; Equal 30 p 0
x13090:	cmp word [bp + 14], 0	; 4: 131 126 14 0
x13094:	je frexp$30	; 2: 116 8

frexp$28:	; Deref £temporary396 -> p p 0
x13096:	mov si, [bp + 14]	; 3: 139 118 14

frexp$29:	; Assign £temporary396 -> p exponent
x13099:	mov ax, [bp + 16]	; 3: 139 70 16
x13102:	mov [si], ax	; 2: 137 4

frexp$30:	; PushFloat x
x13104:	fld qword [bp + 6]	; 3: 221 70 6

frexp$31:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 1
x13107:	fstp qword [bp + 18]	; 3: 221 94 18

frexp$32:	; PushFloat 2
x13110:	fld qword [@1030$float8$2#]	; 4: 221 6 137 51

frexp$33:	; Parameter 18 2 6
x13114:	fstp qword [bp + 32]	; 3: 221 94 32

frexp$34:	; IntegralToFloating £temporary397 exponent
x13117:	fild word [bp + 16]	; 3: 223 70 16

frexp$35:	; Parameter 18 £temporary397 14
x13120:	fstp qword [bp + 40]	; 3: 221 94 40

frexp$36:	; Call 18 pow 0
x13123:	mov word [bp + 26], frexp$37	; 5: 199 70 26 81 51
x13128:	mov [bp + 28], bp	; 3: 137 110 28
x13131:	add bp, 26	; 3: 131 197 26
x13134:	jmp pow	; 3: 233 65 245

frexp$37:	; PostCall 18
x13137:	fstp qword [bp + 26]	; 3: 221 94 26
x13140:	fld qword [bp + 18]	; 3: 221 70 18
x13143:	fld qword [bp + 26]	; 3: 221 70 26

frexp$38:	; GetReturnValue £temporary398

frexp$39:	; SignedDivide £temporary399 x £temporary398
x13146:	fdiv	; 2: 222 249

frexp$40:	; SetReturnValue £temporary399

frexp$41:	; Return £temporary399
x13148:	mov ax, [bp]	; 3: 139 70 0
x13151:	mov di, [bp + 4]	; 3: 139 126 4
x13154:	mov bp, [bp + 2]	; 3: 139 110 2
x13157:	jmp ax	; 2: 255 224

frexp$42:	; Equal 45 p 0
x13159:	cmp word [bp + 14], 0	; 4: 131 126 14 0
x13163:	je frexp$45	; 2: 116 7

frexp$43:	; Deref £temporary401 -> p p 0
x13165:	mov si, [bp + 14]	; 3: 139 118 14

frexp$44:	; Assign £temporary401 -> p 0
x13168:	mov word [si], 0	; 4: 199 4 0 0

frexp$45:	; PushZero
x13172:	fldz	; 2: 217 238

frexp$46:	; SetReturnValue 0

frexp$47:	; Return 0
x13174:	mov ax, [bp]	; 3: 139 70 0
x13177:	mov di, [bp + 4]	; 3: 139 126 4
x13180:	mov bp, [bp + 2]	; 3: 139 110 2
x13183:	jmp ax	; 2: 255 224

frexp$48:	; FunctionEnd frexp

@1016$float8$2#:
x13185:	dq 2.0	; 8: 0 0 0 0 0 0 0 64

@1030$float8$2#:
x13193:	dq 2.0	; 8: 0 0 0 0 0 0 0 64

@1000$log2:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

@1000$log2$1:	; PushFloat x
x13201:	fld qword [bp + 6]	; 3: 221 70 6

@1000$log2$2:	; Parameter 14 x 6
x13204:	fstp qword [bp + 20]	; 3: 221 94 20

@1000$log2$3:	; Call 14 log 0
x13207:	mov word [bp + 14], @1000$log2$4	; 5: 199 70 14 165 51
x13212:	mov [bp + 16], bp	; 3: 137 110 16
x13215:	add bp, 14	; 3: 131 197 14
x13218:	jmp log	; 3: 233 177 243

@1000$log2$4:	; PostCall 14

@1000$log2$5:	; GetReturnValue £temporary383

@1000$log2$6:	; PushFloat 0.693
x13221:	fld qword [@1002$float8$0.693#]	; 4: 221 6 190 51

@1000$log2$7:	; SignedDivide £temporary384 £temporary383 0.693
x13225:	fdiv	; 2: 222 249

@1000$log2$8:	; FloatingToIntegral £temporary385 £temporary384
x13227:	fistp word [container2bytes#]	; 4: 223 30 77 27
x13231:	mov bx, [container2bytes#]	; 4: 139 30 77 27

@1000$log2$9:	; SetReturnValue £temporary385

@1000$log2$10:	; Return £temporary385
x13235:	mov ax, [bp]	; 3: 139 70 0
x13238:	mov di, [bp + 4]	; 3: 139 126 4
x13241:	mov bp, [bp + 2]	; 3: 139 110 2
x13244:	jmp ax	; 2: 255 224

@1000$log2$11:	; FunctionEnd log2

@1002$float8$0.693#:
x13246:	dq 0.693	; 8: 147 24 4 86 14 45 230 63

perror:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

perror$1:	; Parameter 8 string_25s3A2025s2E0A# 6
x13254:	mov word [bp + 14], @2309$string_25s3A2025s2E0A#	; 5: 199 70 14 6 52

perror$2:	; Parameter 8 s 8
x13259:	mov ax, [bp + 6]	; 3: 139 70 6
x13262:	mov [bp + 16], ax	; 3: 137 70 16

perror$3:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

perror$4:	; Parameter 8 errno 16
x13265:	mov ax, [errno]	; 3: 161 230 10
x13268:	mov [bp + 24], ax	; 3: 137 70 24

perror$5:	; Call 8 strerror 10
x13271:	mov word [bp + 18], perror$6	; 5: 199 70 18 229 51
x13276:	mov [bp + 20], bp	; 3: 137 110 20
x13279:	add bp, 18	; 3: 131 197 18
x13282:	nop	; 1: 144
x13283:	jmp strerror	; 2: 235 42

perror$6:	; PostCall 8

perror$7:	; GetReturnValue £temporary983

perror$8:	; Parameter 8 £temporary983 10
x13285:	mov [bp + 18], bx	; 3: 137 94 18

perror$9:	; Call 8 printf 0
x13288:	mov word [bp + 8], perror$10	; 5: 199 70 8 251 51
x13293:	mov [bp + 10], bp	; 3: 137 110 10
x13296:	add bp, 8	; 3: 131 197 8
x13299:	mov di, bp	; 2: 137 239
x13301:	add di, 4	; 3: 131 199 4
x13304:	jmp printf	; 3: 233 9 217

perror$10:	; PostCall 8

perror$11:	; Return 0
x13307:	mov ax, [bp]	; 3: 139 70 0
x13310:	mov di, [bp + 4]	; 3: 139 126 4
x13313:	mov bp, [bp + 2]	; 3: 139 110 2
x13316:	jmp ax	; 2: 255 224

perror$12:	; FunctionEnd perror

@2309$string_25s3A2025s2E0A#:
x13318:	db "%s: %s.", 10, 0	; 9: 37 115 58 32 37 115 46 10 0

strerror:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strerror$1:	; Call 8 localeconv 0
x13327:	mov word [bp + 8], strerror$2	; 5: 199 70 8 29 52
x13332:	mov [bp + 10], bp	; 3: 137 110 10
x13335:	add bp, 8	; 3: 131 197 8
x13338:	jmp localeconv	; 3: 233 88 234

strerror$2:	; PostCall 8

strerror$3:	; GetReturnValue £temporary3868

strerror$4:	; Assign localeConvPtr £temporary3868
x13341:	mov [bp + 8], bx	; 3: 137 94 8

strerror$5:	; Equal 14 localeConvPtr 0
x13344:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x13348:	je strerror$14	; 2: 116 42

strerror$6:	; Deref £temporary3870 -> localeConvPtr localeConvPtr 16
x13350:	mov si, [bp + 8]	; 3: 139 118 8

strerror$7:	; Assign messageList £temporary3870 -> localeConvPtr
x13353:	mov ax, [si + 16]	; 3: 139 68 16
x13356:	mov [bp + 10], ax	; 3: 137 70 10

strerror$8:	; Equal 14 messageList 0
x13359:	cmp word [bp + 10], 0	; 4: 131 126 10 0
x13363:	je strerror$14	; 2: 116 27

strerror$9:	; SignedMultiply £temporary3873 errno 2
x13365:	mov ax, [bp + 6]	; 3: 139 70 6
x13368:	xor dx, dx	; 2: 49 210
x13370:	imul word [@8772$int2$2#]	; 4: 247 46 94 52

strerror$10:	; BinaryAdd £temporary3874 messageList £temporary3873
x13374:	mov si, [bp + 10]	; 3: 139 118 10
x13377:	add si, ax	; 2: 1 198

strerror$11:	; Deref £temporary3872 -> £temporary3874 £temporary3874 0

strerror$12:	; SetReturnValue £temporary3872 -> £temporary3874
x13379:	mov bx, [si]	; 2: 139 28

strerror$13:	; Return £temporary3872 -> £temporary3874
x13381:	mov ax, [bp]	; 3: 139 70 0
x13384:	mov di, [bp + 4]	; 3: 139 126 4
x13387:	mov bp, [bp + 2]	; 3: 139 110 2
x13390:	jmp ax	; 2: 255 224

strerror$14:	; SetReturnValue 0
x13392:	mov bx, 0	; 3: 187 0 0

strerror$15:	; Return 0
x13395:	mov ax, [bp]	; 3: 139 70 0
x13398:	mov di, [bp + 4]	; 3: 139 126 4
x13401:	mov bp, [bp + 2]	; 3: 139 110 2
x13404:	jmp ax	; 2: 255 224

strerror$16:	; FunctionEnd strerror

@8772$int2$2#:
x13406:	dw 2	; 2: 2 0

modf:	; CallHeader 16 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

modf$1:	; PushFloat x
x13408:	fld qword [bp + 6]	; 3: 221 70 6

modf$2:	; Parameter 16 x 6
x13411:	fstp qword [bp + 22]	; 3: 221 94 22

modf$3:	; Call 16 fabs 0
x13414:	mov word [bp + 16], modf$4	; 5: 199 70 16 116 52
x13419:	mov [bp + 18], bp	; 3: 137 110 18
x13422:	add bp, 16	; 3: 131 197 16
x13425:	jmp fabs	; 3: 233 131 240

modf$4:	; PostCall 16

modf$5:	; GetReturnValue £temporary416

modf$6:	; TopFloat abs_x
x13428:	fst qword [bp + 16]	; 3: 221 86 16

modf$7:	; FloatingToIntegral £temporary417 abs_x
x13431:	fistp dword [container4bytes#]	; 4: 219 30 78 36
x13435:	mov eax, [container4bytes#]	; 4: 102 161 78 36

modf$8:	; IntegralToFloating £temporary418 £temporary417
x13439:	mov [container4bytes#], eax	; 4: 102 163 78 36
x13443:	fild dword [container4bytes#]	; 4: 219 6 78 36

modf$9:	; PopFloat integral
x13447:	fstp qword [bp + 24]	; 3: 221 94 24

modf$10:	; PushFloat abs_x
x13450:	fld qword [bp + 16]	; 3: 221 70 16

modf$11:	; PushFloat integral
x13453:	fld qword [bp + 24]	; 3: 221 70 24

modf$12:	; BinarySubtract £temporary419 abs_x integral
x13456:	fsub	; 2: 222 233

modf$13:	; PopFloat fractional
x13458:	fstp qword [bp + 32]	; 3: 221 94 32

modf$14:	; Equal 25 p 0
x13461:	cmp word [bp + 14], 0	; 4: 131 126 14 0
x13465:	je modf$25	; 2: 116 28

modf$15:	; Deref £temporary421 -> p p 0
x13467:	mov si, [bp + 14]	; 3: 139 118 14

modf$16:	; PushFloat x
x13470:	fld qword [bp + 6]	; 3: 221 70 6

modf$17:	; PushZero
x13473:	fldz	; 2: 217 238

modf$18:	; SignedLessThanEqual 22 x 0
x13475:	fcompp	; 2: 222 217
x13477:	fstsw ax	; 3: 155 223 224
x13480:	sahf	; 1: 158
x13481:	jae modf$22	; 2: 115 5

modf$19:	; PushFloat integral
x13483:	fld qword [bp + 24]	; 3: 221 70 24

modf$20:	; DecreaseStack

modf$21:	; Goto 24
x13486:	jmp modf$24	; 2: 235 5

modf$22:	; PushFloat integral
x13488:	fld qword [bp + 24]	; 3: 221 70 24

modf$23:	; UnarySubtract £temporary423 integral
x13491:	fchs	; 2: 217 224

modf$24:	; PopFloat £temporary421 -> p
x13493:	fstp qword [si]	; 2: 221 28

modf$25:	; PushFloat x
x13495:	fld qword [bp + 6]	; 3: 221 70 6

modf$26:	; PushZero
x13498:	fldz	; 2: 217 238

modf$27:	; SignedLessThanEqual 31 x 0
x13500:	fcompp	; 2: 222 217
x13502:	fstsw ax	; 3: 155 223 224
x13505:	sahf	; 1: 158
x13506:	jae modf$31	; 2: 115 5

modf$28:	; PushFloat fractional
x13508:	fld qword [bp + 32]	; 3: 221 70 32

modf$29:	; DecreaseStack

modf$30:	; Goto 33
x13511:	jmp modf$33	; 2: 235 5

modf$31:	; PushFloat fractional
x13513:	fld qword [bp + 32]	; 3: 221 70 32

modf$32:	; UnarySubtract £temporary429 fractional
x13516:	fchs	; 2: 217 224

modf$33:	; SetReturnValue £temporary433

modf$34:	; Return £temporary433
x13518:	mov ax, [bp]	; 3: 139 70 0
x13521:	mov di, [bp + 4]	; 3: 139 126 4
x13524:	mov bp, [bp + 2]	; 3: 139 110 2
x13527:	jmp ax	; 2: 255 224

modf$35:	; FunctionEnd modf

math_test_2:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_2$1:	; Parameter 22 string_fmod2825f2C2025f29203D2025f2C20errno203D2025i0A# 6
x13529:	mov word [bp + 28], @10626$string_fmod2825f2C2025f29203D2025f2C20errno203D2025i0A#	; 5: 199 70 28 47 54

math_test_2$2:	; PushFloat x
x13534:	fld qword [bp + 6]	; 3: 221 70 6

math_test_2$3:	; Parameter 22 x 8
x13537:	fstp qword [bp + 30]	; 3: 221 94 30

math_test_2$4:	; PushFloat y
x13540:	fld qword [bp + 14]	; 3: 221 70 14

math_test_2$5:	; Parameter 22 y 16
x13543:	fstp qword [bp + 38]	; 3: 221 94 38

math_test_2$6:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_2$7:	; PushFloat x
x13546:	fld qword [bp + 6]	; 3: 221 70 6

math_test_2$8:	; Parameter 22 x 30
x13549:	fstp qword [bp + 52]	; 3: 221 94 52

math_test_2$9:	; PushFloat y
x13552:	fld qword [bp + 14]	; 3: 221 70 14

math_test_2$10:	; Parameter 22 y 38
x13555:	fstp qword [bp + 60]	; 3: 221 94 60

math_test_2$11:	; Call 22 fmod 24
x13558:	mov word [bp + 46], math_test_2$12	; 5: 199 70 46 4 53
x13563:	mov [bp + 48], bp	; 3: 137 110 48
x13566:	add bp, 46	; 3: 131 197 46
x13569:	jmp fmod	; 3: 233 121 247

math_test_2$12:	; PostCall 22

math_test_2$13:	; GetReturnValue £temporary4776

math_test_2$14:	; Parameter 22 £temporary4776 24
x13572:	fstp qword [bp + 46]	; 3: 221 94 46

math_test_2$15:	; Parameter 22 errno 32
x13575:	mov ax, [errno]	; 3: 161 230 10
x13578:	mov [bp + 54], ax	; 3: 137 70 54

math_test_2$16:	; Call 22 printf 0
x13581:	mov word [bp + 22], math_test_2$17	; 5: 199 70 22 32 53
x13586:	mov [bp + 24], bp	; 3: 137 110 24
x13589:	add bp, 22	; 3: 131 197 22
x13592:	mov di, bp	; 2: 137 239
x13594:	add di, 26	; 3: 131 199 26
x13597:	jmp printf	; 3: 233 228 215

math_test_2$17:	; PostCall 22

math_test_2$18:	; Assign errno 0
x13600:	mov word [errno], 0	; 6: 199 6 230 10 0 0

math_test_2$19:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_2$20:	; Parameter 22 string_atan22825f2C2025f29203D2025f2C20errno203D2025i0A# 6
x13606:	mov word [bp + 28], @10631$string_atan22825f2C2025f29203D2025f2C20errno203D2025i0A#	; 5: 199 70 28 78 54

math_test_2$21:	; PushFloat x
x13611:	fld qword [bp + 6]	; 3: 221 70 6

math_test_2$22:	; Parameter 22 x 8
x13614:	fstp qword [bp + 30]	; 3: 221 94 30

math_test_2$23:	; PushFloat y
x13617:	fld qword [bp + 14]	; 3: 221 70 14

math_test_2$24:	; Parameter 22 y 16
x13620:	fstp qword [bp + 38]	; 3: 221 94 38

math_test_2$25:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_2$26:	; PushFloat x
x13623:	fld qword [bp + 6]	; 3: 221 70 6

math_test_2$27:	; Parameter 22 x 30
x13626:	fstp qword [bp + 52]	; 3: 221 94 52

math_test_2$28:	; PushFloat y
x13629:	fld qword [bp + 14]	; 3: 221 70 14

math_test_2$29:	; Parameter 22 y 38
x13632:	fstp qword [bp + 60]	; 3: 221 94 60

math_test_2$30:	; Call 22 atan2 24
x13635:	mov word [bp + 46], math_test_2$31	; 5: 199 70 46 81 53
x13640:	mov [bp + 48], bp	; 3: 137 110 48
x13643:	add bp, 46	; 3: 131 197 46
x13646:	jmp atan2	; 3: 233 82 1

math_test_2$31:	; PostCall 22

math_test_2$32:	; GetReturnValue £temporary4778

math_test_2$33:	; Parameter 22 £temporary4778 24
x13649:	fstp qword [bp + 46]	; 3: 221 94 46

math_test_2$34:	; Parameter 22 errno 32
x13652:	mov ax, [errno]	; 3: 161 230 10
x13655:	mov [bp + 54], ax	; 3: 137 70 54

math_test_2$35:	; Call 22 printf 0
x13658:	mov word [bp + 22], math_test_2$36	; 5: 199 70 22 109 53
x13663:	mov [bp + 24], bp	; 3: 137 110 24
x13666:	add bp, 22	; 3: 131 197 22
x13669:	mov di, bp	; 2: 137 239
x13671:	add di, 26	; 3: 131 199 26
x13674:	jmp printf	; 3: 233 151 215

math_test_2$36:	; PostCall 22

math_test_2$37:	; Assign errno 0
x13677:	mov word [errno], 0	; 6: 199 6 230 10 0 0

math_test_2$38:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_2$39:	; Parameter 22 string_pow2825f2C2025f29203D2025f2C20errno203D2025i0A# 6
x13683:	mov word [bp + 28], @10636$string_pow2825f2C2025f29203D2025f2C20errno203D2025i0A#	; 5: 199 70 28 110 54

math_test_2$40:	; PushFloat x
x13688:	fld qword [bp + 6]	; 3: 221 70 6

math_test_2$41:	; Parameter 22 x 8
x13691:	fstp qword [bp + 30]	; 3: 221 94 30

math_test_2$42:	; PushFloat y
x13694:	fld qword [bp + 14]	; 3: 221 70 14

math_test_2$43:	; Parameter 22 y 16
x13697:	fstp qword [bp + 38]	; 3: 221 94 38

math_test_2$44:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_2$45:	; PushFloat x
x13700:	fld qword [bp + 6]	; 3: 221 70 6

math_test_2$46:	; Parameter 22 x 30
x13703:	fstp qword [bp + 52]	; 3: 221 94 52

math_test_2$47:	; PushFloat y
x13706:	fld qword [bp + 14]	; 3: 221 70 14

math_test_2$48:	; Parameter 22 y 38
x13709:	fstp qword [bp + 60]	; 3: 221 94 60

math_test_2$49:	; Call 22 pow 24
x13712:	mov word [bp + 46], math_test_2$50	; 5: 199 70 46 158 53
x13717:	mov [bp + 48], bp	; 3: 137 110 48
x13720:	add bp, 46	; 3: 131 197 46
x13723:	jmp pow	; 3: 233 244 242

math_test_2$50:	; PostCall 22

math_test_2$51:	; GetReturnValue £temporary4780

math_test_2$52:	; Parameter 22 £temporary4780 24
x13726:	fstp qword [bp + 46]	; 3: 221 94 46

math_test_2$53:	; Parameter 22 errno 32
x13729:	mov ax, [errno]	; 3: 161 230 10
x13732:	mov [bp + 54], ax	; 3: 137 70 54

math_test_2$54:	; Call 22 printf 0
x13735:	mov word [bp + 22], math_test_2$55	; 5: 199 70 22 186 53
x13740:	mov [bp + 24], bp	; 3: 137 110 24
x13743:	add bp, 22	; 3: 131 197 22
x13746:	mov di, bp	; 2: 137 239
x13748:	add di, 26	; 3: 131 199 26
x13751:	jmp printf	; 3: 233 74 215

math_test_2$55:	; PostCall 22

math_test_2$56:	; Assign errno 0
x13754:	mov word [errno], 0	; 6: 199 6 230 10 0 0

math_test_2$57:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_2$58:	; Parameter 22 string_0A# 6
x13760:	mov word [bp + 28], @10641$string_0A#	; 5: 199 70 28 140 54

math_test_2$59:	; Call 22 printf 0
x13765:	mov word [bp + 22], math_test_2$60	; 5: 199 70 22 213 53
x13770:	mov [bp + 24], bp	; 3: 137 110 24
x13773:	add bp, 22	; 3: 131 197 22
x13776:	mov di, bp	; 2: 137 239
x13778:	jmp printf	; 3: 233 47 215

math_test_2$60:	; PostCall 22

math_test_2$61:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_2$62:	; Parameter 22 string_ldexp2825f2C2025i29203D2025f0A0A# 6
x13781:	mov word [bp + 28], @10643$string_ldexp2825f2C2025i29203D2025f0A0A#	; 5: 199 70 28 142 54

math_test_2$63:	; PushFloat x
x13786:	fld qword [bp + 6]	; 3: 221 70 6

math_test_2$64:	; Parameter 22 x 8
x13789:	fstp qword [bp + 30]	; 3: 221 94 30

math_test_2$65:	; PushFloat y
x13792:	fld qword [bp + 14]	; 3: 221 70 14

math_test_2$66:	; FloatingToIntegral £temporary4783 y
x13795:	fistp word [container2bytes#]	; 4: 223 30 77 27
x13799:	mov ax, [container2bytes#]	; 3: 161 77 27

math_test_2$67:	; Parameter 22 £temporary4783 16
x13802:	mov [bp + 38], ax	; 3: 137 70 38

math_test_2$68:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_2$69:	; PushFloat x
x13805:	fld qword [bp + 6]	; 3: 221 70 6

math_test_2$70:	; Parameter 22 x 24
x13808:	fstp qword [bp + 46]	; 3: 221 94 46

math_test_2$71:	; PushFloat y
x13811:	fld qword [bp + 14]	; 3: 221 70 14

math_test_2$72:	; FloatingToIntegral £temporary4784 y
x13814:	fistp word [container2bytes#]	; 4: 223 30 77 27
x13818:	mov ax, [container2bytes#]	; 3: 161 77 27

math_test_2$73:	; Parameter 22 £temporary4784 32
x13821:	mov [bp + 54], ax	; 3: 137 70 54

math_test_2$74:	; Call 22 ldexp 18
x13824:	mov word [bp + 40], math_test_2$75	; 5: 199 70 40 14 54
x13829:	mov [bp + 42], bp	; 3: 137 110 42
x13832:	add bp, 40	; 3: 131 197 40
x13835:	jmp ldexp	; 3: 233 235 1

math_test_2$75:	; PostCall 22

math_test_2$76:	; GetReturnValue £temporary4785

math_test_2$77:	; Parameter 22 £temporary4785 18
x13838:	fstp qword [bp + 40]	; 3: 221 94 40

math_test_2$78:	; Call 22 printf 0
x13841:	mov word [bp + 22], math_test_2$79	; 5: 199 70 22 36 54
x13846:	mov [bp + 24], bp	; 3: 137 110 24
x13849:	add bp, 22	; 3: 131 197 22
x13852:	mov di, bp	; 2: 137 239
x13854:	add di, 18	; 3: 131 199 18
x13857:	jmp printf	; 3: 233 224 214

math_test_2$79:	; PostCall 22

math_test_2$80:	; Return 0
x13860:	mov ax, [bp]	; 3: 139 70 0
x13863:	mov di, [bp + 4]	; 3: 139 126 4
x13866:	mov bp, [bp + 2]	; 3: 139 110 2
x13869:	jmp ax	; 2: 255 224

math_test_2$81:	; FunctionEnd math_test_2

@10626$string_fmod2825f2C2025f29203D2025f2C20errno203D2025i0A#:
x13871:	db "fmod(%f, %f) = %f, errno = %i", 10, 0	; 31: 102 109 111 100 40 37 102 44 32 37 102 41 32 61 32 37 102 44 32 101 114 114 110 111 32 61 32 37 105 10 0

@10631$string_atan22825f2C2025f29203D2025f2C20errno203D2025i0A#:
x13902:	db "atan2(%f, %f) = %f, errno = %i", 10, 0	; 32: 97 116 97 110 50 40 37 102 44 32 37 102 41 32 61 32 37 102 44 32 101 114 114 110 111 32 61 32 37 105 10 0

@10636$string_pow2825f2C2025f29203D2025f2C20errno203D2025i0A#:
x13934:	db "pow(%f, %f) = %f, errno = %i", 10, 0	; 30: 112 111 119 40 37 102 44 32 37 102 41 32 61 32 37 102 44 32 101 114 114 110 111 32 61 32 37 105 10 0

@10641$string_0A#:
x13964:	db 10, 0	; 2: 10 0

@10643$string_ldexp2825f2C2025i29203D2025f0A0A#:
x13966:	db "ldexp(%f, %i) = %f", 10, 10, 0	; 21: 108 100 101 120 112 40 37 102 44 32 37 105 41 32 61 32 37 102 10 10 0

atan2:	; PushFloat y
x13987:	fld qword [bp + 14]	; 3: 221 70 14

atan2$1:	; PushZero
x13990:	fldz	; 2: 217 238

atan2$2:	; SignedLessThanEqual 13 y 0
x13992:	fcompp	; 2: 222 217
x13994:	fstsw ax	; 3: 155 223 224
x13997:	sahf	; 1: 158
x13998:	jae atan2$13	; 2: 115 36

atan2$3:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

atan2$4:	; PushFloat x
x14000:	fld qword [bp + 6]	; 3: 221 70 6

atan2$5:	; PushFloat y
x14003:	fld qword [bp + 14]	; 3: 221 70 14

atan2$6:	; SignedDivide £temporary556 x y
x14006:	fdiv	; 2: 222 249

atan2$7:	; Parameter 22 £temporary556 6
x14008:	fstp qword [bp + 28]	; 3: 221 94 28

atan2$8:	; Call 22 atan 0
x14011:	mov word [bp + 22], atan2$9	; 5: 199 70 22 201 54
x14016:	mov [bp + 24], bp	; 3: 137 110 24
x14019:	add bp, 22	; 3: 131 197 22
x14022:	jmp atan	; 3: 233 187 248

atan2$9:	; PostCall 22

atan2$10:	; GetReturnValue £temporary557

atan2$11:	; SetReturnValue £temporary557

atan2$12:	; Return £temporary557
x14025:	mov ax, [bp]	; 3: 139 70 0
x14028:	mov di, [bp + 4]	; 3: 139 126 4
x14031:	mov bp, [bp + 2]	; 3: 139 110 2
x14034:	jmp ax	; 2: 255 224

atan2$13:	; PushFloat x
x14036:	fld qword [bp + 6]	; 3: 221 70 6

atan2$14:	; PushZero
x14039:	fldz	; 2: 217 238

atan2$15:	; SignedLessThan 31 x 0
x14041:	fcompp	; 2: 222 217
x14043:	fstsw ax	; 3: 155 223 224
x14046:	sahf	; 1: 158
x14047:	ja atan2$31	; 2: 119 67

atan2$16:	; PushFloat y
x14049:	fld qword [bp + 14]	; 3: 221 70 14

atan2$17:	; PushZero
x14052:	fldz	; 2: 217 238

atan2$18:	; SignedGreaterThanEqual 31 y 0
x14054:	fcompp	; 2: 222 217
x14056:	fstsw ax	; 3: 155 223 224
x14059:	sahf	; 1: 158
x14060:	jbe atan2$31	; 2: 118 54

atan2$19:	; PushFloat 3.14
x14062:	fld qword [@1377$float8$3.14#]	; 4: 221 6 217 55

atan2$20:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 1
x14066:	fstp qword [bp + 22]	; 3: 221 94 22

atan2$21:	; PushFloat x
x14069:	fld qword [bp + 6]	; 3: 221 70 6

atan2$22:	; PushFloat y
x14072:	fld qword [bp + 14]	; 3: 221 70 14

atan2$23:	; SignedDivide £temporary561 x y
x14075:	fdiv	; 2: 222 249

atan2$24:	; Parameter 22 £temporary561 6
x14077:	fstp qword [bp + 36]	; 3: 221 94 36

atan2$25:	; Call 22 atan 0
x14080:	mov word [bp + 30], atan2$26	; 5: 199 70 30 14 55
x14085:	mov [bp + 32], bp	; 3: 137 110 32
x14088:	add bp, 30	; 3: 131 197 30
x14091:	jmp atan	; 3: 233 118 248

atan2$26:	; PostCall 22
x14094:	fstp qword [bp + 30]	; 3: 221 94 30
x14097:	fld qword [bp + 22]	; 3: 221 70 22
x14100:	fld qword [bp + 30]	; 3: 221 70 30

atan2$27:	; GetReturnValue £temporary562

atan2$28:	; BinaryAdd £temporary563 3.14 £temporary562
x14103:	fadd	; 2: 222 193

atan2$29:	; SetReturnValue £temporary563

atan2$30:	; Return £temporary563
x14105:	mov ax, [bp]	; 3: 139 70 0
x14108:	mov di, [bp + 4]	; 3: 139 126 4
x14111:	mov bp, [bp + 2]	; 3: 139 110 2
x14114:	jmp ax	; 2: 255 224

atan2$31:	; PushFloat x
x14116:	fld qword [bp + 6]	; 3: 221 70 6

atan2$32:	; PushZero
x14119:	fldz	; 2: 217 238

atan2$33:	; SignedGreaterThanEqual 49 x 0
x14121:	fcompp	; 2: 222 217
x14123:	fstsw ax	; 3: 155 223 224
x14126:	sahf	; 1: 158
x14127:	jbe atan2$49	; 2: 118 67

atan2$34:	; PushFloat y
x14129:	fld qword [bp + 14]	; 3: 221 70 14

atan2$35:	; PushZero
x14132:	fldz	; 2: 217 238

atan2$36:	; SignedGreaterThanEqual 49 y 0
x14134:	fcompp	; 2: 222 217
x14136:	fstsw ax	; 3: 155 223 224
x14139:	sahf	; 1: 158
x14140:	jbe atan2$49	; 2: 118 54

atan2$37:	; PushFloat -3.14
x14142:	fld qword [@1390$float8$minus3.14#]	; 4: 221 6 225 55

atan2$38:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 1
x14146:	fstp qword [bp + 22]	; 3: 221 94 22

atan2$39:	; PushFloat x
x14149:	fld qword [bp + 6]	; 3: 221 70 6

atan2$40:	; PushFloat y
x14152:	fld qword [bp + 14]	; 3: 221 70 14

atan2$41:	; SignedDivide £temporary567 x y
x14155:	fdiv	; 2: 222 249

atan2$42:	; Parameter 22 £temporary567 6
x14157:	fstp qword [bp + 36]	; 3: 221 94 36

atan2$43:	; Call 22 atan 0
x14160:	mov word [bp + 30], atan2$44	; 5: 199 70 30 94 55
x14165:	mov [bp + 32], bp	; 3: 137 110 32
x14168:	add bp, 30	; 3: 131 197 30
x14171:	jmp atan	; 3: 233 38 248

atan2$44:	; PostCall 22
x14174:	fstp qword [bp + 30]	; 3: 221 94 30
x14177:	fld qword [bp + 22]	; 3: 221 70 22
x14180:	fld qword [bp + 30]	; 3: 221 70 30

atan2$45:	; GetReturnValue £temporary568

atan2$46:	; BinaryAdd £temporary569 -3.14 £temporary568
x14183:	fadd	; 2: 222 193

atan2$47:	; SetReturnValue £temporary569

atan2$48:	; Return £temporary569
x14185:	mov ax, [bp]	; 3: 139 70 0
x14188:	mov di, [bp + 4]	; 3: 139 126 4
x14191:	mov bp, [bp + 2]	; 3: 139 110 2
x14194:	jmp ax	; 2: 255 224

atan2$49:	; PushFloat x
x14196:	fld qword [bp + 6]	; 3: 221 70 6

atan2$50:	; PushZero
x14199:	fldz	; 2: 217 238

atan2$51:	; SignedLessThanEqual 58 x 0
x14201:	fcompp	; 2: 222 217
x14203:	fstsw ax	; 3: 155 223 224
x14206:	sahf	; 1: 158
x14207:	jae atan2$58	; 2: 115 28

atan2$52:	; PushFloat y
x14209:	fld qword [bp + 14]	; 3: 221 70 14

atan2$53:	; PushZero
x14212:	fldz	; 2: 217 238

atan2$54:	; NotEqual 58 y 0
x14214:	fcompp	; 2: 222 217
x14216:	fstsw ax	; 3: 155 223 224
x14219:	sahf	; 1: 158
x14220:	jne atan2$58	; 2: 117 15

atan2$55:	; PushFloat 1.57
x14222:	fld qword [@1404$float8$1.57#]	; 4: 221 6 233 55

atan2$56:	; SetReturnValue 1.57

atan2$57:	; Return 1.57
x14226:	mov ax, [bp]	; 3: 139 70 0
x14229:	mov di, [bp + 4]	; 3: 139 126 4
x14232:	mov bp, [bp + 2]	; 3: 139 110 2
x14235:	jmp ax	; 2: 255 224

atan2$58:	; PushFloat x
x14237:	fld qword [bp + 6]	; 3: 221 70 6

atan2$59:	; PushZero
x14240:	fldz	; 2: 217 238

atan2$60:	; SignedGreaterThanEqual 67 x 0
x14242:	fcompp	; 2: 222 217
x14244:	fstsw ax	; 3: 155 223 224
x14247:	sahf	; 1: 158
x14248:	jbe atan2$67	; 2: 118 28

atan2$61:	; PushFloat y
x14250:	fld qword [bp + 14]	; 3: 221 70 14

atan2$62:	; PushZero
x14253:	fldz	; 2: 217 238

atan2$63:	; NotEqual 67 y 0
x14255:	fcompp	; 2: 222 217
x14257:	fstsw ax	; 3: 155 223 224
x14260:	sahf	; 1: 158
x14261:	jne atan2$67	; 2: 117 15

atan2$64:	; PushFloat -1.57
x14263:	fld qword [@1416$float8$minus1.57#]	; 4: 221 6 241 55

atan2$65:	; SetReturnValue -1.57

atan2$66:	; Return -1.57
x14267:	mov ax, [bp]	; 3: 139 70 0
x14270:	mov di, [bp + 4]	; 3: 139 126 4
x14273:	mov bp, [bp + 2]	; 3: 139 110 2
x14276:	jmp ax	; 2: 255 224

atan2$67:	; Assign errno 6
x14278:	mov word [errno], 6	; 6: 199 6 230 10 6 0

atan2$68:	; PushZero
x14284:	fldz	; 2: 217 238

atan2$69:	; SetReturnValue 0

atan2$70:	; Return 0
x14286:	mov ax, [bp]	; 3: 139 70 0
x14289:	mov di, [bp + 4]	; 3: 139 126 4
x14292:	mov bp, [bp + 2]	; 3: 139 110 2
x14295:	jmp ax	; 2: 255 224

atan2$71:	; FunctionEnd atan2

@1377$float8$3.14#:
x14297:	dq 3.14	; 8: 31 133 235 81 184 30 9 64

@1390$float8$minus3.14#:
x14305:	dq -3.14	; 8: 31 133 235 81 184 30 9 192

@1404$float8$1.57#:
x14313:	dq 1.57	; 8: 31 133 235 81 184 30 249 63

@1416$float8$minus1.57#:
x14321:	dq -1.57	; 8: 31 133 235 81 184 30 249 191

ldexp:	; PushFloat x
x14329:	fld qword [bp + 6]	; 3: 221 70 6

ldexp$1:	; CallHeader 16 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 1
x14332:	fstp qword [bp + 16]	; 3: 221 94 16

ldexp$2:	; PushFloat 2
x14335:	fld qword [@992$float8$2#]	; 4: 221 6 48 56

ldexp$3:	; Parameter 16 2 6
x14339:	fstp qword [bp + 30]	; 3: 221 94 30

ldexp$4:	; IntegralToFloating £temporary378 n
x14342:	fild word [bp + 14]	; 3: 223 70 14

ldexp$5:	; Parameter 16 £temporary378 14
x14345:	fstp qword [bp + 38]	; 3: 221 94 38

ldexp$6:	; Call 16 pow 0
x14348:	mov word [bp + 24], ldexp$7	; 5: 199 70 24 26 56
x14353:	mov [bp + 26], bp	; 3: 137 110 26
x14356:	add bp, 24	; 3: 131 197 24
x14359:	jmp pow	; 3: 233 120 240

ldexp$7:	; PostCall 16
x14362:	fstp qword [bp + 24]	; 3: 221 94 24
x14365:	fld qword [bp + 16]	; 3: 221 70 16
x14368:	fld qword [bp + 24]	; 3: 221 70 24

ldexp$8:	; GetReturnValue £temporary379

ldexp$9:	; SignedMultiply £temporary380 x £temporary379
x14371:	fmul	; 2: 222 201

ldexp$10:	; SetReturnValue £temporary380

ldexp$11:	; Return £temporary380
x14373:	mov ax, [bp]	; 3: 139 70 0
x14376:	mov di, [bp + 4]	; 3: 139 126 4
x14379:	mov bp, [bp + 2]	; 3: 139 110 2
x14382:	jmp ax	; 2: 255 224

ldexp$12:	; FunctionEnd ldexp

@992$float8$2#:
x14384:	dq 2.0	; 8: 0 0 0 0 0 0 0 64

file_test:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$1:	; Parameter 6 string_in2Etxt# 6
x14392:	mov word [bp + 12], @10693$string_in2Etxt#	; 5: 199 70 12 101 77

file_test$2:	; Parameter 6 string_r# 8
x14397:	mov word [bp + 14], @10694$string_r#	; 5: 199 70 14 108 77

file_test$3:	; Call 6 fopen 0
x14402:	mov word [bp + 6], file_test$4	; 5: 199 70 6 80 56
x14407:	mov [bp + 8], bp	; 3: 137 110 8
x14410:	add bp, 6	; 3: 131 197 6
x14413:	jmp fopen	; 3: 233 130 33

file_test$4:	; PostCall 6

file_test$5:	; GetReturnValue £temporary4815

file_test$6:	; Assign inFilePtr £temporary4815
x14416:	mov [bp + 6], bx	; 3: 137 94 6

file_test$7:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$8:	; Parameter 8 string_outX2Etxt# 6
x14419:	mov word [bp + 14], @10697$string_outX2Etxt#	; 5: 199 70 14 110 77

file_test$9:	; Parameter 8 string_w# 8
x14424:	mov word [bp + 16], @10698$string_w#	; 5: 199 70 16 119 77

file_test$10:	; Call 8 fopen 0
x14429:	mov word [bp + 8], file_test$11	; 5: 199 70 8 107 56
x14434:	mov [bp + 10], bp	; 3: 137 110 10
x14437:	add bp, 8	; 3: 131 197 8
x14440:	jmp fopen	; 3: 233 103 33

file_test$11:	; PostCall 8

file_test$12:	; GetReturnValue £temporary4816

file_test$13:	; Assign outFilePtr £temporary4816
x14443:	mov [bp + 8], bx	; 3: 137 94 8

file_test$14:	; NotEqual 26 inFilePtr 0
x14446:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x14450:	jne file_test$26	; 2: 117 59

file_test$15:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$16:	; Parameter 10 stderr 6
x14452:	mov ax, [stderr]	; 3: 161 121 77
x14455:	mov [bp + 16], ax	; 3: 137 70 16

file_test$17:	; Parameter 10 string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A# 8
x14458:	mov word [bp + 18], @10706$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#	; 5: 199 70 18 123 77

file_test$18:	; Parameter 10 string_inFilePtr20213D20NULL# 10
x14463:	mov word [bp + 20], @10707$string_inFilePtr20213D20NULL#	; 5: 199 70 20 169 77

file_test$19:	; Parameter 10 string_C3A5CUsers5CStefa5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec# 12
x14468:	mov word [bp + 22], @10708$string_C3A5CUsers5CStefa5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#	; 5: 199 70 22 187 77

file_test$20:	; Parameter 10 14 14
x14473:	mov word [bp + 24], 14	; 5: 199 70 24 14 0

file_test$21:	; Call 10 fprintf 0
x14478:	mov word [bp + 10], file_test$22	; 5: 199 70 10 161 56
x14483:	mov [bp + 12], bp	; 3: 137 110 12
x14486:	add bp, 10	; 3: 131 197 10
x14489:	mov di, bp	; 2: 137 239
x14491:	add di, 6	; 3: 131 199 6
x14494:	jmp fprintf	; 3: 233 202 37

file_test$22:	; PostCall 10

file_test$23:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$24:	; Call 10 abort 0
x14497:	mov word [bp + 10], file_test$25	; 5: 199 70 10 175 56
x14502:	mov [bp + 12], bp	; 3: 137 110 12
x14505:	add bp, 10	; 3: 131 197 10
x14508:	jmp abort	; 3: 233 247 37

file_test$25:	; PostCall 10

file_test$26:	; NotEqual 38 outFilePtr 0
x14511:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x14515:	jne file_test$38	; 2: 117 59

file_test$27:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$28:	; Parameter 10 stderr 6
x14517:	mov ax, [stderr]	; 3: 161 121 77
x14520:	mov [bp + 16], ax	; 3: 137 70 16

file_test$29:	; Parameter 10 string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A# 8
x14523:	mov word [bp + 18], @10718$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#	; 5: 199 70 18 251 77

file_test$30:	; Parameter 10 string_outFilePtr20213D20NULL# 10
x14528:	mov word [bp + 20], @10719$string_outFilePtr20213D20NULL#	; 5: 199 70 20 41 78

file_test$31:	; Parameter 10 string_C3A5CUsers5CStefa5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec# 12
x14533:	mov word [bp + 22], @10720$string_C3A5CUsers5CStefa5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#	; 5: 199 70 22 60 78

file_test$32:	; Parameter 10 15 14
x14538:	mov word [bp + 24], 15	; 5: 199 70 24 15 0

file_test$33:	; Call 10 fprintf 0
x14543:	mov word [bp + 10], file_test$34	; 5: 199 70 10 226 56
x14548:	mov [bp + 12], bp	; 3: 137 110 12
x14551:	add bp, 10	; 3: 131 197 10
x14554:	mov di, bp	; 2: 137 239
x14556:	add di, 6	; 3: 131 199 6
x14559:	jmp fprintf	; 3: 233 137 37

file_test$34:	; PostCall 10

file_test$35:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$36:	; Call 10 abort 0
x14562:	mov word [bp + 10], file_test$37	; 5: 199 70 10 240 56
x14567:	mov [bp + 12], bp	; 3: 137 110 12
x14570:	add bp, 10	; 3: 131 197 10
x14573:	jmp abort	; 3: 233 182 37

file_test$37:	; PostCall 10

file_test$38:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$39:	; Parameter 10 inFilePtr 6
x14576:	mov ax, [bp + 6]	; 3: 139 70 6
x14579:	mov [bp + 16], ax	; 3: 137 70 16

file_test$40:	; Call 10 feof 0
x14582:	mov word [bp + 10], file_test$41	; 5: 199 70 10 4 57
x14587:	mov [bp + 12], bp	; 3: 137 110 12
x14590:	add bp, 10	; 3: 131 197 10
x14593:	jmp feof	; 3: 233 179 37

file_test$41:	; PostCall 10

file_test$42:	; GetReturnValue £temporary4825

file_test$43:	; NotEqual 75 £temporary4825 0
x14596:	cmp bx, 0	; 3: 131 251 0
x14599:	jne file_test$75	; 4: 15 133 141 0

file_test$44:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$45:	; Parameter 18 inFilePtr 6
x14603:	mov ax, [bp + 6]	; 3: 139 70 6
x14606:	mov [bp + 24], ax	; 3: 137 70 24

file_test$46:	; Parameter 18 string_25lf# 8
x14609:	mov word [bp + 26], @10730$string_25lf#	; 5: 199 70 26 124 78

file_test$47:	; address £temporary4828 value
x14614:	mov si, bp	; 2: 137 238
x14616:	add si, 10	; 3: 131 198 10

file_test$48:	; Parameter 18 £temporary4828 10
x14619:	mov [bp + 28], si	; 3: 137 118 28

file_test$49:	; Call 18 fscanf 0
x14622:	mov word [bp + 18], file_test$50	; 5: 199 70 18 49 57
x14627:	mov [bp + 20], bp	; 3: 137 110 20
x14630:	add bp, 18	; 3: 131 197 18
x14633:	mov di, bp	; 2: 137 239
x14635:	add di, 2	; 3: 131 199 2
x14638:	jmp fscanf	; 3: 233 27 38

file_test$50:	; PostCall 18

file_test$51:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$52:	; Parameter 18 string_X12025f0A# 6
x14641:	mov word [bp + 24], @10733$string_X12025f0A#	; 5: 199 70 24 128 78

file_test$53:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$54:	; PushFloat value
x14646:	fld qword [bp + 10]	; 3: 221 70 10

file_test$55:	; Parameter 18 value 14
x14649:	fstp qword [bp + 32]	; 3: 221 94 32

file_test$56:	; Call 18 sqrt 8
x14652:	mov word [bp + 26], file_test$57	; 5: 199 70 26 74 57
x14657:	mov [bp + 28], bp	; 3: 137 110 28
x14660:	add bp, 26	; 3: 131 197 26
x14663:	jmp sqrt	; 3: 233 185 245

file_test$57:	; PostCall 18

file_test$58:	; GetReturnValue £temporary4830

file_test$59:	; Parameter 18 £temporary4830 8
x14666:	fstp qword [bp + 26]	; 3: 221 94 26

file_test$60:	; Call 18 printf 0
x14669:	mov word [bp + 18], file_test$61	; 5: 199 70 18 96 57
x14674:	mov [bp + 20], bp	; 3: 137 110 20
x14677:	add bp, 18	; 3: 131 197 18
x14680:	mov di, bp	; 2: 137 239
x14682:	add di, 8	; 3: 131 199 8
x14685:	jmp printf	; 3: 233 164 211

file_test$61:	; PostCall 18

file_test$62:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$63:	; Parameter 18 outFilePtr 6
x14688:	mov ax, [bp + 8]	; 3: 139 70 8
x14691:	mov [bp + 24], ax	; 3: 137 70 24

file_test$64:	; Parameter 18 string_X22025f0A# 8
x14694:	mov word [bp + 26], @10736$string_X22025f0A#	; 5: 199 70 26 135 78

file_test$65:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$66:	; PushFloat value
x14699:	fld qword [bp + 10]	; 3: 221 70 10

file_test$67:	; Parameter 18 value 16
x14702:	fstp qword [bp + 34]	; 3: 221 94 34

file_test$68:	; Call 18 sqrt 10
x14705:	mov word [bp + 28], file_test$69	; 5: 199 70 28 127 57
x14710:	mov [bp + 30], bp	; 3: 137 110 30
x14713:	add bp, 28	; 3: 131 197 28
x14716:	jmp sqrt	; 3: 233 132 245

file_test$69:	; PostCall 18

file_test$70:	; GetReturnValue £temporary4832

file_test$71:	; Parameter 18 £temporary4832 10
x14719:	fstp qword [bp + 28]	; 3: 221 94 28

file_test$72:	; Call 18 fprintf 0
x14722:	mov word [bp + 18], file_test$73	; 5: 199 70 18 149 57
x14727:	mov [bp + 20], bp	; 3: 137 110 20
x14730:	add bp, 18	; 3: 131 197 18
x14733:	mov di, bp	; 2: 137 239
x14735:	add di, 8	; 3: 131 199 8
x14738:	jmp fprintf	; 3: 233 214 36

file_test$73:	; PostCall 18

file_test$74:	; Goto 38
x14741:	jmp file_test$38	; 3: 233 88 255

file_test$75:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$76:	; Parameter 10 string_0A# 6
x14744:	mov word [bp + 16], @10739$string_0A#	; 5: 199 70 16 142 78

file_test$77:	; Call 10 printf 0
x14749:	mov word [bp + 10], file_test$78	; 5: 199 70 10 173 57
x14754:	mov [bp + 12], bp	; 3: 137 110 12
x14757:	add bp, 10	; 3: 131 197 10
x14760:	mov di, bp	; 2: 137 239
x14762:	jmp printf	; 3: 233 87 211

file_test$78:	; PostCall 10

file_test$79:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$80:	; Parameter 10 inFilePtr 6
x14765:	mov ax, [bp + 6]	; 3: 139 70 6
x14768:	mov [bp + 16], ax	; 3: 137 70 16

file_test$81:	; Call 10 fclose 0
x14771:	mov word [bp + 10], file_test$82	; 5: 199 70 10 193 57
x14776:	mov [bp + 12], bp	; 3: 137 110 12
x14779:	add bp, 10	; 3: 131 197 10
x14782:	jmp fclose	; 3: 233 186 55

file_test$82:	; PostCall 10

file_test$83:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$84:	; Parameter 10 outFilePtr 6
x14785:	mov ax, [bp + 8]	; 3: 139 70 8
x14788:	mov [bp + 16], ax	; 3: 137 70 16

file_test$85:	; Call 10 fclose 0
x14791:	mov word [bp + 10], file_test$86	; 5: 199 70 10 213 57
x14796:	mov [bp + 12], bp	; 3: 137 110 12
x14799:	add bp, 10	; 3: 131 197 10
x14802:	jmp fclose	; 3: 233 166 55

file_test$86:	; PostCall 10

file_test$87:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$88:	; Parameter 6 string_in2Etxt# 6
x14805:	mov word [bp + 12], @10743$string_in2Etxt#	; 5: 199 70 12 144 78

file_test$89:	; Parameter 6 string_r# 8
x14810:	mov word [bp + 14], @10744$string_r#	; 5: 199 70 14 151 78

file_test$90:	; Call 6 fopen 0
x14815:	mov word [bp + 6], file_test$91	; 5: 199 70 6 237 57
x14820:	mov [bp + 8], bp	; 3: 137 110 8
x14823:	add bp, 6	; 3: 131 197 6
x14826:	jmp fopen	; 3: 233 229 31

file_test$91:	; PostCall 6

file_test$92:	; GetReturnValue £temporary4837

file_test$93:	; Assign inFilePtr £temporary4837
x14829:	mov [bp + 6], bx	; 3: 137 94 6

file_test$94:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$95:	; Parameter 8 string_outY2Etxt# 6
x14832:	mov word [bp + 14], @10747$string_outY2Etxt#	; 5: 199 70 14 153 78

file_test$96:	; Parameter 8 string_w# 8
x14837:	mov word [bp + 16], @10748$string_w#	; 5: 199 70 16 162 78

file_test$97:	; Call 8 fopen 0
x14842:	mov word [bp + 8], file_test$98	; 5: 199 70 8 8 58
x14847:	mov [bp + 10], bp	; 3: 137 110 10
x14850:	add bp, 8	; 3: 131 197 8
x14853:	jmp fopen	; 3: 233 202 31

file_test$98:	; PostCall 8

file_test$99:	; GetReturnValue £temporary4838

file_test$100:	; Assign outFilePtr £temporary4838
x14856:	mov [bp + 8], bx	; 3: 137 94 8

file_test$101:	; NotEqual 113 inFilePtr 0
x14859:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x14863:	jne file_test$113	; 2: 117 59

file_test$102:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$103:	; Parameter 10 stderr 6
x14865:	mov ax, [stderr]	; 3: 161 121 77
x14868:	mov [bp + 16], ax	; 3: 137 70 16

file_test$104:	; Parameter 10 string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A# 8
x14871:	mov word [bp + 18], @10756$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#	; 5: 199 70 18 164 78

file_test$105:	; Parameter 10 string_inFilePtr20213D20NULL# 10
x14876:	mov word [bp + 20], @10757$string_inFilePtr20213D20NULL#	; 5: 199 70 20 210 78

file_test$106:	; Parameter 10 string_C3A5CUsers5CStefa5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec# 12
x14881:	mov word [bp + 22], @10758$string_C3A5CUsers5CStefa5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#	; 5: 199 70 22 228 78

file_test$107:	; Parameter 10 34 14
x14886:	mov word [bp + 24], 34	; 5: 199 70 24 34 0

file_test$108:	; Call 10 fprintf 0
x14891:	mov word [bp + 10], file_test$109	; 5: 199 70 10 62 58
x14896:	mov [bp + 12], bp	; 3: 137 110 12
x14899:	add bp, 10	; 3: 131 197 10
x14902:	mov di, bp	; 2: 137 239
x14904:	add di, 6	; 3: 131 199 6
x14907:	jmp fprintf	; 3: 233 45 36

file_test$109:	; PostCall 10

file_test$110:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$111:	; Call 10 abort 0
x14910:	mov word [bp + 10], file_test$112	; 5: 199 70 10 76 58
x14915:	mov [bp + 12], bp	; 3: 137 110 12
x14918:	add bp, 10	; 3: 131 197 10
x14921:	jmp abort	; 3: 233 90 36

file_test$112:	; PostCall 10

file_test$113:	; NotEqual 125 outFilePtr 0
x14924:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x14928:	jne file_test$125	; 2: 117 59

file_test$114:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$115:	; Parameter 10 stderr 6
x14930:	mov ax, [stderr]	; 3: 161 121 77
x14933:	mov [bp + 16], ax	; 3: 137 70 16

file_test$116:	; Parameter 10 string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A# 8
x14936:	mov word [bp + 18], @10768$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#	; 5: 199 70 18 36 79

file_test$117:	; Parameter 10 string_outFilePtr20213D20NULL# 10
x14941:	mov word [bp + 20], @10769$string_outFilePtr20213D20NULL#	; 5: 199 70 20 82 79

file_test$118:	; Parameter 10 string_C3A5CUsers5CStefa5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec# 12
x14946:	mov word [bp + 22], @10770$string_C3A5CUsers5CStefa5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#	; 5: 199 70 22 101 79

file_test$119:	; Parameter 10 35 14
x14951:	mov word [bp + 24], 35	; 5: 199 70 24 35 0

file_test$120:	; Call 10 fprintf 0
x14956:	mov word [bp + 10], file_test$121	; 5: 199 70 10 127 58
x14961:	mov [bp + 12], bp	; 3: 137 110 12
x14964:	add bp, 10	; 3: 131 197 10
x14967:	mov di, bp	; 2: 137 239
x14969:	add di, 6	; 3: 131 199 6
x14972:	jmp fprintf	; 3: 233 236 35

file_test$121:	; PostCall 10

file_test$122:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$123:	; Call 10 abort 0
x14975:	mov word [bp + 10], file_test$124	; 5: 199 70 10 141 58
x14980:	mov [bp + 12], bp	; 3: 137 110 12
x14983:	add bp, 10	; 3: 131 197 10
x14986:	jmp abort	; 3: 233 25 36

file_test$124:	; PostCall 10

file_test$125:	; Assign size 0
x14989:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

file_test$126:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$127:	; Parameter 14 inFilePtr 6
x14994:	mov ax, [bp + 6]	; 3: 139 70 6
x14997:	mov [bp + 20], ax	; 3: 137 70 20

file_test$128:	; Parameter 14 string_25i# 8
x15000:	mov word [bp + 22], @10779$string_25i#	; 5: 199 70 22 165 79

file_test$129:	; address £temporary4847 size
x15005:	mov si, bp	; 2: 137 238
x15007:	add si, 10	; 3: 131 198 10

file_test$130:	; Parameter 14 £temporary4847 10
x15010:	mov [bp + 24], si	; 3: 137 118 24

file_test$131:	; Call 14 fscanf 0
x15013:	mov word [bp + 14], file_test$132	; 5: 199 70 14 184 58
x15018:	mov [bp + 16], bp	; 3: 137 110 16
x15021:	add bp, 14	; 3: 131 197 14
x15024:	mov di, bp	; 2: 137 239
x15026:	add di, 2	; 3: 131 199 2
x15029:	jmp fscanf	; 3: 233 148 36

file_test$132:	; PostCall 14

file_test$133:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$134:	; Parameter 14 string_size2025i0A# 6
x15032:	mov word [bp + 20], @10782$string_size2025i0A#	; 5: 199 70 20 168 79

file_test$135:	; Parameter 14 size 8
x15037:	mov ax, [bp + 10]	; 3: 139 70 10
x15040:	mov [bp + 22], ax	; 3: 137 70 22

file_test$136:	; Call 14 printf 0
x15043:	mov word [bp + 14], file_test$137	; 5: 199 70 14 214 58
x15048:	mov [bp + 16], bp	; 3: 137 110 16
x15051:	add bp, 14	; 3: 131 197 14
x15054:	mov di, bp	; 2: 137 239
x15056:	add di, 2	; 3: 131 199 2
x15059:	jmp printf	; 3: 233 46 210

file_test$137:	; PostCall 14

file_test$138:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$139:	; Parameter 14 outFilePtr 6
x15062:	mov ax, [bp + 8]	; 3: 139 70 8
x15065:	mov [bp + 20], ax	; 3: 137 70 20

file_test$140:	; Parameter 14 string_Y20size2025i0A# 8
x15068:	mov word [bp + 22], @10784$string_Y20size2025i0A#	; 5: 199 70 22 177 79

file_test$141:	; Parameter 14 size 10
x15073:	mov ax, [bp + 10]	; 3: 139 70 10
x15076:	mov [bp + 24], ax	; 3: 137 70 24

file_test$142:	; Call 14 fprintf 0
x15079:	mov word [bp + 14], file_test$143	; 5: 199 70 14 250 58
x15084:	mov [bp + 16], bp	; 3: 137 110 16
x15087:	add bp, 14	; 3: 131 197 14
x15090:	mov di, bp	; 2: 137 239
x15092:	add di, 2	; 3: 131 199 2
x15095:	jmp fprintf	; 3: 233 113 35

file_test$143:	; PostCall 14

file_test$144:	; Assign index 0
x15098:	mov word [bp + 12], 0	; 5: 199 70 12 0 0

file_test$145:	; SignedGreaterThanEqual 178 index size
x15103:	mov ax, [bp + 10]	; 3: 139 70 10
x15106:	cmp [bp + 12], ax	; 3: 57 70 12
x15109:	jge file_test$178	; 4: 15 141 144 0

file_test$146:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$147:	; Parameter 22 inFilePtr 6
x15113:	mov ax, [bp + 6]	; 3: 139 70 6
x15116:	mov [bp + 28], ax	; 3: 137 70 28

file_test$148:	; Parameter 22 string_25lf# 8
x15119:	mov word [bp + 30], @10793$string_25lf#	; 5: 199 70 30 188 79

file_test$149:	; address £temporary4853 value
x15124:	mov si, bp	; 2: 137 238
x15126:	add si, 14	; 3: 131 198 14

file_test$150:	; Parameter 22 £temporary4853 10
x15129:	mov [bp + 32], si	; 3: 137 118 32

file_test$151:	; Call 22 fscanf 0
x15132:	mov word [bp + 22], file_test$152	; 5: 199 70 22 47 59
x15137:	mov [bp + 24], bp	; 3: 137 110 24
x15140:	add bp, 22	; 3: 131 197 22
x15143:	mov di, bp	; 2: 137 239
x15145:	add di, 2	; 3: 131 199 2
x15148:	jmp fscanf	; 3: 233 29 36

file_test$152:	; PostCall 22

file_test$153:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$154:	; Parameter 22 string_Y12025f0A# 6
x15151:	mov word [bp + 28], @10796$string_Y12025f0A#	; 5: 199 70 28 192 79

file_test$155:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$156:	; PushFloat value
x15156:	fld qword [bp + 14]	; 3: 221 70 14

file_test$157:	; Parameter 22 value 14
x15159:	fstp qword [bp + 36]	; 3: 221 94 36

file_test$158:	; Call 22 sqrt 8
x15162:	mov word [bp + 30], file_test$159	; 5: 199 70 30 72 59
x15167:	mov [bp + 32], bp	; 3: 137 110 32
x15170:	add bp, 30	; 3: 131 197 30
x15173:	jmp sqrt	; 3: 233 187 243

file_test$159:	; PostCall 22

file_test$160:	; GetReturnValue £temporary4855

file_test$161:	; Parameter 22 £temporary4855 8
x15176:	fstp qword [bp + 30]	; 3: 221 94 30

file_test$162:	; Call 22 printf 0
x15179:	mov word [bp + 22], file_test$163	; 5: 199 70 22 94 59
x15184:	mov [bp + 24], bp	; 3: 137 110 24
x15187:	add bp, 22	; 3: 131 197 22
x15190:	mov di, bp	; 2: 137 239
x15192:	add di, 8	; 3: 131 199 8
x15195:	jmp printf	; 3: 233 166 209

file_test$163:	; PostCall 22

file_test$164:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$165:	; Parameter 22 outFilePtr 6
x15198:	mov ax, [bp + 8]	; 3: 139 70 8
x15201:	mov [bp + 28], ax	; 3: 137 70 28

file_test$166:	; Parameter 22 string_Y22025f0A# 8
x15204:	mov word [bp + 30], @10799$string_Y22025f0A#	; 5: 199 70 30 199 79

file_test$167:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$168:	; PushFloat value
x15209:	fld qword [bp + 14]	; 3: 221 70 14

file_test$169:	; Parameter 22 value 16
x15212:	fstp qword [bp + 38]	; 3: 221 94 38

file_test$170:	; Call 22 sqrt 10
x15215:	mov word [bp + 32], file_test$171	; 5: 199 70 32 125 59
x15220:	mov [bp + 34], bp	; 3: 137 110 34
x15223:	add bp, 32	; 3: 131 197 32
x15226:	jmp sqrt	; 3: 233 134 243

file_test$171:	; PostCall 22

file_test$172:	; GetReturnValue £temporary4857

file_test$173:	; Parameter 22 £temporary4857 10
x15229:	fstp qword [bp + 32]	; 3: 221 94 32

file_test$174:	; Call 22 fprintf 0
x15232:	mov word [bp + 22], file_test$175	; 5: 199 70 22 147 59
x15237:	mov [bp + 24], bp	; 3: 137 110 24
x15240:	add bp, 22	; 3: 131 197 22
x15243:	mov di, bp	; 2: 137 239
x15245:	add di, 8	; 3: 131 199 8
x15248:	jmp fprintf	; 3: 233 216 34

file_test$175:	; PostCall 22

file_test$176:	; Increment index
x15251:	inc word [bp + 12]	; 3: 255 70 12

file_test$177:	; Goto 145
x15254:	jmp file_test$145	; 3: 233 102 255

file_test$178:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$179:	; Parameter 14 string_0A# 6
x15257:	mov word [bp + 20], @10802$string_0A#	; 5: 199 70 20 206 79

file_test$180:	; Call 14 printf 0
x15262:	mov word [bp + 14], file_test$181	; 5: 199 70 14 174 59
x15267:	mov [bp + 16], bp	; 3: 137 110 16
x15270:	add bp, 14	; 3: 131 197 14
x15273:	mov di, bp	; 2: 137 239
x15275:	jmp printf	; 3: 233 86 209

file_test$181:	; PostCall 14

file_test$182:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$183:	; Parameter 10 inFilePtr 6
x15278:	mov ax, [bp + 6]	; 3: 139 70 6
x15281:	mov [bp + 16], ax	; 3: 137 70 16

file_test$184:	; Call 10 fclose 0
x15284:	mov word [bp + 10], file_test$185	; 5: 199 70 10 194 59
x15289:	mov [bp + 12], bp	; 3: 137 110 12
x15292:	add bp, 10	; 3: 131 197 10
x15295:	jmp fclose	; 3: 233 185 53

file_test$185:	; PostCall 10

file_test$186:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$187:	; Parameter 10 outFilePtr 6
x15298:	mov ax, [bp + 8]	; 3: 139 70 8
x15301:	mov [bp + 16], ax	; 3: 137 70 16

file_test$188:	; Call 10 fclose 0
x15304:	mov word [bp + 10], file_test$189	; 5: 199 70 10 214 59
x15309:	mov [bp + 12], bp	; 3: 137 110 12
x15312:	add bp, 10	; 3: 131 197 10
x15315:	jmp fclose	; 3: 233 165 53

file_test$189:	; PostCall 10

file_test$190:	; Assign sourceFile string_Y#
x15318:	mov word [bp + 6], @10806$string_Y#	; 5: 199 70 6 208 79

file_test$191:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$192:	; Parameter 8 sourceFile 6
x15323:	mov ax, [bp + 6]	; 3: 139 70 6
x15326:	mov [bp + 14], ax	; 3: 137 70 14

file_test$193:	; Call 8 remove 0
x15329:	mov word [bp + 8], file_test$194	; 5: 199 70 8 239 59
x15334:	mov [bp + 10], bp	; 3: 137 110 10
x15337:	add bp, 8	; 3: 131 197 8
x15340:	jmp remove	; 3: 233 79 54

file_test$194:	; PostCall 8

file_test$195:	; GetReturnValue £temporary4862

file_test$196:	; NotEqual 203 £temporary4862 0
x15343:	cmp bx, 0	; 3: 131 251 0
x15346:	jne file_test$203	; 2: 117 32

file_test$197:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$198:	; Parameter 8 string_2225s2220has20been20removed0A# 6
x15348:	mov word [bp + 14], @10812$string_2225s2220has20been20removed0A#	; 5: 199 70 14 210 79

file_test$199:	; Parameter 8 sourceFile 8
x15353:	mov ax, [bp + 6]	; 3: 139 70 6
x15356:	mov [bp + 16], ax	; 3: 137 70 16

file_test$200:	; Call 8 printf 0
x15359:	mov word [bp + 8], file_test$201	; 5: 199 70 8 18 60
x15364:	mov [bp + 10], bp	; 3: 137 110 10
x15367:	add bp, 8	; 3: 131 197 8
x15370:	mov di, bp	; 2: 137 239
x15372:	add di, 2	; 3: 131 199 2
x15375:	jmp printf	; 3: 233 242 208

file_test$201:	; PostCall 8

file_test$202:	; Goto 215
x15378:	jmp file_test$215	; 2: 235 59

file_test$203:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$204:	; Parameter 8 string_Error202225s222025i3A2025s2E0A# 6
x15380:	mov word [bp + 14], @10814$string_Error202225s222025i3A2025s2E0A#	; 5: 199 70 14 233 79

file_test$205:	; Parameter 8 sourceFile 8
x15385:	mov ax, [bp + 6]	; 3: 139 70 6
x15388:	mov [bp + 16], ax	; 3: 137 70 16

file_test$206:	; Parameter 8 errno 10
x15391:	mov ax, [errno]	; 3: 161 230 10
x15394:	mov [bp + 18], ax	; 3: 137 70 18

file_test$207:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$208:	; Parameter 8 errno 18
x15397:	mov ax, [errno]	; 3: 161 230 10
x15400:	mov [bp + 26], ax	; 3: 137 70 26

file_test$209:	; Call 8 strerror 12
x15403:	mov word [bp + 20], file_test$210	; 5: 199 70 20 57 60
x15408:	mov [bp + 22], bp	; 3: 137 110 22
x15411:	add bp, 20	; 3: 131 197 20
x15414:	jmp strerror	; 3: 233 214 247

file_test$210:	; PostCall 8

file_test$211:	; GetReturnValue £temporary4865

file_test$212:	; Parameter 8 £temporary4865 12
x15417:	mov [bp + 20], bx	; 3: 137 94 20

file_test$213:	; Call 8 printf 0
x15420:	mov word [bp + 8], file_test$214	; 5: 199 70 8 79 60
x15425:	mov [bp + 10], bp	; 3: 137 110 10
x15428:	add bp, 8	; 3: 131 197 8
x15431:	mov di, bp	; 2: 137 239
x15433:	add di, 6	; 3: 131 199 6
x15436:	jmp printf	; 3: 233 181 208

file_test$214:	; PostCall 8

file_test$215:	; Assign sourceFile string_X#
x15439:	mov word [bp + 6], @10817$string_X#	; 5: 199 70 6 253 79

file_test$216:	; Assign targetFile string_Y#
x15444:	mov word [bp + 8], @10819$string_Y#	; 5: 199 70 8 255 79

file_test$217:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$218:	; Parameter 10 sourceFile 6
x15449:	mov ax, [bp + 6]	; 3: 139 70 6
x15452:	mov [bp + 16], ax	; 3: 137 70 16

file_test$219:	; Parameter 10 string_w# 8
x15455:	mov word [bp + 18], @10821$string_w#	; 5: 199 70 18 1 80

file_test$220:	; Call 10 fopen 0
x15460:	mov word [bp + 10], file_test$221	; 5: 199 70 10 114 60
x15465:	mov [bp + 12], bp	; 3: 137 110 12
x15468:	add bp, 10	; 3: 131 197 10
x15471:	jmp fopen	; 3: 233 96 29

file_test$221:	; PostCall 10

file_test$222:	; GetReturnValue £temporary4867

file_test$223:	; Assign filePtr £temporary4867
x15474:	mov [bp + 10], bx	; 3: 137 94 10

file_test$224:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$225:	; Parameter 12 filePtr 6
x15477:	mov ax, [bp + 10]	; 3: 139 70 10
x15480:	mov [bp + 18], ax	; 3: 137 70 18

file_test$226:	; Parameter 12 string_Hello20X# 8
x15483:	mov word [bp + 20], @10824$string_Hello20X#	; 5: 199 70 20 3 80

file_test$227:	; Call 12 fprintf 0
x15488:	mov word [bp + 12], file_test$228	; 5: 199 70 12 144 60
x15493:	mov [bp + 14], bp	; 3: 137 110 14
x15496:	add bp, 12	; 3: 131 197 12
x15499:	mov di, bp	; 2: 137 239
x15501:	jmp fprintf	; 3: 233 219 33

file_test$228:	; PostCall 12

file_test$229:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$230:	; Parameter 12 filePtr 6
x15504:	mov ax, [bp + 10]	; 3: 139 70 10
x15507:	mov [bp + 18], ax	; 3: 137 70 18

file_test$231:	; Call 12 fclose 0
x15510:	mov word [bp + 12], file_test$232	; 5: 199 70 12 164 60
x15515:	mov [bp + 14], bp	; 3: 137 110 14
x15518:	add bp, 12	; 3: 131 197 12
x15521:	jmp fclose	; 3: 233 215 52

file_test$232:	; PostCall 12

file_test$233:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$234:	; Parameter 12 sourceFile 6
x15524:	mov ax, [bp + 6]	; 3: 139 70 6
x15527:	mov [bp + 18], ax	; 3: 137 70 18

file_test$235:	; Parameter 12 targetFile 8
x15530:	mov ax, [bp + 8]	; 3: 139 70 8
x15533:	mov [bp + 20], ax	; 3: 137 70 20

file_test$236:	; Call 12 rename 0
x15536:	mov word [bp + 12], file_test$237	; 5: 199 70 12 190 60
x15541:	mov [bp + 14], bp	; 3: 137 110 14
x15544:	add bp, 12	; 3: 131 197 12
x15547:	jmp rename	; 3: 233 173 53

file_test$237:	; PostCall 12

file_test$238:	; GetReturnValue £temporary4870

file_test$239:	; NotEqual 247 £temporary4870 0
x15550:	cmp bx, 0	; 3: 131 251 0
x15553:	jne file_test$247	; 2: 117 38

file_test$240:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$241:	; Parameter 12 string_2225s2220has20been20renamed20to202225s222E0A# 6
x15555:	mov word [bp + 18], @10831$string_2225s2220has20been20renamed20to202225s222E0A#	; 5: 199 70 18 11 80

file_test$242:	; Parameter 12 sourceFile 8
x15560:	mov ax, [bp + 6]	; 3: 139 70 6
x15563:	mov [bp + 20], ax	; 3: 137 70 20

file_test$243:	; Parameter 12 targetFile 10
x15566:	mov ax, [bp + 8]	; 3: 139 70 8
x15569:	mov [bp + 22], ax	; 3: 137 70 22

file_test$244:	; Call 12 printf 0
x15572:	mov word [bp + 12], file_test$245	; 5: 199 70 12 231 60
x15577:	mov [bp + 14], bp	; 3: 137 110 14
x15580:	add bp, 12	; 3: 131 197 12
x15583:	mov di, bp	; 2: 137 239
x15585:	add di, 4	; 3: 131 199 4
x15588:	jmp printf	; 3: 233 29 208

file_test$245:	; PostCall 12

file_test$246:	; Goto 260
x15591:	jmp file_test$260	; 2: 235 65

file_test$247:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$248:	; Parameter 12 string_Error202225s22202225s222025i3A2025s2E0A# 6
x15593:	mov word [bp + 18], @10833$string_Error202225s22202225s222025i3A2025s2E0A#	; 5: 199 70 18 43 80

file_test$249:	; Parameter 12 sourceFile 8
x15598:	mov ax, [bp + 6]	; 3: 139 70 6
x15601:	mov [bp + 20], ax	; 3: 137 70 20

file_test$250:	; Parameter 12 targetFile 10
x15604:	mov ax, [bp + 8]	; 3: 139 70 8
x15607:	mov [bp + 22], ax	; 3: 137 70 22

file_test$251:	; Parameter 12 errno 12
x15610:	mov ax, [errno]	; 3: 161 230 10
x15613:	mov [bp + 24], ax	; 3: 137 70 24

file_test$252:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$253:	; Parameter 12 errno 20
x15616:	mov ax, [errno]	; 3: 161 230 10
x15619:	mov [bp + 32], ax	; 3: 137 70 32

file_test$254:	; Call 12 strerror 14
x15622:	mov word [bp + 26], file_test$255	; 5: 199 70 26 20 61
x15627:	mov [bp + 28], bp	; 3: 137 110 28
x15630:	add bp, 26	; 3: 131 197 26
x15633:	jmp strerror	; 3: 233 251 246

file_test$255:	; PostCall 12

file_test$256:	; GetReturnValue £temporary4873

file_test$257:	; Parameter 12 £temporary4873 14
x15636:	mov [bp + 26], bx	; 3: 137 94 26

file_test$258:	; Call 12 printf 0
x15639:	mov word [bp + 12], file_test$259	; 5: 199 70 12 42 61
x15644:	mov [bp + 14], bp	; 3: 137 110 14
x15647:	add bp, 12	; 3: 131 197 12
x15650:	mov di, bp	; 2: 137 239
x15652:	add di, 8	; 3: 131 199 8
x15655:	jmp printf	; 3: 233 218 207

file_test$259:	; PostCall 12

file_test$260:	; Assign sourceFile string_X2#
x15658:	mov word [bp + 6], @10836$string_X2#	; 5: 199 70 6 68 80

file_test$261:	; Assign targetFile string_Y2#
x15663:	mov word [bp + 8], @10838$string_Y2#	; 5: 199 70 8 71 80

file_test$262:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$263:	; Parameter 10 sourceFile 6
x15668:	mov ax, [bp + 6]	; 3: 139 70 6
x15671:	mov [bp + 16], ax	; 3: 137 70 16

file_test$264:	; Parameter 10 targetFile 8
x15674:	mov ax, [bp + 8]	; 3: 139 70 8
x15677:	mov [bp + 18], ax	; 3: 137 70 18

file_test$265:	; Call 10 rename 0
x15680:	mov word [bp + 10], file_test$266	; 5: 199 70 10 78 61
x15685:	mov [bp + 12], bp	; 3: 137 110 12
x15688:	add bp, 10	; 3: 131 197 10
x15691:	jmp rename	; 3: 233 29 53

file_test$266:	; PostCall 10

file_test$267:	; GetReturnValue £temporary4875

file_test$268:	; NotEqual 276 £temporary4875 0
x15694:	cmp bx, 0	; 3: 131 251 0
x15697:	jne file_test$276	; 2: 117 38

file_test$269:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$270:	; Parameter 10 string_2225s2220has20been20renamed20to202225s222E0A# 6
x15699:	mov word [bp + 16], @10844$string_2225s2220has20been20renamed20to202225s222E0A#	; 5: 199 70 16 74 80

file_test$271:	; Parameter 10 sourceFile 8
x15704:	mov ax, [bp + 6]	; 3: 139 70 6
x15707:	mov [bp + 18], ax	; 3: 137 70 18

file_test$272:	; Parameter 10 targetFile 10
x15710:	mov ax, [bp + 8]	; 3: 139 70 8
x15713:	mov [bp + 20], ax	; 3: 137 70 20

file_test$273:	; Call 10 printf 0
x15716:	mov word [bp + 10], file_test$274	; 5: 199 70 10 119 61
x15721:	mov [bp + 12], bp	; 3: 137 110 12
x15724:	add bp, 10	; 3: 131 197 10
x15727:	mov di, bp	; 2: 137 239
x15729:	add di, 4	; 3: 131 199 4
x15732:	jmp printf	; 3: 233 141 207

file_test$274:	; PostCall 10

file_test$275:	; Goto 289
x15735:	jmp file_test$289	; 2: 235 65

file_test$276:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$277:	; Parameter 10 string_Error202225s22202225s222025i3A2025s2E0A# 6
x15737:	mov word [bp + 16], @10846$string_Error202225s22202225s222025i3A2025s2E0A#	; 5: 199 70 16 106 80

file_test$278:	; Parameter 10 sourceFile 8
x15742:	mov ax, [bp + 6]	; 3: 139 70 6
x15745:	mov [bp + 18], ax	; 3: 137 70 18

file_test$279:	; Parameter 10 targetFile 10
x15748:	mov ax, [bp + 8]	; 3: 139 70 8
x15751:	mov [bp + 20], ax	; 3: 137 70 20

file_test$280:	; Parameter 10 errno 12
x15754:	mov ax, [errno]	; 3: 161 230 10
x15757:	mov [bp + 22], ax	; 3: 137 70 22

file_test$281:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$282:	; Parameter 10 errno 20
x15760:	mov ax, [errno]	; 3: 161 230 10
x15763:	mov [bp + 30], ax	; 3: 137 70 30

file_test$283:	; Call 10 strerror 14
x15766:	mov word [bp + 24], file_test$284	; 5: 199 70 24 164 61
x15771:	mov [bp + 26], bp	; 3: 137 110 26
x15774:	add bp, 24	; 3: 131 197 24
x15777:	jmp strerror	; 3: 233 107 246

file_test$284:	; PostCall 10

file_test$285:	; GetReturnValue £temporary4878

file_test$286:	; Parameter 10 £temporary4878 14
x15780:	mov [bp + 24], bx	; 3: 137 94 24

file_test$287:	; Call 10 printf 0
x15783:	mov word [bp + 10], file_test$288	; 5: 199 70 10 186 61
x15788:	mov [bp + 12], bp	; 3: 137 110 12
x15791:	add bp, 10	; 3: 131 197 10
x15794:	mov di, bp	; 2: 137 239
x15796:	add di, 8	; 3: 131 199 8
x15799:	jmp printf	; 3: 233 74 207

file_test$288:	; PostCall 10

file_test$289:	; Assign targetFile string_Z#
x15802:	mov word [bp + 6], @10849$string_Z#	; 5: 199 70 6 131 80

file_test$290:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$291:	; Parameter 8 targetFile 6
x15807:	mov ax, [bp + 6]	; 3: 139 70 6
x15810:	mov [bp + 14], ax	; 3: 137 70 14

file_test$292:	; Parameter 8 string_w# 8
x15813:	mov word [bp + 16], @10851$string_w#	; 5: 199 70 16 133 80

file_test$293:	; Call 8 fopen 0
x15818:	mov word [bp + 8], file_test$294	; 5: 199 70 8 216 61
x15823:	mov [bp + 10], bp	; 3: 137 110 10
x15826:	add bp, 8	; 3: 131 197 8
x15829:	jmp fopen	; 3: 233 250 27

file_test$294:	; PostCall 8

file_test$295:	; GetReturnValue £temporary4880

file_test$296:	; Assign filePtr £temporary4880
x15832:	mov [bp + 8], bx	; 3: 137 94 8

file_test$297:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$298:	; Parameter 10 filePtr 6
x15835:	mov ax, [bp + 8]	; 3: 139 70 8
x15838:	mov [bp + 16], ax	; 3: 137 70 16

file_test$299:	; Parameter 10 string_Hello20Z# 8
x15841:	mov word [bp + 18], @10854$string_Hello20Z#	; 5: 199 70 18 135 80

file_test$300:	; Call 10 fprintf 0
x15846:	mov word [bp + 10], file_test$301	; 5: 199 70 10 246 61
x15851:	mov [bp + 12], bp	; 3: 137 110 12
x15854:	add bp, 10	; 3: 131 197 10
x15857:	mov di, bp	; 2: 137 239
x15859:	jmp fprintf	; 3: 233 117 32

file_test$301:	; PostCall 10

file_test$302:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$303:	; Parameter 10 filePtr 6
x15862:	mov ax, [bp + 8]	; 3: 139 70 8
x15865:	mov [bp + 16], ax	; 3: 137 70 16

file_test$304:	; Call 10 fclose 0
x15868:	mov word [bp + 10], file_test$305	; 5: 199 70 10 10 62
x15873:	mov [bp + 12], bp	; 3: 137 110 12
x15876:	add bp, 10	; 3: 131 197 10
x15879:	jmp fclose	; 3: 233 113 51

file_test$305:	; PostCall 10

file_test$306:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$307:	; Parameter 10 targetFile 6
x15882:	mov ax, [bp + 6]	; 3: 139 70 6
x15885:	mov [bp + 16], ax	; 3: 137 70 16

file_test$308:	; Call 10 remove 0
x15888:	mov word [bp + 10], file_test$309	; 5: 199 70 10 30 62
x15893:	mov [bp + 12], bp	; 3: 137 110 12
x15896:	add bp, 10	; 3: 131 197 10
x15899:	jmp remove	; 3: 233 32 52

file_test$309:	; PostCall 10

file_test$310:	; GetReturnValue £temporary4883

file_test$311:	; NotEqual 318 £temporary4883 0
x15902:	cmp bx, 0	; 3: 131 251 0
x15905:	jne file_test$318	; 2: 117 32

file_test$312:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$313:	; Parameter 10 string_2225s2220has20been20removed2E0A# 6
x15907:	mov word [bp + 16], @10861$string_2225s2220has20been20removed2E0A#	; 5: 199 70 16 143 80

file_test$314:	; Parameter 10 targetFile 8
x15912:	mov ax, [bp + 6]	; 3: 139 70 6
x15915:	mov [bp + 18], ax	; 3: 137 70 18

file_test$315:	; Call 10 printf 0
x15918:	mov word [bp + 10], file_test$316	; 5: 199 70 10 65 62
x15923:	mov [bp + 12], bp	; 3: 137 110 12
x15926:	add bp, 10	; 3: 131 197 10
x15929:	mov di, bp	; 2: 137 239
x15931:	add di, 2	; 3: 131 199 2
x15934:	jmp printf	; 3: 233 195 206

file_test$316:	; PostCall 10

file_test$317:	; Goto 330
x15937:	jmp file_test$330	; 2: 235 59

file_test$318:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$319:	; Parameter 10 string_Error202225s222025i3A2025s2E0A# 6
x15939:	mov word [bp + 16], @10863$string_Error202225s222025i3A2025s2E0A#	; 5: 199 70 16 167 80

file_test$320:	; Parameter 10 targetFile 8
x15944:	mov ax, [bp + 6]	; 3: 139 70 6
x15947:	mov [bp + 18], ax	; 3: 137 70 18

file_test$321:	; Parameter 10 errno 10
x15950:	mov ax, [errno]	; 3: 161 230 10
x15953:	mov [bp + 20], ax	; 3: 137 70 20

file_test$322:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$323:	; Parameter 10 errno 18
x15956:	mov ax, [errno]	; 3: 161 230 10
x15959:	mov [bp + 28], ax	; 3: 137 70 28

file_test$324:	; Call 10 strerror 12
x15962:	mov word [bp + 22], file_test$325	; 5: 199 70 22 104 62
x15967:	mov [bp + 24], bp	; 3: 137 110 24
x15970:	add bp, 22	; 3: 131 197 22
x15973:	jmp strerror	; 3: 233 167 245

file_test$325:	; PostCall 10

file_test$326:	; GetReturnValue £temporary4886

file_test$327:	; Parameter 10 £temporary4886 12
x15976:	mov [bp + 22], bx	; 3: 137 94 22

file_test$328:	; Call 10 printf 0
x15979:	mov word [bp + 10], file_test$329	; 5: 199 70 10 126 62
x15984:	mov [bp + 12], bp	; 3: 137 110 12
x15987:	add bp, 10	; 3: 131 197 10
x15990:	mov di, bp	; 2: 137 239
x15992:	add di, 6	; 3: 131 199 6
x15995:	jmp printf	; 3: 233 134 206

file_test$329:	; PostCall 10

file_test$330:	; Assign targetFile string_Z2#
x15998:	mov word [bp + 6], @10866$string_Z2#	; 5: 199 70 6 187 80

file_test$331:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$332:	; Parameter 8 targetFile 6
x16003:	mov ax, [bp + 6]	; 3: 139 70 6
x16006:	mov [bp + 14], ax	; 3: 137 70 14

file_test$333:	; Call 8 remove 0
x16009:	mov word [bp + 8], file_test$334	; 5: 199 70 8 151 62
x16014:	mov [bp + 10], bp	; 3: 137 110 10
x16017:	add bp, 8	; 3: 131 197 8
x16020:	jmp remove	; 3: 233 167 51

file_test$334:	; PostCall 8

file_test$335:	; GetReturnValue £temporary4888

file_test$336:	; NotEqual 343 £temporary4888 0
x16023:	cmp bx, 0	; 3: 131 251 0
x16026:	jne file_test$343	; 2: 117 32

file_test$337:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$338:	; Parameter 8 string_2225s2220has20been20removed2E0A# 6
x16028:	mov word [bp + 14], @10872$string_2225s2220has20been20removed2E0A#	; 5: 199 70 14 190 80

file_test$339:	; Parameter 8 targetFile 8
x16033:	mov ax, [bp + 6]	; 3: 139 70 6
x16036:	mov [bp + 16], ax	; 3: 137 70 16

file_test$340:	; Call 8 printf 0
x16039:	mov word [bp + 8], file_test$341	; 5: 199 70 8 186 62
x16044:	mov [bp + 10], bp	; 3: 137 110 10
x16047:	add bp, 8	; 3: 131 197 8
x16050:	mov di, bp	; 2: 137 239
x16052:	add di, 2	; 3: 131 199 2
x16055:	jmp printf	; 3: 233 74 206

file_test$341:	; PostCall 8

file_test$342:	; Goto 355
x16058:	jmp file_test$355	; 2: 235 59

file_test$343:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$344:	; Parameter 8 string_Error202225s222025i3A2025s2E0A# 6
x16060:	mov word [bp + 14], @10874$string_Error202225s222025i3A2025s2E0A#	; 5: 199 70 14 214 80

file_test$345:	; Parameter 8 targetFile 8
x16065:	mov ax, [bp + 6]	; 3: 139 70 6
x16068:	mov [bp + 16], ax	; 3: 137 70 16

file_test$346:	; Parameter 8 errno 10
x16071:	mov ax, [errno]	; 3: 161 230 10
x16074:	mov [bp + 18], ax	; 3: 137 70 18

file_test$347:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$348:	; Parameter 8 errno 18
x16077:	mov ax, [errno]	; 3: 161 230 10
x16080:	mov [bp + 26], ax	; 3: 137 70 26

file_test$349:	; Call 8 strerror 12
x16083:	mov word [bp + 20], file_test$350	; 5: 199 70 20 225 62
x16088:	mov [bp + 22], bp	; 3: 137 110 22
x16091:	add bp, 20	; 3: 131 197 20
x16094:	jmp strerror	; 3: 233 46 245

file_test$350:	; PostCall 8

file_test$351:	; GetReturnValue £temporary4891

file_test$352:	; Parameter 8 £temporary4891 12
x16097:	mov [bp + 20], bx	; 3: 137 94 20

file_test$353:	; Call 8 printf 0
x16100:	mov word [bp + 8], file_test$354	; 5: 199 70 8 247 62
x16105:	mov [bp + 10], bp	; 3: 137 110 10
x16108:	add bp, 8	; 3: 131 197 8
x16111:	mov di, bp	; 2: 137 239
x16113:	add di, 6	; 3: 131 199 6
x16116:	jmp printf	; 3: 233 13 206

file_test$354:	; PostCall 8

file_test$355:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$356:	; Parameter 6 string_PBook2Etxt# 6
x16119:	mov word [bp + 12], @10877$string_PBook2Etxt#	; 5: 199 70 12 234 80

file_test$357:	; Parameter 6 string_r# 8
x16124:	mov word [bp + 14], @10878$string_r#	; 5: 199 70 14 244 80

file_test$358:	; Call 6 fopen 0
x16129:	mov word [bp + 6], file_test$359	; 5: 199 70 6 15 63
x16134:	mov [bp + 8], bp	; 3: 137 110 8
x16137:	add bp, 6	; 3: 131 197 6
x16140:	jmp fopen	; 3: 233 195 26

file_test$359:	; PostCall 6

file_test$360:	; GetReturnValue £temporary4893

file_test$361:	; Assign inFilePtr £temporary4893
x16143:	mov [bp + 6], bx	; 3: 137 94 6

file_test$362:	; NotEqual 374 inFilePtr 0
x16146:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x16150:	jne file_test$374	; 2: 117 59

file_test$363:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$364:	; Parameter 8 stderr 6
x16152:	mov ax, [stderr]	; 3: 161 121 77
x16155:	mov [bp + 14], ax	; 3: 137 70 14

file_test$365:	; Parameter 8 string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A# 8
x16158:	mov word [bp + 16], @10886$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#	; 5: 199 70 16 246 80

file_test$366:	; Parameter 8 string_inFilePtr20213D20NULL# 10
x16163:	mov word [bp + 18], @10887$string_inFilePtr20213D20NULL#	; 5: 199 70 18 36 81

file_test$367:	; Parameter 8 string_C3A5CUsers5CStefa5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec# 12
x16168:	mov word [bp + 20], @10888$string_C3A5CUsers5CStefa5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#	; 5: 199 70 20 54 81

file_test$368:	; Parameter 8 119 14
x16173:	mov word [bp + 22], 119	; 5: 199 70 22 119 0

file_test$369:	; Call 8 fprintf 0
x16178:	mov word [bp + 8], file_test$370	; 5: 199 70 8 69 63
x16183:	mov [bp + 10], bp	; 3: 137 110 10
x16186:	add bp, 8	; 3: 131 197 8
x16189:	mov di, bp	; 2: 137 239
x16191:	add di, 6	; 3: 131 199 6
x16194:	jmp fprintf	; 3: 233 38 31

file_test$370:	; PostCall 8

file_test$371:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$372:	; Call 8 abort 0
x16197:	mov word [bp + 8], file_test$373	; 5: 199 70 8 83 63
x16202:	mov [bp + 10], bp	; 3: 137 110 10
x16205:	add bp, 8	; 3: 131 197 8
x16208:	jmp abort	; 3: 233 83 31

file_test$373:	; PostCall 8

file_test$374:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$375:	; Parameter 8 string_0A252D24s20252D24s0A# 6
x16211:	mov word [bp + 14], @10893$string_0A252D24s20252D24s0A#	; 5: 199 70 14 118 81

file_test$376:	; Parameter 8 string_Name# 8
x16216:	mov word [bp + 16], @10894$string_Name#	; 5: 199 70 16 132 81

file_test$377:	; Parameter 8 string_Phone# 10
x16221:	mov word [bp + 18], @10895$string_Phone#	; 5: 199 70 18 137 81

file_test$378:	; Call 8 printf 0
x16226:	mov word [bp + 8], file_test$379	; 5: 199 70 8 117 63
x16231:	mov [bp + 10], bp	; 3: 137 110 10
x16234:	add bp, 8	; 3: 131 197 8
x16237:	mov di, bp	; 2: 137 239
x16239:	add di, 4	; 3: 131 199 4
x16242:	jmp printf	; 3: 233 143 205

file_test$379:	; PostCall 8

file_test$380:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$381:	; Parameter 8 string_252D24s20252D24s0A# 6
x16245:	mov word [bp + 14], @10897$string_252D24s20252D24s0A#	; 5: 199 70 14 143 81

file_test$382:	; Parameter 8 string_3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D# 8
x16250:	mov word [bp + 16], @10898$string_3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D#	; 5: 199 70 16 156 81

file_test$383:	; Parameter 8 string_3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D# 10
x16255:	mov word [bp + 18], @10899$string_3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D#	; 5: 199 70 18 181 81

file_test$384:	; Call 8 printf 0
x16260:	mov word [bp + 8], file_test$385	; 5: 199 70 8 151 63
x16265:	mov [bp + 10], bp	; 3: 137 110 10
x16268:	add bp, 8	; 3: 131 197 8
x16271:	mov di, bp	; 2: 137 239
x16273:	add di, 4	; 3: 131 199 4
x16276:	jmp printf	; 3: 233 109 205

file_test$385:	; PostCall 8

file_test$386:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$387:	; Parameter 12 inFilePtr 6
x16279:	mov ax, [bp + 6]	; 3: 139 70 6
x16282:	mov [bp + 18], ax	; 3: 137 70 18

file_test$388:	; Parameter 12 string_25i# 8
x16285:	mov word [bp + 20], @10903$string_25i#	; 5: 199 70 20 206 81

file_test$389:	; address £temporary4900 size
x16290:	mov si, bp	; 2: 137 238
x16292:	add si, 10	; 3: 131 198 10

file_test$390:	; Parameter 12 £temporary4900 10
x16295:	mov [bp + 22], si	; 3: 137 118 22

file_test$391:	; Call 12 fscanf 0
x16298:	mov word [bp + 12], file_test$392	; 5: 199 70 12 189 63
x16303:	mov [bp + 14], bp	; 3: 137 110 14
x16306:	add bp, 12	; 3: 131 197 12
x16309:	mov di, bp	; 2: 137 239
x16311:	add di, 2	; 3: 131 199 2
x16314:	jmp fscanf	; 3: 233 143 31

file_test$392:	; PostCall 12

file_test$393:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$394:	; Parameter 12 string_size2025i0A# 6
x16317:	mov word [bp + 18], @10906$string_size2025i0A#	; 5: 199 70 18 209 81

file_test$395:	; Parameter 12 size 8
x16322:	mov ax, [bp + 10]	; 3: 139 70 10
x16325:	mov [bp + 20], ax	; 3: 137 70 20

file_test$396:	; Call 12 printf 0
x16328:	mov word [bp + 12], file_test$397	; 5: 199 70 12 219 63
x16333:	mov [bp + 14], bp	; 3: 137 110 14
x16336:	add bp, 12	; 3: 131 197 12
x16339:	mov di, bp	; 2: 137 239
x16341:	add di, 2	; 3: 131 199 2
x16344:	jmp printf	; 3: 233 41 205

file_test$397:	; PostCall 12

file_test$398:	; Assign count 0
x16347:	mov word [bp + 8], 0	; 5: 199 70 8 0 0

file_test$399:	; SignedGreaterThanEqual 415 count size
x16352:	mov ax, [bp + 10]	; 3: 139 70 10
x16355:	cmp [bp + 8], ax	; 3: 57 70 8
x16358:	jge file_test$415	; 2: 125 87

file_test$400:	; CallHeader 52 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$401:	; Parameter 52 inFilePtr 6
x16360:	mov ax, [bp + 6]	; 3: 139 70 6
x16363:	mov [bp + 58], ax	; 3: 137 70 58

file_test$402:	; Parameter 52 string_25s25s# 8
x16366:	mov word [bp + 60], @10920$string_25s25s#	; 5: 199 70 60 218 81

file_test$403:	; Parameter 52 name 10
x16371:	mov [bp + 62], bp	; 3: 137 110 62
x16374:	add word [bp + 62], 12	; 4: 131 70 62 12

file_test$404:	; Parameter 52 phone 12
x16378:	mov [bp + 64], bp	; 3: 137 110 64
x16381:	add word [bp + 64], 32	; 4: 131 70 64 32

file_test$405:	; Call 52 fscanf 0
x16385:	mov word [bp + 52], file_test$406	; 5: 199 70 52 20 64
x16390:	mov [bp + 54], bp	; 3: 137 110 54
x16393:	add bp, 52	; 3: 131 197 52
x16396:	mov di, bp	; 2: 137 239
x16398:	add di, 4	; 3: 131 199 4
x16401:	jmp fscanf	; 3: 233 56 31

file_test$406:	; PostCall 52

file_test$407:	; CallHeader 52 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$408:	; Parameter 52 string_252D24s20252D24s0A# 6
x16404:	mov word [bp + 58], @10922$string_252D24s20252D24s0A#	; 5: 199 70 58 223 81

file_test$409:	; Parameter 52 name 8
x16409:	mov [bp + 60], bp	; 3: 137 110 60
x16412:	add word [bp + 60], 12	; 4: 131 70 60 12

file_test$410:	; Parameter 52 phone 10
x16416:	mov [bp + 62], bp	; 3: 137 110 62
x16419:	add word [bp + 62], 32	; 4: 131 70 62 32

file_test$411:	; Call 52 printf 0
x16423:	mov word [bp + 52], file_test$412	; 5: 199 70 52 58 64
x16428:	mov [bp + 54], bp	; 3: 137 110 54
x16431:	add bp, 52	; 3: 131 197 52
x16434:	mov di, bp	; 2: 137 239
x16436:	add di, 4	; 3: 131 199 4
x16439:	jmp printf	; 3: 233 202 204

file_test$412:	; PostCall 52

file_test$413:	; Increment count
x16442:	inc word [bp + 8]	; 3: 255 70 8

file_test$414:	; Goto 399
x16445:	jmp file_test$399	; 2: 235 161

file_test$415:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$416:	; Parameter 8 string_0A# 6
x16447:	mov word [bp + 14], @10924$string_0A#	; 5: 199 70 14 236 81

file_test$417:	; Call 8 printf 0
x16452:	mov word [bp + 8], file_test$418	; 5: 199 70 8 84 64
x16457:	mov [bp + 10], bp	; 3: 137 110 10
x16460:	add bp, 8	; 3: 131 197 8
x16463:	mov di, bp	; 2: 137 239
x16465:	jmp printf	; 3: 233 176 204

file_test$418:	; PostCall 8

file_test$419:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$420:	; Parameter 8 inFilePtr 6
x16468:	mov ax, [bp + 6]	; 3: 139 70 6
x16471:	mov [bp + 14], ax	; 3: 137 70 14

file_test$421:	; Call 8 fclose 0
x16474:	mov word [bp + 8], file_test$422	; 5: 199 70 8 104 64
x16479:	mov [bp + 10], bp	; 3: 137 110 10
x16482:	add bp, 8	; 3: 131 197 8
x16485:	jmp fclose	; 3: 233 19 49

file_test$422:	; PostCall 8

file_test$423:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$424:	; Parameter 6 string_TestX2Ebin# 6
x16488:	mov word [bp + 12], @10927$string_TestX2Ebin#	; 5: 199 70 12 238 81

file_test$425:	; Parameter 6 string_w# 8
x16493:	mov word [bp + 14], @10928$string_w#	; 5: 199 70 14 248 81

file_test$426:	; Call 6 fopen 0
x16498:	mov word [bp + 6], file_test$427	; 5: 199 70 6 128 64
x16503:	mov [bp + 8], bp	; 3: 137 110 8
x16506:	add bp, 6	; 3: 131 197 6
x16509:	jmp fopen	; 3: 233 82 25

file_test$427:	; PostCall 6

file_test$428:	; GetReturnValue £temporary4909

file_test$429:	; Assign outFilePtr £temporary4909
x16512:	mov [bp + 6], bx	; 3: 137 94 6

file_test$430:	; NotEqual 442 outFilePtr 0
x16515:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x16519:	jne file_test$442	; 2: 117 59

file_test$431:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$432:	; Parameter 8 stderr 6
x16521:	mov ax, [stderr]	; 3: 161 121 77
x16524:	mov [bp + 14], ax	; 3: 137 70 14

file_test$433:	; Parameter 8 string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A# 8
x16527:	mov word [bp + 16], @10936$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#	; 5: 199 70 16 250 81

file_test$434:	; Parameter 8 string_outFilePtr20213D20NULL# 10
x16532:	mov word [bp + 18], @10937$string_outFilePtr20213D20NULL#	; 5: 199 70 18 40 82

file_test$435:	; Parameter 8 string_C3A5CUsers5CStefa5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec# 12
x16537:	mov word [bp + 20], @10938$string_C3A5CUsers5CStefa5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#	; 5: 199 70 20 59 82

file_test$436:	; Parameter 8 171 14
x16542:	mov word [bp + 22], 171	; 5: 199 70 22 171 0

file_test$437:	; Call 8 fprintf 0
x16547:	mov word [bp + 8], file_test$438	; 5: 199 70 8 182 64
x16552:	mov [bp + 10], bp	; 3: 137 110 10
x16555:	add bp, 8	; 3: 131 197 8
x16558:	mov di, bp	; 2: 137 239
x16560:	add di, 6	; 3: 131 199 6
x16563:	jmp fprintf	; 3: 233 181 29

file_test$438:	; PostCall 8

file_test$439:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$440:	; Call 8 abort 0
x16566:	mov word [bp + 8], file_test$441	; 5: 199 70 8 196 64
x16571:	mov [bp + 10], bp	; 3: 137 110 10
x16574:	add bp, 8	; 3: 131 197 8
x16577:	jmp abort	; 3: 233 226 29

file_test$441:	; PostCall 8

file_test$442:	; Assign size 10
x16580:	mov word [bp + 8], 10	; 5: 199 70 8 10 0

file_test$443:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$444:	; address £temporary4914 size
x16585:	mov si, bp	; 2: 137 238
x16587:	add si, 8	; 3: 131 198 8

file_test$445:	; Parameter 12 £temporary4914 6
x16590:	mov [bp + 18], si	; 3: 137 118 18

file_test$446:	; Parameter 12 2 8
x16593:	mov word [bp + 20], 2	; 5: 199 70 20 2 0

file_test$447:	; Parameter 12 1 10
x16598:	mov word [bp + 22], 1	; 5: 199 70 22 1 0

file_test$448:	; Parameter 12 outFilePtr 12
x16603:	mov ax, [bp + 6]	; 3: 139 70 6
x16606:	mov [bp + 24], ax	; 3: 137 70 24

file_test$449:	; Call 12 fwrite 0
x16609:	mov word [bp + 12], file_test$450	; 5: 199 70 12 239 64
x16614:	mov [bp + 14], bp	; 3: 137 110 14
x16617:	add bp, 12	; 3: 131 197 12
x16620:	jmp fwrite	; 3: 233 172 49

file_test$450:	; PostCall 12

file_test$451:	; Assign index 0
x16623:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

file_test$452:	; SignedGreaterThanEqual 466 index size
x16628:	mov ax, [bp + 8]	; 3: 139 70 8
x16631:	cmp [bp + 10], ax	; 3: 57 70 10
x16634:	jge file_test$466	; 2: 125 61

file_test$453:	; SignedMultiply £temporary4918 index index
x16636:	mov ax, [bp + 10]	; 3: 139 70 10
x16639:	xor dx, dx	; 2: 49 210
x16641:	imul word [bp + 10]	; 3: 247 110 10

file_test$454:	; IntegralToFloating £temporary4919 £temporary4918
x16644:	mov [container2bytes#], ax	; 3: 163 77 27
x16647:	fild word [container2bytes#]	; 4: 223 6 77 27

file_test$455:	; PopFloat value
x16651:	fstp qword [bp + 12]	; 3: 221 94 12

file_test$456:	; CallHeader 20 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$457:	; address £temporary4920 value
x16654:	mov si, bp	; 2: 137 238
x16656:	add si, 12	; 3: 131 198 12

file_test$458:	; Parameter 20 £temporary4920 6
x16659:	mov [bp + 26], si	; 3: 137 118 26

file_test$459:	; Parameter 20 8 8
x16662:	mov word [bp + 28], 8	; 5: 199 70 28 8 0

file_test$460:	; Parameter 20 1 10
x16667:	mov word [bp + 30], 1	; 5: 199 70 30 1 0

file_test$461:	; Parameter 20 outFilePtr 12
x16672:	mov ax, [bp + 6]	; 3: 139 70 6
x16675:	mov [bp + 32], ax	; 3: 137 70 32

file_test$462:	; Call 20 fwrite 0
x16678:	mov word [bp + 20], file_test$463	; 5: 199 70 20 52 65
x16683:	mov [bp + 22], bp	; 3: 137 110 22
x16686:	add bp, 20	; 3: 131 197 20
x16689:	jmp fwrite	; 3: 233 103 49

file_test$463:	; PostCall 20

file_test$464:	; Increment index
x16692:	inc word [bp + 10]	; 3: 255 70 10

file_test$465:	; Goto 452
x16695:	jmp file_test$452	; 2: 235 187

file_test$466:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$467:	; Parameter 12 outFilePtr 6
x16697:	mov ax, [bp + 6]	; 3: 139 70 6
x16700:	mov [bp + 18], ax	; 3: 137 70 18

file_test$468:	; Call 12 fclose 0
x16703:	mov word [bp + 12], file_test$469	; 5: 199 70 12 77 65
x16708:	mov [bp + 14], bp	; 3: 137 110 14
x16711:	add bp, 12	; 3: 131 197 12
x16714:	jmp fclose	; 3: 233 46 48

file_test$469:	; PostCall 12

file_test$470:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$471:	; Parameter 6 string_TestX2Ebin# 6
x16717:	mov word [bp + 12], @10973$string_TestX2Ebin#	; 5: 199 70 12 123 82

file_test$472:	; Parameter 6 string_r# 8
x16722:	mov word [bp + 14], @10974$string_r#	; 5: 199 70 14 133 82

file_test$473:	; Call 6 fopen 0
x16727:	mov word [bp + 6], file_test$474	; 5: 199 70 6 101 65
x16732:	mov [bp + 8], bp	; 3: 137 110 8
x16735:	add bp, 6	; 3: 131 197 6
x16738:	jmp fopen	; 3: 233 109 24

file_test$474:	; PostCall 6

file_test$475:	; GetReturnValue £temporary4923

file_test$476:	; Assign inFilePtr £temporary4923
x16741:	mov [bp + 6], bx	; 3: 137 94 6

file_test$477:	; NotEqual 489 inFilePtr 0
x16744:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x16748:	jne file_test$489	; 2: 117 59

file_test$478:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$479:	; Parameter 12 stderr 6
x16750:	mov ax, [stderr]	; 3: 161 121 77
x16753:	mov [bp + 18], ax	; 3: 137 70 18

file_test$480:	; Parameter 12 string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A# 8
x16756:	mov word [bp + 20], @10984$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#	; 5: 199 70 20 135 82

file_test$481:	; Parameter 12 string_inFilePtr20213D20NULL# 10
x16761:	mov word [bp + 22], @10985$string_inFilePtr20213D20NULL#	; 5: 199 70 22 181 82

file_test$482:	; Parameter 12 string_C3A5CUsers5CStefa5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec# 12
x16766:	mov word [bp + 24], @10986$string_C3A5CUsers5CStefa5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#	; 5: 199 70 24 199 82

file_test$483:	; Parameter 12 188 14
x16771:	mov word [bp + 26], 188	; 5: 199 70 26 188 0

file_test$484:	; Call 12 fprintf 0
x16776:	mov word [bp + 12], file_test$485	; 5: 199 70 12 155 65
x16781:	mov [bp + 14], bp	; 3: 137 110 14
x16784:	add bp, 12	; 3: 131 197 12
x16787:	mov di, bp	; 2: 137 239
x16789:	add di, 6	; 3: 131 199 6
x16792:	jmp fprintf	; 3: 233 208 28

file_test$485:	; PostCall 12

file_test$486:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$487:	; Call 12 abort 0
x16795:	mov word [bp + 12], file_test$488	; 5: 199 70 12 169 65
x16800:	mov [bp + 14], bp	; 3: 137 110 14
x16803:	add bp, 12	; 3: 131 197 12
x16806:	jmp abort	; 3: 233 253 28

file_test$488:	; PostCall 12

file_test$489:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$490:	; address £temporary4928 size
x16809:	mov si, bp	; 2: 137 238
x16811:	add si, 8	; 3: 131 198 8

file_test$491:	; Parameter 12 £temporary4928 6
x16814:	mov [bp + 18], si	; 3: 137 118 18

file_test$492:	; Parameter 12 2 8
x16817:	mov word [bp + 20], 2	; 5: 199 70 20 2 0

file_test$493:	; Parameter 12 1 10
x16822:	mov word [bp + 22], 1	; 5: 199 70 22 1 0

file_test$494:	; Parameter 12 inFilePtr 12
x16827:	mov ax, [bp + 6]	; 3: 139 70 6
x16830:	mov [bp + 24], ax	; 3: 137 70 24

file_test$495:	; Call 12 fread 0
x16833:	mov word [bp + 12], file_test$496	; 5: 199 70 12 207 65
x16838:	mov [bp + 14], bp	; 3: 137 110 14
x16841:	add bp, 12	; 3: 131 197 12
x16844:	jmp fread	; 3: 233 15 49

file_test$496:	; PostCall 12

file_test$497:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$498:	; Parameter 12 string_size13A2025i0A# 6
x16847:	mov word [bp + 18], @10999$string_size13A2025i0A#	; 5: 199 70 18 7 83

file_test$499:	; Parameter 12 size 8
x16852:	mov ax, [bp + 8]	; 3: 139 70 8
x16855:	mov [bp + 20], ax	; 3: 137 70 20

file_test$500:	; Call 12 printf 0
x16858:	mov word [bp + 12], file_test$501	; 5: 199 70 12 237 65
x16863:	mov [bp + 14], bp	; 3: 137 110 14
x16866:	add bp, 12	; 3: 131 197 12
x16869:	mov di, bp	; 2: 137 239
x16871:	add di, 2	; 3: 131 199 2
x16874:	jmp printf	; 3: 233 23 203

file_test$501:	; PostCall 12

file_test$502:	; Assign index 0
x16877:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

file_test$503:	; SignedGreaterThanEqual 521 index size
x16882:	mov ax, [bp + 8]	; 3: 139 70 8
x16885:	cmp [bp + 10], ax	; 3: 57 70 10
x16888:	jge file_test$521	; 2: 125 79

file_test$504:	; CallHeader 20 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$505:	; address £temporary4933 value
x16890:	mov si, bp	; 2: 137 238
x16892:	add si, 12	; 3: 131 198 12

file_test$506:	; Parameter 20 £temporary4933 6
x16895:	mov [bp + 26], si	; 3: 137 118 26

file_test$507:	; Parameter 20 8 8
x16898:	mov word [bp + 28], 8	; 5: 199 70 28 8 0

file_test$508:	; Parameter 20 1 10
x16903:	mov word [bp + 30], 1	; 5: 199 70 30 1 0

file_test$509:	; Parameter 20 inFilePtr 12
x16908:	mov ax, [bp + 6]	; 3: 139 70 6
x16911:	mov [bp + 32], ax	; 3: 137 70 32

file_test$510:	; Call 20 fread 0
x16914:	mov word [bp + 20], file_test$511	; 5: 199 70 20 32 66
x16919:	mov [bp + 22], bp	; 3: 137 110 22
x16922:	add bp, 20	; 3: 131 197 20
x16925:	jmp fread	; 3: 233 190 48

file_test$511:	; PostCall 20

file_test$512:	; CallHeader 20 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$513:	; Parameter 20 string_index13A2025i3A20value2025f0A# 6
x16928:	mov word [bp + 26], @11016$string_index13A2025i3A20value2025f0A#	; 5: 199 70 26 18 83

file_test$514:	; Parameter 20 index 8
x16933:	mov ax, [bp + 10]	; 3: 139 70 10
x16936:	mov [bp + 28], ax	; 3: 137 70 28

file_test$515:	; PushFloat value
x16939:	fld qword [bp + 12]	; 3: 221 70 12

file_test$516:	; Parameter 20 value 10
x16942:	fstp qword [bp + 30]	; 3: 221 94 30

file_test$517:	; Call 20 printf 0
x16945:	mov word [bp + 20], file_test$518	; 5: 199 70 20 68 66
x16950:	mov [bp + 22], bp	; 3: 137 110 22
x16953:	add bp, 20	; 3: 131 197 20
x16956:	mov di, bp	; 2: 137 239
x16958:	add di, 10	; 3: 131 199 10
x16961:	jmp printf	; 3: 233 192 202

file_test$518:	; PostCall 20

file_test$519:	; Increment index
x16964:	inc word [bp + 10]	; 3: 255 70 10

file_test$520:	; Goto 503
x16967:	jmp file_test$503	; 2: 235 169

file_test$521:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$522:	; Parameter 12 string_0A# 6
x16969:	mov word [bp + 18], @11018$string_0A#	; 5: 199 70 18 40 83

file_test$523:	; Call 12 printf 0
x16974:	mov word [bp + 12], file_test$524	; 5: 199 70 12 94 66
x16979:	mov [bp + 14], bp	; 3: 137 110 14
x16982:	add bp, 12	; 3: 131 197 12
x16985:	mov di, bp	; 2: 137 239
x16987:	jmp printf	; 3: 233 166 202

file_test$524:	; PostCall 12

file_test$525:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$526:	; Parameter 12 inFilePtr 6
x16990:	mov ax, [bp + 6]	; 3: 139 70 6
x16993:	mov [bp + 18], ax	; 3: 137 70 18

file_test$527:	; Call 12 fclose 0
x16996:	mov word [bp + 12], file_test$528	; 5: 199 70 12 114 66
x17001:	mov [bp + 14], bp	; 3: 137 110 14
x17004:	add bp, 12	; 3: 131 197 12
x17007:	jmp fclose	; 3: 233 9 47

file_test$528:	; PostCall 12

file_test$529:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$530:	; Parameter 6 string_TestY2Ebin# 6
x17010:	mov word [bp + 12], @11021$string_TestY2Ebin#	; 5: 199 70 12 42 83

file_test$531:	; Parameter 6 string_w# 8
x17015:	mov word [bp + 14], @11022$string_w#	; 5: 199 70 14 52 83

file_test$532:	; Call 6 fopen 0
x17020:	mov word [bp + 6], file_test$533	; 5: 199 70 6 138 66
x17025:	mov [bp + 8], bp	; 3: 137 110 8
x17028:	add bp, 6	; 3: 131 197 6
x17031:	jmp fopen	; 3: 233 72 23

file_test$533:	; PostCall 6

file_test$534:	; GetReturnValue £temporary4938

file_test$535:	; Assign outFilePtr £temporary4938
x17034:	mov [bp + 6], bx	; 3: 137 94 6

file_test$536:	; NotEqual 548 outFilePtr 0
x17037:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x17041:	jne file_test$548	; 2: 117 59

file_test$537:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$538:	; Parameter 8 stderr 6
x17043:	mov ax, [stderr]	; 3: 161 121 77
x17046:	mov [bp + 14], ax	; 3: 137 70 14

file_test$539:	; Parameter 8 string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A# 8
x17049:	mov word [bp + 16], @11030$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#	; 5: 199 70 16 54 83

file_test$540:	; Parameter 8 string_outFilePtr20213D20NULL# 10
x17054:	mov word [bp + 18], @11031$string_outFilePtr20213D20NULL#	; 5: 199 70 18 100 83

file_test$541:	; Parameter 8 string_C3A5CUsers5CStefa5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec# 12
x17059:	mov word [bp + 20], @11032$string_C3A5CUsers5CStefa5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#	; 5: 199 70 20 119 83

file_test$542:	; Parameter 8 203 14
x17064:	mov word [bp + 22], 203	; 5: 199 70 22 203 0

file_test$543:	; Call 8 fprintf 0
x17069:	mov word [bp + 8], file_test$544	; 5: 199 70 8 192 66
x17074:	mov [bp + 10], bp	; 3: 137 110 10
x17077:	add bp, 8	; 3: 131 197 8
x17080:	mov di, bp	; 2: 137 239
x17082:	add di, 6	; 3: 131 199 6
x17085:	jmp fprintf	; 3: 233 171 27

file_test$544:	; PostCall 8

file_test$545:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$546:	; Call 8 abort 0
x17088:	mov word [bp + 8], file_test$547	; 5: 199 70 8 206 66
x17093:	mov [bp + 10], bp	; 3: 137 110 10
x17096:	add bp, 8	; 3: 131 197 8
x17099:	jmp abort	; 3: 233 216 27

file_test$547:	; PostCall 8

file_test$548:	; Assign size 10
x17102:	mov word [bp + 8], 10	; 5: 199 70 8 10 0

file_test$549:	; Assign index 0
x17107:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

file_test$550:	; SignedGreaterThanEqual 564 index size
x17112:	mov ax, [bp + 8]	; 3: 139 70 8
x17115:	cmp [bp + 10], ax	; 3: 57 70 10
x17118:	jge file_test$564	; 2: 125 61

file_test$551:	; SignedMultiply £temporary4945 index index
x17120:	mov ax, [bp + 10]	; 3: 139 70 10
x17123:	xor dx, dx	; 2: 49 210
x17125:	imul word [bp + 10]	; 3: 247 110 10

file_test$552:	; IntegralToFloating £temporary4946 £temporary4945
x17128:	mov [container2bytes#], ax	; 3: 163 77 27
x17131:	fild word [container2bytes#]	; 4: 223 6 77 27

file_test$553:	; PopFloat value
x17135:	fstp qword [bp + 12]	; 3: 221 94 12

file_test$554:	; CallHeader 20 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$555:	; address £temporary4947 value
x17138:	mov si, bp	; 2: 137 238
x17140:	add si, 12	; 3: 131 198 12

file_test$556:	; Parameter 20 £temporary4947 6
x17143:	mov [bp + 26], si	; 3: 137 118 26

file_test$557:	; Parameter 20 8 8
x17146:	mov word [bp + 28], 8	; 5: 199 70 28 8 0

file_test$558:	; Parameter 20 1 10
x17151:	mov word [bp + 30], 1	; 5: 199 70 30 1 0

file_test$559:	; Parameter 20 outFilePtr 12
x17156:	mov ax, [bp + 6]	; 3: 139 70 6
x17159:	mov [bp + 32], ax	; 3: 137 70 32

file_test$560:	; Call 20 fwrite 0
x17162:	mov word [bp + 20], file_test$561	; 5: 199 70 20 24 67
x17167:	mov [bp + 22], bp	; 3: 137 110 22
x17170:	add bp, 20	; 3: 131 197 20
x17173:	jmp fwrite	; 3: 233 131 47

file_test$561:	; PostCall 20

file_test$562:	; Increment index
x17176:	inc word [bp + 10]	; 3: 255 70 10

file_test$563:	; Goto 550
x17179:	jmp file_test$550	; 2: 235 187

file_test$564:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$565:	; Parameter 12 outFilePtr 6
x17181:	mov ax, [bp + 6]	; 3: 139 70 6
x17184:	mov [bp + 18], ax	; 3: 137 70 18

file_test$566:	; Call 12 fclose 0
x17187:	mov word [bp + 12], file_test$567	; 5: 199 70 12 49 67
x17192:	mov [bp + 14], bp	; 3: 137 110 14
x17195:	add bp, 12	; 3: 131 197 12
x17198:	jmp fclose	; 3: 233 74 46

file_test$567:	; PostCall 12

file_test$568:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$569:	; Parameter 6 string_TestY2Ebin# 6
x17201:	mov word [bp + 12], @11059$string_TestY2Ebin#	; 5: 199 70 12 183 83

file_test$570:	; Parameter 6 string_r# 8
x17206:	mov word [bp + 14], @11060$string_r#	; 5: 199 70 14 193 83

file_test$571:	; Call 6 fopen 0
x17211:	mov word [bp + 6], file_test$572	; 5: 199 70 6 73 67
x17216:	mov [bp + 8], bp	; 3: 137 110 8
x17219:	add bp, 6	; 3: 131 197 6
x17222:	jmp fopen	; 3: 233 137 22

file_test$572:	; PostCall 6

file_test$573:	; GetReturnValue £temporary4950

file_test$574:	; Assign inFilePtr £temporary4950
x17225:	mov [bp + 6], bx	; 3: 137 94 6

file_test$575:	; NotEqual 587 inFilePtr 0
x17228:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x17232:	jne file_test$587	; 2: 117 59

file_test$576:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$577:	; Parameter 8 stderr 6
x17234:	mov ax, [stderr]	; 3: 161 121 77
x17237:	mov [bp + 14], ax	; 3: 137 70 14

file_test$578:	; Parameter 8 string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A# 8
x17240:	mov word [bp + 16], @11068$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#	; 5: 199 70 16 195 83

file_test$579:	; Parameter 8 string_inFilePtr20213D20NULL# 10
x17245:	mov word [bp + 18], @11069$string_inFilePtr20213D20NULL#	; 5: 199 70 18 241 83

file_test$580:	; Parameter 8 string_C3A5CUsers5CStefa5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec# 12
x17250:	mov word [bp + 20], @11070$string_C3A5CUsers5CStefa5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#	; 5: 199 70 20 3 84

file_test$581:	; Parameter 8 217 14
x17255:	mov word [bp + 22], 217	; 5: 199 70 22 217 0

file_test$582:	; Call 8 fprintf 0
x17260:	mov word [bp + 8], file_test$583	; 5: 199 70 8 127 67
x17265:	mov [bp + 10], bp	; 3: 137 110 10
x17268:	add bp, 8	; 3: 131 197 8
x17271:	mov di, bp	; 2: 137 239
x17273:	add di, 6	; 3: 131 199 6
x17276:	jmp fprintf	; 3: 233 236 26

file_test$583:	; PostCall 8

file_test$584:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$585:	; Call 8 abort 0
x17279:	mov word [bp + 8], file_test$586	; 5: 199 70 8 141 67
x17284:	mov [bp + 10], bp	; 3: 137 110 10
x17287:	add bp, 8	; 3: 131 197 8
x17290:	jmp abort	; 3: 233 25 27

file_test$586:	; PostCall 8

file_test$587:	; Assign index 0
x17293:	mov word [bp + 8], 0	; 5: 199 70 8 0 0

file_test$588:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$589:	; address £temporary4955 value
x17298:	mov si, bp	; 2: 137 238
x17300:	add si, 10	; 3: 131 198 10

file_test$590:	; Parameter 18 £temporary4955 6
x17303:	mov [bp + 24], si	; 3: 137 118 24

file_test$591:	; Parameter 18 8 8
x17306:	mov word [bp + 26], 8	; 5: 199 70 26 8 0

file_test$592:	; Parameter 18 1 10
x17311:	mov word [bp + 28], 1	; 5: 199 70 28 1 0

file_test$593:	; Parameter 18 inFilePtr 12
x17316:	mov ax, [bp + 6]	; 3: 139 70 6
x17319:	mov [bp + 30], ax	; 3: 137 70 30

file_test$594:	; Call 18 fread 0
x17322:	mov word [bp + 18], file_test$595	; 5: 199 70 18 184 67
x17327:	mov [bp + 20], bp	; 3: 137 110 20
x17330:	add bp, 18	; 3: 131 197 18
x17333:	jmp fread	; 3: 233 38 47

file_test$595:	; PostCall 18

file_test$596:	; GetReturnValue £temporary4956

file_test$597:	; SignedLessThanEqual 608 £temporary4956 0
x17336:	cmp bx, 0	; 3: 131 251 0
x17339:	jle file_test$608	; 2: 126 41

file_test$598:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$599:	; Parameter 18 string_index23A2025i3A20value2025f0A# 6
x17341:	mov word [bp + 24], @11090$string_index23A2025i3A20value2025f0A#	; 5: 199 70 24 67 84

file_test$600:	; Assign £temporary4958 index
x17346:	mov ax, [bp + 8]	; 3: 139 70 8

file_test$601:	; Increment index
x17349:	inc word [bp + 8]	; 3: 255 70 8

file_test$602:	; Parameter 18 £temporary4958 8
x17352:	mov [bp + 26], ax	; 3: 137 70 26

file_test$603:	; PushFloat value
x17355:	fld qword [bp + 10]	; 3: 221 70 10

file_test$604:	; Parameter 18 value 10
x17358:	fstp qword [bp + 28]	; 3: 221 94 28

file_test$605:	; Call 18 printf 0
x17361:	mov word [bp + 18], file_test$606	; 5: 199 70 18 228 67
x17366:	mov [bp + 20], bp	; 3: 137 110 20
x17369:	add bp, 18	; 3: 131 197 18
x17372:	mov di, bp	; 2: 137 239
x17374:	add di, 10	; 3: 131 199 10
x17377:	jmp printf	; 3: 233 32 201

file_test$606:	; PostCall 18

file_test$607:	; Goto 588
x17380:	jmp file_test$588	; 2: 235 172

file_test$608:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$609:	; Parameter 8 string_0A# 6
x17382:	mov word [bp + 14], @11096$string_0A#	; 5: 199 70 14 89 84

file_test$610:	; Call 8 printf 0
x17387:	mov word [bp + 8], file_test$611	; 5: 199 70 8 251 67
x17392:	mov [bp + 10], bp	; 3: 137 110 10
x17395:	add bp, 8	; 3: 131 197 8
x17398:	mov di, bp	; 2: 137 239
x17400:	jmp printf	; 3: 233 9 201

file_test$611:	; PostCall 8

file_test$612:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$613:	; Parameter 8 inFilePtr 6
x17403:	mov ax, [bp + 6]	; 3: 139 70 6
x17406:	mov [bp + 14], ax	; 3: 137 70 14

file_test$614:	; Call 8 fclose 0
x17409:	mov word [bp + 8], file_test$615	; 5: 199 70 8 15 68
x17414:	mov [bp + 10], bp	; 3: 137 110 10
x17417:	add bp, 8	; 3: 131 197 8
x17420:	jmp fclose	; 3: 233 108 45

file_test$615:	; PostCall 8

file_test$616:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$617:	; Parameter 6 string_TestY2Ebin# 6
x17423:	mov word [bp + 12], @11099$string_TestY2Ebin#	; 5: 199 70 12 91 84

file_test$618:	; Parameter 6 string_r# 8
x17428:	mov word [bp + 14], @11100$string_r#	; 5: 199 70 14 101 84

file_test$619:	; Call 6 fopen 0
x17433:	mov word [bp + 6], file_test$620	; 5: 199 70 6 39 68
x17438:	mov [bp + 8], bp	; 3: 137 110 8
x17441:	add bp, 6	; 3: 131 197 6
x17444:	jmp fopen	; 3: 233 171 21

file_test$620:	; PostCall 6

file_test$621:	; GetReturnValue £temporary4963

file_test$622:	; Assign inFilePtr £temporary4963
x17447:	mov [bp + 6], bx	; 3: 137 94 6

file_test$623:	; NotEqual 635 inFilePtr 0
x17450:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x17454:	jne file_test$635	; 2: 117 59

file_test$624:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$625:	; Parameter 8 stderr 6
x17456:	mov ax, [stderr]	; 3: 161 121 77
x17459:	mov [bp + 14], ax	; 3: 137 70 14

file_test$626:	; Parameter 8 string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A# 8
x17462:	mov word [bp + 16], @11108$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#	; 5: 199 70 16 103 84

file_test$627:	; Parameter 8 string_inFilePtr20213D20NULL# 10
x17467:	mov word [bp + 18], @11109$string_inFilePtr20213D20NULL#	; 5: 199 70 18 149 84

file_test$628:	; Parameter 8 string_C3A5CUsers5CStefa5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec# 12
x17472:	mov word [bp + 20], @11110$string_C3A5CUsers5CStefa5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#	; 5: 199 70 20 167 84

file_test$629:	; Parameter 8 232 14
x17477:	mov word [bp + 22], 232	; 5: 199 70 22 232 0

file_test$630:	; Call 8 fprintf 0
x17482:	mov word [bp + 8], file_test$631	; 5: 199 70 8 93 68
x17487:	mov [bp + 10], bp	; 3: 137 110 10
x17490:	add bp, 8	; 3: 131 197 8
x17493:	mov di, bp	; 2: 137 239
x17495:	add di, 6	; 3: 131 199 6
x17498:	jmp fprintf	; 3: 233 14 26

file_test$631:	; PostCall 8

file_test$632:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$633:	; Call 8 abort 0
x17501:	mov word [bp + 8], file_test$634	; 5: 199 70 8 107 68
x17506:	mov [bp + 10], bp	; 3: 137 110 10
x17509:	add bp, 8	; 3: 131 197 8
x17512:	jmp abort	; 3: 233 59 26

file_test$634:	; PostCall 8

file_test$635:	; Assign index 0
x17515:	mov word [bp + 8], 0	; 5: 199 70 8 0 0

file_test$636:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$637:	; Parameter 10 inFilePtr 6
x17520:	mov ax, [bp + 6]	; 3: 139 70 6
x17523:	mov [bp + 16], ax	; 3: 137 70 16

file_test$638:	; Call 10 feof 0
x17526:	mov word [bp + 10], file_test$639	; 5: 199 70 10 132 68
x17531:	mov [bp + 12], bp	; 3: 137 110 12
x17534:	add bp, 10	; 3: 131 197 10
x17537:	jmp feof	; 3: 233 51 26

file_test$639:	; PostCall 10

file_test$640:	; GetReturnValue £temporary4968

file_test$641:	; NotEqual 660 £temporary4968 0
x17540:	cmp bx, 0	; 3: 131 251 0
x17543:	jne file_test$660	; 2: 117 79

file_test$642:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$643:	; address £temporary4971 value
x17545:	mov si, bp	; 2: 137 238
x17547:	add si, 10	; 3: 131 198 10

file_test$644:	; Parameter 18 £temporary4971 6
x17550:	mov [bp + 24], si	; 3: 137 118 24

file_test$645:	; Parameter 18 8 8
x17553:	mov word [bp + 26], 8	; 5: 199 70 26 8 0

file_test$646:	; Parameter 18 1 10
x17558:	mov word [bp + 28], 1	; 5: 199 70 28 1 0

file_test$647:	; Parameter 18 inFilePtr 12
x17563:	mov ax, [bp + 6]	; 3: 139 70 6
x17566:	mov [bp + 30], ax	; 3: 137 70 30

file_test$648:	; Call 18 fread 0
x17569:	mov word [bp + 18], file_test$649	; 5: 199 70 18 175 68
x17574:	mov [bp + 20], bp	; 3: 137 110 20
x17577:	add bp, 18	; 3: 131 197 18
x17580:	jmp fread	; 3: 233 47 46

file_test$649:	; PostCall 18

file_test$650:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$651:	; Parameter 18 string_index33A2025i3A20value2025f0A# 6
x17583:	mov word [bp + 24], @11131$string_index33A2025i3A20value2025f0A#	; 5: 199 70 24 231 84

file_test$652:	; Assign £temporary4973 index
x17588:	mov ax, [bp + 8]	; 3: 139 70 8

file_test$653:	; Increment index
x17591:	inc word [bp + 8]	; 3: 255 70 8

file_test$654:	; Parameter 18 £temporary4973 8
x17594:	mov [bp + 26], ax	; 3: 137 70 26

file_test$655:	; PushFloat value
x17597:	fld qword [bp + 10]	; 3: 221 70 10

file_test$656:	; Parameter 18 value 10
x17600:	fstp qword [bp + 28]	; 3: 221 94 28

file_test$657:	; Call 18 printf 0
x17603:	mov word [bp + 18], file_test$658	; 5: 199 70 18 214 68
x17608:	mov [bp + 20], bp	; 3: 137 110 20
x17611:	add bp, 18	; 3: 131 197 18
x17614:	mov di, bp	; 2: 137 239
x17616:	add di, 10	; 3: 131 199 10
x17619:	jmp printf	; 3: 233 46 200

file_test$658:	; PostCall 18

file_test$659:	; Goto 636
x17622:	jmp file_test$636	; 2: 235 152

file_test$660:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$661:	; Parameter 8 string_0A# 6
x17624:	mov word [bp + 14], @11137$string_0A#	; 5: 199 70 14 253 84

file_test$662:	; Call 8 printf 0
x17629:	mov word [bp + 8], file_test$663	; 5: 199 70 8 237 68
x17634:	mov [bp + 10], bp	; 3: 137 110 10
x17637:	add bp, 8	; 3: 131 197 8
x17640:	mov di, bp	; 2: 137 239
x17642:	jmp printf	; 3: 233 23 200

file_test$663:	; PostCall 8

file_test$664:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$665:	; Parameter 8 inFilePtr 6
x17645:	mov ax, [bp + 6]	; 3: 139 70 6
x17648:	mov [bp + 14], ax	; 3: 137 70 14

file_test$666:	; Call 8 fclose 0
x17651:	mov word [bp + 8], file_test$667	; 5: 199 70 8 1 69
x17656:	mov [bp + 10], bp	; 3: 137 110 10
x17659:	add bp, 8	; 3: 131 197 8
x17662:	jmp fclose	; 3: 233 122 44

file_test$667:	; PostCall 8

file_test$668:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$669:	; Parameter 6 string_TestX2Ebin# 6
x17665:	mov word [bp + 12], @11140$string_TestX2Ebin#	; 5: 199 70 12 255 84

file_test$670:	; Parameter 6 string_r# 8
x17670:	mov word [bp + 14], @11141$string_r#	; 5: 199 70 14 9 85

file_test$671:	; Call 6 fopen 0
x17675:	mov word [bp + 6], file_test$672	; 5: 199 70 6 25 69
x17680:	mov [bp + 8], bp	; 3: 137 110 8
x17683:	add bp, 6	; 3: 131 197 6
x17686:	jmp fopen	; 3: 233 185 20

file_test$672:	; PostCall 6

file_test$673:	; GetReturnValue £temporary4978

file_test$674:	; Assign inFilePtr £temporary4978
x17689:	mov [bp + 6], bx	; 3: 137 94 6

file_test$675:	; NotEqual 687 inFilePtr 0
x17692:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x17696:	jne file_test$687	; 2: 117 59

file_test$676:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$677:	; Parameter 10 stderr 6
x17698:	mov ax, [stderr]	; 3: 161 121 77
x17701:	mov [bp + 16], ax	; 3: 137 70 16

file_test$678:	; Parameter 10 string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A# 8
x17704:	mov word [bp + 18], @11150$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#	; 5: 199 70 18 11 85

file_test$679:	; Parameter 10 string_inFilePtr20213D20NULL# 10
x17709:	mov word [bp + 20], @11151$string_inFilePtr20213D20NULL#	; 5: 199 70 20 57 85

file_test$680:	; Parameter 10 string_C3A5CUsers5CStefa5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec# 12
x17714:	mov word [bp + 22], @11152$string_C3A5CUsers5CStefa5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#	; 5: 199 70 22 75 85

file_test$681:	; Parameter 10 250 14
x17719:	mov word [bp + 24], 250	; 5: 199 70 24 250 0

file_test$682:	; Call 10 fprintf 0
x17724:	mov word [bp + 10], file_test$683	; 5: 199 70 10 79 69
x17729:	mov [bp + 12], bp	; 3: 137 110 12
x17732:	add bp, 10	; 3: 131 197 10
x17735:	mov di, bp	; 2: 137 239
x17737:	add di, 6	; 3: 131 199 6
x17740:	jmp fprintf	; 3: 233 28 25

file_test$683:	; PostCall 10

file_test$684:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$685:	; Call 10 abort 0
x17743:	mov word [bp + 10], file_test$686	; 5: 199 70 10 93 69
x17748:	mov [bp + 12], bp	; 3: 137 110 12
x17751:	add bp, 10	; 3: 131 197 10
x17754:	jmp abort	; 3: 233 73 25

file_test$686:	; PostCall 10

file_test$687:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$688:	; address £temporary4983 size
x17757:	mov si, bp	; 2: 137 238
x17759:	add si, 8	; 3: 131 198 8

file_test$689:	; Parameter 10 £temporary4983 6
x17762:	mov [bp + 16], si	; 3: 137 118 16

file_test$690:	; Parameter 10 2 8
x17765:	mov word [bp + 18], 2	; 5: 199 70 18 2 0

file_test$691:	; Parameter 10 1 10
x17770:	mov word [bp + 20], 1	; 5: 199 70 20 1 0

file_test$692:	; Parameter 10 inFilePtr 12
x17775:	mov ax, [bp + 6]	; 3: 139 70 6
x17778:	mov [bp + 22], ax	; 3: 137 70 22

file_test$693:	; Call 10 fread 0
x17781:	mov word [bp + 10], file_test$694	; 5: 199 70 10 131 69
x17786:	mov [bp + 12], bp	; 3: 137 110 12
x17789:	add bp, 10	; 3: 131 197 10
x17792:	jmp fread	; 3: 233 91 45

file_test$694:	; PostCall 10

file_test$695:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$696:	; Parameter 10 string_size43A2025i20total2025i0A# 6
x17795:	mov word [bp + 16], @11165$string_size43A2025i20total2025i0A#	; 5: 199 70 16 139 85

file_test$697:	; Parameter 10 size 8
x17800:	mov ax, [bp + 8]	; 3: 139 70 8
x17803:	mov [bp + 18], ax	; 3: 137 70 18

file_test$698:	; SignedMultiply £temporary4985 size 8
x17806:	mov ax, [bp + 8]	; 3: 139 70 8
x17809:	xor dx, dx	; 2: 49 210
x17811:	imul word [@11167$int2$8#]	; 4: 247 46 159 85

file_test$699:	; Parameter 10 £temporary4985 10
x17815:	mov [bp + 20], ax	; 3: 137 70 20

file_test$700:	; Call 10 printf 0
x17818:	mov word [bp + 10], file_test$701	; 5: 199 70 10 173 69
x17823:	mov [bp + 12], bp	; 3: 137 110 12
x17826:	add bp, 10	; 3: 131 197 10
x17829:	mov di, bp	; 2: 137 239
x17831:	add di, 4	; 3: 131 199 4
x17834:	jmp printf	; 3: 233 87 199

file_test$701:	; PostCall 10

file_test$702:	; SignedMultiply total size 8
x17837:	mov ax, [bp + 8]	; 3: 139 70 8
x17840:	xor dx, dx	; 2: 49 210
x17842:	imul word [@11171$int2$8#]	; 4: 247 46 161 85
x17846:	mov [bp + 10], ax	; 3: 137 70 10

file_test$703:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$704:	; Parameter 14 total 6
x17849:	mov ax, [bp + 10]	; 3: 139 70 10
x17852:	mov [bp + 20], ax	; 3: 137 70 20

file_test$705:	; Call 14 malloc 0
x17855:	mov word [bp + 14], file_test$706	; 5: 199 70 14 205 69
x17860:	mov [bp + 16], bp	; 3: 137 110 16
x17863:	add bp, 14	; 3: 131 197 14
x17866:	jmp malloc	; 3: 233 84 45

file_test$706:	; PostCall 14

file_test$707:	; GetReturnValue £temporary4988

file_test$708:	; Assign p £temporary4988
x17869:	mov [bp + 14], bx	; 3: 137 94 14

file_test$709:	; SignedMultiply £temporary4989 size 8
x17872:	mov ax, [bp + 8]	; 3: 139 70 8
x17875:	xor dx, dx	; 2: 49 210
x17877:	imul word [@11178$int2$8#]	; 4: 247 46 163 85

file_test$710:	; BinaryAdd endPtr p £temporary4989
x17881:	mov bx, [bp + 14]	; 3: 139 94 14
x17884:	add bx, ax	; 2: 1 195
x17886:	mov [bp + 16], bx	; 3: 137 94 16

file_test$711:	; NotEqual 723 p 0
x17889:	cmp word [bp + 14], 0	; 4: 131 126 14 0
x17893:	jne file_test$723	; 2: 117 59

file_test$712:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$713:	; Parameter 18 stderr 6
x17895:	mov ax, [stderr]	; 3: 161 121 77
x17898:	mov [bp + 24], ax	; 3: 137 70 24

file_test$714:	; Parameter 18 string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A# 8
x17901:	mov word [bp + 26], @11186$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#	; 5: 199 70 26 165 85

file_test$715:	; Parameter 18 string_p20213D20NULL# 10
x17906:	mov word [bp + 28], @11187$string_p20213D20NULL#	; 5: 199 70 28 211 85

file_test$716:	; Parameter 18 string_C3A5CUsers5CStefa5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec# 12
x17911:	mov word [bp + 30], @11188$string_C3A5CUsers5CStefa5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#	; 5: 199 70 30 221 85

file_test$717:	; Parameter 18 257 14
x17916:	mov word [bp + 32], 257	; 5: 199 70 32 1 1

file_test$718:	; Call 18 fprintf 0
x17921:	mov word [bp + 18], file_test$719	; 5: 199 70 18 20 70
x17926:	mov [bp + 20], bp	; 3: 137 110 20
x17929:	add bp, 18	; 3: 131 197 18
x17932:	mov di, bp	; 2: 137 239
x17934:	add di, 6	; 3: 131 199 6
x17937:	jmp fprintf	; 3: 233 87 24

file_test$719:	; PostCall 18

file_test$720:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$721:	; Call 18 abort 0
x17940:	mov word [bp + 18], file_test$722	; 5: 199 70 18 34 70
x17945:	mov [bp + 20], bp	; 3: 137 110 20
x17948:	add bp, 18	; 3: 131 197 18
x17951:	jmp abort	; 3: 233 132 24

file_test$722:	; PostCall 18

file_test$723:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$724:	; Parameter 18 string_malloc43A2025u2025u2025u0A# 6
x17954:	mov word [bp + 24], @11193$string_malloc43A2025u2025u2025u0A#	; 5: 199 70 24 29 86

file_test$725:	; Parameter 18 p 8
x17959:	mov ax, [bp + 14]	; 3: 139 70 14
x17962:	mov [bp + 26], ax	; 3: 137 70 26

file_test$726:	; Parameter 18 total 10
x17965:	mov ax, [bp + 10]	; 3: 139 70 10
x17968:	mov [bp + 28], ax	; 3: 137 70 28

file_test$727:	; Parameter 18 endPtr 12
x17971:	mov ax, [bp + 16]	; 3: 139 70 16
x17974:	mov [bp + 30], ax	; 3: 137 70 30

file_test$728:	; Call 18 printf 0
x17977:	mov word [bp + 18], file_test$729	; 5: 199 70 18 76 70
x17982:	mov [bp + 20], bp	; 3: 137 110 20
x17985:	add bp, 18	; 3: 131 197 18
x17988:	mov di, bp	; 2: 137 239
x17990:	add di, 6	; 3: 131 199 6
x17993:	jmp printf	; 3: 233 184 198

file_test$729:	; PostCall 18

file_test$730:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$731:	; Parameter 18 p 6
x17996:	mov ax, [bp + 14]	; 3: 139 70 14
x17999:	mov [bp + 24], ax	; 3: 137 70 24

file_test$732:	; Parameter 18 total 8
x18002:	mov ax, [bp + 10]	; 3: 139 70 10
x18005:	mov [bp + 26], ax	; 3: 137 70 26

file_test$733:	; Parameter 18 1 10
x18008:	mov word [bp + 28], 1	; 5: 199 70 28 1 0

file_test$734:	; Parameter 18 inFilePtr 12
x18013:	mov ax, [bp + 6]	; 3: 139 70 6
x18016:	mov [bp + 30], ax	; 3: 137 70 30

file_test$735:	; Call 18 fread 0
x18019:	mov word [bp + 18], file_test$736	; 5: 199 70 18 113 70
x18024:	mov [bp + 20], bp	; 3: 137 110 20
x18027:	add bp, 18	; 3: 131 197 18
x18030:	jmp fread	; 3: 233 109 44

file_test$736:	; PostCall 18

file_test$737:	; Assign index 0
x18033:	mov word [bp + 12], 0	; 5: 199 70 12 0 0

file_test$738:	; SignedGreaterThanEqual 751 index size
x18038:	mov ax, [bp + 8]	; 3: 139 70 8
x18041:	cmp [bp + 12], ax	; 3: 57 70 12
x18044:	jge file_test$751	; 2: 125 54

file_test$739:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$740:	; Parameter 18 string_index43A2025i3A20value2025f0A# 6
x18046:	mov word [bp + 24], @11205$string_index43A2025i3A20value2025f0A#	; 5: 199 70 24 48 86

file_test$741:	; Parameter 18 index 8
x18051:	mov ax, [bp + 12]	; 3: 139 70 12
x18054:	mov [bp + 26], ax	; 3: 137 70 26

file_test$742:	; SignedMultiply £temporary5000 index 8
x18057:	mov ax, [bp + 12]	; 3: 139 70 12
x18060:	xor dx, dx	; 2: 49 210
x18062:	imul word [@11207$int2$8#]	; 4: 247 46 70 86

file_test$743:	; BinaryAdd £temporary5001 p £temporary5000
x18066:	mov si, [bp + 14]	; 3: 139 118 14
x18069:	add si, ax	; 2: 1 198

file_test$744:	; Deref £temporary4999 -> £temporary5001 £temporary5001 0

file_test$745:	; PushFloat £temporary4999 -> £temporary5001
x18071:	fld qword [si]	; 2: 221 4

file_test$746:	; Parameter 18 £temporary4999 -> £temporary5001 10
x18073:	fstp qword [bp + 28]	; 3: 221 94 28

file_test$747:	; Call 18 printf 0
x18076:	mov word [bp + 18], file_test$748	; 5: 199 70 18 175 70
x18081:	mov [bp + 20], bp	; 3: 137 110 20
x18084:	add bp, 18	; 3: 131 197 18
x18087:	mov di, bp	; 2: 137 239
x18089:	add di, 10	; 3: 131 199 10
x18092:	jmp printf	; 3: 233 85 198

file_test$748:	; PostCall 18

file_test$749:	; Increment index
x18095:	inc word [bp + 12]	; 3: 255 70 12

file_test$750:	; Goto 738
x18098:	jmp file_test$738	; 2: 235 194

file_test$751:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$752:	; Parameter 18 string_0A# 6
x18100:	mov word [bp + 24], @11211$string_0A#	; 5: 199 70 24 72 86

file_test$753:	; Call 18 printf 0
x18105:	mov word [bp + 18], file_test$754	; 5: 199 70 18 201 70
x18110:	mov [bp + 20], bp	; 3: 137 110 20
x18113:	add bp, 18	; 3: 131 197 18
x18116:	mov di, bp	; 2: 137 239
x18118:	jmp printf	; 3: 233 59 198

file_test$754:	; PostCall 18

file_test$755:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$756:	; Parameter 18 p 6
x18121:	mov ax, [bp + 14]	; 3: 139 70 14
x18124:	mov [bp + 24], ax	; 3: 137 70 24

file_test$757:	; Call 18 free 0
x18127:	mov word [bp + 18], file_test$758	; 5: 199 70 18 221 70
x18132:	mov [bp + 20], bp	; 3: 137 110 20
x18135:	add bp, 18	; 3: 131 197 18
x18138:	jmp free	; 3: 233 80 46

file_test$758:	; PostCall 18

file_test$759:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$760:	; Parameter 10 inFilePtr 6
x18141:	mov ax, [bp + 6]	; 3: 139 70 6
x18144:	mov [bp + 16], ax	; 3: 137 70 16

file_test$761:	; Call 10 fclose 0
x18147:	mov word [bp + 10], file_test$762	; 5: 199 70 10 241 70
x18152:	mov [bp + 12], bp	; 3: 137 110 12
x18155:	add bp, 10	; 3: 131 197 10
x18158:	jmp fclose	; 3: 233 138 42

file_test$762:	; PostCall 10

file_test$763:	; Assign personVector[0]$name[0] 65
x18161:	mov byte [bp + 6], 65	; 4: 198 70 6 65

file_test$764:	; Assign personVector[0]$name[1] 100
x18165:	mov byte [bp + 7], 100	; 4: 198 70 7 100

file_test$765:	; Assign personVector[0]$name[2] 97
x18169:	mov byte [bp + 8], 97	; 4: 198 70 8 97

file_test$766:	; Assign personVector[0]$name[3] 109
x18173:	mov byte [bp + 9], 109	; 4: 198 70 9 109

file_test$767:	; Assign personVector[0]$name[4] 32
x18177:	mov byte [bp + 10], 32	; 4: 198 70 10 32

file_test$768:	; Assign personVector[0]$name[5] 66
x18181:	mov byte [bp + 11], 66	; 4: 198 70 11 66

file_test$769:	; Assign personVector[0]$name[6] 101
x18185:	mov byte [bp + 12], 101	; 4: 198 70 12 101

file_test$770:	; Assign personVector[0]$name[7] 114
x18189:	mov byte [bp + 13], 114	; 4: 198 70 13 114

file_test$771:	; Assign personVector[0]$name[8] 116
x18193:	mov byte [bp + 14], 116	; 4: 198 70 14 116

file_test$772:	; Assign personVector[0]$name[9] 105
x18197:	mov byte [bp + 15], 105	; 4: 198 70 15 105

file_test$773:	; Assign personVector[0]$name[10] 108
x18201:	mov byte [bp + 16], 108	; 4: 198 70 16 108

file_test$774:	; Assign personVector[0]$name[11] 115
x18205:	mov byte [bp + 17], 115	; 4: 198 70 17 115

file_test$775:	; Assign personVector[0]$name[12] 115
x18209:	mov byte [bp + 18], 115	; 4: 198 70 18 115

file_test$776:	; Assign personVector[0]$name[13] 111
x18213:	mov byte [bp + 19], 111	; 4: 198 70 19 111

file_test$777:	; Assign personVector[0]$name[14] 110
x18217:	mov byte [bp + 20], 110	; 4: 198 70 20 110

file_test$778:	; Assign personVector[0]$name[15] 0
x18221:	mov byte [bp + 21], 0	; 4: 198 70 21 0

file_test$779:	; Assign personVector[0]$phone 12345
x18225:	mov word [bp + 54], 12345	; 5: 199 70 54 57 48

file_test$780:	; Assign personVector[1]$name[0] 66
x18230:	mov byte [bp + 56], 66	; 4: 198 70 56 66

file_test$781:	; Assign personVector[1]$name[1] 101
x18234:	mov byte [bp + 57], 101	; 4: 198 70 57 101

file_test$782:	; Assign personVector[1]$name[2] 114
x18238:	mov byte [bp + 58], 114	; 4: 198 70 58 114

file_test$783:	; Assign personVector[1]$name[3] 116
x18242:	mov byte [bp + 59], 116	; 4: 198 70 59 116

file_test$784:	; Assign personVector[1]$name[4] 105
x18246:	mov byte [bp + 60], 105	; 4: 198 70 60 105

file_test$785:	; Assign personVector[1]$name[5] 108
x18250:	mov byte [bp + 61], 108	; 4: 198 70 61 108

file_test$786:	; Assign personVector[1]$name[6] 32
x18254:	mov byte [bp + 62], 32	; 4: 198 70 62 32

file_test$787:	; Assign personVector[1]$name[7] 67
x18258:	mov byte [bp + 63], 67	; 4: 198 70 63 67

file_test$788:	; Assign personVector[1]$name[8] 101
x18262:	mov byte [bp + 64], 101	; 4: 198 70 64 101

file_test$789:	; Assign personVector[1]$name[9] 97
x18266:	mov byte [bp + 65], 97	; 4: 198 70 65 97

file_test$790:	; Assign personVector[1]$name[10] 115
x18270:	mov byte [bp + 66], 115	; 4: 198 70 66 115

file_test$791:	; Assign personVector[1]$name[11] 97
x18274:	mov byte [bp + 67], 97	; 4: 198 70 67 97

file_test$792:	; Assign personVector[1]$name[12] 114
x18278:	mov byte [bp + 68], 114	; 4: 198 70 68 114

file_test$793:	; Assign personVector[1]$name[13] 115
x18282:	mov byte [bp + 69], 115	; 4: 198 70 69 115

file_test$794:	; Assign personVector[1]$name[14] 115
x18286:	mov byte [bp + 70], 115	; 4: 198 70 70 115

file_test$795:	; Assign personVector[1]$name[15] 111
x18290:	mov byte [bp + 71], 111	; 4: 198 70 71 111

file_test$796:	; Assign personVector[1]$name[16] 110
x18294:	mov byte [bp + 72], 110	; 4: 198 70 72 110

file_test$797:	; Assign personVector[1]$name[17] 0
x18298:	mov byte [bp + 73], 0	; 4: 198 70 73 0

file_test$798:	; Assign personVector[1]$phone 23456
x18302:	mov word [bp + 104], 23456	; 5: 199 70 104 160 91

file_test$799:	; Assign personVector[2]$name[0] 67
x18307:	mov byte [bp + 106], 67	; 4: 198 70 106 67

file_test$800:	; Assign personVector[2]$name[1] 101
x18311:	mov byte [bp + 107], 101	; 4: 198 70 107 101

file_test$801:	; Assign personVector[2]$name[2] 97
x18315:	mov byte [bp + 108], 97	; 4: 198 70 108 97

file_test$802:	; Assign personVector[2]$name[3] 115
x18319:	mov byte [bp + 109], 115	; 4: 198 70 109 115

file_test$803:	; Assign personVector[2]$name[4] 97
x18323:	mov byte [bp + 110], 97	; 4: 198 70 110 97

file_test$804:	; Assign personVector[2]$name[5] 114
x18327:	mov byte [bp + 111], 114	; 4: 198 70 111 114

file_test$805:	; Assign personVector[2]$name[6] 32
x18331:	mov byte [bp + 112], 32	; 4: 198 70 112 32

file_test$806:	; Assign personVector[2]$name[7] 68
x18335:	mov byte [bp + 113], 68	; 4: 198 70 113 68

file_test$807:	; Assign personVector[2]$name[8] 97
x18339:	mov byte [bp + 114], 97	; 4: 198 70 114 97

file_test$808:	; Assign personVector[2]$name[9] 118
x18343:	mov byte [bp + 115], 118	; 4: 198 70 115 118

file_test$809:	; Assign personVector[2]$name[10] 105
x18347:	mov byte [bp + 116], 105	; 4: 198 70 116 105

file_test$810:	; Assign personVector[2]$name[11] 100
x18351:	mov byte [bp + 117], 100	; 4: 198 70 117 100

file_test$811:	; Assign personVector[2]$name[12] 115
x18355:	mov byte [bp + 118], 115	; 4: 198 70 118 115

file_test$812:	; Assign personVector[2]$name[13] 115
x18359:	mov byte [bp + 119], 115	; 4: 198 70 119 115

file_test$813:	; Assign personVector[2]$name[14] 111
x18363:	mov byte [bp + 120], 111	; 4: 198 70 120 111

file_test$814:	; Assign personVector[2]$name[15] 110
x18367:	mov byte [bp + 121], 110	; 4: 198 70 121 110

file_test$815:	; Assign personVector[2]$name[16] 0
x18371:	mov byte [bp + 122], 0	; 4: 198 70 122 0

file_test$816:	; Assign personVector[2]$phone 24567
x18375:	mov word [bp + 154], 24567	; 6: 199 134 154 0 247 95

file_test$817:	; CallHeader 206 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$818:	; Parameter 206 string_Block2Ebin# 6
x18381:	mov word [bp + 212], @11392$string_Block2Ebin#	; 6: 199 134 212 0 74 86

file_test$819:	; Parameter 206 string_w# 8
x18387:	mov word [bp + 214], @11393$string_w#	; 6: 199 134 214 0 84 86

file_test$820:	; Call 206 fopen 0
x18393:	mov word [bp + 206], file_test$821	; 6: 199 134 206 0 234 71
x18399:	mov [bp + 208], bp	; 4: 137 174 208 0
x18403:	add bp, 206	; 4: 129 197 206 0
x18407:	jmp fopen	; 3: 233 232 17

file_test$821:	; PostCall 206

file_test$822:	; GetReturnValue £temporary5066

file_test$823:	; Assign outFilePtr £temporary5066
x18410:	mov [bp + 206], bx	; 4: 137 158 206 0

file_test$824:	; CallHeader 208 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$825:	; Parameter 208 string_Block2Ebin# 6
x18414:	mov word [bp + 214], @11396$string_Block2Ebin#	; 6: 199 134 214 0 86 86

file_test$826:	; Parameter 208 string_r# 8
x18420:	mov word [bp + 216], @11397$string_r#	; 6: 199 134 216 0 96 86

file_test$827:	; Call 208 fopen 0
x18426:	mov word [bp + 208], file_test$828	; 6: 199 134 208 0 11 72
x18432:	mov [bp + 210], bp	; 4: 137 174 210 0
x18436:	add bp, 208	; 4: 129 197 208 0
x18440:	jmp fopen	; 3: 233 199 17

file_test$828:	; PostCall 208

file_test$829:	; GetReturnValue £temporary5067

file_test$830:	; Assign inFilePtr £temporary5067
x18443:	mov [bp + 208], bx	; 4: 137 158 208 0

file_test$831:	; NotEqual 843 outFilePtr 0
x18447:	cmp word [bp + 206], 0	; 5: 131 190 206 0 0
x18452:	jne file_test$843	; 2: 117 70

file_test$832:	; CallHeader 210 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$833:	; Parameter 210 stderr 6
x18454:	mov ax, [stderr]	; 3: 161 121 77
x18457:	mov [bp + 216], ax	; 4: 137 134 216 0

file_test$834:	; Parameter 210 string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A# 8
x18461:	mov word [bp + 218], @11405$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#	; 6: 199 134 218 0 98 86

file_test$835:	; Parameter 210 string_outFilePtr20213D20NULL# 10
x18467:	mov word [bp + 220], @11406$string_outFilePtr20213D20NULL#	; 6: 199 134 220 0 144 86

file_test$836:	; Parameter 210 string_C3A5CUsers5CStefa5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec# 12
x18473:	mov word [bp + 222], @11407$string_C3A5CUsers5CStefa5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#	; 6: 199 134 222 0 163 86

file_test$837:	; Parameter 210 284 14
x18479:	mov word [bp + 224], 284	; 6: 199 134 224 0 28 1

file_test$838:	; Call 210 fprintf 0
x18485:	mov word [bp + 210], file_test$839	; 6: 199 134 210 0 75 72
x18491:	mov [bp + 212], bp	; 4: 137 174 212 0
x18495:	add bp, 210	; 4: 129 197 210 0
x18499:	mov di, bp	; 2: 137 239
x18501:	add di, 6	; 3: 131 199 6
x18504:	jmp fprintf	; 3: 233 32 22

file_test$839:	; PostCall 210

file_test$840:	; CallHeader 210 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$841:	; Call 210 abort 0
x18507:	mov word [bp + 210], file_test$842	; 6: 199 134 210 0 92 72
x18513:	mov [bp + 212], bp	; 4: 137 174 212 0
x18517:	add bp, 210	; 4: 129 197 210 0
x18521:	jmp abort	; 3: 233 74 22

file_test$842:	; PostCall 210

file_test$843:	; NotEqual 855 inFilePtr 0
x18524:	cmp word [bp + 208], 0	; 5: 131 190 208 0 0
x18529:	jne file_test$855	; 2: 117 70

file_test$844:	; CallHeader 210 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$845:	; Parameter 210 stderr 6
x18531:	mov ax, [stderr]	; 3: 161 121 77
x18534:	mov [bp + 216], ax	; 4: 137 134 216 0

file_test$846:	; Parameter 210 string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A# 8
x18538:	mov word [bp + 218], @11417$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#	; 6: 199 134 218 0 227 86

file_test$847:	; Parameter 210 string_inFilePtr20213D20NULL# 10
x18544:	mov word [bp + 220], @11418$string_inFilePtr20213D20NULL#	; 6: 199 134 220 0 17 87

file_test$848:	; Parameter 210 string_C3A5CUsers5CStefa5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec# 12
x18550:	mov word [bp + 222], @11419$string_C3A5CUsers5CStefa5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#	; 6: 199 134 222 0 35 87

file_test$849:	; Parameter 210 285 14
x18556:	mov word [bp + 224], 285	; 6: 199 134 224 0 29 1

file_test$850:	; Call 210 fprintf 0
x18562:	mov word [bp + 210], file_test$851	; 6: 199 134 210 0 152 72
x18568:	mov [bp + 212], bp	; 4: 137 174 212 0
x18572:	add bp, 210	; 4: 129 197 210 0
x18576:	mov di, bp	; 2: 137 239
x18578:	add di, 6	; 3: 131 199 6
x18581:	jmp fprintf	; 3: 233 211 21

file_test$851:	; PostCall 210

file_test$852:	; CallHeader 210 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$853:	; Call 210 abort 0
x18584:	mov word [bp + 210], file_test$854	; 6: 199 134 210 0 169 72
x18590:	mov [bp + 212], bp	; 4: 137 174 212 0
x18594:	add bp, 210	; 4: 129 197 210 0
x18598:	jmp abort	; 3: 233 253 21

file_test$854:	; PostCall 210

file_test$855:	; CallHeader 210 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$856:	; Parameter 210 personVector 6
x18601:	mov [bp + 216], bp	; 4: 137 174 216 0
x18605:	add word [bp + 216], 6	; 5: 131 134 216 0 6

file_test$857:	; Parameter 210 150 8
x18610:	mov word [bp + 218], 150	; 6: 199 134 218 0 150 0

file_test$858:	; Parameter 210 1 10
x18616:	mov word [bp + 220], 1	; 6: 199 134 220 0 1 0

file_test$859:	; Parameter 210 outFilePtr 12
x18622:	mov ax, [bp + 206]	; 4: 139 134 206 0
x18626:	mov [bp + 222], ax	; 4: 137 134 222 0

file_test$860:	; Call 210 fwrite 0
x18630:	mov word [bp + 210], file_test$861	; 6: 199 134 210 0 215 72
x18636:	mov [bp + 212], bp	; 4: 137 174 212 0
x18640:	add bp, 210	; 4: 129 197 210 0
x18644:	jmp fwrite	; 3: 233 196 41

file_test$861:	; PostCall 210

file_test$862:	; CallHeader 210 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$863:	; Parameter 210 outFilePtr 6
x18647:	mov ax, [bp + 206]	; 4: 139 134 206 0
x18651:	mov [bp + 216], ax	; 4: 137 134 216 0

file_test$864:	; Call 210 fclose 0
x18655:	mov word [bp + 210], file_test$865	; 6: 199 134 210 0 240 72
x18661:	mov [bp + 212], bp	; 4: 137 174 212 0
x18665:	add bp, 210	; 4: 129 197 210 0
x18669:	jmp fclose	; 3: 233 139 40

file_test$865:	; PostCall 210

file_test$866:	; CallHeader 210 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$867:	; Parameter 210 inFilePtr 6
x18672:	mov ax, [bp + 208]	; 4: 139 134 208 0
x18676:	mov [bp + 216], ax	; 4: 137 134 216 0

file_test$868:	; Call 210 feof 0
x18680:	mov word [bp + 210], file_test$869	; 6: 199 134 210 0 9 73
x18686:	mov [bp + 212], bp	; 4: 137 174 212 0
x18690:	add bp, 210	; 4: 129 197 210 0
x18694:	jmp feof	; 3: 233 174 21

file_test$869:	; PostCall 210

file_test$870:	; GetReturnValue £temporary5078

file_test$871:	; NotEqual 891 £temporary5078 0
x18697:	cmp bx, 0	; 3: 131 251 0
x18700:	jne file_test$891	; 2: 117 124

file_test$872:	; CallHeader 210 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$873:	; address £temporary5081 person
x18702:	mov si, bp	; 2: 137 238
x18704:	add si, 156	; 4: 129 198 156 0

file_test$874:	; Parameter 210 £temporary5081 6
x18708:	mov [bp + 216], si	; 4: 137 182 216 0

file_test$875:	; Parameter 210 50 8
x18712:	mov word [bp + 218], 50	; 6: 199 134 218 0 50 0

file_test$876:	; Parameter 210 1 10
x18718:	mov word [bp + 220], 1	; 6: 199 134 220 0 1 0

file_test$877:	; Parameter 210 inFilePtr 12
x18724:	mov ax, [bp + 208]	; 4: 139 134 208 0
x18728:	mov [bp + 222], ax	; 4: 137 134 222 0

file_test$878:	; Call 210 fread 0
x18732:	mov word [bp + 210], file_test$879	; 6: 199 134 210 0 61 73
x18738:	mov [bp + 212], bp	; 4: 137 174 212 0
x18742:	add bp, 210	; 4: 129 197 210 0
x18746:	jmp fread	; 3: 233 161 41

file_test$879:	; PostCall 210

file_test$880:	; CallHeader 210 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$881:	; Parameter 210 string_Name20203A2025s0A# 6
x18749:	mov word [bp + 216], @11444$string_Name20203A2025s0A#	; 6: 199 134 216 0 99 87

file_test$882:	; Parameter 210 person$name 8
x18755:	mov [bp + 218], bp	; 4: 137 174 218 0
x18759:	add word [bp + 218], 156	; 6: 129 134 218 0 156 0

file_test$883:	; Call 210 printf 0
x18765:	mov word [bp + 210], file_test$884	; 6: 199 134 210 0 99 73
x18771:	mov [bp + 212], bp	; 4: 137 174 212 0
x18775:	add bp, 210	; 4: 129 197 210 0
x18779:	mov di, bp	; 2: 137 239
x18781:	add di, 2	; 3: 131 199 2
x18784:	jmp printf	; 3: 233 161 195

file_test$884:	; PostCall 210

file_test$885:	; CallHeader 210 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$886:	; Parameter 210 string_Phone203A2025d0A# 6
x18787:	mov word [bp + 216], @11447$string_Phone203A2025d0A#	; 6: 199 134 216 0 111 87

file_test$887:	; Parameter 210 person$phone 8
x18793:	mov ax, [bp + 204]	; 4: 139 134 204 0
x18797:	mov [bp + 218], ax	; 4: 137 134 218 0

file_test$888:	; Call 210 printf 0
x18801:	mov word [bp + 210], file_test$889	; 6: 199 134 210 0 135 73
x18807:	mov [bp + 212], bp	; 4: 137 174 212 0
x18811:	add bp, 210	; 4: 129 197 210 0
x18815:	mov di, bp	; 2: 137 239
x18817:	add di, 2	; 3: 131 199 2
x18820:	jmp printf	; 3: 233 125 195

file_test$889:	; PostCall 210

file_test$890:	; Goto 866
x18823:	jmp file_test$866	; 3: 233 102 255

file_test$891:	; CallHeader 210 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$892:	; Parameter 210 inFilePtr 6
x18826:	mov ax, [bp + 208]	; 4: 139 134 208 0
x18830:	mov [bp + 216], ax	; 4: 137 134 216 0

file_test$893:	; Call 210 fclose 0
x18834:	mov word [bp + 210], file_test$894	; 6: 199 134 210 0 163 73
x18840:	mov [bp + 212], bp	; 4: 137 174 212 0
x18844:	add bp, 210	; 4: 129 197 210 0
x18848:	jmp fclose	; 3: 233 216 39

file_test$894:	; PostCall 210

file_test$895:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$896:	; Parameter 6 string_outx2Etxt# 6
x18851:	mov word [bp + 12], @11451$string_outx2Etxt#	; 5: 199 70 12 123 87

file_test$897:	; Parameter 6 string_r# 8
x18856:	mov word [bp + 14], @11452$string_r#	; 5: 199 70 14 132 87

file_test$898:	; Call 6 fopen 0
x18861:	mov word [bp + 6], file_test$899	; 5: 199 70 6 187 73
x18866:	mov [bp + 8], bp	; 3: 137 110 8
x18869:	add bp, 6	; 3: 131 197 6
x18872:	jmp fopen	; 3: 233 23 16

file_test$899:	; PostCall 6

file_test$900:	; GetReturnValue £temporary5088

file_test$901:	; Assign inFilePtr £temporary5088
x18875:	mov [bp + 6], bx	; 3: 137 94 6

file_test$902:	; NotEqual 914 inFilePtr 0
x18878:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x18882:	jne file_test$914	; 2: 117 59

file_test$903:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$904:	; Parameter 8 stderr 6
x18884:	mov ax, [stderr]	; 3: 161 121 77
x18887:	mov [bp + 14], ax	; 3: 137 70 14

file_test$905:	; Parameter 8 string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A# 8
x18890:	mov word [bp + 16], @11460$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#	; 5: 199 70 16 134 87

file_test$906:	; Parameter 8 string_inFilePtr20213D20NULL# 10
x18895:	mov word [bp + 18], @11461$string_inFilePtr20213D20NULL#	; 5: 199 70 18 180 87

file_test$907:	; Parameter 8 string_C3A5CUsers5CStefa5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec# 12
x18900:	mov word [bp + 20], @11462$string_C3A5CUsers5CStefa5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#	; 5: 199 70 20 198 87

file_test$908:	; Parameter 8 301 14
x18905:	mov word [bp + 22], 301	; 5: 199 70 22 45 1

file_test$909:	; Call 8 fprintf 0
x18910:	mov word [bp + 8], file_test$910	; 5: 199 70 8 241 73
x18915:	mov [bp + 10], bp	; 3: 137 110 10
x18918:	add bp, 8	; 3: 131 197 8
x18921:	mov di, bp	; 2: 137 239
x18923:	add di, 6	; 3: 131 199 6
x18926:	jmp fprintf	; 3: 233 122 20

file_test$910:	; PostCall 8

file_test$911:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$912:	; Call 8 abort 0
x18929:	mov word [bp + 8], file_test$913	; 5: 199 70 8 255 73
x18934:	mov [bp + 10], bp	; 3: 137 110 10
x18937:	add bp, 8	; 3: 131 197 8
x18940:	jmp abort	; 3: 233 167 20

file_test$913:	; PostCall 8

file_test$914:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$915:	; Parameter 8 inFilePtr 6
x18943:	mov ax, [bp + 6]	; 3: 139 70 6
x18946:	mov [bp + 14], ax	; 3: 137 70 14

file_test$916:	; Parameter 8 0 8
x18949:	mov word [bp + 16], 0	; 5: 199 70 16 0 0

file_test$917:	; Parameter 8 2 10
x18954:	mov word [bp + 18], 2	; 5: 199 70 18 2 0

file_test$918:	; Call 8 fseek 0
x18959:	mov word [bp + 8], file_test$919	; 5: 199 70 8 29 74
x18964:	mov [bp + 10], bp	; 3: 137 110 10
x18967:	add bp, 8	; 3: 131 197 8
x18970:	jmp fseek	; 3: 233 169 19

file_test$919:	; PostCall 8

file_test$920:	; GetReturnValue £temporary5093

file_test$921:	; Assign size £temporary5093
x18973:	mov [bp + 8], bx	; 3: 137 94 8

file_test$922:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$923:	; Parameter 10 inFilePtr 6
x18976:	mov ax, [bp + 6]	; 3: 139 70 6
x18979:	mov [bp + 16], ax	; 3: 137 70 16

file_test$924:	; Call 10 ftell 0
x18982:	mov word [bp + 10], file_test$925	; 5: 199 70 10 52 74
x18987:	mov [bp + 12], bp	; 3: 137 110 12
x18990:	add bp, 10	; 3: 131 197 10
x18993:	jmp ftell	; 3: 233 154 43

file_test$925:	; PostCall 10

file_test$926:	; GetReturnValue £temporary5094

file_test$927:	; SignedLessThanEqual 945 £temporary5094 1
x18996:	cmp bx, 1	; 3: 131 251 1
x18999:	jle file_test$945	; 2: 126 73

file_test$928:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$929:	; Parameter 10 inFilePtr 6
x19001:	mov ax, [bp + 6]	; 3: 139 70 6
x19004:	mov [bp + 16], ax	; 3: 137 70 16

file_test$930:	; Decrement size
x19007:	dec word [bp + 8]	; 3: 255 78 8

file_test$931:	; Parameter 10 size 8
x19010:	mov ax, [bp + 8]	; 3: 139 70 8
x19013:	mov [bp + 18], ax	; 3: 137 70 18

file_test$932:	; Parameter 10 0 10
x19016:	mov word [bp + 20], 0	; 5: 199 70 20 0 0

file_test$933:	; Call 10 fseek 0
x19021:	mov word [bp + 10], file_test$934	; 5: 199 70 10 91 74
x19026:	mov [bp + 12], bp	; 3: 137 110 12
x19029:	add bp, 10	; 3: 131 197 10
x19032:	jmp fseek	; 3: 233 107 19

file_test$934:	; PostCall 10

file_test$935:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$936:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$937:	; Parameter 10 inFilePtr 6
x19035:	mov ax, [bp + 6]	; 3: 139 70 6
x19038:	mov [bp + 16], ax	; 3: 137 70 16

file_test$938:	; Call 10 fgetc 0
x19041:	mov word [bp + 10], file_test$939	; 5: 199 70 10 111 74
x19046:	mov [bp + 12], bp	; 3: 137 110 12
x19049:	add bp, 10	; 3: 131 197 10
x19052:	jmp fgetc	; 3: 233 136 43

file_test$939:	; PostCall 10

file_test$940:	; GetReturnValue £temporary5098

file_test$941:	; Parameter 10 £temporary5098 6
x19055:	mov [bp + 16], bx	; 3: 137 94 16

file_test$942:	; Call 10 putchar 0
x19058:	mov word [bp + 10], file_test$943	; 5: 199 70 10 128 74
x19063:	mov [bp + 12], bp	; 3: 137 110 12
x19066:	add bp, 10	; 3: 131 197 10
x19069:	jmp putchar	; 3: 233 207 43

file_test$943:	; PostCall 10

file_test$944:	; Goto 922
x19072:	jmp file_test$922	; 2: 235 158

file_test$945:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$946:	; Parameter 8 inFilePtr 6
x19074:	mov ax, [bp + 6]	; 3: 139 70 6
x19077:	mov [bp + 14], ax	; 3: 137 70 14

file_test$947:	; Call 8 fclose 0
x19080:	mov word [bp + 8], file_test$948	; 5: 199 70 8 150 74
x19085:	mov [bp + 10], bp	; 3: 137 110 10
x19088:	add bp, 8	; 3: 131 197 8
x19091:	jmp fclose	; 3: 233 229 38

file_test$948:	; PostCall 8

file_test$949:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$950:	; Parameter 6 string_fileexists2022X223A2025s0A# 6
x19094:	mov word [bp + 12], @11487$string_fileexists2022X223A2025s0A#	; 5: 199 70 12 6 88

file_test$951:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$952:	; Parameter 6 string_X# 14
x19099:	mov word [bp + 20], @11488$string_X#	; 5: 199 70 20 26 88

file_test$953:	; Call 6 fileexists 8
x19104:	mov word [bp + 14], file_test$954	; 5: 199 70 14 174 74
x19109:	mov [bp + 16], bp	; 3: 137 110 16
x19112:	add bp, 14	; 3: 131 197 14
x19115:	jmp fileexists	; 3: 233 99 19

file_test$954:	; PostCall 6

file_test$955:	; GetReturnValue £temporary5101

file_test$956:	; Equal 959 £temporary5101 0
x19118:	cmp bx, 0	; 3: 131 251 0
x19121:	je file_test$959	; 2: 116 5

file_test$957:	; Assign £temporary5106 string_Yes#
x19123:	mov ax, @11490$string_Yes#	; 3: 184 28 88

file_test$958:	; Goto 960
x19126:	jmp file_test$960	; 2: 235 3

file_test$959:	; Assign £temporary5106 string_No#
x19128:	mov ax, @11491$string_No#	; 3: 184 32 88

file_test$960:	; Parameter 6 £temporary5106 8
x19131:	mov [bp + 14], ax	; 3: 137 70 14

file_test$961:	; Call 6 printf 0
x19134:	mov word [bp + 6], file_test$962	; 5: 199 70 6 209 74
x19139:	mov [bp + 8], bp	; 3: 137 110 8
x19142:	add bp, 6	; 3: 131 197 6
x19145:	mov di, bp	; 2: 137 239
x19147:	add di, 2	; 3: 131 199 2
x19150:	jmp printf	; 3: 233 51 194

file_test$962:	; PostCall 6

file_test$963:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$964:	; Parameter 6 string_fileexists2022Y223A2025s0A# 6
x19153:	mov word [bp + 12], @11501$string_fileexists2022Y223A2025s0A#	; 5: 199 70 12 35 88

file_test$965:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$966:	; Parameter 6 string_Y# 14
x19158:	mov word [bp + 20], @11502$string_Y#	; 5: 199 70 20 55 88

file_test$967:	; Call 6 fileexists 8
x19163:	mov word [bp + 14], file_test$968	; 5: 199 70 14 233 74
x19168:	mov [bp + 16], bp	; 3: 137 110 16
x19171:	add bp, 14	; 3: 131 197 14
x19174:	jmp fileexists	; 3: 233 40 19

file_test$968:	; PostCall 6

file_test$969:	; GetReturnValue £temporary5108

file_test$970:	; Equal 973 £temporary5108 0
x19177:	cmp bx, 0	; 3: 131 251 0
x19180:	je file_test$973	; 2: 116 5

file_test$971:	; Assign £temporary5113 string_Yes#
x19182:	mov ax, @11504$string_Yes#	; 3: 184 57 88

file_test$972:	; Goto 974
x19185:	jmp file_test$974	; 2: 235 3

file_test$973:	; Assign £temporary5113 string_No#
x19187:	mov ax, @11505$string_No#	; 3: 184 61 88

file_test$974:	; Parameter 6 £temporary5113 8
x19190:	mov [bp + 14], ax	; 3: 137 70 14

file_test$975:	; Call 6 printf 0
x19193:	mov word [bp + 6], file_test$976	; 5: 199 70 6 12 75
x19198:	mov [bp + 8], bp	; 3: 137 110 8
x19201:	add bp, 6	; 3: 131 197 6
x19204:	mov di, bp	; 2: 137 239
x19206:	add di, 2	; 3: 131 199 2
x19209:	jmp printf	; 3: 233 248 193

file_test$976:	; PostCall 6

file_test$977:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$978:	; Parameter 6 string_fileexists2022Main2Easm223A2025s0A# 6
x19212:	mov word [bp + 12], @11515$string_fileexists2022Main2Easm223A2025s0A#	; 5: 199 70 12 64 88

file_test$979:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$980:	; Parameter 6 string_Main2Easm# 14
x19217:	mov word [bp + 20], @11516$string_Main2Easm#	; 5: 199 70 20 91 88

file_test$981:	; Call 6 fileexists 8
x19222:	mov word [bp + 14], file_test$982	; 5: 199 70 14 36 75
x19227:	mov [bp + 16], bp	; 3: 137 110 16
x19230:	add bp, 14	; 3: 131 197 14
x19233:	jmp fileexists	; 3: 233 237 18

file_test$982:	; PostCall 6

file_test$983:	; GetReturnValue £temporary5115

file_test$984:	; Equal 987 £temporary5115 0
x19236:	cmp bx, 0	; 3: 131 251 0
x19239:	je file_test$987	; 2: 116 5

file_test$985:	; Assign £temporary5120 string_Yes#
x19241:	mov ax, @11518$string_Yes#	; 3: 184 100 88

file_test$986:	; Goto 988
x19244:	jmp file_test$988	; 2: 235 3

file_test$987:	; Assign £temporary5120 string_No#
x19246:	mov ax, @11519$string_No#	; 3: 184 104 88

file_test$988:	; Parameter 6 £temporary5120 8
x19249:	mov [bp + 14], ax	; 3: 137 70 14

file_test$989:	; Call 6 printf 0
x19252:	mov word [bp + 6], file_test$990	; 5: 199 70 6 71 75
x19257:	mov [bp + 8], bp	; 3: 137 110 8
x19260:	add bp, 6	; 3: 131 197 6
x19263:	mov di, bp	; 2: 137 239
x19265:	add di, 2	; 3: 131 199 2
x19268:	jmp printf	; 3: 233 189 193

file_test$990:	; PostCall 6

file_test$991:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$992:	; Parameter 6 string_fileexists2022MainX2Easm223A2025s0A# 6
x19271:	mov word [bp + 12], @11529$string_fileexists2022MainX2Easm223A2025s0A#	; 5: 199 70 12 107 88

file_test$993:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$994:	; Parameter 6 string_MainX2Easm# 14
x19276:	mov word [bp + 20], @11530$string_MainX2Easm#	; 5: 199 70 20 135 88

file_test$995:	; Call 6 fileexists 8
x19281:	mov word [bp + 14], file_test$996	; 5: 199 70 14 95 75
x19286:	mov [bp + 16], bp	; 3: 137 110 16
x19289:	add bp, 14	; 3: 131 197 14
x19292:	jmp fileexists	; 3: 233 178 18

file_test$996:	; PostCall 6

file_test$997:	; GetReturnValue £temporary5122

file_test$998:	; Equal 1001 £temporary5122 0
x19295:	cmp bx, 0	; 3: 131 251 0
x19298:	je file_test$1001	; 2: 116 5

file_test$999:	; Assign £temporary5127 string_Yes#
x19300:	mov ax, @11532$string_Yes#	; 3: 184 145 88

file_test$1000:	; Goto 1002
x19303:	jmp file_test$1002	; 2: 235 3

file_test$1001:	; Assign £temporary5127 string_No#
x19305:	mov ax, @11533$string_No#	; 3: 184 149 88

file_test$1002:	; Parameter 6 £temporary5127 8
x19308:	mov [bp + 14], ax	; 3: 137 70 14

file_test$1003:	; Call 6 printf 0
x19311:	mov word [bp + 6], file_test$1004	; 5: 199 70 6 130 75
x19316:	mov [bp + 8], bp	; 3: 137 110 8
x19319:	add bp, 6	; 3: 131 197 6
x19322:	mov di, bp	; 2: 137 239
x19324:	add di, 2	; 3: 131 199 2
x19327:	jmp printf	; 3: 233 130 193

file_test$1004:	; PostCall 6

file_test$1005:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$1006:	; Parameter 6 string_fileexists2022Main2Ec223A2025s0A# 6
x19330:	mov word [bp + 12], @11543$string_fileexists2022Main2Ec223A2025s0A#	; 5: 199 70 12 152 88

file_test$1007:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$1008:	; Parameter 6 string_Main2Ec# 14
x19335:	mov word [bp + 20], @11544$string_Main2Ec#	; 5: 199 70 20 177 88

file_test$1009:	; Call 6 fileexists 8
x19340:	mov word [bp + 14], file_test$1010	; 5: 199 70 14 154 75
x19345:	mov [bp + 16], bp	; 3: 137 110 16
x19348:	add bp, 14	; 3: 131 197 14
x19351:	jmp fileexists	; 3: 233 119 18

file_test$1010:	; PostCall 6

file_test$1011:	; GetReturnValue £temporary5129

file_test$1012:	; Equal 1015 £temporary5129 0
x19354:	cmp bx, 0	; 3: 131 251 0
x19357:	je file_test$1015	; 2: 116 5

file_test$1013:	; Assign £temporary5134 string_Yes#
x19359:	mov ax, @11546$string_Yes#	; 3: 184 184 88

file_test$1014:	; Goto 1016
x19362:	jmp file_test$1016	; 2: 235 3

file_test$1015:	; Assign £temporary5134 string_No#
x19364:	mov ax, @11547$string_No#	; 3: 184 188 88

file_test$1016:	; Parameter 6 £temporary5134 8
x19367:	mov [bp + 14], ax	; 3: 137 70 14

file_test$1017:	; Call 6 printf 0
x19370:	mov word [bp + 6], file_test$1018	; 5: 199 70 6 189 75
x19375:	mov [bp + 8], bp	; 3: 137 110 8
x19378:	add bp, 6	; 3: 131 197 6
x19381:	mov di, bp	; 2: 137 239
x19383:	add di, 2	; 3: 131 199 2
x19386:	jmp printf	; 3: 233 71 193

file_test$1018:	; PostCall 6

file_test$1019:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$1020:	; Parameter 6 string_fileexists2022MainX2Ec223A2025s0A# 6
x19389:	mov word [bp + 12], @11557$string_fileexists2022MainX2Ec223A2025s0A#	; 5: 199 70 12 191 88

file_test$1021:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$1022:	; Parameter 6 string_MainX2Ec# 14
x19394:	mov word [bp + 20], @11558$string_MainX2Ec#	; 5: 199 70 20 217 88

file_test$1023:	; Call 6 fileexists 8
x19399:	mov word [bp + 14], file_test$1024	; 5: 199 70 14 213 75
x19404:	mov [bp + 16], bp	; 3: 137 110 16
x19407:	add bp, 14	; 3: 131 197 14
x19410:	jmp fileexists	; 3: 233 60 18

file_test$1024:	; PostCall 6

file_test$1025:	; GetReturnValue £temporary5136

file_test$1026:	; Equal 1029 £temporary5136 0
x19413:	cmp bx, 0	; 3: 131 251 0
x19416:	je file_test$1029	; 2: 116 5

file_test$1027:	; Assign £temporary5141 string_Yes#
x19418:	mov ax, @11560$string_Yes#	; 3: 184 225 88

file_test$1028:	; Goto 1030
x19421:	jmp file_test$1030	; 2: 235 3

file_test$1029:	; Assign £temporary5141 string_No#
x19423:	mov ax, @11561$string_No#	; 3: 184 229 88

file_test$1030:	; Parameter 6 £temporary5141 8
x19426:	mov [bp + 14], ax	; 3: 137 70 14

file_test$1031:	; Call 6 printf 0
x19429:	mov word [bp + 6], file_test$1032	; 5: 199 70 6 248 75
x19434:	mov [bp + 8], bp	; 3: 137 110 8
x19437:	add bp, 6	; 3: 131 197 6
x19440:	mov di, bp	; 2: 137 239
x19442:	add di, 2	; 3: 131 199 2
x19445:	jmp printf	; 3: 233 12 193

file_test$1032:	; PostCall 6

file_test$1033:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$1034:	; Parameter 6 string_fileexists2022File2Ec223A2025s0A# 6
x19448:	mov word [bp + 12], @11571$string_fileexists2022File2Ec223A2025s0A#	; 5: 199 70 12 232 88

file_test$1035:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$1036:	; Parameter 6 string_File2Ec# 14
x19453:	mov word [bp + 20], @11572$string_File2Ec#	; 5: 199 70 20 1 89

file_test$1037:	; Call 6 fileexists 8
x19458:	mov word [bp + 14], file_test$1038	; 5: 199 70 14 16 76
x19463:	mov [bp + 16], bp	; 3: 137 110 16
x19466:	add bp, 14	; 3: 131 197 14
x19469:	jmp fileexists	; 3: 233 1 18

file_test$1038:	; PostCall 6

file_test$1039:	; GetReturnValue £temporary5143

file_test$1040:	; Equal 1043 £temporary5143 0
x19472:	cmp bx, 0	; 3: 131 251 0
x19475:	je file_test$1043	; 2: 116 5

file_test$1041:	; Assign £temporary5148 string_Yes#
x19477:	mov ax, @11574$string_Yes#	; 3: 184 8 89

file_test$1042:	; Goto 1044
x19480:	jmp file_test$1044	; 2: 235 3

file_test$1043:	; Assign £temporary5148 string_No#
x19482:	mov ax, @11575$string_No#	; 3: 184 12 89

file_test$1044:	; Parameter 6 £temporary5148 8
x19485:	mov [bp + 14], ax	; 3: 137 70 14

file_test$1045:	; Call 6 printf 0
x19488:	mov word [bp + 6], file_test$1046	; 5: 199 70 6 51 76
x19493:	mov [bp + 8], bp	; 3: 137 110 8
x19496:	add bp, 6	; 3: 131 197 6
x19499:	mov di, bp	; 2: 137 239
x19501:	add di, 2	; 3: 131 199 2
x19504:	jmp printf	; 3: 233 209 192

file_test$1046:	; PostCall 6

file_test$1047:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$1048:	; Parameter 6 string_fileexists2022File2Ex223A2025s0A# 6
x19507:	mov word [bp + 12], @11585$string_fileexists2022File2Ex223A2025s0A#	; 5: 199 70 12 15 89

file_test$1049:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$1050:	; Parameter 6 string_File2Ex# 14
x19512:	mov word [bp + 20], @11586$string_File2Ex#	; 5: 199 70 20 40 89

file_test$1051:	; Call 6 fileexists 8
x19517:	mov word [bp + 14], file_test$1052	; 5: 199 70 14 75 76
x19522:	mov [bp + 16], bp	; 3: 137 110 16
x19525:	add bp, 14	; 3: 131 197 14
x19528:	jmp fileexists	; 3: 233 198 17

file_test$1052:	; PostCall 6

file_test$1053:	; GetReturnValue £temporary5150

file_test$1054:	; Equal 1057 £temporary5150 0
x19531:	cmp bx, 0	; 3: 131 251 0
x19534:	je file_test$1057	; 2: 116 5

file_test$1055:	; Assign £temporary5155 string_Yes#
x19536:	mov ax, @11588$string_Yes#	; 3: 184 47 89

file_test$1056:	; Goto 1058
x19539:	jmp file_test$1058	; 2: 235 3

file_test$1057:	; Assign £temporary5155 string_No#
x19541:	mov ax, @11589$string_No#	; 3: 184 51 89

file_test$1058:	; Parameter 6 £temporary5155 8
x19544:	mov [bp + 14], ax	; 3: 137 70 14

file_test$1059:	; Call 6 printf 0
x19547:	mov word [bp + 6], file_test$1060	; 5: 199 70 6 110 76
x19552:	mov [bp + 8], bp	; 3: 137 110 8
x19555:	add bp, 6	; 3: 131 197 6
x19558:	mov di, bp	; 2: 137 239
x19560:	add di, 2	; 3: 131 199 2
x19563:	jmp printf	; 3: 233 150 192

file_test$1060:	; PostCall 6

file_test$1061:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$1062:	; Parameter 6 string_fileexists2022File2Eh223A2025s0A# 6
x19566:	mov word [bp + 12], @11599$string_fileexists2022File2Eh223A2025s0A#	; 5: 199 70 12 54 89

file_test$1063:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$1064:	; Parameter 6 string_File2Eh# 14
x19571:	mov word [bp + 20], @11600$string_File2Eh#	; 5: 199 70 20 79 89

file_test$1065:	; Call 6 fileexists 8
x19576:	mov word [bp + 14], file_test$1066	; 5: 199 70 14 134 76
x19581:	mov [bp + 16], bp	; 3: 137 110 16
x19584:	add bp, 14	; 3: 131 197 14
x19587:	jmp fileexists	; 3: 233 139 17

file_test$1066:	; PostCall 6

file_test$1067:	; GetReturnValue £temporary5157

file_test$1068:	; Equal 1071 £temporary5157 0
x19590:	cmp bx, 0	; 3: 131 251 0
x19593:	je file_test$1071	; 2: 116 5

file_test$1069:	; Assign £temporary5162 string_Yes#
x19595:	mov ax, @11602$string_Yes#	; 3: 184 86 89

file_test$1070:	; Goto 1072
x19598:	jmp file_test$1072	; 2: 235 3

file_test$1071:	; Assign £temporary5162 string_No#
x19600:	mov ax, @11603$string_No#	; 3: 184 90 89

file_test$1072:	; Parameter 6 £temporary5162 8
x19603:	mov [bp + 14], ax	; 3: 137 70 14

file_test$1073:	; Call 6 printf 0
x19606:	mov word [bp + 6], file_test$1074	; 5: 199 70 6 169 76
x19611:	mov [bp + 8], bp	; 3: 137 110 8
x19614:	add bp, 6	; 3: 131 197 6
x19617:	mov di, bp	; 2: 137 239
x19619:	add di, 2	; 3: 131 199 2
x19622:	jmp printf	; 3: 233 91 192

file_test$1074:	; PostCall 6

file_test$1075:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$1076:	; Parameter 6 string_fileexists2022File2Ey223A2025s0A# 6
x19625:	mov word [bp + 12], @11613$string_fileexists2022File2Ey223A2025s0A#	; 5: 199 70 12 93 89

file_test$1077:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$1078:	; Parameter 6 string_File2Ey# 14
x19630:	mov word [bp + 20], @11614$string_File2Ey#	; 5: 199 70 20 118 89

file_test$1079:	; Call 6 fileexists 8
x19635:	mov word [bp + 14], file_test$1080	; 5: 199 70 14 193 76
x19640:	mov [bp + 16], bp	; 3: 137 110 16
x19643:	add bp, 14	; 3: 131 197 14
x19646:	jmp fileexists	; 3: 233 80 17

file_test$1080:	; PostCall 6

file_test$1081:	; GetReturnValue £temporary5164

file_test$1082:	; Equal 1085 £temporary5164 0
x19649:	cmp bx, 0	; 3: 131 251 0
x19652:	je file_test$1085	; 2: 116 5

file_test$1083:	; Assign £temporary5169 string_Yes#
x19654:	mov ax, @11616$string_Yes#	; 3: 184 125 89

file_test$1084:	; Goto 1086
x19657:	jmp file_test$1086	; 2: 235 3

file_test$1085:	; Assign £temporary5169 string_No#
x19659:	mov ax, @11617$string_No#	; 3: 184 129 89

file_test$1086:	; Parameter 6 £temporary5169 8
x19662:	mov [bp + 14], ax	; 3: 137 70 14

file_test$1087:	; Call 6 printf 0
x19665:	mov word [bp + 6], file_test$1088	; 5: 199 70 6 228 76
x19670:	mov [bp + 8], bp	; 3: 137 110 8
x19673:	add bp, 6	; 3: 131 197 6
x19676:	mov di, bp	; 2: 137 239
x19678:	add di, 2	; 3: 131 199 2
x19681:	jmp printf	; 3: 233 32 192

file_test$1088:	; PostCall 6

file_test$1089:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$1090:	; Parameter 6 string_fileexists2022File2Ep223A2025s0A# 6
x19684:	mov word [bp + 12], @11627$string_fileexists2022File2Ep223A2025s0A#	; 5: 199 70 12 132 89

file_test$1091:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$1092:	; Parameter 6 string_File2Ep# 14
x19689:	mov word [bp + 20], @11628$string_File2Ep#	; 5: 199 70 20 157 89

file_test$1093:	; Call 6 fileexists 8
x19694:	mov word [bp + 14], file_test$1094	; 5: 199 70 14 252 76
x19699:	mov [bp + 16], bp	; 3: 137 110 16
x19702:	add bp, 14	; 3: 131 197 14
x19705:	jmp fileexists	; 3: 233 21 17

file_test$1094:	; PostCall 6

file_test$1095:	; GetReturnValue £temporary5171

file_test$1096:	; Equal 1099 £temporary5171 0
x19708:	cmp bx, 0	; 3: 131 251 0
x19711:	je file_test$1099	; 2: 116 5

file_test$1097:	; Assign £temporary5176 string_Yes#
x19713:	mov ax, @11630$string_Yes#	; 3: 184 164 89

file_test$1098:	; Goto 1100
x19716:	jmp file_test$1100	; 2: 235 3

file_test$1099:	; Assign £temporary5176 string_No#
x19718:	mov ax, @11631$string_No#	; 3: 184 168 89

file_test$1100:	; Parameter 6 £temporary5176 8
x19721:	mov [bp + 14], ax	; 3: 137 70 14

file_test$1101:	; Call 6 printf 0
x19724:	mov word [bp + 6], file_test$1102	; 5: 199 70 6 31 77
x19729:	mov [bp + 8], bp	; 3: 137 110 8
x19732:	add bp, 6	; 3: 131 197 6
x19735:	mov di, bp	; 2: 137 239
x19737:	add di, 2	; 3: 131 199 2
x19740:	jmp printf	; 3: 233 229 191

file_test$1102:	; PostCall 6

file_test$1103:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$1104:	; Parameter 6 string_fileexists2022File2Ez223A2025s0A# 6
x19743:	mov word [bp + 12], @11641$string_fileexists2022File2Ez223A2025s0A#	; 5: 199 70 12 171 89

file_test$1105:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$1106:	; Parameter 6 string_File2Ez# 14
x19748:	mov word [bp + 20], @11642$string_File2Ez#	; 5: 199 70 20 196 89

file_test$1107:	; Call 6 fileexists 8
x19753:	mov word [bp + 14], file_test$1108	; 5: 199 70 14 55 77
x19758:	mov [bp + 16], bp	; 3: 137 110 16
x19761:	add bp, 14	; 3: 131 197 14
x19764:	jmp fileexists	; 3: 233 218 16

file_test$1108:	; PostCall 6

file_test$1109:	; GetReturnValue £temporary5178

file_test$1110:	; Equal 1113 £temporary5178 0
x19767:	cmp bx, 0	; 3: 131 251 0
x19770:	je file_test$1113	; 2: 116 5

file_test$1111:	; Assign £temporary5183 string_Yes#
x19772:	mov ax, @11644$string_Yes#	; 3: 184 203 89

file_test$1112:	; Goto 1114
x19775:	jmp file_test$1114	; 2: 235 3

file_test$1113:	; Assign £temporary5183 string_No#
x19777:	mov ax, @11645$string_No#	; 3: 184 207 89

file_test$1114:	; Parameter 6 £temporary5183 8
x19780:	mov [bp + 14], ax	; 3: 137 70 14

file_test$1115:	; Call 6 printf 0
x19783:	mov word [bp + 6], file_test$1116	; 5: 199 70 6 90 77
x19788:	mov [bp + 8], bp	; 3: 137 110 8
x19791:	add bp, 6	; 3: 131 197 6
x19794:	mov di, bp	; 2: 137 239
x19796:	add di, 2	; 3: 131 199 2
x19799:	jmp printf	; 3: 233 170 191

file_test$1116:	; PostCall 6

file_test$1117:	; Return 0
x19802:	mov ax, [bp]	; 3: 139 70 0
x19805:	mov di, [bp + 4]	; 3: 139 126 4
x19808:	mov bp, [bp + 2]	; 3: 139 110 2
x19811:	jmp ax	; 2: 255 224

file_test$1118:	; FunctionEnd file_test

@10693$string_in2Etxt#:
x19813:	db "in.txt", 0	; 7: 105 110 46 116 120 116 0

@10694$string_r#:
x19820:	db "r", 0	; 2: 114 0

@10697$string_outX2Etxt#:
x19822:	db "outX.txt", 0	; 9: 111 117 116 88 46 116 120 116 0

@10698$string_w#:
x19831:	db "w", 0	; 2: 119 0

stderr:
x19833:	dw g_fileArray + 58	; 2: 160 13

@10706$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#:
x19835:	db "Assertion failed: ", 34, "%s", 34, " in file %s at line %i", 10, 0	; 46: 65 115 115 101 114 116 105 111 110 32 102 97 105 108 101 100 58 32 34 37 115 34 32 105 110 32 102 105 108 101 32 37 115 32 97 116 32 108 105 110 101 32 37 105 10 0

@10707$string_inFilePtr20213D20NULL#:
x19881:	db "inFilePtr != NULL", 0	; 18: 105 110 70 105 108 101 80 116 114 32 33 61 32 78 85 76 76 0

@10708$string_C3A5CUsers5CStefa5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#:
x19899:	db "C:\Users\Stefa\Documents\vagrant\homestead\code\code\FileTest.c", 0	; 64: 67 58 92 85 115 101 114 115 92 83 116 101 102 97 92 68 111 99 117 109 101 110 116 115 92 118 97 103 114 97 110 116 92 104 111 109 101 115 116 101 97 100 92 99 111 100 101 92 99 111 100 101 92 70 105 108 101 84 101 115 116 46 99 0

@10718$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#:
x19963:	db "Assertion failed: ", 34, "%s", 34, " in file %s at line %i", 10, 0	; 46: 65 115 115 101 114 116 105 111 110 32 102 97 105 108 101 100 58 32 34 37 115 34 32 105 110 32 102 105 108 101 32 37 115 32 97 116 32 108 105 110 101 32 37 105 10 0

@10719$string_outFilePtr20213D20NULL#:
x20009:	db "outFilePtr != NULL", 0	; 19: 111 117 116 70 105 108 101 80 116 114 32 33 61 32 78 85 76 76 0

@10720$string_C3A5CUsers5CStefa5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#:
x20028:	db "C:\Users\Stefa\Documents\vagrant\homestead\code\code\FileTest.c", 0	; 64: 67 58 92 85 115 101 114 115 92 83 116 101 102 97 92 68 111 99 117 109 101 110 116 115 92 118 97 103 114 97 110 116 92 104 111 109 101 115 116 101 97 100 92 99 111 100 101 92 99 111 100 101 92 70 105 108 101 84 101 115 116 46 99 0

@10730$string_25lf#:
x20092:	db "%lf", 0	; 4: 37 108 102 0

@10733$string_X12025f0A#:
x20096:	db "X1 %f", 10, 0	; 7: 88 49 32 37 102 10 0

@10736$string_X22025f0A#:
x20103:	db "X2 %f", 10, 0	; 7: 88 50 32 37 102 10 0

@10739$string_0A#:
x20110:	db 10, 0	; 2: 10 0

@10743$string_in2Etxt#:
x20112:	db "in.txt", 0	; 7: 105 110 46 116 120 116 0

@10744$string_r#:
x20119:	db "r", 0	; 2: 114 0

@10747$string_outY2Etxt#:
x20121:	db "outY.txt", 0	; 9: 111 117 116 89 46 116 120 116 0

@10748$string_w#:
x20130:	db "w", 0	; 2: 119 0

@10756$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#:
x20132:	db "Assertion failed: ", 34, "%s", 34, " in file %s at line %i", 10, 0	; 46: 65 115 115 101 114 116 105 111 110 32 102 97 105 108 101 100 58 32 34 37 115 34 32 105 110 32 102 105 108 101 32 37 115 32 97 116 32 108 105 110 101 32 37 105 10 0

@10757$string_inFilePtr20213D20NULL#:
x20178:	db "inFilePtr != NULL", 0	; 18: 105 110 70 105 108 101 80 116 114 32 33 61 32 78 85 76 76 0

@10758$string_C3A5CUsers5CStefa5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#:
x20196:	db "C:\Users\Stefa\Documents\vagrant\homestead\code\code\FileTest.c", 0	; 64: 67 58 92 85 115 101 114 115 92 83 116 101 102 97 92 68 111 99 117 109 101 110 116 115 92 118 97 103 114 97 110 116 92 104 111 109 101 115 116 101 97 100 92 99 111 100 101 92 99 111 100 101 92 70 105 108 101 84 101 115 116 46 99 0

@10768$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#:
x20260:	db "Assertion failed: ", 34, "%s", 34, " in file %s at line %i", 10, 0	; 46: 65 115 115 101 114 116 105 111 110 32 102 97 105 108 101 100 58 32 34 37 115 34 32 105 110 32 102 105 108 101 32 37 115 32 97 116 32 108 105 110 101 32 37 105 10 0

@10769$string_outFilePtr20213D20NULL#:
x20306:	db "outFilePtr != NULL", 0	; 19: 111 117 116 70 105 108 101 80 116 114 32 33 61 32 78 85 76 76 0

@10770$string_C3A5CUsers5CStefa5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#:
x20325:	db "C:\Users\Stefa\Documents\vagrant\homestead\code\code\FileTest.c", 0	; 64: 67 58 92 85 115 101 114 115 92 83 116 101 102 97 92 68 111 99 117 109 101 110 116 115 92 118 97 103 114 97 110 116 92 104 111 109 101 115 116 101 97 100 92 99 111 100 101 92 99 111 100 101 92 70 105 108 101 84 101 115 116 46 99 0

@10779$string_25i#:
x20389:	db "%i", 0	; 3: 37 105 0

@10782$string_size2025i0A#:
x20392:	db "size %i", 10, 0	; 9: 115 105 122 101 32 37 105 10 0

@10784$string_Y20size2025i0A#:
x20401:	db "Y size %i", 10, 0	; 11: 89 32 115 105 122 101 32 37 105 10 0

@10793$string_25lf#:
x20412:	db "%lf", 0	; 4: 37 108 102 0

@10796$string_Y12025f0A#:
x20416:	db "Y1 %f", 10, 0	; 7: 89 49 32 37 102 10 0

@10799$string_Y22025f0A#:
x20423:	db "Y2 %f", 10, 0	; 7: 89 50 32 37 102 10 0

@10802$string_0A#:
x20430:	db 10, 0	; 2: 10 0

@10806$string_Y#:
x20432:	db "Y", 0	; 2: 89 0

@10812$string_2225s2220has20been20removed0A#:
x20434:	db 34, "%s", 34, " has been removed", 10, 0	; 23: 34 37 115 34 32 104 97 115 32 98 101 101 110 32 114 101 109 111 118 101 100 10 0

@10814$string_Error202225s222025i3A2025s2E0A#:
x20457:	db "Error ", 34, "%s", 34, " %i: %s.", 10, 0	; 20: 69 114 114 111 114 32 34 37 115 34 32 37 105 58 32 37 115 46 10 0

@10817$string_X#:
x20477:	db "X", 0	; 2: 88 0

@10819$string_Y#:
x20479:	db "Y", 0	; 2: 89 0

@10821$string_w#:
x20481:	db "w", 0	; 2: 119 0

@10824$string_Hello20X#:
x20483:	db "Hello X", 0	; 8: 72 101 108 108 111 32 88 0

@10831$string_2225s2220has20been20renamed20to202225s222E0A#:
x20491:	db 34, "%s", 34, " has been renamed to ", 34, "%s", 34, ".", 10, 0	; 32: 34 37 115 34 32 104 97 115 32 98 101 101 110 32 114 101 110 97 109 101 100 32 116 111 32 34 37 115 34 46 10 0

@10833$string_Error202225s22202225s222025i3A2025s2E0A#:
x20523:	db "Error ", 34, "%s", 34, " ", 34, "%s", 34, " %i: %s.", 10, 0	; 25: 69 114 114 111 114 32 34 37 115 34 32 34 37 115 34 32 37 105 58 32 37 115 46 10 0

@10836$string_X2#:
x20548:	db "X2", 0	; 3: 88 50 0

@10838$string_Y2#:
x20551:	db "Y2", 0	; 3: 89 50 0

@10844$string_2225s2220has20been20renamed20to202225s222E0A#:
x20554:	db 34, "%s", 34, " has been renamed to ", 34, "%s", 34, ".", 10, 0	; 32: 34 37 115 34 32 104 97 115 32 98 101 101 110 32 114 101 110 97 109 101 100 32 116 111 32 34 37 115 34 46 10 0

@10846$string_Error202225s22202225s222025i3A2025s2E0A#:
x20586:	db "Error ", 34, "%s", 34, " ", 34, "%s", 34, " %i: %s.", 10, 0	; 25: 69 114 114 111 114 32 34 37 115 34 32 34 37 115 34 32 37 105 58 32 37 115 46 10 0

@10849$string_Z#:
x20611:	db "Z", 0	; 2: 90 0

@10851$string_w#:
x20613:	db "w", 0	; 2: 119 0

@10854$string_Hello20Z#:
x20615:	db "Hello Z", 0	; 8: 72 101 108 108 111 32 90 0

@10861$string_2225s2220has20been20removed2E0A#:
x20623:	db 34, "%s", 34, " has been removed.", 10, 0	; 24: 34 37 115 34 32 104 97 115 32 98 101 101 110 32 114 101 109 111 118 101 100 46 10 0

@10863$string_Error202225s222025i3A2025s2E0A#:
x20647:	db "Error ", 34, "%s", 34, " %i: %s.", 10, 0	; 20: 69 114 114 111 114 32 34 37 115 34 32 37 105 58 32 37 115 46 10 0

@10866$string_Z2#:
x20667:	db "Z2", 0	; 3: 90 50 0

@10872$string_2225s2220has20been20removed2E0A#:
x20670:	db 34, "%s", 34, " has been removed.", 10, 0	; 24: 34 37 115 34 32 104 97 115 32 98 101 101 110 32 114 101 109 111 118 101 100 46 10 0

@10874$string_Error202225s222025i3A2025s2E0A#:
x20694:	db "Error ", 34, "%s", 34, " %i: %s.", 10, 0	; 20: 69 114 114 111 114 32 34 37 115 34 32 37 105 58 32 37 115 46 10 0

@10877$string_PBook2Etxt#:
x20714:	db "PBook.txt", 0	; 10: 80 66 111 111 107 46 116 120 116 0

@10878$string_r#:
x20724:	db "r", 0	; 2: 114 0

@10886$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#:
x20726:	db "Assertion failed: ", 34, "%s", 34, " in file %s at line %i", 10, 0	; 46: 65 115 115 101 114 116 105 111 110 32 102 97 105 108 101 100 58 32 34 37 115 34 32 105 110 32 102 105 108 101 32 37 115 32 97 116 32 108 105 110 101 32 37 105 10 0

@10887$string_inFilePtr20213D20NULL#:
x20772:	db "inFilePtr != NULL", 0	; 18: 105 110 70 105 108 101 80 116 114 32 33 61 32 78 85 76 76 0

@10888$string_C3A5CUsers5CStefa5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#:
x20790:	db "C:\Users\Stefa\Documents\vagrant\homestead\code\code\FileTest.c", 0	; 64: 67 58 92 85 115 101 114 115 92 83 116 101 102 97 92 68 111 99 117 109 101 110 116 115 92 118 97 103 114 97 110 116 92 104 111 109 101 115 116 101 97 100 92 99 111 100 101 92 99 111 100 101 92 70 105 108 101 84 101 115 116 46 99 0

@10893$string_0A252D24s20252D24s0A#:
x20854:	db 10, "%-24s %-24s", 10, 0	; 14: 10 37 45 50 52 115 32 37 45 50 52 115 10 0

@10894$string_Name#:
x20868:	db "Name", 0	; 5: 78 97 109 101 0

@10895$string_Phone#:
x20873:	db "Phone", 0	; 6: 80 104 111 110 101 0

@10897$string_252D24s20252D24s0A#:
x20879:	db "%-24s %-24s", 10, 0	; 13: 37 45 50 52 115 32 37 45 50 52 115 10 0

@10898$string_3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D#:
x20892:	db "========================", 0	; 25: 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 0

@10899$string_3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D#:
x20917:	db "========================", 0	; 25: 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 0

@10903$string_25i#:
x20942:	db "%i", 0	; 3: 37 105 0

@10906$string_size2025i0A#:
x20945:	db "size %i", 10, 0	; 9: 115 105 122 101 32 37 105 10 0

@10920$string_25s25s#:
x20954:	db "%s%s", 0	; 5: 37 115 37 115 0

@10922$string_252D24s20252D24s0A#:
x20959:	db "%-24s %-24s", 10, 0	; 13: 37 45 50 52 115 32 37 45 50 52 115 10 0

@10924$string_0A#:
x20972:	db 10, 0	; 2: 10 0

@10927$string_TestX2Ebin#:
x20974:	db "TestX.bin", 0	; 10: 84 101 115 116 88 46 98 105 110 0

@10928$string_w#:
x20984:	db "w", 0	; 2: 119 0

@10936$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#:
x20986:	db "Assertion failed: ", 34, "%s", 34, " in file %s at line %i", 10, 0	; 46: 65 115 115 101 114 116 105 111 110 32 102 97 105 108 101 100 58 32 34 37 115 34 32 105 110 32 102 105 108 101 32 37 115 32 97 116 32 108 105 110 101 32 37 105 10 0

@10937$string_outFilePtr20213D20NULL#:
x21032:	db "outFilePtr != NULL", 0	; 19: 111 117 116 70 105 108 101 80 116 114 32 33 61 32 78 85 76 76 0

@10938$string_C3A5CUsers5CStefa5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#:
x21051:	db "C:\Users\Stefa\Documents\vagrant\homestead\code\code\FileTest.c", 0	; 64: 67 58 92 85 115 101 114 115 92 83 116 101 102 97 92 68 111 99 117 109 101 110 116 115 92 118 97 103 114 97 110 116 92 104 111 109 101 115 116 101 97 100 92 99 111 100 101 92 99 111 100 101 92 70 105 108 101 84 101 115 116 46 99 0

@10973$string_TestX2Ebin#:
x21115:	db "TestX.bin", 0	; 10: 84 101 115 116 88 46 98 105 110 0

@10974$string_r#:
x21125:	db "r", 0	; 2: 114 0

@10984$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#:
x21127:	db "Assertion failed: ", 34, "%s", 34, " in file %s at line %i", 10, 0	; 46: 65 115 115 101 114 116 105 111 110 32 102 97 105 108 101 100 58 32 34 37 115 34 32 105 110 32 102 105 108 101 32 37 115 32 97 116 32 108 105 110 101 32 37 105 10 0

@10985$string_inFilePtr20213D20NULL#:
x21173:	db "inFilePtr != NULL", 0	; 18: 105 110 70 105 108 101 80 116 114 32 33 61 32 78 85 76 76 0

@10986$string_C3A5CUsers5CStefa5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#:
x21191:	db "C:\Users\Stefa\Documents\vagrant\homestead\code\code\FileTest.c", 0	; 64: 67 58 92 85 115 101 114 115 92 83 116 101 102 97 92 68 111 99 117 109 101 110 116 115 92 118 97 103 114 97 110 116 92 104 111 109 101 115 116 101 97 100 92 99 111 100 101 92 99 111 100 101 92 70 105 108 101 84 101 115 116 46 99 0

@10999$string_size13A2025i0A#:
x21255:	db "size1: %i", 10, 0	; 11: 115 105 122 101 49 58 32 37 105 10 0

@11016$string_index13A2025i3A20value2025f0A#:
x21266:	db "index1: %i: value %f", 10, 0	; 22: 105 110 100 101 120 49 58 32 37 105 58 32 118 97 108 117 101 32 37 102 10 0

@11018$string_0A#:
x21288:	db 10, 0	; 2: 10 0

@11021$string_TestY2Ebin#:
x21290:	db "TestY.bin", 0	; 10: 84 101 115 116 89 46 98 105 110 0

@11022$string_w#:
x21300:	db "w", 0	; 2: 119 0

@11030$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#:
x21302:	db "Assertion failed: ", 34, "%s", 34, " in file %s at line %i", 10, 0	; 46: 65 115 115 101 114 116 105 111 110 32 102 97 105 108 101 100 58 32 34 37 115 34 32 105 110 32 102 105 108 101 32 37 115 32 97 116 32 108 105 110 101 32 37 105 10 0

@11031$string_outFilePtr20213D20NULL#:
x21348:	db "outFilePtr != NULL", 0	; 19: 111 117 116 70 105 108 101 80 116 114 32 33 61 32 78 85 76 76 0

@11032$string_C3A5CUsers5CStefa5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#:
x21367:	db "C:\Users\Stefa\Documents\vagrant\homestead\code\code\FileTest.c", 0	; 64: 67 58 92 85 115 101 114 115 92 83 116 101 102 97 92 68 111 99 117 109 101 110 116 115 92 118 97 103 114 97 110 116 92 104 111 109 101 115 116 101 97 100 92 99 111 100 101 92 99 111 100 101 92 70 105 108 101 84 101 115 116 46 99 0

@11059$string_TestY2Ebin#:
x21431:	db "TestY.bin", 0	; 10: 84 101 115 116 89 46 98 105 110 0

@11060$string_r#:
x21441:	db "r", 0	; 2: 114 0

@11068$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#:
x21443:	db "Assertion failed: ", 34, "%s", 34, " in file %s at line %i", 10, 0	; 46: 65 115 115 101 114 116 105 111 110 32 102 97 105 108 101 100 58 32 34 37 115 34 32 105 110 32 102 105 108 101 32 37 115 32 97 116 32 108 105 110 101 32 37 105 10 0

@11069$string_inFilePtr20213D20NULL#:
x21489:	db "inFilePtr != NULL", 0	; 18: 105 110 70 105 108 101 80 116 114 32 33 61 32 78 85 76 76 0

@11070$string_C3A5CUsers5CStefa5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#:
x21507:	db "C:\Users\Stefa\Documents\vagrant\homestead\code\code\FileTest.c", 0	; 64: 67 58 92 85 115 101 114 115 92 83 116 101 102 97 92 68 111 99 117 109 101 110 116 115 92 118 97 103 114 97 110 116 92 104 111 109 101 115 116 101 97 100 92 99 111 100 101 92 99 111 100 101 92 70 105 108 101 84 101 115 116 46 99 0

@11090$string_index23A2025i3A20value2025f0A#:
x21571:	db "index2: %i: value %f", 10, 0	; 22: 105 110 100 101 120 50 58 32 37 105 58 32 118 97 108 117 101 32 37 102 10 0

@11096$string_0A#:
x21593:	db 10, 0	; 2: 10 0

@11099$string_TestY2Ebin#:
x21595:	db "TestY.bin", 0	; 10: 84 101 115 116 89 46 98 105 110 0

@11100$string_r#:
x21605:	db "r", 0	; 2: 114 0

@11108$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#:
x21607:	db "Assertion failed: ", 34, "%s", 34, " in file %s at line %i", 10, 0	; 46: 65 115 115 101 114 116 105 111 110 32 102 97 105 108 101 100 58 32 34 37 115 34 32 105 110 32 102 105 108 101 32 37 115 32 97 116 32 108 105 110 101 32 37 105 10 0

@11109$string_inFilePtr20213D20NULL#:
x21653:	db "inFilePtr != NULL", 0	; 18: 105 110 70 105 108 101 80 116 114 32 33 61 32 78 85 76 76 0

@11110$string_C3A5CUsers5CStefa5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#:
x21671:	db "C:\Users\Stefa\Documents\vagrant\homestead\code\code\FileTest.c", 0	; 64: 67 58 92 85 115 101 114 115 92 83 116 101 102 97 92 68 111 99 117 109 101 110 116 115 92 118 97 103 114 97 110 116 92 104 111 109 101 115 116 101 97 100 92 99 111 100 101 92 99 111 100 101 92 70 105 108 101 84 101 115 116 46 99 0

@11131$string_index33A2025i3A20value2025f0A#:
x21735:	db "index3: %i: value %f", 10, 0	; 22: 105 110 100 101 120 51 58 32 37 105 58 32 118 97 108 117 101 32 37 102 10 0

@11137$string_0A#:
x21757:	db 10, 0	; 2: 10 0

@11140$string_TestX2Ebin#:
x21759:	db "TestX.bin", 0	; 10: 84 101 115 116 88 46 98 105 110 0

@11141$string_r#:
x21769:	db "r", 0	; 2: 114 0

@11150$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#:
x21771:	db "Assertion failed: ", 34, "%s", 34, " in file %s at line %i", 10, 0	; 46: 65 115 115 101 114 116 105 111 110 32 102 97 105 108 101 100 58 32 34 37 115 34 32 105 110 32 102 105 108 101 32 37 115 32 97 116 32 108 105 110 101 32 37 105 10 0

@11151$string_inFilePtr20213D20NULL#:
x21817:	db "inFilePtr != NULL", 0	; 18: 105 110 70 105 108 101 80 116 114 32 33 61 32 78 85 76 76 0

@11152$string_C3A5CUsers5CStefa5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#:
x21835:	db "C:\Users\Stefa\Documents\vagrant\homestead\code\code\FileTest.c", 0	; 64: 67 58 92 85 115 101 114 115 92 83 116 101 102 97 92 68 111 99 117 109 101 110 116 115 92 118 97 103 114 97 110 116 92 104 111 109 101 115 116 101 97 100 92 99 111 100 101 92 99 111 100 101 92 70 105 108 101 84 101 115 116 46 99 0

@11165$string_size43A2025i20total2025i0A#:
x21899:	db "size4: %i total %i", 10, 0	; 20: 115 105 122 101 52 58 32 37 105 32 116 111 116 97 108 32 37 105 10 0

@11167$int2$8#:
x21919:	dw 8	; 2: 8 0

@11171$int2$8#:
x21921:	dw 8	; 2: 8 0

@11178$int2$8#:
x21923:	dw 8	; 2: 8 0

@11186$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#:
x21925:	db "Assertion failed: ", 34, "%s", 34, " in file %s at line %i", 10, 0	; 46: 65 115 115 101 114 116 105 111 110 32 102 97 105 108 101 100 58 32 34 37 115 34 32 105 110 32 102 105 108 101 32 37 115 32 97 116 32 108 105 110 101 32 37 105 10 0

@11187$string_p20213D20NULL#:
x21971:	db "p != NULL", 0	; 10: 112 32 33 61 32 78 85 76 76 0

@11188$string_C3A5CUsers5CStefa5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#:
x21981:	db "C:\Users\Stefa\Documents\vagrant\homestead\code\code\FileTest.c", 0	; 64: 67 58 92 85 115 101 114 115 92 83 116 101 102 97 92 68 111 99 117 109 101 110 116 115 92 118 97 103 114 97 110 116 92 104 111 109 101 115 116 101 97 100 92 99 111 100 101 92 99 111 100 101 92 70 105 108 101 84 101 115 116 46 99 0

@11193$string_malloc43A2025u2025u2025u0A#:
x22045:	db "malloc4: %u %u %u", 10, 0	; 19: 109 97 108 108 111 99 52 58 32 37 117 32 37 117 32 37 117 10 0

@11205$string_index43A2025i3A20value2025f0A#:
x22064:	db "index4: %i: value %f", 10, 0	; 22: 105 110 100 101 120 52 58 32 37 105 58 32 118 97 108 117 101 32 37 102 10 0

@11207$int2$8#:
x22086:	dw 8	; 2: 8 0

@11211$string_0A#:
x22088:	db 10, 0	; 2: 10 0

@11392$string_Block2Ebin#:
x22090:	db "Block.bin", 0	; 10: 66 108 111 99 107 46 98 105 110 0

@11393$string_w#:
x22100:	db "w", 0	; 2: 119 0

@11396$string_Block2Ebin#:
x22102:	db "Block.bin", 0	; 10: 66 108 111 99 107 46 98 105 110 0

@11397$string_r#:
x22112:	db "r", 0	; 2: 114 0

@11405$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#:
x22114:	db "Assertion failed: ", 34, "%s", 34, " in file %s at line %i", 10, 0	; 46: 65 115 115 101 114 116 105 111 110 32 102 97 105 108 101 100 58 32 34 37 115 34 32 105 110 32 102 105 108 101 32 37 115 32 97 116 32 108 105 110 101 32 37 105 10 0

@11406$string_outFilePtr20213D20NULL#:
x22160:	db "outFilePtr != NULL", 0	; 19: 111 117 116 70 105 108 101 80 116 114 32 33 61 32 78 85 76 76 0

@11407$string_C3A5CUsers5CStefa5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#:
x22179:	db "C:\Users\Stefa\Documents\vagrant\homestead\code\code\FileTest.c", 0	; 64: 67 58 92 85 115 101 114 115 92 83 116 101 102 97 92 68 111 99 117 109 101 110 116 115 92 118 97 103 114 97 110 116 92 104 111 109 101 115 116 101 97 100 92 99 111 100 101 92 99 111 100 101 92 70 105 108 101 84 101 115 116 46 99 0

@11417$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#:
x22243:	db "Assertion failed: ", 34, "%s", 34, " in file %s at line %i", 10, 0	; 46: 65 115 115 101 114 116 105 111 110 32 102 97 105 108 101 100 58 32 34 37 115 34 32 105 110 32 102 105 108 101 32 37 115 32 97 116 32 108 105 110 101 32 37 105 10 0

@11418$string_inFilePtr20213D20NULL#:
x22289:	db "inFilePtr != NULL", 0	; 18: 105 110 70 105 108 101 80 116 114 32 33 61 32 78 85 76 76 0

@11419$string_C3A5CUsers5CStefa5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#:
x22307:	db "C:\Users\Stefa\Documents\vagrant\homestead\code\code\FileTest.c", 0	; 64: 67 58 92 85 115 101 114 115 92 83 116 101 102 97 92 68 111 99 117 109 101 110 116 115 92 118 97 103 114 97 110 116 92 104 111 109 101 115 116 101 97 100 92 99 111 100 101 92 99 111 100 101 92 70 105 108 101 84 101 115 116 46 99 0

@11444$string_Name20203A2025s0A#:
x22371:	db "Name  : %s", 10, 0	; 12: 78 97 109 101 32 32 58 32 37 115 10 0

@11447$string_Phone203A2025d0A#:
x22383:	db "Phone : %d", 10, 0	; 12: 80 104 111 110 101 32 58 32 37 100 10 0

@11451$string_outx2Etxt#:
x22395:	db "outx.txt", 0	; 9: 111 117 116 120 46 116 120 116 0

@11452$string_r#:
x22404:	db "r", 0	; 2: 114 0

@11460$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#:
x22406:	db "Assertion failed: ", 34, "%s", 34, " in file %s at line %i", 10, 0	; 46: 65 115 115 101 114 116 105 111 110 32 102 97 105 108 101 100 58 32 34 37 115 34 32 105 110 32 102 105 108 101 32 37 115 32 97 116 32 108 105 110 101 32 37 105 10 0

@11461$string_inFilePtr20213D20NULL#:
x22452:	db "inFilePtr != NULL", 0	; 18: 105 110 70 105 108 101 80 116 114 32 33 61 32 78 85 76 76 0

@11462$string_C3A5CUsers5CStefa5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#:
x22470:	db "C:\Users\Stefa\Documents\vagrant\homestead\code\code\FileTest.c", 0	; 64: 67 58 92 85 115 101 114 115 92 83 116 101 102 97 92 68 111 99 117 109 101 110 116 115 92 118 97 103 114 97 110 116 92 104 111 109 101 115 116 101 97 100 92 99 111 100 101 92 99 111 100 101 92 70 105 108 101 84 101 115 116 46 99 0

@11487$string_fileexists2022X223A2025s0A#:
x22534:	db "fileexists ", 34, "X", 34, ": %s", 10, 0	; 20: 102 105 108 101 101 120 105 115 116 115 32 34 88 34 58 32 37 115 10 0

@11488$string_X#:
x22554:	db "X", 0	; 2: 88 0

@11490$string_Yes#:
x22556:	db "Yes", 0	; 4: 89 101 115 0

@11491$string_No#:
x22560:	db "No", 0	; 3: 78 111 0

@11501$string_fileexists2022Y223A2025s0A#:
x22563:	db "fileexists ", 34, "Y", 34, ": %s", 10, 0	; 20: 102 105 108 101 101 120 105 115 116 115 32 34 89 34 58 32 37 115 10 0

@11502$string_Y#:
x22583:	db "Y", 0	; 2: 89 0

@11504$string_Yes#:
x22585:	db "Yes", 0	; 4: 89 101 115 0

@11505$string_No#:
x22589:	db "No", 0	; 3: 78 111 0

@11515$string_fileexists2022Main2Easm223A2025s0A#:
x22592:	db "fileexists ", 34, "Main.asm", 34, ": %s", 10, 0	; 27: 102 105 108 101 101 120 105 115 116 115 32 34 77 97 105 110 46 97 115 109 34 58 32 37 115 10 0

@11516$string_Main2Easm#:
x22619:	db "Main.asm", 0	; 9: 77 97 105 110 46 97 115 109 0

@11518$string_Yes#:
x22628:	db "Yes", 0	; 4: 89 101 115 0

@11519$string_No#:
x22632:	db "No", 0	; 3: 78 111 0

@11529$string_fileexists2022MainX2Easm223A2025s0A#:
x22635:	db "fileexists ", 34, "MainX.asm", 34, ": %s", 10, 0	; 28: 102 105 108 101 101 120 105 115 116 115 32 34 77 97 105 110 88 46 97 115 109 34 58 32 37 115 10 0

@11530$string_MainX2Easm#:
x22663:	db "MainX.asm", 0	; 10: 77 97 105 110 88 46 97 115 109 0

@11532$string_Yes#:
x22673:	db "Yes", 0	; 4: 89 101 115 0

@11533$string_No#:
x22677:	db "No", 0	; 3: 78 111 0

@11543$string_fileexists2022Main2Ec223A2025s0A#:
x22680:	db "fileexists ", 34, "Main.c", 34, ": %s", 10, 0	; 25: 102 105 108 101 101 120 105 115 116 115 32 34 77 97 105 110 46 99 34 58 32 37 115 10 0

@11544$string_Main2Ec#:
x22705:	db "Main.c", 0	; 7: 77 97 105 110 46 99 0

@11546$string_Yes#:
x22712:	db "Yes", 0	; 4: 89 101 115 0

@11547$string_No#:
x22716:	db "No", 0	; 3: 78 111 0

@11557$string_fileexists2022MainX2Ec223A2025s0A#:
x22719:	db "fileexists ", 34, "MainX.c", 34, ": %s", 10, 0	; 26: 102 105 108 101 101 120 105 115 116 115 32 34 77 97 105 110 88 46 99 34 58 32 37 115 10 0

@11558$string_MainX2Ec#:
x22745:	db "MainX.c", 0	; 8: 77 97 105 110 88 46 99 0

@11560$string_Yes#:
x22753:	db "Yes", 0	; 4: 89 101 115 0

@11561$string_No#:
x22757:	db "No", 0	; 3: 78 111 0

@11571$string_fileexists2022File2Ec223A2025s0A#:
x22760:	db "fileexists ", 34, "File.c", 34, ": %s", 10, 0	; 25: 102 105 108 101 101 120 105 115 116 115 32 34 70 105 108 101 46 99 34 58 32 37 115 10 0

@11572$string_File2Ec#:
x22785:	db "File.c", 0	; 7: 70 105 108 101 46 99 0

@11574$string_Yes#:
x22792:	db "Yes", 0	; 4: 89 101 115 0

@11575$string_No#:
x22796:	db "No", 0	; 3: 78 111 0

@11585$string_fileexists2022File2Ex223A2025s0A#:
x22799:	db "fileexists ", 34, "File.x", 34, ": %s", 10, 0	; 25: 102 105 108 101 101 120 105 115 116 115 32 34 70 105 108 101 46 120 34 58 32 37 115 10 0

@11586$string_File2Ex#:
x22824:	db "File.x", 0	; 7: 70 105 108 101 46 120 0

@11588$string_Yes#:
x22831:	db "Yes", 0	; 4: 89 101 115 0

@11589$string_No#:
x22835:	db "No", 0	; 3: 78 111 0

@11599$string_fileexists2022File2Eh223A2025s0A#:
x22838:	db "fileexists ", 34, "File.h", 34, ": %s", 10, 0	; 25: 102 105 108 101 101 120 105 115 116 115 32 34 70 105 108 101 46 104 34 58 32 37 115 10 0

@11600$string_File2Eh#:
x22863:	db "File.h", 0	; 7: 70 105 108 101 46 104 0

@11602$string_Yes#:
x22870:	db "Yes", 0	; 4: 89 101 115 0

@11603$string_No#:
x22874:	db "No", 0	; 3: 78 111 0

@11613$string_fileexists2022File2Ey223A2025s0A#:
x22877:	db "fileexists ", 34, "File.y", 34, ": %s", 10, 0	; 25: 102 105 108 101 101 120 105 115 116 115 32 34 70 105 108 101 46 121 34 58 32 37 115 10 0

@11614$string_File2Ey#:
x22902:	db "File.y", 0	; 7: 70 105 108 101 46 121 0

@11616$string_Yes#:
x22909:	db "Yes", 0	; 4: 89 101 115 0

@11617$string_No#:
x22913:	db "No", 0	; 3: 78 111 0

@11627$string_fileexists2022File2Ep223A2025s0A#:
x22916:	db "fileexists ", 34, "File.p", 34, ": %s", 10, 0	; 25: 102 105 108 101 101 120 105 115 116 115 32 34 70 105 108 101 46 112 34 58 32 37 115 10 0

@11628$string_File2Ep#:
x22941:	db "File.p", 0	; 7: 70 105 108 101 46 112 0

@11630$string_Yes#:
x22948:	db "Yes", 0	; 4: 89 101 115 0

@11631$string_No#:
x22952:	db "No", 0	; 3: 78 111 0

@11641$string_fileexists2022File2Ez223A2025s0A#:
x22955:	db "fileexists ", 34, "File.z", 34, ": %s", 10, 0	; 25: 102 105 108 101 101 120 105 115 116 115 32 34 70 105 108 101 46 122 34 58 32 37 115 10 0

@11642$string_File2Ez#:
x22980:	db "File.z", 0	; 7: 70 105 108 101 46 122 0

@11644$string_Yes#:
x22987:	db "Yes", 0	; 4: 89 101 115 0

@11645$string_No#:
x22991:	db "No", 0	; 3: 78 111 0

fopen:	; Assign index 0
x22994:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

fopen$1:	; SignedGreaterThanEqual 21 index 20
x22999:	cmp word [bp + 10], 20	; 4: 131 126 10 20
x23003:	jge fopen$21	; 2: 125 78

fopen$2:	; SignedMultiply £temporary706 index 29
x23005:	mov ax, [bp + 10]	; 3: 139 70 10
x23008:	xor dx, dx	; 2: 49 210
x23010:	imul word [@1725$int2$29#]	; 4: 247 46 57 90

fopen$3:	; BinaryAdd £temporary707 g_fileArray £temporary706
x23014:	mov si, g_fileArray	; 3: 190 102 13
x23017:	add si, ax	; 2: 1 198

fopen$4:	; Deref £temporary705 -> £temporary707 £temporary707 0

fopen$5:	; NotEqual 19 £temporary705.open$0 -> £temporary707 0
x23019:	cmp word [si], 0	; 3: 131 60 0
x23022:	jne fopen$19	; 2: 117 54

fopen$6:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

fopen$7:	; Parameter 12 name 6
x23024:	mov ax, [bp + 6]	; 3: 139 70 6
x23027:	mov [bp + 18], ax	; 3: 137 70 18

fopen$8:	; Parameter 12 mode 8
x23030:	mov ax, [bp + 8]	; 3: 139 70 8
x23033:	mov [bp + 20], ax	; 3: 137 70 20

fopen$9:	; SignedMultiply £temporary711 index 29
x23036:	mov ax, [bp + 10]	; 3: 139 70 10
x23039:	xor dx, dx	; 2: 49 210
x23041:	imul word [@1733$int2$29#]	; 4: 247 46 59 90

fopen$10:	; BinaryAdd £temporary712 g_fileArray £temporary711
x23045:	mov si, g_fileArray	; 3: 190 102 13
x23048:	add si, ax	; 2: 1 198

fopen$11:	; Deref £temporary710 -> £temporary712 £temporary712 0

fopen$12:	; address £temporary713 £temporary710 -> £temporary712

fopen$13:	; Parameter 12 £temporary713 10
x23050:	mov [bp + 22], si	; 3: 137 118 22

fopen$14:	; Call 12 freopen 0
x23053:	mov word [bp + 12], fopen$15	; 5: 199 70 12 27 90
x23058:	mov [bp + 14], bp	; 3: 137 110 14
x23061:	add bp, 12	; 3: 131 197 12
x23064:	nop	; 1: 144
x23065:	jmp freopen	; 2: 235 34

fopen$15:	; PostCall 12

fopen$16:	; GetReturnValue £temporary714

fopen$17:	; SetReturnValue £temporary714

fopen$18:	; Return £temporary714
x23067:	mov ax, [bp]	; 3: 139 70 0
x23070:	mov di, [bp + 4]	; 3: 139 126 4
x23073:	mov bp, [bp + 2]	; 3: 139 110 2
x23076:	jmp ax	; 2: 255 224

fopen$19:	; Increment index
x23078:	inc word [bp + 10]	; 3: 255 70 10

fopen$20:	; Goto 1
x23081:	jmp fopen$1	; 2: 235 172

fopen$21:	; SetReturnValue 0
x23083:	mov bx, 0	; 3: 187 0 0

fopen$22:	; Return 0
x23086:	mov ax, [bp]	; 3: 139 70 0
x23089:	mov di, [bp + 4]	; 3: 139 126 4
x23092:	mov bp, [bp + 2]	; 3: 139 110 2
x23095:	jmp ax	; 2: 255 224

fopen$23:	; FunctionEnd fopen

@1725$int2$29#:
x23097:	dw 29	; 2: 29 0

@1733$int2$29#:
x23099:	dw 29	; 2: 29 0

freopen:	; Assign handle -1
x23101:	mov word [bp + 12], -1	; 5: 199 70 12 255 255

freopen$1:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

freopen$2:	; Parameter 14 mode 6
x23106:	mov ax, [bp + 8]	; 3: 139 70 8
x23109:	mov [bp + 20], ax	; 3: 137 70 20

freopen$3:	; Parameter 14 string_r# 8
x23112:	mov word [bp + 22], @1748$string_r#	; 5: 199 70 22 225 92

freopen$4:	; Call 14 strcmp 0
x23117:	mov word [bp + 14], freopen$5	; 5: 199 70 14 91 90
x23122:	mov [bp + 16], bp	; 3: 137 110 16
x23125:	add bp, 14	; 3: 131 197 14
x23128:	jmp strcmp	; 3: 233 159 2

freopen$5:	; PostCall 14

freopen$6:	; GetReturnValue £temporary718

freopen$7:	; NotEqual 16 £temporary718 0
x23131:	cmp bx, 0	; 3: 131 251 0
x23134:	jne freopen$16	; 2: 117 30

freopen$8:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

freopen$9:	; Parameter 14 name 6
x23136:	mov ax, [bp + 6]	; 3: 139 70 6
x23139:	mov [bp + 20], ax	; 3: 137 70 20

freopen$10:	; Parameter 14 64 8
x23142:	mov byte [bp + 22], 64	; 4: 198 70 22 64

freopen$11:	; Call 14 fileopen 0
x23146:	mov word [bp + 14], freopen$12	; 5: 199 70 14 120 90
x23151:	mov [bp + 16], bp	; 3: 137 110 16
x23154:	add bp, 14	; 3: 131 197 14
x23157:	jmp @1702$fileopen	; 3: 233 240 2

freopen$12:	; PostCall 14

freopen$13:	; GetReturnValue £temporary720

freopen$14:	; Assign handle £temporary720
x23160:	mov [bp + 12], bx	; 3: 137 94 12

freopen$15:	; Goto 138
x23163:	jmp freopen$138	; 3: 233 252 1

freopen$16:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

freopen$17:	; Parameter 14 mode 6
x23166:	mov ax, [bp + 8]	; 3: 139 70 8
x23169:	mov [bp + 20], ax	; 3: 137 70 20

freopen$18:	; Parameter 14 string_w# 8
x23172:	mov word [bp + 22], @1757$string_w#	; 5: 199 70 22 227 92

freopen$19:	; Call 14 strcmp 0
x23177:	mov word [bp + 14], freopen$20	; 5: 199 70 14 151 90
x23182:	mov [bp + 16], bp	; 3: 137 110 16
x23185:	add bp, 14	; 3: 131 197 14
x23188:	jmp strcmp	; 3: 233 99 2

freopen$20:	; PostCall 14

freopen$21:	; GetReturnValue £temporary721

freopen$22:	; NotEqual 30 £temporary721 0
x23191:	cmp bx, 0	; 3: 131 251 0
x23194:	jne freopen$30	; 2: 117 26

freopen$23:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

freopen$24:	; Parameter 14 name 6
x23196:	mov ax, [bp + 6]	; 3: 139 70 6
x23199:	mov [bp + 20], ax	; 3: 137 70 20

freopen$25:	; Call 14 filecreate 0
x23202:	mov word [bp + 14], freopen$26	; 5: 199 70 14 176 90
x23207:	mov [bp + 16], bp	; 3: 137 110 16
x23210:	add bp, 14	; 3: 131 197 14
x23213:	jmp filecreate	; 3: 233 229 2

freopen$26:	; PostCall 14

freopen$27:	; GetReturnValue £temporary723

freopen$28:	; Assign handle £temporary723
x23216:	mov [bp + 12], bx	; 3: 137 94 12

freopen$29:	; Goto 138
x23219:	jmp freopen$138	; 3: 233 196 1

freopen$30:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

freopen$31:	; Parameter 14 mode 6
x23222:	mov ax, [bp + 8]	; 3: 139 70 8
x23225:	mov [bp + 20], ax	; 3: 137 70 20

freopen$32:	; Parameter 14 string_a# 8
x23228:	mov word [bp + 22], @1763$string_a#	; 5: 199 70 22 229 92

freopen$33:	; Call 14 strcmp 0
x23233:	mov word [bp + 14], freopen$34	; 5: 199 70 14 207 90
x23238:	mov [bp + 16], bp	; 3: 137 110 16
x23241:	add bp, 14	; 3: 131 197 14
x23244:	jmp strcmp	; 3: 233 43 2

freopen$34:	; PostCall 14

freopen$35:	; GetReturnValue £temporary724

freopen$36:	; NotEqual 59 £temporary724 0
x23247:	cmp bx, 0	; 3: 131 251 0
x23250:	jne freopen$59	; 2: 117 92

freopen$37:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

freopen$38:	; Parameter 14 name 6
x23252:	mov ax, [bp + 6]	; 3: 139 70 6
x23255:	mov [bp + 20], ax	; 3: 137 70 20

freopen$39:	; Parameter 14 65 8
x23258:	mov byte [bp + 22], 65	; 4: 198 70 22 65

freopen$40:	; Call 14 fileopen 0
x23262:	mov word [bp + 14], freopen$41	; 5: 199 70 14 236 90
x23267:	mov [bp + 16], bp	; 3: 137 110 16
x23270:	add bp, 14	; 3: 131 197 14
x23273:	jmp @1702$fileopen	; 3: 233 124 2

freopen$41:	; PostCall 14

freopen$42:	; GetReturnValue £temporary726

freopen$43:	; Assign handle £temporary726
x23276:	mov [bp + 12], bx	; 3: 137 94 12

freopen$44:	; Equal 52 handle -1
x23279:	cmp word [bp + 12], -1	; 4: 131 126 12 255
x23283:	je freopen$52	; 2: 116 33

freopen$45:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

freopen$46:	; Parameter 14 stream 6
x23285:	mov ax, [bp + 10]	; 3: 139 70 10
x23288:	mov [bp + 20], ax	; 3: 137 70 20

freopen$47:	; Parameter 14 0 8
x23291:	mov word [bp + 22], 0	; 5: 199 70 22 0 0

freopen$48:	; Parameter 14 2 10
x23296:	mov word [bp + 24], 2	; 5: 199 70 24 2 0

freopen$49:	; Call 14 fseek 0
x23301:	mov word [bp + 14], freopen$50	; 5: 199 70 14 19 91
x23306:	mov [bp + 16], bp	; 3: 137 110 16
x23309:	add bp, 14	; 3: 131 197 14
x23312:	jmp fseek	; 3: 233 179 2

freopen$50:	; PostCall 14

freopen$51:	; Goto 138
x23315:	jmp freopen$138	; 3: 233 100 1

freopen$52:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

freopen$53:	; Parameter 14 name 6
x23318:	mov ax, [bp + 6]	; 3: 139 70 6
x23321:	mov [bp + 20], ax	; 3: 137 70 20

freopen$54:	; Call 14 filecreate 0
x23324:	mov word [bp + 14], freopen$55	; 5: 199 70 14 42 91
x23329:	mov [bp + 16], bp	; 3: 137 110 16
x23332:	add bp, 14	; 3: 131 197 14
x23335:	jmp filecreate	; 3: 233 107 2

freopen$55:	; PostCall 14

freopen$56:	; GetReturnValue £temporary729

freopen$57:	; Assign handle £temporary729
x23338:	mov [bp + 12], bx	; 3: 137 94 12

freopen$58:	; Goto 138
x23341:	jmp freopen$138	; 3: 233 74 1

freopen$59:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

freopen$60:	; Parameter 14 mode 6
x23344:	mov ax, [bp + 8]	; 3: 139 70 8
x23347:	mov [bp + 20], ax	; 3: 137 70 20

freopen$61:	; Parameter 14 string_r2B# 8
x23350:	mov word [bp + 22], @1783$string_r2B#	; 5: 199 70 22 231 92

freopen$62:	; Call 14 strcmp 0
x23355:	mov word [bp + 14], freopen$63	; 5: 199 70 14 73 91
x23360:	mov [bp + 16], bp	; 3: 137 110 16
x23363:	add bp, 14	; 3: 131 197 14
x23366:	jmp strcmp	; 3: 233 177 1

freopen$63:	; PostCall 14

freopen$64:	; GetReturnValue £temporary730

freopen$65:	; NotEqual 82 £temporary730 0
x23369:	cmp bx, 0	; 3: 131 251 0
x23372:	jne freopen$82	; 2: 117 72

freopen$66:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

freopen$67:	; Parameter 14 string_r2B10A# 6
x23374:	mov word [bp + 20], @1788$string_r2B10A#	; 5: 199 70 20 234 92

freopen$68:	; Call 14 printf 0
x23379:	mov word [bp + 14], freopen$69	; 5: 199 70 14 99 91
x23384:	mov [bp + 16], bp	; 3: 137 110 16
x23387:	add bp, 14	; 3: 131 197 14
x23390:	mov di, bp	; 2: 137 239
x23392:	jmp printf	; 3: 233 161 177

freopen$69:	; PostCall 14

freopen$70:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

freopen$71:	; Parameter 14 name 6
x23395:	mov ax, [bp + 6]	; 3: 139 70 6
x23398:	mov [bp + 20], ax	; 3: 137 70 20

freopen$72:	; Parameter 14 66 8
x23401:	mov byte [bp + 22], 66	; 4: 198 70 22 66

freopen$73:	; Call 14 fileopen 0
x23405:	mov word [bp + 14], freopen$74	; 5: 199 70 14 123 91
x23410:	mov [bp + 16], bp	; 3: 137 110 16
x23413:	add bp, 14	; 3: 131 197 14
x23416:	jmp @1702$fileopen	; 3: 233 237 1

freopen$74:	; PostCall 14

freopen$75:	; GetReturnValue £temporary733

freopen$76:	; Assign handle £temporary733
x23419:	mov [bp + 12], bx	; 3: 137 94 12

freopen$77:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

freopen$78:	; Parameter 14 string_r2B20A# 6
x23422:	mov word [bp + 20], @1794$string_r2B20A#	; 5: 199 70 20 239 92

freopen$79:	; Call 14 printf 0
x23427:	mov word [bp + 14], freopen$80	; 5: 199 70 14 147 91
x23432:	mov [bp + 16], bp	; 3: 137 110 16
x23435:	add bp, 14	; 3: 131 197 14
x23438:	mov di, bp	; 2: 137 239
x23440:	jmp printf	; 3: 233 113 177

freopen$80:	; PostCall 14

freopen$81:	; Goto 138
x23443:	jmp freopen$138	; 3: 233 228 0

freopen$82:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

freopen$83:	; Parameter 14 mode 6
x23446:	mov ax, [bp + 8]	; 3: 139 70 8
x23449:	mov [bp + 20], ax	; 3: 137 70 20

freopen$84:	; Parameter 14 string_w2B# 8
x23452:	mov word [bp + 22], @1796$string_w2B#	; 5: 199 70 22 244 92

freopen$85:	; Call 14 strcmp 0
x23457:	mov word [bp + 14], freopen$86	; 5: 199 70 14 175 91
x23462:	mov [bp + 16], bp	; 3: 137 110 16
x23465:	add bp, 14	; 3: 131 197 14
x23468:	jmp strcmp	; 3: 233 75 1

freopen$86:	; PostCall 14

freopen$87:	; GetReturnValue £temporary735

freopen$88:	; NotEqual 110 £temporary735 0
x23471:	cmp bx, 0	; 3: 131 251 0
x23474:	jne freopen$110	; 2: 117 80

freopen$89:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

freopen$90:	; Parameter 14 name 6
x23476:	mov ax, [bp + 6]	; 3: 139 70 6
x23479:	mov [bp + 20], ax	; 3: 137 70 20

freopen$91:	; Call 14 fileexists 0
x23482:	mov word [bp + 14], freopen$92	; 5: 199 70 14 200 91
x23487:	mov [bp + 16], bp	; 3: 137 110 16
x23490:	add bp, 14	; 3: 131 197 14
x23493:	jmp fileexists	; 3: 233 73 2

freopen$92:	; PostCall 14

freopen$93:	; GetReturnValue £temporary737

freopen$94:	; Equal 103 £temporary737 0
x23496:	cmp bx, 0	; 3: 131 251 0
x23499:	je freopen$103	; 2: 116 30

freopen$95:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

freopen$96:	; Parameter 14 name 6
x23501:	mov ax, [bp + 6]	; 3: 139 70 6
x23504:	mov [bp + 20], ax	; 3: 137 70 20

freopen$97:	; Parameter 14 66 8
x23507:	mov byte [bp + 22], 66	; 4: 198 70 22 66

freopen$98:	; Call 14 fileopen 0
x23511:	mov word [bp + 14], freopen$99	; 5: 199 70 14 229 91
x23516:	mov [bp + 16], bp	; 3: 137 110 16
x23519:	add bp, 14	; 3: 131 197 14
x23522:	jmp @1702$fileopen	; 3: 233 131 1

freopen$99:	; PostCall 14

freopen$100:	; GetReturnValue £temporary738

freopen$101:	; Assign handle £temporary738
x23525:	mov [bp + 12], bx	; 3: 137 94 12

freopen$102:	; Goto 138
x23528:	jmp freopen$138	; 3: 233 143 0

freopen$103:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

freopen$104:	; Parameter 14 name 6
x23531:	mov ax, [bp + 6]	; 3: 139 70 6
x23534:	mov [bp + 20], ax	; 3: 137 70 20

freopen$105:	; Call 14 filecreate 0
x23537:	mov word [bp + 14], freopen$106	; 5: 199 70 14 255 91
x23542:	mov [bp + 16], bp	; 3: 137 110 16
x23545:	add bp, 14	; 3: 131 197 14
x23548:	jmp filecreate	; 3: 233 150 1

freopen$106:	; PostCall 14

freopen$107:	; GetReturnValue £temporary739

freopen$108:	; Assign handle £temporary739
x23551:	mov [bp + 12], bx	; 3: 137 94 12

freopen$109:	; Goto 138
x23554:	jmp freopen$138	; 2: 235 118

freopen$110:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

freopen$111:	; Parameter 14 mode 6
x23556:	mov ax, [bp + 8]	; 3: 139 70 8
x23559:	mov [bp + 20], ax	; 3: 137 70 20

freopen$112:	; Parameter 14 string_a2B# 8
x23562:	mov word [bp + 22], @1809$string_a2B#	; 5: 199 70 22 247 92

freopen$113:	; Call 14 strcmp 0
x23567:	mov word [bp + 14], freopen$114	; 5: 199 70 14 29 92
x23572:	mov [bp + 16], bp	; 3: 137 110 16
x23575:	add bp, 14	; 3: 131 197 14
x23578:	jmp strcmp	; 3: 233 221 0

freopen$114:	; PostCall 14

freopen$115:	; GetReturnValue £temporary741

freopen$116:	; NotEqual 138 £temporary741 0
x23581:	cmp bx, 0	; 3: 131 251 0
x23584:	jne freopen$138	; 2: 117 88

freopen$117:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

freopen$118:	; Parameter 14 name 6
x23586:	mov ax, [bp + 6]	; 3: 139 70 6
x23589:	mov [bp + 20], ax	; 3: 137 70 20

freopen$119:	; Parameter 14 66 8
x23592:	mov byte [bp + 22], 66	; 4: 198 70 22 66

freopen$120:	; Call 14 fileopen 0
x23596:	mov word [bp + 14], freopen$121	; 5: 199 70 14 58 92
x23601:	mov [bp + 16], bp	; 3: 137 110 16
x23604:	add bp, 14	; 3: 131 197 14
x23607:	jmp @1702$fileopen	; 3: 233 46 1

freopen$121:	; PostCall 14

freopen$122:	; GetReturnValue £temporary743

freopen$123:	; Assign handle £temporary743
x23610:	mov [bp + 12], bx	; 3: 137 94 12

freopen$124:	; Equal 132 handle -1
x23613:	cmp word [bp + 12], -1	; 4: 131 126 12 255
x23617:	je freopen$132	; 2: 116 32

freopen$125:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

freopen$126:	; Parameter 14 stream 6
x23619:	mov ax, [bp + 10]	; 3: 139 70 10
x23622:	mov [bp + 20], ax	; 3: 137 70 20

freopen$127:	; Parameter 14 0 8
x23625:	mov word [bp + 22], 0	; 5: 199 70 22 0 0

freopen$128:	; Parameter 14 2 10
x23630:	mov word [bp + 24], 2	; 5: 199 70 24 2 0

freopen$129:	; Call 14 fseek 0
x23635:	mov word [bp + 14], freopen$130	; 5: 199 70 14 97 92
x23640:	mov [bp + 16], bp	; 3: 137 110 16
x23643:	add bp, 14	; 3: 131 197 14
x23646:	jmp fseek	; 3: 233 101 1

freopen$130:	; PostCall 14

freopen$131:	; Goto 138
x23649:	jmp freopen$138	; 2: 235 23

freopen$132:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

freopen$133:	; Parameter 14 name 6
x23651:	mov ax, [bp + 6]	; 3: 139 70 6
x23654:	mov [bp + 20], ax	; 3: 137 70 20

freopen$134:	; Call 14 filecreate 0
x23657:	mov word [bp + 14], freopen$135	; 5: 199 70 14 119 92
x23662:	mov [bp + 16], bp	; 3: 137 110 16
x23665:	add bp, 14	; 3: 131 197 14
x23668:	jmp filecreate	; 3: 233 30 1

freopen$135:	; PostCall 14

freopen$136:	; GetReturnValue £temporary746

freopen$137:	; Assign handle £temporary746
x23671:	mov [bp + 12], bx	; 3: 137 94 12

freopen$138:	; Equal 155 handle -1
x23674:	cmp word [bp + 12], -1	; 4: 131 126 12 255
x23678:	je freopen$155	; 2: 116 76

freopen$139:	; Deref £temporary748 -> stream stream 0
x23680:	mov si, [bp + 10]	; 3: 139 118 10

freopen$140:	; Assign £temporary748 -> stream 1
x23683:	mov word [si], 1	; 4: 199 4 1 0

freopen$141:	; Deref £temporary749 -> stream stream 2
x23687:	mov si, [bp + 10]	; 3: 139 118 10

freopen$142:	; Assign £temporary749 -> stream handle
x23690:	mov ax, [bp + 12]	; 3: 139 70 12
x23693:	mov [si + 2], ax	; 3: 137 68 2

freopen$143:	; Deref £temporary750 -> stream stream 25
x23696:	mov si, [bp + 10]	; 3: 139 118 10

freopen$144:	; Assign £temporary750 -> stream 0
x23699:	mov word [si + 25], 0	; 5: 199 68 25 0 0

freopen$145:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

freopen$146:	; Deref £temporary751 -> stream stream 4
x23704:	mov si, [bp + 10]	; 3: 139 118 10

freopen$147:	; Parameter 14 £temporary751 -> stream 6
x23707:	mov [bp + 20], si	; 3: 137 118 20
x23710:	add word [bp + 20], 4	; 4: 131 70 20 4

freopen$148:	; Parameter 14 name 8
x23714:	mov ax, [bp + 6]	; 3: 139 70 6
x23717:	mov [bp + 22], ax	; 3: 137 70 22

freopen$149:	; Call 14 strcpy 0
x23720:	mov word [bp + 14], freopen$150	; 5: 199 70 14 182 92
x23725:	mov [bp + 16], bp	; 3: 137 110 16
x23728:	add bp, 14	; 3: 131 197 14
x23731:	jmp strcpy	; 3: 233 121 1

freopen$150:	; PostCall 14

freopen$151:	; Deref £temporary753 -> stream stream 27
x23734:	mov si, [bp + 10]	; 3: 139 118 10

freopen$152:	; Assign £temporary753 -> stream 0
x23737:	mov word [si + 27], 0	; 5: 199 68 27 0 0

freopen$153:	; SetReturnValue stream
x23742:	mov bx, [bp + 10]	; 3: 139 94 10

freopen$154:	; Return stream
x23745:	mov ax, [bp]	; 3: 139 70 0
x23748:	mov di, [bp + 4]	; 3: 139 126 4
x23751:	mov bp, [bp + 2]	; 3: 139 110 2
x23754:	jmp ax	; 2: 255 224

freopen$155:	; Deref £temporary754 -> stream stream 0
x23756:	mov si, [bp + 10]	; 3: 139 118 10

freopen$156:	; Assign £temporary754 -> stream 0
x23759:	mov word [si], 0	; 4: 199 4 0 0

freopen$157:	; SetReturnValue 0
x23763:	mov bx, 0	; 3: 187 0 0

freopen$158:	; Return 0
x23766:	mov ax, [bp]	; 3: 139 70 0
x23769:	mov di, [bp + 4]	; 3: 139 126 4
x23772:	mov bp, [bp + 2]	; 3: 139 110 2
x23775:	jmp ax	; 2: 255 224

freopen$159:	; FunctionEnd freopen

@1748$string_r#:
x23777:	db "r", 0	; 2: 114 0

@1757$string_w#:
x23779:	db "w", 0	; 2: 119 0

@1763$string_a#:
x23781:	db "a", 0	; 2: 97 0

@1783$string_r2B#:
x23783:	db "r+", 0	; 3: 114 43 0

@1788$string_r2B10A#:
x23786:	db "r+1", 10, 0	; 5: 114 43 49 10 0

@1794$string_r2B20A#:
x23791:	db "r+2", 10, 0	; 5: 114 43 50 10 0

@1796$string_w2B#:
x23796:	db "w+", 0	; 3: 119 43 0

@1809$string_a2B#:
x23799:	db "a+", 0	; 3: 97 43 0

strcmp:	; Assign index 0
x23802:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

strcmp$1:	; BinaryAdd £temporary3755 left index
x23807:	mov si, [bp + 6]	; 3: 139 118 6
x23810:	add si, [bp + 10]	; 3: 3 118 10

strcmp$2:	; Deref £temporary3754 -> £temporary3755 £temporary3755 0

strcmp$3:	; NotEqual 9 £temporary3754 -> £temporary3755 0
x23813:	cmp byte [si], 0	; 3: 128 60 0
x23816:	jne strcmp$9	; 2: 117 25

strcmp$4:	; BinaryAdd £temporary3758 right index
x23818:	mov si, [bp + 8]	; 3: 139 118 8
x23821:	add si, [bp + 10]	; 3: 3 118 10

strcmp$5:	; Deref £temporary3757 -> £temporary3758 £temporary3758 0

strcmp$6:	; NotEqual 9 £temporary3757 -> £temporary3758 0
x23824:	cmp byte [si], 0	; 3: 128 60 0
x23827:	jne strcmp$9	; 2: 117 14

strcmp$7:	; SetReturnValue 0
x23829:	mov bx, 0	; 3: 187 0 0

strcmp$8:	; Return 0
x23832:	mov ax, [bp]	; 3: 139 70 0
x23835:	mov di, [bp + 4]	; 3: 139 126 4
x23838:	mov bp, [bp + 2]	; 3: 139 110 2
x23841:	jmp ax	; 2: 255 224

strcmp$9:	; BinaryAdd £temporary3762 left index
x23843:	mov si, [bp + 6]	; 3: 139 118 6
x23846:	add si, [bp + 10]	; 3: 3 118 10

strcmp$10:	; Deref £temporary3761 -> £temporary3762 £temporary3762 0

strcmp$11:	; BinaryAdd £temporary3764 right index
x23849:	mov di, [bp + 8]	; 3: 139 126 8
x23852:	add di, [bp + 10]	; 3: 3 126 10

strcmp$12:	; Deref £temporary3763 -> £temporary3764 £temporary3764 0

strcmp$13:	; SignedGreaterThanEqual 16 £temporary3761 -> £temporary3762 £temporary3763 -> £temporary3764
x23855:	mov al, [di]	; 2: 138 5
x23857:	cmp [si], al	; 2: 56 4
x23859:	jge strcmp$16	; 2: 125 14

strcmp$14:	; SetReturnValue -1
x23861:	mov bx, -1	; 3: 187 255 255

strcmp$15:	; Return -1
x23864:	mov ax, [bp]	; 3: 139 70 0
x23867:	mov di, [bp + 4]	; 3: 139 126 4
x23870:	mov bp, [bp + 2]	; 3: 139 110 2
x23873:	jmp ax	; 2: 255 224

strcmp$16:	; BinaryAdd £temporary3767 left index
x23875:	mov si, [bp + 6]	; 3: 139 118 6
x23878:	add si, [bp + 10]	; 3: 3 118 10

strcmp$17:	; Deref £temporary3766 -> £temporary3767 £temporary3767 0

strcmp$18:	; BinaryAdd £temporary3769 right index
x23881:	mov di, [bp + 8]	; 3: 139 126 8
x23884:	add di, [bp + 10]	; 3: 3 126 10

strcmp$19:	; Deref £temporary3768 -> £temporary3769 £temporary3769 0

strcmp$20:	; SignedLessThanEqual 23 £temporary3766 -> £temporary3767 £temporary3768 -> £temporary3769
x23887:	mov al, [di]	; 2: 138 5
x23889:	cmp [si], al	; 2: 56 4
x23891:	jle strcmp$23	; 2: 126 14

strcmp$21:	; SetReturnValue 1
x23893:	mov bx, 1	; 3: 187 1 0

strcmp$22:	; Return 1
x23896:	mov ax, [bp]	; 3: 139 70 0
x23899:	mov di, [bp + 4]	; 3: 139 126 4
x23902:	mov bp, [bp + 2]	; 3: 139 110 2
x23905:	jmp ax	; 2: 255 224

strcmp$23:	; Increment index
x23907:	inc word [bp + 10]	; 3: 255 70 10

strcmp$24:	; Goto 1
x23910:	jmp strcmp$1	; 2: 235 151

strcmp$25:	; FunctionEnd strcmp

@1702$fileopen:	; AssignRegister ah 61
x23912:	mov ah, 61	; 2: 180 61

@1702$fileopen$1:	; AssignRegister al mode
x23914:	mov al, [bp + 8]	; 3: 138 70 8

@1702$fileopen$2:	; AssignRegister dx name
x23917:	mov dx, [bp + 6]	; 3: 139 86 6

@1702$fileopen$3:	; Interrupt 33
x23920:	int 33	; 2: 205 33

@1702$fileopen$4:	; NotCarry 8
x23922:	jnc @1702$fileopen$8	; 2: 115 20

@1702$fileopen$5:	; Assign errno 9
x23924:	mov word [errno], 9	; 6: 199 6 230 10 9 0

@1702$fileopen$6:	; SetReturnValue -1
x23930:	mov bx, -1	; 3: 187 255 255

@1702$fileopen$7:	; Return -1
x23933:	mov ax, [bp]	; 3: 139 70 0
x23936:	mov di, [bp + 4]	; 3: 139 126 4
x23939:	mov bp, [bp + 2]	; 3: 139 110 2
x23942:	jmp ax	; 2: 255 224

@1702$fileopen$8:	; InspectRegister £temporary702 ax

@1702$fileopen$9:	; SetReturnValue £temporary702
x23944:	mov bx, ax	; 2: 137 195

@1702$fileopen$10:	; Return £temporary702
x23946:	mov ax, [bp]	; 3: 139 70 0
x23949:	mov di, [bp + 4]	; 3: 139 126 4
x23952:	mov bp, [bp + 2]	; 3: 139 110 2
x23955:	jmp ax	; 2: 255 224

@1702$fileopen$11:	; FunctionEnd fileopen

filecreate:	; AssignRegister ah 60
x23957:	mov ah, 60	; 2: 180 60

filecreate$1:	; AssignRegister cx 0
x23959:	mov cx, 0	; 3: 185 0 0

filecreate$2:	; AssignRegister dx name
x23962:	mov dx, [bp + 6]	; 3: 139 86 6

filecreate$3:	; Interrupt 33
x23965:	int 33	; 2: 205 33

filecreate$4:	; InspectRegister £temporary680 ax

filecreate$5:	; Assign handle £temporary680
x23967:	mov [bp + 8], ax	; 3: 137 70 8

filecreate$6:	; NotCarry 10
x23970:	jnc filecreate$10	; 2: 115 20

filecreate$7:	; Assign errno 9
x23972:	mov word [errno], 9	; 6: 199 6 230 10 9 0

filecreate$8:	; SetReturnValue -1
x23978:	mov bx, -1	; 3: 187 255 255

filecreate$9:	; Return -1
x23981:	mov ax, [bp]	; 3: 139 70 0
x23984:	mov di, [bp + 4]	; 3: 139 126 4
x23987:	mov bp, [bp + 2]	; 3: 139 110 2
x23990:	jmp ax	; 2: 255 224

filecreate$10:	; SetReturnValue handle
x23992:	mov bx, [bp + 8]	; 3: 139 94 8

filecreate$11:	; Return handle
x23995:	mov ax, [bp]	; 3: 139 70 0
x23998:	mov di, [bp + 4]	; 3: 139 126 4
x24001:	mov bp, [bp + 2]	; 3: 139 110 2
x24004:	jmp ax	; 2: 255 224

filecreate$12:	; FunctionEnd filecreate

fseek:	; IntegralToIntegral £temporary932 origin
x24006:	mov ax, [bp + 10]	; 3: 139 70 10
x24009:	cmp ax, 0	; 3: 131 248 0
x24012:	jge fseek$1	; 2: 125 4
x24014:	neg ax	; 2: 247 216
x24016:	neg al	; 2: 246 216

fseek$1:	; AssignRegister al £temporary932

fseek$2:	; AssignRegister ah 66
x24018:	mov ah, 66	; 2: 180 66

fseek$3:	; Deref £temporary935 -> stream stream 2
x24020:	mov si, [bp + 6]	; 3: 139 118 6

fseek$4:	; AssignRegister bx £temporary935 -> stream
x24023:	mov bx, [si + 2]	; 3: 139 92 2

fseek$5:	; AssignRegister cx 0
x24026:	mov cx, 0	; 3: 185 0 0

fseek$6:	; IntegralToIntegral £temporary938 offset
x24029:	mov dx, [bp + 8]	; 3: 139 86 8

fseek$7:	; AssignRegister dx £temporary938

fseek$8:	; Interrupt 33
x24032:	int 33	; 2: 205 33

fseek$9:	; Carry 16
x24034:	jc fseek$16	; 2: 114 23

fseek$10:	; Deref £temporary941 -> stream stream 23
x24036:	mov si, [bp + 6]	; 3: 139 118 6

fseek$11:	; InspectRegister £temporary942 ax

fseek$12:	; Assign £temporary941 -> stream £temporary942
x24039:	mov [si + 23], ax	; 3: 137 68 23

fseek$13:	; Deref £temporary943 -> stream stream 23
x24042:	mov si, [bp + 6]	; 3: 139 118 6

fseek$14:	; SetReturnValue £temporary943 -> stream
x24045:	mov bx, [si + 23]	; 3: 139 92 23

fseek$15:	; Return £temporary943 -> stream
x24048:	mov ax, [bp]	; 3: 139 70 0
x24051:	mov di, [bp + 4]	; 3: 139 126 4
x24054:	mov bp, [bp + 2]	; 3: 139 110 2
x24057:	jmp ax	; 2: 255 224

fseek$16:	; Deref £temporary944 -> stream stream 21
x24059:	mov si, [bp + 6]	; 3: 139 118 6

fseek$17:	; Assign £temporary944 -> stream 15
x24062:	mov word [si + 21], 15	; 5: 199 68 21 15 0

fseek$18:	; SetReturnValue -1
x24067:	mov bx, -1	; 3: 187 255 255

fseek$19:	; Return -1
x24070:	mov ax, [bp]	; 3: 139 70 0
x24073:	mov di, [bp + 4]	; 3: 139 126 4
x24076:	mov bp, [bp + 2]	; 3: 139 110 2
x24079:	jmp ax	; 2: 255 224

fseek$20:	; FunctionEnd fseek

fileexists:	; AssignRegister ah 67
x24081:	mov ah, 67	; 2: 180 67

fileexists$1:	; AssignRegister al 0
x24083:	mov al, 0	; 2: 176 0

fileexists$2:	; AssignRegister dx name
x24085:	mov dx, [bp + 6]	; 3: 139 86 6

fileexists$3:	; Interrupt 33
x24088:	int 33	; 2: 205 33

fileexists$4:	; Carry 7
x24090:	jc fileexists$7	; 2: 114 5

fileexists$5:	; Assign £temporary697 1
x24092:	mov bx, 1	; 3: 187 1 0

fileexists$6:	; Goto 8
x24095:	jmp fileexists$8	; 2: 235 3

fileexists$7:	; Assign £temporary697 0
x24097:	mov bx, 0	; 3: 187 0 0

fileexists$8:	; SetReturnValue £temporary697

fileexists$9:	; Return £temporary697
x24100:	mov ax, [bp]	; 3: 139 70 0
x24103:	mov di, [bp + 4]	; 3: 139 126 4
x24106:	mov bp, [bp + 2]	; 3: 139 110 2
x24109:	jmp ax	; 2: 255 224

fileexists$10:	; FunctionEnd fileexists

strcpy:	; Assign index 0
x24111:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

strcpy$1:	; BinaryAdd £temporary3698 source index
x24116:	mov si, [bp + 8]	; 3: 139 118 8
x24119:	add si, [bp + 10]	; 3: 3 118 10

strcpy$2:	; Deref £temporary3697 -> £temporary3698 £temporary3698 0

strcpy$3:	; Equal 11 £temporary3697 -> £temporary3698 0
x24122:	cmp byte [si], 0	; 3: 128 60 0
x24125:	je strcpy$11	; 2: 116 21

strcpy$4:	; BinaryAdd £temporary3702 target index
x24127:	mov si, [bp + 6]	; 3: 139 118 6
x24130:	add si, [bp + 10]	; 3: 3 118 10

strcpy$5:	; Deref £temporary3701 -> £temporary3702 £temporary3702 0

strcpy$6:	; BinaryAdd £temporary3704 source index
x24133:	mov di, [bp + 8]	; 3: 139 126 8
x24136:	add di, [bp + 10]	; 3: 3 126 10

strcpy$7:	; Deref £temporary3703 -> £temporary3704 £temporary3704 0

strcpy$8:	; Assign £temporary3701 -> £temporary3702 £temporary3703 -> £temporary3704
x24139:	mov al, [di]	; 2: 138 5
x24141:	mov [si], al	; 2: 136 4

strcpy$9:	; Increment index
x24143:	inc word [bp + 10]	; 3: 255 70 10

strcpy$10:	; Goto 1
x24146:	jmp strcpy$1	; 2: 235 224

strcpy$11:	; BinaryAdd £temporary3706 target index
x24148:	mov si, [bp + 6]	; 3: 139 118 6
x24151:	add si, [bp + 10]	; 3: 3 118 10

strcpy$12:	; Deref £temporary3705 -> £temporary3706 £temporary3706 0

strcpy$13:	; Assign £temporary3705 -> £temporary3706 0
x24154:	mov byte [si], 0	; 3: 198 4 0

strcpy$14:	; SetReturnValue target
x24157:	mov bx, [bp + 6]	; 3: 139 94 6

strcpy$15:	; Return target
x24160:	mov ax, [bp]	; 3: 139 70 0
x24163:	mov di, [bp + 4]	; 3: 139 126 4
x24166:	mov bp, [bp + 2]	; 3: 139 110 2
x24169:	jmp ax	; 2: 255 224

strcpy$16:	; FunctionEnd strcpy

fprintf:	; address £temporary2213 format
x24171:	mov si, bp	; 2: 137 238
x24173:	add si, 8	; 3: 131 198 8

fprintf$1:	; IntegralToIntegral £temporary2214 £temporary2213

fprintf$2:	; BinaryAdd arg_list £temporary2214 2
x24176:	add si, 2	; 3: 131 198 2
x24179:	mov [di + 10], si	; 3: 137 117 10

fprintf$3:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

fprintf$4:	; Parameter 12 outStream 6
x24182:	mov ax, [bp + 6]	; 3: 139 70 6
x24185:	mov [di + 18], ax	; 3: 137 69 18

fprintf$5:	; Parameter 12 format 8
x24188:	mov ax, [bp + 8]	; 3: 139 70 8
x24191:	mov [di + 20], ax	; 3: 137 69 20

fprintf$6:	; Parameter 12 arg_list 10
x24194:	mov ax, [di + 10]	; 3: 139 69 10
x24197:	mov [di + 22], ax	; 3: 137 69 22

fprintf$7:	; Call 12 vfprintf 0
x24200:	mov word [di + 12], fprintf$8	; 5: 199 69 12 155 94
x24205:	mov [di + 14], bp	; 3: 137 109 14
x24208:	mov [di + 16], di	; 3: 137 125 16
x24211:	add di, 12	; 3: 131 199 12
x24214:	mov bp, di	; 2: 137 253
x24216:	jmp vfprintf	; 3: 233 15 177

fprintf$8:	; PostCall 12

fprintf$9:	; GetReturnValue £temporary2216

fprintf$10:	; SetReturnValue £temporary2216

fprintf$11:	; Return £temporary2216
x24219:	mov ax, [bp]	; 3: 139 70 0
x24222:	mov di, [bp + 4]	; 3: 139 126 4
x24225:	mov bp, [bp + 2]	; 3: 139 110 2
x24228:	jmp ax	; 2: 255 224

fprintf$12:	; FunctionEnd fprintf

abort:	; AssignRegister ah 76
x24230:	mov ah, 76	; 2: 180 76

abort$1:	; AssignRegister al 255
x24232:	mov al, 255	; 2: 176 255

abort$2:	; Interrupt 33
x24234:	int 33	; 2: 205 33

abort$3:	; Return 0
x24236:	mov ax, [bp]	; 3: 139 70 0
x24239:	mov di, [bp + 4]	; 3: 139 126 4
x24242:	mov bp, [bp + 2]	; 3: 139 110 2
x24245:	jmp ax	; 2: 255 224

abort$4:	; FunctionEnd abort

feof:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

feof$1:	; Parameter 8 stream 6
x24247:	mov ax, [bp + 6]	; 3: 139 70 6
x24250:	mov [bp + 14], ax	; 3: 137 70 14

feof$2:	; Parameter 8 0 8
x24253:	mov word [bp + 16], 0	; 5: 199 70 16 0 0

feof$3:	; Parameter 8 1 10
x24258:	mov word [bp + 18], 1	; 5: 199 70 18 1 0

feof$4:	; Call 8 fseek 0
x24263:	mov word [bp + 8], feof$5	; 5: 199 70 8 213 94
x24268:	mov [bp + 10], bp	; 3: 137 110 10
x24271:	add bp, 8	; 3: 131 197 8
x24274:	jmp fseek	; 3: 233 241 254

feof$5:	; PostCall 8

feof$6:	; GetReturnValue £temporary965

feof$7:	; IntegralToIntegral £temporary966 £temporary965
x24277:	and ebx, 65535	; 7: 102 129 227 255 255 0 0

feof$8:	; Assign currPosition £temporary966
x24284:	mov [bp + 8], ebx	; 4: 102 137 94 8

feof$9:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

feof$10:	; Parameter 12 stream 6
x24288:	mov ax, [bp + 6]	; 3: 139 70 6
x24291:	mov [bp + 18], ax	; 3: 137 70 18

feof$11:	; Parameter 12 0 8
x24294:	mov word [bp + 20], 0	; 5: 199 70 20 0 0

feof$12:	; Parameter 12 2 10
x24299:	mov word [bp + 22], 2	; 5: 199 70 22 2 0

feof$13:	; Call 12 fseek 0
x24304:	mov word [bp + 12], feof$14	; 5: 199 70 12 254 94
x24309:	mov [bp + 14], bp	; 3: 137 110 14
x24312:	add bp, 12	; 3: 131 197 12
x24315:	jmp fseek	; 3: 233 200 254

feof$14:	; PostCall 12

feof$15:	; GetReturnValue £temporary967

feof$16:	; IntegralToIntegral £temporary968 £temporary967
x24318:	and ebx, 65535	; 7: 102 129 227 255 255 0 0

feof$17:	; Assign lastPosition £temporary968
x24325:	mov [bp + 12], ebx	; 4: 102 137 94 12

feof$18:	; CallHeader 16 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

feof$19:	; Parameter 16 stream 6
x24329:	mov ax, [bp + 6]	; 3: 139 70 6
x24332:	mov [bp + 22], ax	; 3: 137 70 22

feof$20:	; IntegralToIntegral £temporary969 currPosition
x24335:	mov eax, [bp + 8]	; 4: 102 139 70 8

feof$21:	; Parameter 16 £temporary969 8
x24339:	mov [bp + 24], ax	; 3: 137 70 24

feof$22:	; Parameter 16 0 10
x24342:	mov word [bp + 26], 0	; 5: 199 70 26 0 0

feof$23:	; Call 16 fseek 0
x24347:	mov word [bp + 16], feof$24	; 5: 199 70 16 41 95
x24352:	mov [bp + 18], bp	; 3: 137 110 18
x24355:	add bp, 16	; 3: 131 197 16
x24358:	jmp fseek	; 3: 233 157 254

feof$24:	; PostCall 16

feof$25:	; NotEqual 28 currPosition lastPosition
x24361:	mov eax, [bp + 12]	; 4: 102 139 70 12
x24365:	cmp [bp + 8], eax	; 4: 102 57 70 8
x24369:	jne feof$28	; 2: 117 5

feof$26:	; Assign £temporary972 1
x24371:	mov ax, 1	; 3: 184 1 0

feof$27:	; Goto 29
x24374:	jmp feof$29	; 2: 235 3

feof$28:	; Assign £temporary972 0
x24376:	mov ax, 0	; 3: 184 0 0

feof$29:	; Assign endOfFile £temporary972
x24379:	mov [bp + 16], ax	; 3: 137 70 16

feof$30:	; SetReturnValue endOfFile
x24382:	mov bx, [bp + 16]	; 3: 139 94 16

feof$31:	; Return endOfFile
x24385:	mov ax, [bp]	; 3: 139 70 0
x24388:	mov di, [bp + 4]	; 3: 139 126 4
x24391:	mov bp, [bp + 2]	; 3: 139 110 2
x24394:	jmp ax	; 2: 255 224

feof$32:	; FunctionEnd feof

fscanf:	; address £temporary1565 format
x24396:	mov si, bp	; 2: 137 238
x24398:	add si, 8	; 3: 131 198 8

fscanf$1:	; IntegralToIntegral £temporary1566 £temporary1565

fscanf$2:	; BinaryAdd arg_list £temporary1566 2
x24401:	add si, 2	; 3: 131 198 2
x24404:	mov [di + 10], si	; 3: 137 117 10

fscanf$3:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

fscanf$4:	; Parameter 12 inStream 6
x24407:	mov ax, [bp + 6]	; 3: 139 70 6
x24410:	mov [di + 18], ax	; 3: 137 69 18

fscanf$5:	; Parameter 12 format 8
x24413:	mov ax, [bp + 8]	; 3: 139 70 8
x24416:	mov [di + 20], ax	; 3: 137 69 20

fscanf$6:	; Parameter 12 arg_list 10
x24419:	mov ax, [di + 10]	; 3: 139 69 10
x24422:	mov [di + 22], ax	; 3: 137 69 22

fscanf$7:	; Call 12 vfscanf 0
x24425:	mov word [di + 12], fscanf$8	; 5: 199 69 12 124 95
x24430:	mov [di + 14], bp	; 3: 137 109 14
x24433:	mov [di + 16], di	; 3: 137 125 16
x24436:	add di, 12	; 3: 131 199 12
x24439:	mov bp, di	; 2: 137 253
x24441:	nop	; 1: 144
x24442:	jmp vfscanf	; 2: 235 11

fscanf$8:	; PostCall 12

fscanf$9:	; GetReturnValue £temporary1568

fscanf$10:	; SetReturnValue £temporary1568

fscanf$11:	; Return £temporary1568
x24444:	mov ax, [bp]	; 3: 139 70 0
x24447:	mov di, [bp + 4]	; 3: 139 126 4
x24450:	mov bp, [bp + 2]	; 3: 139 110 2
x24453:	jmp ax	; 2: 255 224

fscanf$12:	; FunctionEnd fscanf

vfscanf:	; Assign g_inStatus 0
x24455:	mov word [g_inStatus], 0	; 6: 199 6 184 95 0 0

vfscanf$1:	; IntegralToIntegral £temporary1573 inStream
x24461:	mov ax, [bp + 6]	; 3: 139 70 6

vfscanf$2:	; Assign g_inDevice £temporary1573
x24464:	mov [g_inDevice], ax	; 3: 163 186 95

vfscanf$3:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

vfscanf$4:	; Parameter 12 format 6
x24467:	mov ax, [bp + 8]	; 3: 139 70 8
x24470:	mov [bp + 18], ax	; 3: 137 70 18

vfscanf$5:	; Parameter 12 arg_list 8
x24473:	mov ax, [bp + 10]	; 3: 139 70 10
x24476:	mov [bp + 20], ax	; 3: 137 70 20

vfscanf$6:	; Call 12 scanFormat 0
x24479:	mov word [bp + 12], vfscanf$7	; 5: 199 70 12 173 95
x24484:	mov [bp + 14], bp	; 3: 137 110 14
x24487:	add bp, 12	; 3: 131 197 12
x24490:	nop	; 1: 144
x24491:	jmp scanFormat	; 2: 235 15

vfscanf$7:	; PostCall 12

vfscanf$8:	; GetReturnValue £temporary1574

vfscanf$9:	; SetReturnValue £temporary1574

vfscanf$10:	; Return £temporary1574
x24493:	mov ax, [bp]	; 3: 139 70 0
x24496:	mov di, [bp + 4]	; 3: 139 126 4
x24499:	mov bp, [bp + 2]	; 3: 139 110 2
x24502:	jmp ax	; 2: 255 224

vfscanf$11:	; FunctionEnd vfscanf

g_inStatus:
x24504:	db 0, 0	; 2: 0 0

g_inDevice:
x24506:	db 0, 0	; 2: 0 0

scanFormat:	; Assign percent 0
x24508:	mov word [bp + 13], 0	; 5: 199 70 13 0 0

scanFormat$1:	; Assign shortInt 0
x24513:	mov word [bp + 15], 0	; 5: 199 70 15 0 0

scanFormat$2:	; Assign longIntOrDouble 0
x24518:	mov word [bp + 17], 0	; 5: 199 70 17 0 0

scanFormat$3:	; Assign longDouble 0
x24523:	mov word [bp + 19], 0	; 5: 199 70 19 0 0

scanFormat$4:	; Assign star 0
x24528:	mov word [bp + 21], 0	; 5: 199 70 21 0 0

scanFormat$5:	; Assign g_inCount 0
x24533:	mov word [g_inCount], 0	; 6: 199 6 219 100 0 0

scanFormat$6:	; Assign g_inChars 0
x24539:	mov word [g_inChars], 0	; 6: 199 6 221 100 0 0

scanFormat$7:	; Assign index 0
x24545:	mov word [bp + 31], 0	; 5: 199 70 31 0 0

scanFormat$8:	; BinaryAdd £temporary1360 format index
x24550:	mov si, [bp + 6]	; 3: 139 118 6
x24553:	add si, [bp + 31]	; 3: 3 118 31

scanFormat$9:	; Deref £temporary1359 -> £temporary1360 £temporary1360 0

scanFormat$10:	; Equal 329 £temporary1359 -> £temporary1360 0
x24556:	cmp byte [si], 0	; 3: 128 60 0
x24559:	je scanFormat$329	; 4: 15 132 217 4

scanFormat$11:	; BinaryAdd £temporary1364 format index
x24563:	mov si, [bp + 6]	; 3: 139 118 6
x24566:	add si, [bp + 31]	; 3: 3 118 31

scanFormat$12:	; Deref £temporary1363 -> £temporary1364 £temporary1364 0

scanFormat$13:	; Assign c £temporary1363 -> £temporary1364
x24569:	mov al, [si]	; 2: 138 4
x24571:	mov [bp + 10], al	; 3: 136 70 10

scanFormat$14:	; IntegralToIntegral £temporary1365 c
x24574:	mov al, [bp + 10]	; 3: 138 70 10
x24577:	and ax, 255	; 3: 37 255 0
x24580:	cmp al, 0	; 2: 60 0
x24582:	jge scanFormat$15	; 2: 125 4
x24584:	neg al	; 2: 246 216
x24586:	neg ax	; 2: 247 216

scanFormat$15:	; BinaryAdd d £temporary1365 1
x24588:	inc ax	; 1: 64
x24589:	mov [bp + 55], ax	; 3: 137 70 55

scanFormat$16:	; Equal 321 percent 0
x24592:	cmp word [bp + 13], 0	; 4: 131 126 13 0
x24596:	je scanFormat$321	; 4: 15 132 143 4

scanFormat$17:	; BinarySubtract £temporary1367 d 1
x24600:	mov ax, [bp + 55]	; 3: 139 70 55
x24603:	dec ax	; 1: 72

scanFormat$18:	; Case 36 £temporary1367 104
x24604:	cmp ax, 104	; 3: 131 248 104
x24607:	je scanFormat$36	; 2: 116 100

scanFormat$19:	; Case 38 £temporary1367 108
x24609:	cmp ax, 108	; 3: 131 248 108
x24612:	je scanFormat$38	; 2: 116 103

scanFormat$20:	; Case 40 £temporary1367 76
x24614:	cmp ax, 76	; 3: 131 248 76
x24617:	je scanFormat$40	; 2: 116 106

scanFormat$21:	; Case 42 £temporary1367 42
x24619:	cmp ax, 42	; 3: 131 248 42
x24622:	je scanFormat$42	; 2: 116 109

scanFormat$22:	; Case 44 £temporary1367 99
x24624:	cmp ax, 99	; 3: 131 248 99
x24627:	je scanFormat$44	; 2: 116 112

scanFormat$23:	; Case 62 £temporary1367 115
x24629:	cmp ax, 115	; 3: 131 248 115
x24632:	je scanFormat$62	; 4: 15 132 184 0

scanFormat$24:	; Case 81 £temporary1367 100
x24636:	cmp ax, 100	; 3: 131 248 100
x24639:	je scanFormat$81	; 4: 15 132 1 1

scanFormat$25:	; Case 81 £temporary1367 105
x24643:	cmp ax, 105	; 3: 131 248 105
x24646:	je scanFormat$81	; 4: 15 132 250 0

scanFormat$26:	; Case 117 £temporary1367 111
x24650:	cmp ax, 111	; 3: 131 248 111
x24653:	je scanFormat$117	; 4: 15 132 135 1

scanFormat$27:	; Case 153 £temporary1367 120
x24657:	cmp ax, 120	; 3: 131 248 120
x24660:	je scanFormat$153	; 4: 15 132 254 1

scanFormat$28:	; Case 189 £temporary1367 117
x24664:	cmp ax, 117	; 3: 131 248 117
x24667:	je scanFormat$189	; 4: 15 132 117 2

scanFormat$29:	; Case 225 £temporary1367 103
x24671:	cmp ax, 103	; 3: 131 248 103
x24674:	je scanFormat$225	; 4: 15 132 236 2

scanFormat$30:	; Case 225 £temporary1367 102
x24678:	cmp ax, 102	; 3: 131 248 102
x24681:	je scanFormat$225	; 4: 15 132 229 2

scanFormat$31:	; Case 225 £temporary1367 101
x24685:	cmp ax, 101	; 3: 131 248 101
x24688:	je scanFormat$225	; 4: 15 132 222 2

scanFormat$32:	; Case 261 £temporary1367 91
x24692:	cmp ax, 91	; 3: 131 248 91
x24695:	je scanFormat$261	; 4: 15 132 75 3

scanFormat$33:	; Case 312 £temporary1367 110
x24699:	cmp ax, 110	; 3: 131 248 110
x24702:	je scanFormat$312	; 4: 15 132 7 4

scanFormat$34:	; CaseEnd £temporary1367

scanFormat$35:	; Goto 327
x24706:	jmp scanFormat$327	; 3: 233 65 4

scanFormat$36:	; Assign shortInt 1
x24709:	mov word [bp + 15], 1	; 5: 199 70 15 1 0

scanFormat$37:	; Goto 327
x24714:	jmp scanFormat$327	; 3: 233 57 4

scanFormat$38:	; Assign longIntOrDouble 1
x24717:	mov word [bp + 17], 1	; 5: 199 70 17 1 0

scanFormat$39:	; Goto 327
x24722:	jmp scanFormat$327	; 3: 233 49 4

scanFormat$40:	; Assign longDouble 1
x24725:	mov word [bp + 19], 1	; 5: 199 70 19 1 0

scanFormat$41:	; Goto 327
x24730:	jmp scanFormat$327	; 3: 233 41 4

scanFormat$42:	; Assign star 1
x24733:	mov word [bp + 21], 1	; 5: 199 70 21 1 0

scanFormat$43:	; Goto 327
x24738:	jmp scanFormat$327	; 3: 233 33 4

scanFormat$44:	; CallHeader 57 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanFormat$45:	; Call 57 scanChar 0
x24741:	mov word [bp + 57], scanFormat$46	; 5: 199 70 57 179 96
x24746:	mov [bp + 59], bp	; 3: 137 110 59
x24749:	add bp, 57	; 3: 131 197 57
x24752:	jmp scanChar	; 3: 233 44 4

scanFormat$46:	; PostCall 57

scanFormat$47:	; GetReturnValue £temporary1368

scanFormat$48:	; Assign charValue £temporary1368
x24755:	mov [bp + 57], bl	; 3: 136 94 57

scanFormat$49:	; NotEqual 57 star 0
x24758:	cmp word [bp + 21], 0	; 4: 131 126 21 0
x24762:	jne scanFormat$57	; 2: 117 23

scanFormat$50:	; BinaryAdd arg_list arg_list 2
x24764:	add word [bp + 8], 2	; 4: 131 70 8 2

scanFormat$51:	; BinarySubtract £temporary1372 arg_list 2
x24768:	mov si, [bp + 8]	; 3: 139 118 8
x24771:	sub si, 2	; 3: 131 238 2

scanFormat$52:	; IntegralToIntegral £temporary1373 £temporary1372

scanFormat$53:	; Deref £temporary1374 -> £temporary1373 £temporary1373 0

scanFormat$54:	; Assign charPtr £temporary1374 -> £temporary1373
x24774:	mov ax, [si]	; 2: 139 4
x24776:	mov [bp + 11], ax	; 3: 137 70 11

scanFormat$55:	; Deref £temporary1375 -> charPtr charPtr 0
x24779:	mov si, [bp + 11]	; 3: 139 118 11

scanFormat$56:	; Assign £temporary1375 -> charPtr charValue
x24782:	mov al, [bp + 57]	; 3: 138 70 57
x24785:	mov [si], al	; 2: 136 4

scanFormat$57:	; Assign percent 0
x24787:	mov word [bp + 13], 0	; 5: 199 70 13 0 0

scanFormat$58:	; IntegralToIntegral £temporary1376 charValue
x24792:	mov al, [bp + 57]	; 3: 138 70 57
x24795:	and ax, 255	; 3: 37 255 0
x24798:	cmp al, 0	; 2: 60 0
x24800:	jge scanFormat$59	; 2: 125 4
x24802:	neg al	; 2: 246 216
x24804:	neg ax	; 2: 247 216

scanFormat$59:	; Equal 327 £temporary1376 -1
x24806:	cmp ax, -1	; 3: 131 248 255
x24809:	je scanFormat$327	; 4: 15 132 217 3

scanFormat$60:	; Increment g_inCount
x24813:	inc word [g_inCount]	; 4: 255 6 219 100

scanFormat$61:	; Goto 327
x24817:	jmp scanFormat$327	; 3: 233 210 3

scanFormat$62:	; NotEqual 74 star 0
x24820:	cmp word [bp + 21], 0	; 4: 131 126 21 0
x24824:	jne scanFormat$74	; 2: 117 42

scanFormat$63:	; BinaryAdd arg_list arg_list 2
x24826:	add word [bp + 8], 2	; 4: 131 70 8 2

scanFormat$64:	; BinarySubtract £temporary1382 arg_list 2
x24830:	mov si, [bp + 8]	; 3: 139 118 8
x24833:	sub si, 2	; 3: 131 238 2

scanFormat$65:	; IntegralToIntegral £temporary1383 £temporary1382

scanFormat$66:	; Deref £temporary1384 -> £temporary1383 £temporary1383 0

scanFormat$67:	; Assign charPtr £temporary1384 -> £temporary1383
x24836:	mov ax, [si]	; 2: 139 4
x24838:	mov [bp + 11], ax	; 3: 137 70 11

scanFormat$68:	; CallHeader 57 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanFormat$69:	; Parameter 57 charPtr 6
x24841:	mov ax, [bp + 11]	; 3: 139 70 11
x24844:	mov [bp + 63], ax	; 3: 137 70 63

scanFormat$70:	; Parameter 57 0 8
x24847:	mov word [bp + 65], 0	; 5: 199 70 65 0 0

scanFormat$71:	; Call 57 scanString 0
x24852:	mov word [bp + 57], scanFormat$72	; 5: 199 70 57 34 97
x24857:	mov [bp + 59], bp	; 3: 137 110 59
x24860:	add bp, 57	; 3: 131 197 57
x24863:	jmp scanString	; 3: 233 44 4

scanFormat$72:	; PostCall 57

scanFormat$73:	; Goto 79
x24866:	jmp scanFormat$79	; 2: 235 24

scanFormat$74:	; CallHeader 57 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanFormat$75:	; Parameter 57 0 6
x24868:	mov word [bp + 63], 0	; 5: 199 70 63 0 0

scanFormat$76:	; Parameter 57 0 8
x24873:	mov word [bp + 65], 0	; 5: 199 70 65 0 0

scanFormat$77:	; Call 57 scanString 0
x24878:	mov word [bp + 57], scanFormat$78	; 5: 199 70 57 60 97
x24883:	mov [bp + 59], bp	; 3: 137 110 59
x24886:	add bp, 57	; 3: 131 197 57
x24889:	jmp scanString	; 3: 233 18 4

scanFormat$78:	; PostCall 57

scanFormat$79:	; Assign percent 0
x24892:	mov word [bp + 13], 0	; 5: 199 70 13 0 0

scanFormat$80:	; Goto 327
x24897:	jmp scanFormat$327	; 3: 233 130 3

scanFormat$81:	; CallHeader 57 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanFormat$82:	; Parameter 57 10 6
x24900:	mov word [bp + 63], 10	; 5: 199 70 63 10 0

scanFormat$83:	; Call 57 scanLongInt 0
x24905:	mov word [bp + 57], scanFormat$84	; 5: 199 70 57 87 97
x24910:	mov [bp + 59], bp	; 3: 137 110 59
x24913:	add bp, 57	; 3: 131 197 57
x24916:	jmp scanLongInt	; 3: 233 123 6

scanFormat$84:	; PostCall 57

scanFormat$85:	; GetReturnValue £temporary1387

scanFormat$86:	; Assign longValue £temporary1387
x24919:	mov [bp + 23], ebx	; 4: 102 137 94 23

scanFormat$87:	; NotEqual 115 star 0
x24923:	cmp word [bp + 21], 0	; 4: 131 126 21 0
x24927:	jne scanFormat$115	; 2: 117 111

scanFormat$88:	; Equal 98 shortInt 0
x24929:	cmp word [bp + 15], 0	; 4: 131 126 15 0
x24933:	je scanFormat$98	; 2: 116 37

scanFormat$89:	; BinaryAdd arg_list arg_list 2
x24935:	add word [bp + 8], 2	; 4: 131 70 8 2

scanFormat$90:	; BinarySubtract £temporary1391 arg_list 2
x24939:	mov si, [bp + 8]	; 3: 139 118 8
x24942:	sub si, 2	; 3: 131 238 2

scanFormat$91:	; IntegralToIntegral £temporary1392 £temporary1391

scanFormat$92:	; Deref £temporary1393 -> £temporary1392 £temporary1392 0

scanFormat$93:	; Assign shortPtr £temporary1393 -> £temporary1392
x24945:	mov ax, [si]	; 2: 139 4
x24947:	mov [bp + 29], ax	; 3: 137 70 29

scanFormat$94:	; Deref £temporary1394 -> shortPtr shortPtr 0
x24950:	mov si, [bp + 29]	; 3: 139 118 29

scanFormat$95:	; IntegralToIntegral £temporary1395 longValue
x24953:	mov eax, [bp + 23]	; 4: 102 139 70 23
x24957:	cmp eax, 0	; 4: 102 131 248 0
x24961:	jge scanFormat$96	; 2: 125 5
x24963:	neg eax	; 3: 102 247 216
x24966:	neg al	; 2: 246 216

scanFormat$96:	; Assign £temporary1394 -> shortPtr £temporary1395
x24968:	mov [si], al	; 2: 136 4

scanFormat$97:	; Goto 115
x24970:	jmp scanFormat$115	; 2: 235 68

scanFormat$98:	; NotEqual 108 longIntOrDouble 0
x24972:	cmp word [bp + 17], 0	; 4: 131 126 17 0
x24976:	jne scanFormat$108	; 2: 117 37

scanFormat$99:	; BinaryAdd arg_list arg_list 2
x24978:	add word [bp + 8], 2	; 4: 131 70 8 2

scanFormat$100:	; BinarySubtract £temporary1399 arg_list 2
x24982:	mov si, [bp + 8]	; 3: 139 118 8
x24985:	sub si, 2	; 3: 131 238 2

scanFormat$101:	; IntegralToIntegral £temporary1400 £temporary1399

scanFormat$102:	; Deref £temporary1401 -> £temporary1400 £temporary1400 0

scanFormat$103:	; Assign intPtr £temporary1401 -> £temporary1400
x24988:	mov ax, [si]	; 2: 139 4
x24990:	mov [bp + 33], ax	; 3: 137 70 33

scanFormat$104:	; Deref £temporary1402 -> intPtr intPtr 0
x24993:	mov si, [bp + 33]	; 3: 139 118 33

scanFormat$105:	; IntegralToIntegral £temporary1403 longValue
x24996:	mov eax, [bp + 23]	; 4: 102 139 70 23
x25000:	cmp eax, 0	; 4: 102 131 248 0
x25004:	jge scanFormat$106	; 2: 125 5
x25006:	neg eax	; 3: 102 247 216
x25009:	neg ax	; 2: 247 216

scanFormat$106:	; Assign £temporary1402 -> intPtr £temporary1403
x25011:	mov [si], ax	; 2: 137 4

scanFormat$107:	; Goto 115
x25013:	jmp scanFormat$115	; 2: 235 25

scanFormat$108:	; BinaryAdd arg_list arg_list 2
x25015:	add word [bp + 8], 2	; 4: 131 70 8 2

scanFormat$109:	; BinarySubtract £temporary1405 arg_list 2
x25019:	mov si, [bp + 8]	; 3: 139 118 8
x25022:	sub si, 2	; 3: 131 238 2

scanFormat$110:	; IntegralToIntegral £temporary1406 £temporary1405

scanFormat$111:	; Deref £temporary1407 -> £temporary1406 £temporary1406 0

scanFormat$112:	; Assign longPtr £temporary1407 -> £temporary1406
x25025:	mov ax, [si]	; 2: 139 4
x25027:	mov [bp + 27], ax	; 3: 137 70 27

scanFormat$113:	; Deref £temporary1408 -> longPtr longPtr 0
x25030:	mov si, [bp + 27]	; 3: 139 118 27

scanFormat$114:	; Assign £temporary1408 -> longPtr longValue
x25033:	mov eax, [bp + 23]	; 4: 102 139 70 23
x25037:	mov [si], eax	; 3: 102 137 4

scanFormat$115:	; Assign percent 0
x25040:	mov word [bp + 13], 0	; 5: 199 70 13 0 0

scanFormat$116:	; Goto 327
x25045:	jmp scanFormat$327	; 3: 233 238 2

scanFormat$117:	; CallHeader 57 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanFormat$118:	; Parameter 57 8 6
x25048:	mov word [bp + 63], 8	; 5: 199 70 63 8 0

scanFormat$119:	; Call 57 scanUnsignedLongInt 0
x25053:	mov word [bp + 57], scanFormat$120	; 5: 199 70 57 235 97
x25058:	mov [bp + 59], bp	; 3: 137 110 59
x25061:	add bp, 57	; 3: 131 197 57
x25064:	jmp scanUnsignedLongInt	; 3: 233 33 10

scanFormat$120:	; PostCall 57

scanFormat$121:	; GetReturnValue £temporary1410

scanFormat$122:	; Assign unsignedLongValue £temporary1410
x25067:	mov [bp + 37], ebx	; 4: 102 137 94 37

scanFormat$123:	; NotEqual 151 star 0
x25071:	cmp word [bp + 21], 0	; 4: 131 126 21 0
x25075:	jne scanFormat$151	; 2: 117 89

scanFormat$124:	; Equal 134 shortInt 0
x25077:	cmp word [bp + 15], 0	; 4: 131 126 15 0
x25081:	je scanFormat$134	; 2: 116 26

scanFormat$125:	; BinaryAdd arg_list arg_list 2
x25083:	add word [bp + 8], 2	; 4: 131 70 8 2

scanFormat$126:	; BinarySubtract £temporary1414 arg_list 2
x25087:	mov si, [bp + 8]	; 3: 139 118 8
x25090:	sub si, 2	; 3: 131 238 2

scanFormat$127:	; IntegralToIntegral £temporary1415 £temporary1414

scanFormat$128:	; Deref £temporary1416 -> £temporary1415 £temporary1415 0

scanFormat$129:	; Assign unsignedShortPtr £temporary1416 -> £temporary1415
x25093:	mov ax, [si]	; 2: 139 4
x25095:	mov [bp + 43], ax	; 3: 137 70 43

scanFormat$130:	; Deref £temporary1417 -> unsignedShortPtr unsignedShortPtr 0
x25098:	mov si, [bp + 43]	; 3: 139 118 43

scanFormat$131:	; IntegralToIntegral £temporary1418 unsignedLongValue
x25101:	mov eax, [bp + 37]	; 4: 102 139 70 37

scanFormat$132:	; Assign £temporary1417 -> unsignedShortPtr £temporary1418
x25105:	mov [si], al	; 2: 136 4

scanFormat$133:	; Goto 151
x25107:	jmp scanFormat$151	; 2: 235 57

scanFormat$134:	; NotEqual 144 longIntOrDouble 0
x25109:	cmp word [bp + 17], 0	; 4: 131 126 17 0
x25113:	jne scanFormat$144	; 2: 117 26

scanFormat$135:	; BinaryAdd arg_list arg_list 2
x25115:	add word [bp + 8], 2	; 4: 131 70 8 2

scanFormat$136:	; BinarySubtract £temporary1422 arg_list 2
x25119:	mov si, [bp + 8]	; 3: 139 118 8
x25122:	sub si, 2	; 3: 131 238 2

scanFormat$137:	; IntegralToIntegral £temporary1423 £temporary1422

scanFormat$138:	; Deref £temporary1424 -> £temporary1423 £temporary1423 0

scanFormat$139:	; Assign unsignedIntPtr £temporary1424 -> £temporary1423
x25125:	mov ax, [si]	; 2: 139 4
x25127:	mov [bp + 45], ax	; 3: 137 70 45

scanFormat$140:	; Deref £temporary1425 -> unsignedIntPtr unsignedIntPtr 0
x25130:	mov si, [bp + 45]	; 3: 139 118 45

scanFormat$141:	; IntegralToIntegral £temporary1426 unsignedLongValue
x25133:	mov eax, [bp + 37]	; 4: 102 139 70 37

scanFormat$142:	; Assign £temporary1425 -> unsignedIntPtr £temporary1426
x25137:	mov [si], ax	; 2: 137 4

scanFormat$143:	; Goto 151
x25139:	jmp scanFormat$151	; 2: 235 25

scanFormat$144:	; BinaryAdd arg_list arg_list 2
x25141:	add word [bp + 8], 2	; 4: 131 70 8 2

scanFormat$145:	; BinarySubtract £temporary1428 arg_list 2
x25145:	mov si, [bp + 8]	; 3: 139 118 8
x25148:	sub si, 2	; 3: 131 238 2

scanFormat$146:	; IntegralToIntegral £temporary1429 £temporary1428

scanFormat$147:	; Deref £temporary1430 -> £temporary1429 £temporary1429 0

scanFormat$148:	; Assign unsignedLongPtr £temporary1430 -> £temporary1429
x25151:	mov ax, [si]	; 2: 139 4
x25153:	mov [bp + 41], ax	; 3: 137 70 41

scanFormat$149:	; Deref £temporary1431 -> unsignedLongPtr unsignedLongPtr 0
x25156:	mov si, [bp + 41]	; 3: 139 118 41

scanFormat$150:	; Assign £temporary1431 -> unsignedLongPtr unsignedLongValue
x25159:	mov eax, [bp + 37]	; 4: 102 139 70 37
x25163:	mov [si], eax	; 3: 102 137 4

scanFormat$151:	; Assign percent 0
x25166:	mov word [bp + 13], 0	; 5: 199 70 13 0 0

scanFormat$152:	; Goto 327
x25171:	jmp scanFormat$327	; 3: 233 112 2

scanFormat$153:	; CallHeader 57 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanFormat$154:	; Parameter 57 16 6
x25174:	mov word [bp + 63], 16	; 5: 199 70 63 16 0

scanFormat$155:	; Call 57 scanUnsignedLongInt 0
x25179:	mov word [bp + 57], scanFormat$156	; 5: 199 70 57 105 98
x25184:	mov [bp + 59], bp	; 3: 137 110 59
x25187:	add bp, 57	; 3: 131 197 57
x25190:	jmp scanUnsignedLongInt	; 3: 233 163 9

scanFormat$156:	; PostCall 57

scanFormat$157:	; GetReturnValue £temporary1433

scanFormat$158:	; Assign unsignedLongValue £temporary1433
x25193:	mov [bp + 37], ebx	; 4: 102 137 94 37

scanFormat$159:	; NotEqual 187 star 0
x25197:	cmp word [bp + 21], 0	; 4: 131 126 21 0
x25201:	jne scanFormat$187	; 2: 117 89

scanFormat$160:	; Equal 170 shortInt 0
x25203:	cmp word [bp + 15], 0	; 4: 131 126 15 0
x25207:	je scanFormat$170	; 2: 116 26

scanFormat$161:	; BinaryAdd arg_list arg_list 2
x25209:	add word [bp + 8], 2	; 4: 131 70 8 2

scanFormat$162:	; BinarySubtract £temporary1437 arg_list 2
x25213:	mov si, [bp + 8]	; 3: 139 118 8
x25216:	sub si, 2	; 3: 131 238 2

scanFormat$163:	; IntegralToIntegral £temporary1438 £temporary1437

scanFormat$164:	; Deref £temporary1439 -> £temporary1438 £temporary1438 0

scanFormat$165:	; Assign unsignedShortPtr £temporary1439 -> £temporary1438
x25219:	mov ax, [si]	; 2: 139 4
x25221:	mov [bp + 43], ax	; 3: 137 70 43

scanFormat$166:	; Deref £temporary1440 -> unsignedShortPtr unsignedShortPtr 0
x25224:	mov si, [bp + 43]	; 3: 139 118 43

scanFormat$167:	; IntegralToIntegral £temporary1441 unsignedLongValue
x25227:	mov eax, [bp + 37]	; 4: 102 139 70 37

scanFormat$168:	; Assign £temporary1440 -> unsignedShortPtr £temporary1441
x25231:	mov [si], al	; 2: 136 4

scanFormat$169:	; Goto 187
x25233:	jmp scanFormat$187	; 2: 235 57

scanFormat$170:	; NotEqual 180 longIntOrDouble 0
x25235:	cmp word [bp + 17], 0	; 4: 131 126 17 0
x25239:	jne scanFormat$180	; 2: 117 26

scanFormat$171:	; BinaryAdd arg_list arg_list 2
x25241:	add word [bp + 8], 2	; 4: 131 70 8 2

scanFormat$172:	; BinarySubtract £temporary1445 arg_list 2
x25245:	mov si, [bp + 8]	; 3: 139 118 8
x25248:	sub si, 2	; 3: 131 238 2

scanFormat$173:	; IntegralToIntegral £temporary1446 £temporary1445

scanFormat$174:	; Deref £temporary1447 -> £temporary1446 £temporary1446 0

scanFormat$175:	; Assign unsignedIntPtr £temporary1447 -> £temporary1446
x25251:	mov ax, [si]	; 2: 139 4
x25253:	mov [bp + 45], ax	; 3: 137 70 45

scanFormat$176:	; Deref £temporary1448 -> unsignedIntPtr unsignedIntPtr 0
x25256:	mov si, [bp + 45]	; 3: 139 118 45

scanFormat$177:	; IntegralToIntegral £temporary1449 unsignedLongValue
x25259:	mov eax, [bp + 37]	; 4: 102 139 70 37

scanFormat$178:	; Assign £temporary1448 -> unsignedIntPtr £temporary1449
x25263:	mov [si], ax	; 2: 137 4

scanFormat$179:	; Goto 187
x25265:	jmp scanFormat$187	; 2: 235 25

scanFormat$180:	; BinaryAdd arg_list arg_list 2
x25267:	add word [bp + 8], 2	; 4: 131 70 8 2

scanFormat$181:	; BinarySubtract £temporary1451 arg_list 2
x25271:	mov si, [bp + 8]	; 3: 139 118 8
x25274:	sub si, 2	; 3: 131 238 2

scanFormat$182:	; IntegralToIntegral £temporary1452 £temporary1451

scanFormat$183:	; Deref £temporary1453 -> £temporary1452 £temporary1452 0

scanFormat$184:	; Assign unsignedLongPtr £temporary1453 -> £temporary1452
x25277:	mov ax, [si]	; 2: 139 4
x25279:	mov [bp + 41], ax	; 3: 137 70 41

scanFormat$185:	; Deref £temporary1454 -> unsignedLongPtr unsignedLongPtr 0
x25282:	mov si, [bp + 41]	; 3: 139 118 41

scanFormat$186:	; Assign £temporary1454 -> unsignedLongPtr unsignedLongValue
x25285:	mov eax, [bp + 37]	; 4: 102 139 70 37
x25289:	mov [si], eax	; 3: 102 137 4

scanFormat$187:	; Assign percent 0
x25292:	mov word [bp + 13], 0	; 5: 199 70 13 0 0

scanFormat$188:	; Goto 327
x25297:	jmp scanFormat$327	; 3: 233 242 1

scanFormat$189:	; CallHeader 57 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanFormat$190:	; Parameter 57 0 6
x25300:	mov word [bp + 63], 0	; 5: 199 70 63 0 0

scanFormat$191:	; Call 57 scanUnsignedLongInt 0
x25305:	mov word [bp + 57], scanFormat$192	; 5: 199 70 57 231 98
x25310:	mov [bp + 59], bp	; 3: 137 110 59
x25313:	add bp, 57	; 3: 131 197 57
x25316:	jmp scanUnsignedLongInt	; 3: 233 37 9

scanFormat$192:	; PostCall 57

scanFormat$193:	; GetReturnValue £temporary1456

scanFormat$194:	; Assign unsignedLongValue £temporary1456
x25319:	mov [bp + 37], ebx	; 4: 102 137 94 37

scanFormat$195:	; NotEqual 223 star 0
x25323:	cmp word [bp + 21], 0	; 4: 131 126 21 0
x25327:	jne scanFormat$223	; 2: 117 89

scanFormat$196:	; Equal 206 shortInt 0
x25329:	cmp word [bp + 15], 0	; 4: 131 126 15 0
x25333:	je scanFormat$206	; 2: 116 26

scanFormat$197:	; BinaryAdd arg_list arg_list 2
x25335:	add word [bp + 8], 2	; 4: 131 70 8 2

scanFormat$198:	; BinarySubtract £temporary1460 arg_list 2
x25339:	mov si, [bp + 8]	; 3: 139 118 8
x25342:	sub si, 2	; 3: 131 238 2

scanFormat$199:	; IntegralToIntegral £temporary1461 £temporary1460

scanFormat$200:	; Deref £temporary1462 -> £temporary1461 £temporary1461 0

scanFormat$201:	; Assign unsignedShortPtr £temporary1462 -> £temporary1461
x25345:	mov ax, [si]	; 2: 139 4
x25347:	mov [bp + 43], ax	; 3: 137 70 43

scanFormat$202:	; Deref £temporary1463 -> unsignedShortPtr unsignedShortPtr 0
x25350:	mov si, [bp + 43]	; 3: 139 118 43

scanFormat$203:	; IntegralToIntegral £temporary1464 unsignedLongValue
x25353:	mov eax, [bp + 37]	; 4: 102 139 70 37

scanFormat$204:	; Assign £temporary1463 -> unsignedShortPtr £temporary1464
x25357:	mov [si], al	; 2: 136 4

scanFormat$205:	; Goto 223
x25359:	jmp scanFormat$223	; 2: 235 57

scanFormat$206:	; NotEqual 216 longIntOrDouble 0
x25361:	cmp word [bp + 17], 0	; 4: 131 126 17 0
x25365:	jne scanFormat$216	; 2: 117 26

scanFormat$207:	; BinaryAdd arg_list arg_list 2
x25367:	add word [bp + 8], 2	; 4: 131 70 8 2

scanFormat$208:	; BinarySubtract £temporary1468 arg_list 2
x25371:	mov si, [bp + 8]	; 3: 139 118 8
x25374:	sub si, 2	; 3: 131 238 2

scanFormat$209:	; IntegralToIntegral £temporary1469 £temporary1468

scanFormat$210:	; Deref £temporary1470 -> £temporary1469 £temporary1469 0

scanFormat$211:	; Assign unsignedIntPtr £temporary1470 -> £temporary1469
x25377:	mov ax, [si]	; 2: 139 4
x25379:	mov [bp + 45], ax	; 3: 137 70 45

scanFormat$212:	; Deref £temporary1471 -> unsignedIntPtr unsignedIntPtr 0
x25382:	mov si, [bp + 45]	; 3: 139 118 45

scanFormat$213:	; IntegralToIntegral £temporary1472 unsignedLongValue
x25385:	mov eax, [bp + 37]	; 4: 102 139 70 37

scanFormat$214:	; Assign £temporary1471 -> unsignedIntPtr £temporary1472
x25389:	mov [si], ax	; 2: 137 4

scanFormat$215:	; Goto 223
x25391:	jmp scanFormat$223	; 2: 235 25

scanFormat$216:	; BinaryAdd arg_list arg_list 2
x25393:	add word [bp + 8], 2	; 4: 131 70 8 2

scanFormat$217:	; BinarySubtract £temporary1474 arg_list 2
x25397:	mov si, [bp + 8]	; 3: 139 118 8
x25400:	sub si, 2	; 3: 131 238 2

scanFormat$218:	; IntegralToIntegral £temporary1475 £temporary1474

scanFormat$219:	; Deref £temporary1476 -> £temporary1475 £temporary1475 0

scanFormat$220:	; Assign unsignedLongPtr £temporary1476 -> £temporary1475
x25403:	mov ax, [si]	; 2: 139 4
x25405:	mov [bp + 41], ax	; 3: 137 70 41

scanFormat$221:	; Deref £temporary1477 -> unsignedLongPtr unsignedLongPtr 0
x25408:	mov si, [bp + 41]	; 3: 139 118 41

scanFormat$222:	; Assign £temporary1477 -> unsignedLongPtr unsignedLongValue
x25411:	mov eax, [bp + 37]	; 4: 102 139 70 37
x25415:	mov [si], eax	; 3: 102 137 4

scanFormat$223:	; Assign percent 0
x25418:	mov word [bp + 13], 0	; 5: 199 70 13 0 0

scanFormat$224:	; Goto 327
x25423:	jmp scanFormat$327	; 3: 233 116 1

scanFormat$225:	; CallHeader 57 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanFormat$226:	; Call 57 scanLongDouble 0
x25426:	mov word [bp + 57], scanFormat$227	; 5: 199 70 57 96 99
x25431:	mov [bp + 59], bp	; 3: 137 110 59
x25434:	add bp, 57	; 3: 131 197 57
x25437:	jmp scanLongDouble	; 3: 233 24 10

scanFormat$227:	; PostCall 57

scanFormat$228:	; GetReturnValue £temporary1479

scanFormat$229:	; PopFloat longDoubleValue
x25440:	fstp qword [bp + 47]	; 3: 221 94 47

scanFormat$230:	; NotEqual 259 star 0
x25443:	cmp word [bp + 21], 0	; 4: 131 126 21 0
x25447:	jne scanFormat$259	; 2: 117 85

scanFormat$231:	; Equal 241 longIntOrDouble 0
x25449:	cmp word [bp + 17], 0	; 4: 131 126 17 0
x25453:	je scanFormat$241	; 2: 116 25

scanFormat$232:	; BinaryAdd arg_list arg_list 2
x25455:	add word [bp + 8], 2	; 4: 131 70 8 2

scanFormat$233:	; BinarySubtract £temporary1483 arg_list 2
x25459:	mov si, [bp + 8]	; 3: 139 118 8
x25462:	sub si, 2	; 3: 131 238 2

scanFormat$234:	; IntegralToIntegral £temporary1484 £temporary1483

scanFormat$235:	; Deref £temporary1485 -> £temporary1484 £temporary1484 0

scanFormat$236:	; Assign doublePtr £temporary1485 -> £temporary1484
x25465:	mov ax, [si]	; 2: 139 4
x25467:	mov [bp + 57], ax	; 3: 137 70 57

scanFormat$237:	; Deref £temporary1486 -> doublePtr doublePtr 0
x25470:	mov si, [bp + 57]	; 3: 139 118 57

scanFormat$238:	; PushFloat longDoubleValue
x25473:	fld qword [bp + 47]	; 3: 221 70 47

scanFormat$239:	; PopFloat £temporary1486 -> doublePtr
x25476:	fstp qword [si]	; 2: 221 28

scanFormat$240:	; Goto 259
x25478:	jmp scanFormat$259	; 2: 235 54

scanFormat$241:	; Equal 251 longDouble 0
x25480:	cmp word [bp + 19], 0	; 4: 131 126 19 0
x25484:	je scanFormat$251	; 2: 116 25

scanFormat$242:	; BinaryAdd arg_list arg_list 2
x25486:	add word [bp + 8], 2	; 4: 131 70 8 2

scanFormat$243:	; BinarySubtract £temporary1489 arg_list 2
x25490:	mov si, [bp + 8]	; 3: 139 118 8
x25493:	sub si, 2	; 3: 131 238 2

scanFormat$244:	; IntegralToIntegral £temporary1490 £temporary1489

scanFormat$245:	; Deref £temporary1491 -> £temporary1490 £temporary1490 0

scanFormat$246:	; Assign longDoublePtr £temporary1491 -> £temporary1490
x25496:	mov ax, [si]	; 2: 139 4
x25498:	mov [bp + 57], ax	; 3: 137 70 57

scanFormat$247:	; Deref £temporary1492 -> longDoublePtr longDoublePtr 0
x25501:	mov si, [bp + 57]	; 3: 139 118 57

scanFormat$248:	; PushFloat longDoubleValue
x25504:	fld qword [bp + 47]	; 3: 221 70 47

scanFormat$249:	; PopFloat £temporary1492 -> longDoublePtr
x25507:	fstp qword [si]	; 2: 221 28

scanFormat$250:	; Goto 259
x25509:	jmp scanFormat$259	; 2: 235 23

scanFormat$251:	; BinaryAdd arg_list arg_list 2
x25511:	add word [bp + 8], 2	; 4: 131 70 8 2

scanFormat$252:	; BinarySubtract £temporary1494 arg_list 2
x25515:	mov si, [bp + 8]	; 3: 139 118 8
x25518:	sub si, 2	; 3: 131 238 2

scanFormat$253:	; IntegralToIntegral £temporary1495 £temporary1494

scanFormat$254:	; Deref £temporary1496 -> £temporary1495 £temporary1495 0

scanFormat$255:	; Assign floatPtr £temporary1496 -> £temporary1495
x25521:	mov ax, [si]	; 2: 139 4
x25523:	mov [bp + 57], ax	; 3: 137 70 57

scanFormat$256:	; Deref £temporary1497 -> floatPtr floatPtr 0
x25526:	mov si, [bp + 57]	; 3: 139 118 57

scanFormat$257:	; PushFloat longDoubleValue
x25529:	fld qword [bp + 47]	; 3: 221 70 47

scanFormat$258:	; PopFloat £temporary1497 -> floatPtr
x25532:	fstp dword [si]	; 2: 217 28

scanFormat$259:	; Assign percent 0
x25534:	mov word [bp + 13], 0	; 5: 199 70 13 0 0

scanFormat$260:	; Goto 327
x25539:	jmp scanFormat$327	; 3: 233 0 1

scanFormat$261:	; Assign not 0
x25542:	mov word [bp + 57], 0	; 5: 199 70 57 0 0

scanFormat$262:	; Increment index
x25547:	inc word [bp + 31]	; 3: 255 70 31

scanFormat$263:	; BinaryAdd £temporary1503 format index
x25550:	mov si, [bp + 6]	; 3: 139 118 6
x25553:	add si, [bp + 31]	; 3: 3 118 31

scanFormat$264:	; Deref £temporary1502 -> £temporary1503 £temporary1503 0

scanFormat$265:	; NotEqual 268 £temporary1502 -> £temporary1503 94
x25556:	cmp byte [si], 94	; 3: 128 60 94
x25559:	jne scanFormat$268	; 2: 117 8

scanFormat$266:	; Assign not 1
x25561:	mov word [bp + 57], 1	; 5: 199 70 57 1 0

scanFormat$267:	; Increment index
x25566:	inc word [bp + 31]	; 3: 255 70 31

scanFormat$268:	; Assign startIndex index
x25569:	mov ax, [bp + 31]	; 3: 139 70 31
x25572:	mov [bp + 59], ax	; 3: 137 70 59

scanFormat$269:	; BinaryAdd £temporary1507 format index
x25575:	mov si, [bp + 6]	; 3: 139 118 6
x25578:	add si, [bp + 31]	; 3: 3 118 31

scanFormat$270:	; Deref £temporary1506 -> £temporary1507 £temporary1507 0

scanFormat$271:	; Equal 274 £temporary1506 -> £temporary1507 93
x25581:	cmp byte [si], 93	; 3: 128 60 93
x25584:	je scanFormat$274	; 2: 116 5

scanFormat$272:	; Increment index
x25586:	inc word [bp + 31]	; 3: 255 70 31

scanFormat$273:	; Goto 269
x25589:	jmp scanFormat$269	; 2: 235 240

scanFormat$274:	; BinarySubtract size index startIndex
x25591:	mov ax, [bp + 31]	; 3: 139 70 31
x25594:	sub ax, [bp + 59]	; 3: 43 70 59
x25597:	mov [bp + 61], ax	; 3: 137 70 61

scanFormat$275:	; BinaryAdd £temporary1512 format index
x25600:	mov si, [bp + 6]	; 3: 139 118 6
x25603:	add si, [bp + 31]	; 3: 3 118 31

scanFormat$276:	; Deref £temporary1511 -> £temporary1512 £temporary1512 0

scanFormat$277:	; Assign c £temporary1511 -> £temporary1512
x25606:	mov al, [si]	; 2: 138 4
x25608:	mov [bp + 63], al	; 3: 136 70 63

scanFormat$278:	; BinaryAdd £temporary1514 format index
x25611:	mov si, [bp + 6]	; 3: 139 118 6
x25614:	add si, [bp + 31]	; 3: 3 118 31

scanFormat$279:	; Deref £temporary1513 -> £temporary1514 £temporary1514 0

scanFormat$280:	; Assign £temporary1513 -> £temporary1514 0
x25617:	mov byte [si], 0	; 3: 198 4 0

scanFormat$281:	; NotEqual 298 star 0
x25620:	cmp word [bp + 21], 0	; 4: 131 126 21 0
x25624:	jne scanFormat$298	; 2: 117 58

scanFormat$282:	; BinaryAdd arg_list arg_list 2
x25626:	add word [bp + 8], 2	; 4: 131 70 8 2

scanFormat$283:	; BinarySubtract £temporary1518 arg_list 2
x25630:	mov si, [bp + 8]	; 3: 139 118 8
x25633:	sub si, 2	; 3: 131 238 2

scanFormat$284:	; IntegralToIntegral £temporary1519 £temporary1518

scanFormat$285:	; Deref £temporary1520 -> £temporary1519 £temporary1519 0

scanFormat$286:	; Assign string £temporary1520 -> £temporary1519
x25636:	mov ax, [si]	; 2: 139 4
x25638:	mov [bp + 64], ax	; 3: 137 70 64

scanFormat$287:	; CallHeader 66 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanFormat$288:	; Parameter 66 string 6
x25641:	mov ax, [bp + 64]	; 3: 139 70 64
x25644:	mov [bp + 72], ax	; 3: 137 70 72

scanFormat$289:	; BinaryAdd £temporary1522 format startIndex
x25647:	mov si, [bp + 6]	; 3: 139 118 6
x25650:	add si, [bp + 59]	; 3: 3 118 59

scanFormat$290:	; Deref £temporary1521 -> £temporary1522 £temporary1522 0

scanFormat$291:	; address £temporary1523 £temporary1521 -> £temporary1522

scanFormat$292:	; Parameter 66 £temporary1523 8
x25653:	mov [bp + 74], si	; 3: 137 118 74

scanFormat$293:	; Parameter 66 size 10
x25656:	mov ax, [bp + 61]	; 3: 139 70 61
x25659:	mov [bp + 76], ax	; 3: 137 70 76

scanFormat$294:	; Parameter 66 not 12
x25662:	mov ax, [bp + 57]	; 3: 139 70 57
x25665:	mov [bp + 78], ax	; 3: 137 70 78

scanFormat$295:	; Call 66 scanPattern 0
x25668:	mov word [bp + 66], scanFormat$296	; 5: 199 70 66 82 100
x25673:	mov [bp + 68], bp	; 3: 137 110 68
x25676:	add bp, 66	; 3: 131 197 66
x25679:	jmp scanPattern	; 3: 233 97 11

scanFormat$296:	; PostCall 66

scanFormat$297:	; Goto 308
x25682:	jmp scanFormat$308	; 2: 235 40

scanFormat$298:	; CallHeader 64 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanFormat$299:	; Parameter 64 0 6
x25684:	mov word [bp + 70], 0	; 5: 199 70 70 0 0

scanFormat$300:	; BinaryAdd £temporary1526 format startIndex
x25689:	mov si, [bp + 6]	; 3: 139 118 6
x25692:	add si, [bp + 59]	; 3: 3 118 59

scanFormat$301:	; Deref £temporary1525 -> £temporary1526 £temporary1526 0

scanFormat$302:	; address £temporary1527 £temporary1525 -> £temporary1526

scanFormat$303:	; Parameter 64 £temporary1527 8
x25695:	mov [bp + 72], si	; 3: 137 118 72

scanFormat$304:	; Parameter 64 size 10
x25698:	mov ax, [bp + 61]	; 3: 139 70 61
x25701:	mov [bp + 74], ax	; 3: 137 70 74

scanFormat$305:	; Parameter 64 not 12
x25704:	mov ax, [bp + 57]	; 3: 139 70 57
x25707:	mov [bp + 76], ax	; 3: 137 70 76

scanFormat$306:	; Call 64 scanPattern 0
x25710:	mov word [bp + 64], scanFormat$307	; 5: 199 70 64 124 100
x25715:	mov [bp + 66], bp	; 3: 137 110 66
x25718:	add bp, 64	; 3: 131 197 64
x25721:	jmp scanPattern	; 3: 233 55 11

scanFormat$307:	; PostCall 64

scanFormat$308:	; BinaryAdd £temporary1530 format index
x25724:	mov si, [bp + 6]	; 3: 139 118 6
x25727:	add si, [bp + 31]	; 3: 3 118 31

scanFormat$309:	; Deref £temporary1529 -> £temporary1530 £temporary1530 0

scanFormat$310:	; Assign £temporary1529 -> £temporary1530 c
x25730:	mov al, [bp + 63]	; 3: 138 70 63
x25733:	mov [si], al	; 2: 136 4

scanFormat$311:	; Goto 327
x25735:	jmp scanFormat$327	; 2: 235 61

scanFormat$312:	; BinaryAdd arg_list arg_list 2
x25737:	add word [bp + 8], 2	; 4: 131 70 8 2

scanFormat$313:	; BinarySubtract £temporary1532 arg_list 2
x25741:	mov si, [bp + 8]	; 3: 139 118 8
x25744:	sub si, 2	; 3: 131 238 2

scanFormat$314:	; IntegralToIntegral £temporary1533 £temporary1532

scanFormat$315:	; Deref £temporary1534 -> £temporary1533 £temporary1533 0

scanFormat$316:	; Assign charsPtr £temporary1534 -> £temporary1533
x25747:	mov ax, [si]	; 2: 139 4
x25749:	mov [bp + 35], ax	; 3: 137 70 35

scanFormat$317:	; Deref £temporary1535 -> charsPtr charsPtr 0
x25752:	mov si, [bp + 35]	; 3: 139 118 35

scanFormat$318:	; Assign £temporary1535 -> charsPtr g_inChars
x25755:	mov ax, [g_inChars]	; 3: 161 221 100
x25758:	mov [si], ax	; 2: 137 4

scanFormat$319:	; Assign percent 0
x25760:	mov word [bp + 13], 0	; 5: 199 70 13 0 0

scanFormat$320:	; Goto 327
x25765:	jmp scanFormat$327	; 2: 235 31

scanFormat$321:	; NotEqual 327 c 37
x25767:	cmp byte [bp + 10], 37	; 4: 128 126 10 37
x25771:	jne scanFormat$327	; 2: 117 25

scanFormat$322:	; Assign percent 1
x25773:	mov word [bp + 13], 1	; 5: 199 70 13 1 0

scanFormat$323:	; Assign shortInt 0
x25778:	mov word [bp + 15], 0	; 5: 199 70 15 0 0

scanFormat$324:	; Assign longIntOrDouble 0
x25783:	mov word [bp + 17], 0	; 5: 199 70 17 0 0

scanFormat$325:	; Assign longDouble 0
x25788:	mov word [bp + 19], 0	; 5: 199 70 19 0 0

scanFormat$326:	; Assign star 0
x25793:	mov word [bp + 21], 0	; 5: 199 70 21 0 0

scanFormat$327:	; Increment index
x25798:	inc word [bp + 31]	; 3: 255 70 31

scanFormat$328:	; Goto 8
x25801:	jmp scanFormat$8	; 3: 233 26 251

scanFormat$329:	; SetReturnValue g_inCount
x25804:	mov bx, [g_inCount]	; 4: 139 30 219 100

scanFormat$330:	; Return g_inCount
x25808:	mov ax, [bp]	; 3: 139 70 0
x25811:	mov di, [bp + 4]	; 3: 139 126 4
x25814:	mov bp, [bp + 2]	; 3: 139 110 2
x25817:	jmp ax	; 2: 255 224

scanFormat$331:	; FunctionEnd scanFormat

g_inCount:
x25819:	db 0, 0	; 2: 0 0

g_inChars:
x25821:	db 0, 0	; 2: 0 0

scanChar:	; Assign c 0
x25823:	mov byte [bp + 6], 0	; 4: 198 70 6 0

scanChar$1:	; Case 5 g_inStatus 0
x25827:	mov ax, [g_inStatus]	; 3: 161 184 95
x25830:	cmp ax, 0	; 3: 131 248 0
x25833:	je scanChar$5	; 2: 116 7

scanChar$2:	; Case 18 g_inStatus 1
x25835:	cmp ax, 1	; 3: 131 248 1
x25838:	je scanChar$18	; 2: 116 50

scanChar$3:	; CaseEnd g_inStatus

scanChar$4:	; Goto 26
x25840:	jmp scanChar$26	; 2: 235 79

scanChar$5:	; IntegralToIntegral £temporary1028 g_inDevice
x25842:	mov ax, [g_inDevice]	; 3: 161 186 95

scanChar$6:	; Assign stream £temporary1028
x25845:	mov [bp + 7], ax	; 3: 137 70 7

scanChar$7:	; Deref £temporary1029 -> stream stream 2
x25848:	mov si, [bp + 7]	; 3: 139 118 7

scanChar$8:	; Assign handle £temporary1029 -> stream
x25851:	mov ax, [si + 2]	; 3: 139 68 2
x25854:	mov [bp + 9], ax	; 3: 137 70 9

scanChar$9:	; AssignRegister ah 63
x25857:	mov ah, 63	; 2: 180 63

scanChar$10:	; AssignRegister bx handle
x25859:	mov bx, [bp + 9]	; 3: 139 94 9

scanChar$11:	; AssignRegister cx 1
x25862:	mov cx, 1	; 3: 185 1 0

scanChar$12:	; address £temporary1034 c
x25865:	mov dx, bp	; 2: 137 234
x25867:	add dx, 6	; 3: 131 194 6

scanChar$13:	; AssignRegister dx £temporary1034

scanChar$14:	; Interrupt 33
x25870:	int 33	; 2: 205 33

scanChar$15:	; Increment g_inChars
x25872:	inc word [g_inChars]	; 4: 255 6 221 100

scanChar$16:	; SetReturnValue c
x25876:	mov bl, [bp + 6]	; 3: 138 94 6

scanChar$17:	; Return c
x25879:	mov ax, [bp]	; 3: 139 70 0
x25882:	mov di, [bp + 4]	; 3: 139 126 4
x25885:	mov bp, [bp + 2]	; 3: 139 110 2
x25888:	jmp ax	; 2: 255 224

scanChar$18:	; IntegralToIntegral £temporary1036 g_inDevice
x25890:	mov ax, [g_inDevice]	; 3: 161 186 95

scanChar$19:	; Assign inString £temporary1036
x25893:	mov [bp + 11], ax	; 3: 137 70 11

scanChar$20:	; Assign £temporary1037 g_inChars
x25896:	mov ax, [g_inChars]	; 3: 161 221 100

scanChar$21:	; Increment g_inChars
x25899:	inc word [g_inChars]	; 4: 255 6 221 100

scanChar$22:	; BinaryAdd £temporary1040 inString £temporary1037
x25903:	mov si, [bp + 11]	; 3: 139 118 11
x25906:	add si, ax	; 2: 1 198

scanChar$23:	; Deref £temporary1039 -> £temporary1040 £temporary1040 0

scanChar$24:	; SetReturnValue £temporary1039 -> £temporary1040
x25908:	mov bl, [si]	; 2: 138 28

scanChar$25:	; Return £temporary1039 -> £temporary1040
x25910:	mov ax, [bp]	; 3: 139 70 0
x25913:	mov di, [bp + 4]	; 3: 139 126 4
x25916:	mov bp, [bp + 2]	; 3: 139 110 2
x25919:	jmp ax	; 2: 255 224

scanChar$26:	; SetReturnValue 0
x25921:	mov bl, 0	; 2: 179 0

scanChar$27:	; Return 0
x25923:	mov ax, [bp]	; 3: 139 70 0
x25926:	mov di, [bp + 4]	; 3: 139 126 4
x25929:	mov bp, [bp + 2]	; 3: 139 110 2
x25932:	jmp ax	; 2: 255 224

scanChar$28:	; FunctionEnd scanChar

scanString:	; Assign index 0
x25934:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

scanString$1:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanString$2:	; Call 12 scanChar 0
x25939:	mov word [bp + 12], scanString$3	; 5: 199 70 12 97 101
x25944:	mov [bp + 14], bp	; 3: 137 110 14
x25947:	add bp, 12	; 3: 131 197 12
x25950:	jmp scanChar	; 3: 233 126 255

scanString$3:	; PostCall 12

scanString$4:	; GetReturnValue £temporary1106

scanString$5:	; Assign input £temporary1106
x25953:	mov [bp + 12], bl	; 3: 136 94 12

scanString$6:	; Assign found 0
x25956:	mov word [bp + 13], 0	; 5: 199 70 13 0 0

scanString$7:	; CallHeader 15 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanString$8:	; IntegralToIntegral £temporary1107 input
x25961:	mov al, [bp + 12]	; 3: 138 70 12
x25964:	and ax, 255	; 3: 37 255 0
x25967:	cmp al, 0	; 2: 60 0
x25969:	jge scanString$9	; 2: 125 4
x25971:	neg al	; 2: 246 216
x25973:	neg ax	; 2: 247 216

scanString$9:	; Parameter 15 £temporary1107 6
x25975:	mov [bp + 21], ax	; 3: 137 70 21

scanString$10:	; Call 15 isspace 0
x25978:	mov word [bp + 15], scanString$11	; 5: 199 70 15 136 101
x25983:	mov [bp + 17], bp	; 3: 137 110 17
x25986:	add bp, 15	; 3: 131 197 15
x25989:	jmp isspace	; 3: 233 19 2

scanString$11:	; PostCall 15

scanString$12:	; GetReturnValue £temporary1108

scanString$13:	; Equal 20 £temporary1108 0
x25992:	cmp bx, 0	; 3: 131 251 0
x25995:	je scanString$20	; 2: 116 19

scanString$14:	; CallHeader 15 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanString$15:	; Call 15 scanChar 0
x25997:	mov word [bp + 15], scanString$16	; 5: 199 70 15 155 101
x26002:	mov [bp + 17], bp	; 3: 137 110 17
x26005:	add bp, 15	; 3: 131 197 15
x26008:	jmp scanChar	; 3: 233 68 255

scanString$16:	; PostCall 15

scanString$17:	; GetReturnValue £temporary1109

scanString$18:	; Assign input £temporary1109
x26011:	mov [bp + 12], bl	; 3: 136 94 12

scanString$19:	; Goto 7
x26014:	jmp scanString$7	; 2: 235 201

scanString$20:	; Equal 82 string 0
x26016:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x26020:	je scanString$82	; 4: 15 132 11 1

scanString$21:	; NotEqual 50 precision 0
x26024:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x26028:	jne scanString$50	; 2: 117 121

scanString$22:	; CallHeader 15 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanString$23:	; IntegralToIntegral £temporary1113 input
x26030:	mov al, [bp + 12]	; 3: 138 70 12
x26033:	and ax, 255	; 3: 37 255 0
x26036:	cmp al, 0	; 2: 60 0
x26038:	jge scanString$24	; 2: 125 4
x26040:	neg al	; 2: 246 216
x26042:	neg ax	; 2: 247 216

scanString$24:	; Parameter 15 £temporary1113 6
x26044:	mov [bp + 21], ax	; 3: 137 70 21

scanString$25:	; Call 15 isspace 0
x26047:	mov word [bp + 15], scanString$26	; 5: 199 70 15 205 101
x26052:	mov [bp + 17], bp	; 3: 137 110 17
x26055:	add bp, 15	; 3: 131 197 15
x26058:	jmp isspace	; 3: 233 206 1

scanString$26:	; PostCall 15

scanString$27:	; GetReturnValue £temporary1114

scanString$28:	; NotEqual 45 £temporary1114 0
x26061:	cmp bx, 0	; 3: 131 251 0
x26064:	jne scanString$45	; 2: 117 69

scanString$29:	; IntegralToIntegral £temporary1117 input
x26066:	mov al, [bp + 12]	; 3: 138 70 12
x26069:	and ax, 255	; 3: 37 255 0
x26072:	cmp al, 0	; 2: 60 0
x26074:	jge scanString$30	; 2: 125 4
x26076:	neg al	; 2: 246 216
x26078:	neg ax	; 2: 247 216

scanString$30:	; Equal 45 £temporary1117 -1
x26080:	cmp ax, -1	; 3: 131 248 255
x26083:	je scanString$45	; 2: 116 50

scanString$31:	; Equal 45 input 10
x26085:	cmp byte [bp + 12], 10	; 4: 128 126 12 10
x26089:	je scanString$45	; 2: 116 44

scanString$32:	; Assign £temporary1122 index
x26091:	mov ax, [bp + 10]	; 3: 139 70 10

scanString$33:	; Increment index
x26094:	inc word [bp + 10]	; 3: 255 70 10

scanString$34:	; BinaryAdd £temporary1125 string £temporary1122
x26097:	mov si, [bp + 6]	; 3: 139 118 6
x26100:	add si, ax	; 2: 1 198

scanString$35:	; Deref £temporary1124 -> £temporary1125 £temporary1125 0

scanString$36:	; Assign £temporary1124 -> £temporary1125 input
x26102:	mov al, [bp + 12]	; 3: 138 70 12
x26105:	mov [si], al	; 2: 136 4

scanString$37:	; CallHeader 15 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanString$38:	; Call 15 scanChar 0
x26107:	mov word [bp + 15], scanString$39	; 5: 199 70 15 9 102
x26112:	mov [bp + 17], bp	; 3: 137 110 17
x26115:	add bp, 15	; 3: 131 197 15
x26118:	jmp scanChar	; 3: 233 214 254

scanString$39:	; PostCall 15

scanString$40:	; GetReturnValue £temporary1126

scanString$41:	; Assign input £temporary1126
x26121:	mov [bp + 12], bl	; 3: 136 94 12

scanString$42:	; Assign found 1
x26124:	mov word [bp + 13], 1	; 5: 199 70 13 1 0

scanString$43:	; Increment g_inChars
x26129:	inc word [g_inChars]	; 4: 255 6 221 100

scanString$44:	; Goto 22
x26133:	jmp scanString$22	; 2: 235 151

scanString$45:	; BinaryAdd £temporary1129 string index
x26135:	mov si, [bp + 6]	; 3: 139 118 6
x26138:	add si, [bp + 10]	; 3: 3 118 10

scanString$46:	; Deref £temporary1128 -> £temporary1129 £temporary1129 0

scanString$47:	; Assign £temporary1128 -> £temporary1129 0
x26141:	mov byte [si], 0	; 3: 198 4 0

scanString$48:	; Increment g_inChars
x26144:	inc word [g_inChars]	; 4: 255 6 221 100

scanString$49:	; Goto 126
x26148:	jmp scanString$126	; 3: 233 95 1

scanString$50:	; Assign £temporary1131 precision
x26151:	mov ax, [bp + 8]	; 3: 139 70 8

scanString$51:	; Decrement precision
x26154:	dec word [bp + 8]	; 3: 255 78 8

scanString$52:	; SignedLessThanEqual 76 £temporary1131 0
x26157:	cmp ax, 0	; 3: 131 248 0
x26160:	jle scanString$76	; 2: 126 105

scanString$53:	; CallHeader 15 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanString$54:	; IntegralToIntegral £temporary1134 input
x26162:	mov al, [bp + 12]	; 3: 138 70 12
x26165:	and ax, 255	; 3: 37 255 0
x26168:	cmp al, 0	; 2: 60 0
x26170:	jge scanString$55	; 2: 125 4
x26172:	neg al	; 2: 246 216
x26174:	neg ax	; 2: 247 216

scanString$55:	; Parameter 15 £temporary1134 6
x26176:	mov [bp + 21], ax	; 3: 137 70 21

scanString$56:	; Call 15 isspace 0
x26179:	mov word [bp + 15], scanString$57	; 5: 199 70 15 81 102
x26184:	mov [bp + 17], bp	; 3: 137 110 17
x26187:	add bp, 15	; 3: 131 197 15
x26190:	jmp isspace	; 3: 233 74 1

scanString$57:	; PostCall 15

scanString$58:	; GetReturnValue £temporary1135

scanString$59:	; NotEqual 76 £temporary1135 0
x26193:	cmp bx, 0	; 3: 131 251 0
x26196:	jne scanString$76	; 2: 117 69

scanString$60:	; IntegralToIntegral £temporary1138 input
x26198:	mov al, [bp + 12]	; 3: 138 70 12
x26201:	and ax, 255	; 3: 37 255 0
x26204:	cmp al, 0	; 2: 60 0
x26206:	jge scanString$61	; 2: 125 4
x26208:	neg al	; 2: 246 216
x26210:	neg ax	; 2: 247 216

scanString$61:	; Equal 76 £temporary1138 -1
x26212:	cmp ax, -1	; 3: 131 248 255
x26215:	je scanString$76	; 2: 116 50

scanString$62:	; Equal 76 input 10
x26217:	cmp byte [bp + 12], 10	; 4: 128 126 12 10
x26221:	je scanString$76	; 2: 116 44

scanString$63:	; Assign £temporary1144 index
x26223:	mov ax, [bp + 10]	; 3: 139 70 10

scanString$64:	; Increment index
x26226:	inc word [bp + 10]	; 3: 255 70 10

scanString$65:	; BinaryAdd £temporary1147 string £temporary1144
x26229:	mov si, [bp + 6]	; 3: 139 118 6
x26232:	add si, ax	; 2: 1 198

scanString$66:	; Deref £temporary1146 -> £temporary1147 £temporary1147 0

scanString$67:	; Assign £temporary1146 -> £temporary1147 input
x26234:	mov al, [bp + 12]	; 3: 138 70 12
x26237:	mov [si], al	; 2: 136 4

scanString$68:	; CallHeader 15 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanString$69:	; Call 15 scanChar 0
x26239:	mov word [bp + 15], scanString$70	; 5: 199 70 15 141 102
x26244:	mov [bp + 17], bp	; 3: 137 110 17
x26247:	add bp, 15	; 3: 131 197 15
x26250:	jmp scanChar	; 3: 233 82 254

scanString$70:	; PostCall 15

scanString$71:	; GetReturnValue £temporary1148

scanString$72:	; Assign input £temporary1148
x26253:	mov [bp + 12], bl	; 3: 136 94 12

scanString$73:	; Assign found 1
x26256:	mov word [bp + 13], 1	; 5: 199 70 13 1 0

scanString$74:	; Increment g_inChars
x26261:	inc word [g_inChars]	; 4: 255 6 221 100

scanString$75:	; Goto 50
x26265:	jmp scanString$50	; 2: 235 140

scanString$76:	; SignedLessThanEqual 126 precision 0
x26267:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x26271:	jle scanString$126	; 4: 15 142 227 0

scanString$77:	; BinaryAdd £temporary1152 string index
x26275:	mov si, [bp + 6]	; 3: 139 118 6
x26278:	add si, [bp + 10]	; 3: 3 118 10

scanString$78:	; Deref £temporary1151 -> £temporary1152 £temporary1152 0

scanString$79:	; Assign £temporary1151 -> £temporary1152 0
x26281:	mov byte [si], 0	; 3: 198 4 0

scanString$80:	; Increment g_inChars
x26284:	inc word [g_inChars]	; 4: 255 6 221 100

scanString$81:	; Goto 126
x26288:	jmp scanString$126	; 3: 233 211 0

scanString$82:	; NotEqual 103 precision 0
x26291:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x26295:	jne scanString$103	; 2: 117 95

scanString$83:	; CallHeader 15 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanString$84:	; IntegralToIntegral £temporary1155 input
x26297:	mov al, [bp + 12]	; 3: 138 70 12
x26300:	and ax, 255	; 3: 37 255 0
x26303:	cmp al, 0	; 2: 60 0
x26305:	jge scanString$85	; 2: 125 4
x26307:	neg al	; 2: 246 216
x26309:	neg ax	; 2: 247 216

scanString$85:	; Parameter 15 £temporary1155 6
x26311:	mov [bp + 21], ax	; 3: 137 70 21

scanString$86:	; Call 15 isspace 0
x26314:	mov word [bp + 15], scanString$87	; 5: 199 70 15 216 102
x26319:	mov [bp + 17], bp	; 3: 137 110 17
x26322:	add bp, 15	; 3: 131 197 15
x26325:	jmp isspace	; 3: 233 195 0

scanString$87:	; PostCall 15

scanString$88:	; GetReturnValue £temporary1156

scanString$89:	; NotEqual 101 £temporary1156 0
x26328:	cmp bx, 0	; 3: 131 251 0
x26331:	jne scanString$101	; 2: 117 53

scanString$90:	; IntegralToIntegral £temporary1159 input
x26333:	mov al, [bp + 12]	; 3: 138 70 12
x26336:	and ax, 255	; 3: 37 255 0
x26339:	cmp al, 0	; 2: 60 0
x26341:	jge scanString$91	; 2: 125 4
x26343:	neg al	; 2: 246 216
x26345:	neg ax	; 2: 247 216

scanString$91:	; Equal 101 £temporary1159 -1
x26347:	cmp ax, -1	; 3: 131 248 255
x26350:	je scanString$101	; 2: 116 34

scanString$92:	; Equal 101 input 10
x26352:	cmp byte [bp + 12], 10	; 4: 128 126 12 10
x26356:	je scanString$101	; 2: 116 28

scanString$93:	; CallHeader 15 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanString$94:	; Call 15 scanChar 0
x26358:	mov word [bp + 15], scanString$95	; 5: 199 70 15 4 103
x26363:	mov [bp + 17], bp	; 3: 137 110 17
x26366:	add bp, 15	; 3: 131 197 15
x26369:	jmp scanChar	; 3: 233 219 253

scanString$95:	; PostCall 15

scanString$96:	; GetReturnValue £temporary1164

scanString$97:	; Assign input £temporary1164
x26372:	mov [bp + 12], bl	; 3: 136 94 12

scanString$98:	; Assign found 1
x26375:	mov word [bp + 13], 1	; 5: 199 70 13 1 0

scanString$99:	; Increment g_inChars
x26380:	inc word [g_inChars]	; 4: 255 6 221 100

scanString$100:	; Goto 83
x26384:	jmp scanString$83	; 2: 235 167

scanString$101:	; Increment g_inChars
x26386:	inc word [g_inChars]	; 4: 255 6 221 100

scanString$102:	; Goto 126
x26390:	jmp scanString$126	; 2: 235 110

scanString$103:	; Assign £temporary1167 precision
x26392:	mov ax, [bp + 8]	; 3: 139 70 8

scanString$104:	; Decrement precision
x26395:	dec word [bp + 8]	; 3: 255 78 8

scanString$105:	; SignedLessThanEqual 124 £temporary1167 0
x26398:	cmp ax, 0	; 3: 131 248 0
x26401:	jle scanString$124	; 2: 126 89

scanString$106:	; CallHeader 15 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanString$107:	; IntegralToIntegral £temporary1170 input
x26403:	mov al, [bp + 12]	; 3: 138 70 12
x26406:	and ax, 255	; 3: 37 255 0
x26409:	cmp al, 0	; 2: 60 0
x26411:	jge scanString$108	; 2: 125 4
x26413:	neg al	; 2: 246 216
x26415:	neg ax	; 2: 247 216

scanString$108:	; Parameter 15 £temporary1170 6
x26417:	mov [bp + 21], ax	; 3: 137 70 21

scanString$109:	; Call 15 isspace 0
x26420:	mov word [bp + 15], scanString$110	; 5: 199 70 15 66 103
x26425:	mov [bp + 17], bp	; 3: 137 110 17
x26428:	add bp, 15	; 3: 131 197 15
x26431:	nop	; 1: 144
x26432:	jmp isspace	; 2: 235 89

scanString$110:	; PostCall 15

scanString$111:	; GetReturnValue £temporary1171

scanString$112:	; NotEqual 124 £temporary1171 0
x26434:	cmp bx, 0	; 3: 131 251 0
x26437:	jne scanString$124	; 2: 117 53

scanString$113:	; IntegralToIntegral £temporary1174 input
x26439:	mov al, [bp + 12]	; 3: 138 70 12
x26442:	and ax, 255	; 3: 37 255 0
x26445:	cmp al, 0	; 2: 60 0
x26447:	jge scanString$114	; 2: 125 4
x26449:	neg al	; 2: 246 216
x26451:	neg ax	; 2: 247 216

scanString$114:	; Equal 124 £temporary1174 -1
x26453:	cmp ax, -1	; 3: 131 248 255
x26456:	je scanString$124	; 2: 116 34

scanString$115:	; Equal 124 input 10
x26458:	cmp byte [bp + 12], 10	; 4: 128 126 12 10
x26462:	je scanString$124	; 2: 116 28

scanString$116:	; CallHeader 15 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanString$117:	; Call 15 scanChar 0
x26464:	mov word [bp + 15], scanString$118	; 5: 199 70 15 110 103
x26469:	mov [bp + 17], bp	; 3: 137 110 17
x26472:	add bp, 15	; 3: 131 197 15
x26475:	jmp scanChar	; 3: 233 113 253

scanString$118:	; PostCall 15

scanString$119:	; GetReturnValue £temporary1180

scanString$120:	; Assign input £temporary1180
x26478:	mov [bp + 12], bl	; 3: 136 94 12

scanString$121:	; Assign found 1
x26481:	mov word [bp + 13], 1	; 5: 199 70 13 1 0

scanString$122:	; Increment g_inChars
x26486:	inc word [g_inChars]	; 4: 255 6 221 100

scanString$123:	; Goto 103
x26490:	jmp scanString$103	; 2: 235 156

scanString$124:	; SignedLessThanEqual 126 precision 0
x26492:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x26496:	jle scanString$126	; 2: 126 4

scanString$125:	; Increment g_inChars
x26498:	inc word [g_inChars]	; 4: 255 6 221 100

scanString$126:	; Equal 128 found 0
x26502:	cmp word [bp + 13], 0	; 4: 131 126 13 0
x26506:	je scanString$128	; 2: 116 4

scanString$127:	; Increment g_inCount
x26508:	inc word [g_inCount]	; 4: 255 6 219 100

scanString$128:	; Return 0
x26512:	mov ax, [bp]	; 3: 139 70 0
x26515:	mov di, [bp + 4]	; 3: 139 126 4
x26518:	mov bp, [bp + 2]	; 3: 139 110 2
x26521:	jmp ax	; 2: 255 224

scanString$129:	; FunctionEnd scanString

isspace:	; Equal 6 c 32
x26523:	cmp word [bp + 6], 32	; 4: 131 126 6 32
x26527:	je isspace$6	; 2: 116 30

isspace$1:	; Equal 6 c 12
x26529:	cmp word [bp + 6], 12	; 4: 131 126 6 12
x26533:	je isspace$6	; 2: 116 24

isspace$2:	; Equal 6 c 10
x26535:	cmp word [bp + 6], 10	; 4: 131 126 6 10
x26539:	je isspace$6	; 2: 116 18

isspace$3:	; Equal 6 c 13
x26541:	cmp word [bp + 6], 13	; 4: 131 126 6 13
x26545:	je isspace$6	; 2: 116 12

isspace$4:	; Equal 6 c 9
x26547:	cmp word [bp + 6], 9	; 4: 131 126 6 9
x26551:	je isspace$6	; 2: 116 6

isspace$5:	; NotEqual 8 c 11
x26553:	cmp word [bp + 6], 11	; 4: 131 126 6 11
x26557:	jne isspace$8	; 2: 117 5

isspace$6:	; Assign £temporary251 1
x26559:	mov bx, 1	; 3: 187 1 0

isspace$7:	; Goto 9
x26562:	jmp isspace$9	; 2: 235 3

isspace$8:	; Assign £temporary251 0
x26564:	mov bx, 0	; 3: 187 0 0

isspace$9:	; SetReturnValue £temporary251

isspace$10:	; Return £temporary251
x26567:	mov ax, [bp]	; 3: 139 70 0
x26570:	mov di, [bp + 4]	; 3: 139 126 4
x26573:	mov bp, [bp + 2]	; 3: 139 110 2
x26576:	jmp ax	; 2: 255 224

isspace$11:	; FunctionEnd isspace

scanLongInt:	; Assign longValue 0
x26578:	mov dword [bp + 8], 0	; 8: 102 199 70 8 0 0 0 0

scanLongInt$1:	; Assign minus 0
x26586:	mov word [bp + 12], 0	; 5: 199 70 12 0 0

scanLongInt$2:	; Assign found 0
x26591:	mov word [bp + 14], 0	; 5: 199 70 14 0 0

scanLongInt$3:	; CallHeader 16 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongInt$4:	; Call 16 scanChar 0
x26596:	mov word [bp + 16], scanLongInt$5	; 5: 199 70 16 242 103
x26601:	mov [bp + 18], bp	; 3: 137 110 18
x26604:	add bp, 16	; 3: 131 197 16
x26607:	jmp scanChar	; 3: 233 237 252

scanLongInt$5:	; PostCall 16

scanLongInt$6:	; GetReturnValue £temporary1243

scanLongInt$7:	; Assign input £temporary1243
x26610:	mov [bp + 16], bl	; 3: 136 94 16

scanLongInt$8:	; CallHeader 17 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongInt$9:	; IntegralToIntegral £temporary1244 input
x26613:	mov al, [bp + 16]	; 3: 138 70 16
x26616:	and ax, 255	; 3: 37 255 0
x26619:	cmp al, 0	; 2: 60 0
x26621:	jge scanLongInt$10	; 2: 125 4
x26623:	neg al	; 2: 246 216
x26625:	neg ax	; 2: 247 216

scanLongInt$10:	; Parameter 17 £temporary1244 6
x26627:	mov [bp + 23], ax	; 3: 137 70 23

scanLongInt$11:	; Call 17 isspace 0
x26630:	mov word [bp + 17], scanLongInt$12	; 5: 199 70 17 20 104
x26635:	mov [bp + 19], bp	; 3: 137 110 19
x26638:	add bp, 17	; 3: 131 197 17
x26641:	nop	; 1: 144
x26642:	jmp isspace	; 2: 235 135

scanLongInt$12:	; PostCall 17

scanLongInt$13:	; GetReturnValue £temporary1245

scanLongInt$14:	; Equal 21 £temporary1245 0
x26644:	cmp bx, 0	; 3: 131 251 0
x26647:	je scanLongInt$21	; 2: 116 19

scanLongInt$15:	; CallHeader 17 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongInt$16:	; Call 17 scanChar 0
x26649:	mov word [bp + 17], scanLongInt$17	; 5: 199 70 17 39 104
x26654:	mov [bp + 19], bp	; 3: 137 110 19
x26657:	add bp, 17	; 3: 131 197 17
x26660:	jmp scanChar	; 3: 233 184 252

scanLongInt$17:	; PostCall 17

scanLongInt$18:	; GetReturnValue £temporary1246

scanLongInt$19:	; Assign input £temporary1246
x26663:	mov [bp + 16], bl	; 3: 136 94 16

scanLongInt$20:	; Goto 8
x26666:	jmp scanLongInt$8	; 2: 235 201

scanLongInt$21:	; NotEqual 28 input 43
x26668:	cmp byte [bp + 16], 43	; 4: 128 126 16 43
x26672:	jne scanLongInt$28	; 2: 117 19

scanLongInt$22:	; CallHeader 17 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongInt$23:	; Call 17 scanChar 0
x26674:	mov word [bp + 17], scanLongInt$24	; 5: 199 70 17 64 104
x26679:	mov [bp + 19], bp	; 3: 137 110 19
x26682:	add bp, 17	; 3: 131 197 17
x26685:	jmp scanChar	; 3: 233 159 252

scanLongInt$24:	; PostCall 17

scanLongInt$25:	; GetReturnValue £temporary1249

scanLongInt$26:	; Assign input £temporary1249
x26688:	mov [bp + 16], bl	; 3: 136 94 16

scanLongInt$27:	; Goto 35
x26691:	jmp scanLongInt$35	; 2: 235 28

scanLongInt$28:	; NotEqual 35 input 45
x26693:	cmp byte [bp + 16], 45	; 4: 128 126 16 45
x26697:	jne scanLongInt$35	; 2: 117 22

scanLongInt$29:	; Assign minus 1
x26699:	mov word [bp + 12], 1	; 5: 199 70 12 1 0

scanLongInt$30:	; CallHeader 17 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongInt$31:	; Call 17 scanChar 0
x26704:	mov word [bp + 17], scanLongInt$32	; 5: 199 70 17 94 104
x26709:	mov [bp + 19], bp	; 3: 137 110 19
x26712:	add bp, 17	; 3: 131 197 17
x26715:	jmp scanChar	; 3: 233 129 252

scanLongInt$32:	; PostCall 17

scanLongInt$33:	; GetReturnValue £temporary1251

scanLongInt$34:	; Assign input £temporary1251
x26718:	mov [bp + 16], bl	; 3: 136 94 16

scanLongInt$35:	; NotEqual 59 base 0
x26721:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x26725:	jne scanLongInt$59	; 2: 117 95

scanLongInt$36:	; NotEqual 58 input 48
x26727:	cmp byte [bp + 16], 48	; 4: 128 126 16 48
x26731:	jne scanLongInt$58	; 2: 117 84

scanLongInt$37:	; CallHeader 17 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongInt$38:	; Call 17 scanChar 0
x26733:	mov word [bp + 17], scanLongInt$39	; 5: 199 70 17 123 104
x26738:	mov [bp + 19], bp	; 3: 137 110 19
x26741:	add bp, 17	; 3: 131 197 17
x26744:	jmp scanChar	; 3: 233 100 252

scanLongInt$39:	; PostCall 17

scanLongInt$40:	; GetReturnValue £temporary1254

scanLongInt$41:	; Assign input £temporary1254
x26747:	mov [bp + 16], bl	; 3: 136 94 16

scanLongInt$42:	; CallHeader 17 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongInt$43:	; IntegralToIntegral £temporary1255 input
x26750:	mov al, [bp + 16]	; 3: 138 70 16
x26753:	and ax, 255	; 3: 37 255 0
x26756:	cmp al, 0	; 2: 60 0
x26758:	jge scanLongInt$44	; 2: 125 4
x26760:	neg al	; 2: 246 216
x26762:	neg ax	; 2: 247 216

scanLongInt$44:	; Parameter 17 £temporary1255 6
x26764:	mov [bp + 23], ax	; 3: 137 70 23

scanLongInt$45:	; Call 17 tolower 0
x26767:	mov word [bp + 17], scanLongInt$46	; 5: 199 70 17 157 104
x26772:	mov [bp + 19], bp	; 3: 137 110 19
x26775:	add bp, 17	; 3: 131 197 17
x26778:	jmp tolower	; 3: 233 124 188

scanLongInt$46:	; PostCall 17

scanLongInt$47:	; GetReturnValue £temporary1256

scanLongInt$48:	; NotEqual 56 £temporary1256 120
x26781:	cmp bx, 120	; 3: 131 251 120
x26784:	jne scanLongInt$56	; 2: 117 24

scanLongInt$49:	; Assign base 16
x26786:	mov word [bp + 6], 16	; 5: 199 70 6 16 0

scanLongInt$50:	; CallHeader 17 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongInt$51:	; Call 17 scanChar 0
x26791:	mov word [bp + 17], scanLongInt$52	; 5: 199 70 17 181 104
x26796:	mov [bp + 19], bp	; 3: 137 110 19
x26799:	add bp, 17	; 3: 131 197 17
x26802:	jmp scanChar	; 3: 233 42 252

scanLongInt$52:	; PostCall 17

scanLongInt$53:	; GetReturnValue £temporary1258

scanLongInt$54:	; Assign input £temporary1258
x26805:	mov [bp + 16], bl	; 3: 136 94 16

scanLongInt$55:	; Goto 59
x26808:	jmp scanLongInt$59	; 2: 235 12

scanLongInt$56:	; Assign base 8
x26810:	mov word [bp + 6], 8	; 5: 199 70 6 8 0

scanLongInt$57:	; Goto 59
x26815:	jmp scanLongInt$59	; 2: 235 5

scanLongInt$58:	; Assign base 10
x26817:	mov word [bp + 6], 10	; 5: 199 70 6 10 0

scanLongInt$59:	; CallHeader 17 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongInt$60:	; Parameter 17 input 6
x26822:	mov al, [bp + 16]	; 3: 138 70 16
x26825:	mov [bp + 23], al	; 3: 136 70 23

scanLongInt$61:	; Parameter 17 base 7
x26828:	mov ax, [bp + 6]	; 3: 139 70 6
x26831:	mov [bp + 24], ax	; 3: 137 70 24

scanLongInt$62:	; Call 17 isDigitInBase 0
x26834:	mov word [bp + 17], scanLongInt$63	; 5: 199 70 17 224 104
x26839:	mov [bp + 19], bp	; 3: 137 110 19
x26842:	add bp, 17	; 3: 131 197 17
x26845:	jmp @2758$isDigitInBase	; 3: 233 167 0

scanLongInt$63:	; PostCall 17

scanLongInt$64:	; GetReturnValue £temporary1259

scanLongInt$65:	; Equal 82 £temporary1259 0
x26848:	cmp bx, 0	; 3: 131 251 0
x26851:	je scanLongInt$82	; 2: 116 100

scanLongInt$66:	; IntegralToIntegral £temporary1260 base
x26853:	mov bx, [bp + 6]	; 3: 139 94 6
x26856:	and ebx, 65535	; 7: 102 129 227 255 255 0 0
x26863:	cmp bx, 0	; 3: 131 251 0
x26866:	jge scanLongInt$67	; 2: 125 5
x26868:	neg bx	; 2: 247 219
x26870:	neg ebx	; 3: 102 247 219

scanLongInt$67:	; SignedMultiply longValue longValue £temporary1260
x26873:	mov eax, [bp + 8]	; 4: 102 139 70 8
x26877:	xor edx, edx	; 3: 102 49 210
x26880:	imul ebx	; 3: 102 247 235
x26883:	mov [bp + 8], eax	; 4: 102 137 70 8

scanLongInt$68:	; CallHeader 17 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongInt$69:	; Parameter 17 input 6
x26887:	mov al, [bp + 16]	; 3: 138 70 16
x26890:	mov [bp + 23], al	; 3: 136 70 23

scanLongInt$70:	; Call 17 digitToValue 0
x26893:	mov word [bp + 17], scanLongInt$71	; 5: 199 70 17 27 105
x26898:	mov [bp + 19], bp	; 3: 137 110 19
x26901:	add bp, 17	; 3: 131 197 17
x26904:	jmp @2822$digitToValue	; 3: 233 243 1

scanLongInt$71:	; PostCall 17

scanLongInt$72:	; GetReturnValue £temporary1262

scanLongInt$73:	; IntegralToIntegral £temporary1263 £temporary1262
x26907:	and ebx, 65535	; 7: 102 129 227 255 255 0 0
x26914:	cmp bx, 0	; 3: 131 251 0
x26917:	jge scanLongInt$74	; 2: 125 5
x26919:	neg bx	; 2: 247 219
x26921:	neg ebx	; 3: 102 247 219

scanLongInt$74:	; BinaryAdd longValue longValue £temporary1263
x26924:	add [bp + 8], ebx	; 4: 102 1 94 8

scanLongInt$75:	; CallHeader 17 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongInt$76:	; Call 17 scanChar 0
x26928:	mov word [bp + 17], scanLongInt$77	; 5: 199 70 17 62 105
x26933:	mov [bp + 19], bp	; 3: 137 110 19
x26936:	add bp, 17	; 3: 131 197 17
x26939:	jmp scanChar	; 3: 233 161 251

scanLongInt$77:	; PostCall 17

scanLongInt$78:	; GetReturnValue £temporary1265

scanLongInt$79:	; Assign input £temporary1265
x26942:	mov [bp + 16], bl	; 3: 136 94 16

scanLongInt$80:	; Assign found 1
x26945:	mov word [bp + 14], 1	; 5: 199 70 14 1 0

scanLongInt$81:	; Goto 59
x26950:	jmp scanLongInt$59	; 3: 233 125 255

scanLongInt$82:	; Equal 85 minus 0
x26953:	cmp word [bp + 12], 0	; 4: 131 126 12 0
x26957:	je scanLongInt$85	; 2: 116 11

scanLongInt$83:	; UnarySubtract £temporary1267 longValue
x26959:	mov eax, [bp + 8]	; 4: 102 139 70 8
x26963:	neg eax	; 3: 102 247 216

scanLongInt$84:	; Assign longValue £temporary1267
x26966:	mov [bp + 8], eax	; 4: 102 137 70 8

scanLongInt$85:	; Equal 87 found 0
x26970:	cmp word [bp + 14], 0	; 4: 131 126 14 0
x26974:	je scanLongInt$87	; 2: 116 4

scanLongInt$86:	; Increment g_inCount
x26976:	inc word [g_inCount]	; 4: 255 6 219 100

scanLongInt$87:	; CallHeader 17 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongInt$88:	; Parameter 17 input 6
x26980:	mov al, [bp + 16]	; 3: 138 70 16
x26983:	mov [bp + 23], al	; 3: 136 70 23

scanLongInt$89:	; Call 17 unscanChar 0
x26986:	mov word [bp + 17], scanLongInt$90	; 5: 199 70 17 120 105
x26991:	mov [bp + 19], bp	; 3: 137 110 19
x26994:	add bp, 17	; 3: 131 197 17
x26997:	jmp unscanChar	; 3: 233 112 2

scanLongInt$90:	; PostCall 17

scanLongInt$91:	; SetReturnValue longValue
x27000:	mov ebx, [bp + 8]	; 4: 102 139 94 8

scanLongInt$92:	; Return longValue
x27004:	mov ax, [bp]	; 3: 139 70 0
x27007:	mov di, [bp + 4]	; 3: 139 126 4
x27010:	mov bp, [bp + 2]	; 3: 139 110 2
x27013:	jmp ax	; 2: 255 224

scanLongInt$93:	; FunctionEnd scanLongInt

@2758$isDigitInBase:	; CallHeader 9 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

@2758$isDigitInBase$1:	; IntegralToIntegral £temporary1191 c
x27015:	mov al, [bp + 6]	; 3: 138 70 6
x27018:	and ax, 255	; 3: 37 255 0
x27021:	cmp al, 0	; 2: 60 0
x27023:	jge @2758$isDigitInBase$2	; 2: 125 4
x27025:	neg al	; 2: 246 216
x27027:	neg ax	; 2: 247 216

@2758$isDigitInBase$2:	; Parameter 9 £temporary1191 6
x27029:	mov [bp + 15], ax	; 3: 137 70 15

@2758$isDigitInBase$3:	; Call 9 isdigit 0
x27032:	mov word [bp + 9], @2758$isDigitInBase$4	; 5: 199 70 9 166 105
x27037:	mov [bp + 11], bp	; 3: 137 110 11
x27040:	add bp, 9	; 3: 131 197 9
x27043:	jmp isdigit	; 3: 233 189 193

@2758$isDigitInBase$4:	; PostCall 9

@2758$isDigitInBase$5:	; GetReturnValue £temporary1192

@2758$isDigitInBase$6:	; Equal 17 £temporary1192 0
x27046:	cmp bx, 0	; 3: 131 251 0
x27049:	je @2758$isDigitInBase$17	; 2: 116 52

@2758$isDigitInBase$7:	; BinarySubtract £temporary1193 c 48
x27051:	mov al, [bp + 6]	; 3: 138 70 6
x27054:	sub al, 48	; 2: 44 48

@2758$isDigitInBase$8:	; IntegralToIntegral £temporary1194 £temporary1193
x27056:	and ax, 255	; 3: 37 255 0
x27059:	cmp al, 0	; 2: 60 0
x27061:	jge @2758$isDigitInBase$9	; 2: 125 4
x27063:	neg al	; 2: 246 216
x27065:	neg ax	; 2: 247 216

@2758$isDigitInBase$9:	; Assign value £temporary1194
x27067:	mov [bp + 9], ax	; 3: 137 70 9

@2758$isDigitInBase$10:	; SignedLessThan 14 value 0
x27070:	cmp word [bp + 9], 0	; 4: 131 126 9 0
x27074:	jl @2758$isDigitInBase$14	; 2: 124 13

@2758$isDigitInBase$11:	; SignedGreaterThanEqual 14 value base
x27076:	mov ax, [bp + 7]	; 3: 139 70 7
x27079:	cmp [bp + 9], ax	; 3: 57 70 9
x27082:	jge @2758$isDigitInBase$14	; 2: 125 5

@2758$isDigitInBase$12:	; Assign £temporary1198 1
x27084:	mov bx, 1	; 3: 187 1 0

@2758$isDigitInBase$13:	; Goto 15
x27087:	jmp @2758$isDigitInBase$15	; 2: 235 3

@2758$isDigitInBase$14:	; Assign £temporary1198 0
x27089:	mov bx, 0	; 3: 187 0 0

@2758$isDigitInBase$15:	; SetReturnValue £temporary1198

@2758$isDigitInBase$16:	; Return £temporary1198
x27092:	mov ax, [bp]	; 3: 139 70 0
x27095:	mov di, [bp + 4]	; 3: 139 126 4
x27098:	mov bp, [bp + 2]	; 3: 139 110 2
x27101:	jmp ax	; 2: 255 224

@2758$isDigitInBase$17:	; CallHeader 9 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

@2758$isDigitInBase$18:	; IntegralToIntegral £temporary1199 c
x27103:	mov al, [bp + 6]	; 3: 138 70 6
x27106:	and ax, 255	; 3: 37 255 0
x27109:	cmp al, 0	; 2: 60 0
x27111:	jge @2758$isDigitInBase$19	; 2: 125 4
x27113:	neg al	; 2: 246 216
x27115:	neg ax	; 2: 247 216

@2758$isDigitInBase$19:	; Parameter 9 £temporary1199 6
x27117:	mov [bp + 15], ax	; 3: 137 70 15

@2758$isDigitInBase$20:	; Call 9 islower 0
x27120:	mov word [bp + 9], @2758$isDigitInBase$21	; 5: 199 70 9 254 105
x27125:	mov [bp + 11], bp	; 3: 137 110 11
x27128:	add bp, 9	; 3: 131 197 9
x27131:	jmp islower	; 3: 233 165 0

@2758$isDigitInBase$21:	; PostCall 9

@2758$isDigitInBase$22:	; GetReturnValue £temporary1200

@2758$isDigitInBase$23:	; Equal 34 £temporary1200 0
x27134:	cmp bx, 0	; 3: 131 251 0
x27137:	je @2758$isDigitInBase$34	; 2: 116 55

@2758$isDigitInBase$24:	; BinarySubtract £temporary1201 c 97
x27139:	mov al, [bp + 6]	; 3: 138 70 6
x27142:	sub al, 97	; 2: 44 97

@2758$isDigitInBase$25:	; IntegralToIntegral £temporary1202 £temporary1201
x27144:	and ax, 255	; 3: 37 255 0
x27147:	cmp al, 0	; 2: 60 0
x27149:	jge @2758$isDigitInBase$26	; 2: 125 4
x27151:	neg al	; 2: 246 216
x27153:	neg ax	; 2: 247 216

@2758$isDigitInBase$26:	; BinaryAdd value £temporary1202 10
x27155:	add ax, 10	; 3: 131 192 10
x27158:	mov [bp + 9], ax	; 3: 137 70 9

@2758$isDigitInBase$27:	; SignedLessThan 31 value 0
x27161:	cmp word [bp + 9], 0	; 4: 131 126 9 0
x27165:	jl @2758$isDigitInBase$31	; 2: 124 13

@2758$isDigitInBase$28:	; SignedGreaterThanEqual 31 value base
x27167:	mov ax, [bp + 7]	; 3: 139 70 7
x27170:	cmp [bp + 9], ax	; 3: 57 70 9
x27173:	jge @2758$isDigitInBase$31	; 2: 125 5

@2758$isDigitInBase$29:	; Assign £temporary1207 1
x27175:	mov bx, 1	; 3: 187 1 0

@2758$isDigitInBase$30:	; Goto 32
x27178:	jmp @2758$isDigitInBase$32	; 2: 235 3

@2758$isDigitInBase$31:	; Assign £temporary1207 0
x27180:	mov bx, 0	; 3: 187 0 0

@2758$isDigitInBase$32:	; SetReturnValue £temporary1207

@2758$isDigitInBase$33:	; Return £temporary1207
x27183:	mov ax, [bp]	; 3: 139 70 0
x27186:	mov di, [bp + 4]	; 3: 139 126 4
x27189:	mov bp, [bp + 2]	; 3: 139 110 2
x27192:	jmp ax	; 2: 255 224

@2758$isDigitInBase$34:	; CallHeader 9 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

@2758$isDigitInBase$35:	; IntegralToIntegral £temporary1208 c
x27194:	mov al, [bp + 6]	; 3: 138 70 6
x27197:	and ax, 255	; 3: 37 255 0
x27200:	cmp al, 0	; 2: 60 0
x27202:	jge @2758$isDigitInBase$36	; 2: 125 4
x27204:	neg al	; 2: 246 216
x27206:	neg ax	; 2: 247 216

@2758$isDigitInBase$36:	; Parameter 9 £temporary1208 6
x27208:	mov [bp + 15], ax	; 3: 137 70 15

@2758$isDigitInBase$37:	; Call 9 isupper 0
x27211:	mov word [bp + 9], @2758$isDigitInBase$38	; 5: 199 70 9 89 106
x27216:	mov [bp + 11], bp	; 3: 137 110 11
x27219:	add bp, 9	; 3: 131 197 9
x27222:	jmp isupper	; 3: 233 177 179

@2758$isDigitInBase$38:	; PostCall 9

@2758$isDigitInBase$39:	; GetReturnValue £temporary1209

@2758$isDigitInBase$40:	; Equal 51 £temporary1209 0
x27225:	cmp bx, 0	; 3: 131 251 0
x27228:	je @2758$isDigitInBase$51	; 2: 116 55

@2758$isDigitInBase$41:	; BinarySubtract £temporary1210 c 65
x27230:	mov al, [bp + 6]	; 3: 138 70 6
x27233:	sub al, 65	; 2: 44 65

@2758$isDigitInBase$42:	; IntegralToIntegral £temporary1211 £temporary1210
x27235:	and ax, 255	; 3: 37 255 0
x27238:	cmp al, 0	; 2: 60 0
x27240:	jge @2758$isDigitInBase$43	; 2: 125 4
x27242:	neg al	; 2: 246 216
x27244:	neg ax	; 2: 247 216

@2758$isDigitInBase$43:	; BinaryAdd value £temporary1211 10
x27246:	add ax, 10	; 3: 131 192 10
x27249:	mov [bp + 9], ax	; 3: 137 70 9

@2758$isDigitInBase$44:	; SignedLessThan 48 value 0
x27252:	cmp word [bp + 9], 0	; 4: 131 126 9 0
x27256:	jl @2758$isDigitInBase$48	; 2: 124 13

@2758$isDigitInBase$45:	; SignedGreaterThanEqual 48 value base
x27258:	mov ax, [bp + 7]	; 3: 139 70 7
x27261:	cmp [bp + 9], ax	; 3: 57 70 9
x27264:	jge @2758$isDigitInBase$48	; 2: 125 5

@2758$isDigitInBase$46:	; Assign £temporary1216 1
x27266:	mov bx, 1	; 3: 187 1 0

@2758$isDigitInBase$47:	; Goto 49
x27269:	jmp @2758$isDigitInBase$49	; 2: 235 3

@2758$isDigitInBase$48:	; Assign £temporary1216 0
x27271:	mov bx, 0	; 3: 187 0 0

@2758$isDigitInBase$49:	; SetReturnValue £temporary1216

@2758$isDigitInBase$50:	; Return £temporary1216
x27274:	mov ax, [bp]	; 3: 139 70 0
x27277:	mov di, [bp + 4]	; 3: 139 126 4
x27280:	mov bp, [bp + 2]	; 3: 139 110 2
x27283:	jmp ax	; 2: 255 224

@2758$isDigitInBase$51:	; SetReturnValue 0
x27285:	mov bx, 0	; 3: 187 0 0

@2758$isDigitInBase$52:	; Return 0
x27288:	mov ax, [bp]	; 3: 139 70 0
x27291:	mov di, [bp + 4]	; 3: 139 126 4
x27294:	mov bp, [bp + 2]	; 3: 139 110 2
x27297:	jmp ax	; 2: 255 224

@2758$isDigitInBase$53:	; FunctionEnd isDigitInBase

islower:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

islower$1:	; Call 8 localeconv 0
x27299:	mov word [bp + 8], islower$2	; 5: 199 70 8 177 106
x27304:	mov [bp + 10], bp	; 3: 137 110 10
x27307:	add bp, 8	; 3: 131 197 8
x27310:	jmp localeconv	; 3: 233 196 179

islower$2:	; PostCall 8

islower$3:	; GetReturnValue £temporary160

islower$4:	; Assign localeConvPtr £temporary160
x27313:	mov [bp + 8], bx	; 3: 137 94 8

islower$5:	; Equal 19 localeConvPtr 0
x27316:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x27320:	je islower$19	; 2: 116 53

islower$6:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

islower$7:	; Deref £temporary162 -> localeConvPtr localeConvPtr 12
x27322:	mov si, [bp + 8]	; 3: 139 118 8

islower$8:	; Parameter 10 £temporary162 -> localeConvPtr 6
x27325:	mov ax, [si + 12]	; 3: 139 68 12
x27328:	mov [bp + 16], ax	; 3: 137 70 16

islower$9:	; Parameter 10 c 8
x27331:	mov ax, [bp + 6]	; 3: 139 70 6
x27334:	mov [bp + 18], ax	; 3: 137 70 18

islower$10:	; Call 10 strchr 0
x27337:	mov word [bp + 10], islower$11	; 5: 199 70 10 215 106
x27342:	mov [bp + 12], bp	; 3: 137 110 12
x27345:	add bp, 10	; 3: 131 197 10
x27348:	jmp strchr	; 3: 233 228 182

islower$11:	; PostCall 10

islower$12:	; GetReturnValue £temporary163

islower$13:	; Equal 16 £temporary163 0
x27351:	cmp bx, 0	; 3: 131 251 0
x27354:	je islower$16	; 2: 116 5

islower$14:	; Assign £temporary165 1
x27356:	mov bx, 1	; 3: 187 1 0

islower$15:	; Goto 17
x27359:	jmp islower$17	; 2: 235 3

islower$16:	; Assign £temporary165 0
x27361:	mov bx, 0	; 3: 187 0 0

islower$17:	; SetReturnValue £temporary165

islower$18:	; Return £temporary165
x27364:	mov ax, [bp]	; 3: 139 70 0
x27367:	mov di, [bp + 4]	; 3: 139 126 4
x27370:	mov bp, [bp + 2]	; 3: 139 110 2
x27373:	jmp ax	; 2: 255 224

islower$19:	; SignedLessThan 23 c 97
x27375:	cmp word [bp + 6], 97	; 4: 131 126 6 97
x27379:	jl islower$23	; 2: 124 11

islower$20:	; SignedGreaterThan 23 c 122
x27381:	cmp word [bp + 6], 122	; 4: 131 126 6 122
x27385:	jg islower$23	; 2: 127 5

islower$21:	; Assign £temporary169 1
x27387:	mov bx, 1	; 3: 187 1 0

islower$22:	; Goto 24
x27390:	jmp islower$24	; 2: 235 3

islower$23:	; Assign £temporary169 0
x27392:	mov bx, 0	; 3: 187 0 0

islower$24:	; SetReturnValue £temporary169

islower$25:	; Return £temporary169
x27395:	mov ax, [bp]	; 3: 139 70 0
x27398:	mov di, [bp + 4]	; 3: 139 126 4
x27401:	mov bp, [bp + 2]	; 3: 139 110 2
x27404:	jmp ax	; 2: 255 224

islower$26:	; FunctionEnd islower

@2822$digitToValue:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

@2822$digitToValue$1:	; IntegralToIntegral £temporary1223 c
x27406:	mov al, [bp + 6]	; 3: 138 70 6
x27409:	and ax, 255	; 3: 37 255 0
x27412:	cmp al, 0	; 2: 60 0
x27414:	jge @2822$digitToValue$2	; 2: 125 4
x27416:	neg al	; 2: 246 216
x27418:	neg ax	; 2: 247 216

@2822$digitToValue$2:	; Parameter 7 £temporary1223 6
x27420:	mov [bp + 13], ax	; 3: 137 70 13

@2822$digitToValue$3:	; Call 7 isdigit 0
x27423:	mov word [bp + 7], @2822$digitToValue$4	; 5: 199 70 7 45 107
x27428:	mov [bp + 9], bp	; 3: 137 110 9
x27431:	add bp, 7	; 3: 131 197 7
x27434:	jmp isdigit	; 3: 233 54 192

@2822$digitToValue$4:	; PostCall 7

@2822$digitToValue$5:	; GetReturnValue £temporary1224

@2822$digitToValue$6:	; Equal 11 £temporary1224 0
x27437:	cmp bx, 0	; 3: 131 251 0
x27440:	je @2822$digitToValue$11	; 2: 116 30

@2822$digitToValue$7:	; BinarySubtract £temporary1225 c 48
x27442:	mov bl, [bp + 6]	; 3: 138 94 6
x27445:	sub bl, 48	; 3: 128 235 48

@2822$digitToValue$8:	; IntegralToIntegral £temporary1226 £temporary1225
x27448:	and bx, 255	; 4: 129 227 255 0
x27452:	cmp bl, 0	; 3: 128 251 0
x27455:	jge @2822$digitToValue$9	; 2: 125 4
x27457:	neg bl	; 2: 246 219
x27459:	neg bx	; 2: 247 219

@2822$digitToValue$9:	; SetReturnValue £temporary1226

@2822$digitToValue$10:	; Return £temporary1226
x27461:	mov ax, [bp]	; 3: 139 70 0
x27464:	mov di, [bp + 4]	; 3: 139 126 4
x27467:	mov bp, [bp + 2]	; 3: 139 110 2
x27470:	jmp ax	; 2: 255 224

@2822$digitToValue$11:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

@2822$digitToValue$12:	; IntegralToIntegral £temporary1227 c
x27472:	mov al, [bp + 6]	; 3: 138 70 6
x27475:	and ax, 255	; 3: 37 255 0
x27478:	cmp al, 0	; 2: 60 0
x27480:	jge @2822$digitToValue$13	; 2: 125 4
x27482:	neg al	; 2: 246 216
x27484:	neg ax	; 2: 247 216

@2822$digitToValue$13:	; Parameter 7 £temporary1227 6
x27486:	mov [bp + 13], ax	; 3: 137 70 13

@2822$digitToValue$14:	; Call 7 islower 0
x27489:	mov word [bp + 7], @2822$digitToValue$15	; 5: 199 70 7 111 107
x27494:	mov [bp + 9], bp	; 3: 137 110 9
x27497:	add bp, 7	; 3: 131 197 7
x27500:	jmp islower	; 3: 233 52 255

@2822$digitToValue$15:	; PostCall 7

@2822$digitToValue$16:	; GetReturnValue £temporary1228

@2822$digitToValue$17:	; Equal 23 £temporary1228 0
x27503:	cmp bx, 0	; 3: 131 251 0
x27506:	je @2822$digitToValue$23	; 2: 116 33

@2822$digitToValue$18:	; BinarySubtract £temporary1229 c 97
x27508:	mov bl, [bp + 6]	; 3: 138 94 6
x27511:	sub bl, 97	; 3: 128 235 97

@2822$digitToValue$19:	; IntegralToIntegral £temporary1230 £temporary1229
x27514:	and bx, 255	; 4: 129 227 255 0
x27518:	cmp bl, 0	; 3: 128 251 0
x27521:	jge @2822$digitToValue$20	; 2: 125 4
x27523:	neg bl	; 2: 246 219
x27525:	neg bx	; 2: 247 219

@2822$digitToValue$20:	; BinaryAdd £temporary1231 £temporary1230 10
x27527:	add bx, 10	; 3: 131 195 10

@2822$digitToValue$21:	; SetReturnValue £temporary1231

@2822$digitToValue$22:	; Return £temporary1231
x27530:	mov ax, [bp]	; 3: 139 70 0
x27533:	mov di, [bp + 4]	; 3: 139 126 4
x27536:	mov bp, [bp + 2]	; 3: 139 110 2
x27539:	jmp ax	; 2: 255 224

@2822$digitToValue$23:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

@2822$digitToValue$24:	; IntegralToIntegral £temporary1232 c
x27541:	mov al, [bp + 6]	; 3: 138 70 6
x27544:	and ax, 255	; 3: 37 255 0
x27547:	cmp al, 0	; 2: 60 0
x27549:	jge @2822$digitToValue$25	; 2: 125 4
x27551:	neg al	; 2: 246 216
x27553:	neg ax	; 2: 247 216

@2822$digitToValue$25:	; Parameter 7 £temporary1232 6
x27555:	mov [bp + 13], ax	; 3: 137 70 13

@2822$digitToValue$26:	; Call 7 isupper 0
x27558:	mov word [bp + 7], @2822$digitToValue$27	; 5: 199 70 7 180 107
x27563:	mov [bp + 9], bp	; 3: 137 110 9
x27566:	add bp, 7	; 3: 131 197 7
x27569:	jmp isupper	; 3: 233 86 178

@2822$digitToValue$27:	; PostCall 7

@2822$digitToValue$28:	; GetReturnValue £temporary1233

@2822$digitToValue$29:	; Equal 35 £temporary1233 0
x27572:	cmp bx, 0	; 3: 131 251 0
x27575:	je @2822$digitToValue$35	; 2: 116 33

@2822$digitToValue$30:	; BinarySubtract £temporary1234 c 65
x27577:	mov bl, [bp + 6]	; 3: 138 94 6
x27580:	sub bl, 65	; 3: 128 235 65

@2822$digitToValue$31:	; IntegralToIntegral £temporary1235 £temporary1234
x27583:	and bx, 255	; 4: 129 227 255 0
x27587:	cmp bl, 0	; 3: 128 251 0
x27590:	jge @2822$digitToValue$32	; 2: 125 4
x27592:	neg bl	; 2: 246 219
x27594:	neg bx	; 2: 247 219

@2822$digitToValue$32:	; BinaryAdd £temporary1236 £temporary1235 10
x27596:	add bx, 10	; 3: 131 195 10

@2822$digitToValue$33:	; SetReturnValue £temporary1236

@2822$digitToValue$34:	; Return £temporary1236
x27599:	mov ax, [bp]	; 3: 139 70 0
x27602:	mov di, [bp + 4]	; 3: 139 126 4
x27605:	mov bp, [bp + 2]	; 3: 139 110 2
x27608:	jmp ax	; 2: 255 224

@2822$digitToValue$35:	; SetReturnValue 0
x27610:	mov bx, 0	; 3: 187 0 0

@2822$digitToValue$36:	; Return 0
x27613:	mov ax, [bp]	; 3: 139 70 0
x27616:	mov di, [bp + 4]	; 3: 139 126 4
x27619:	mov bp, [bp + 2]	; 3: 139 110 2
x27622:	jmp ax	; 2: 255 224

@2822$digitToValue$37:	; FunctionEnd digitToValue

unscanChar:	; Case 4 g_inStatus 0
x27624:	mov ax, [g_inStatus]	; 3: 161 184 95
x27627:	cmp ax, 0	; 3: 131 248 0
x27630:	je unscanChar$4	; 2: 116 7

unscanChar$1:	; Case 6 g_inStatus 1
x27632:	cmp ax, 1	; 3: 131 248 1
x27635:	je unscanChar$6	; 2: 116 8

unscanChar$2:	; CaseEnd g_inStatus

unscanChar$3:	; Goto 7
x27637:	jmp unscanChar$7	; 2: 235 10

unscanChar$4:	; Decrement g_inChars
x27639:	dec word [g_inChars]	; 4: 255 14 221 100

unscanChar$5:	; Goto 7
x27643:	jmp unscanChar$7	; 2: 235 4

unscanChar$6:	; Decrement g_inChars
x27645:	dec word [g_inChars]	; 4: 255 14 221 100

unscanChar$7:	; Return 0
x27649:	mov ax, [bp]	; 3: 139 70 0
x27652:	mov di, [bp + 4]	; 3: 139 126 4
x27655:	mov bp, [bp + 2]	; 3: 139 110 2
x27658:	jmp ax	; 2: 255 224

unscanChar$8:	; FunctionEnd unscanChar

scanUnsignedLongInt:	; Assign unsignedLongValue 0
x27660:	mov dword [bp + 8], 0	; 8: 102 199 70 8 0 0 0 0

scanUnsignedLongInt$1:	; CallHeader 16 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanUnsignedLongInt$2:	; Call 16 scanChar 0
x27668:	mov word [bp + 16], scanUnsignedLongInt$3	; 5: 199 70 16 34 108
x27673:	mov [bp + 18], bp	; 3: 137 110 18
x27676:	add bp, 16	; 3: 131 197 16
x27679:	jmp scanChar	; 3: 233 189 248

scanUnsignedLongInt$3:	; PostCall 16

scanUnsignedLongInt$4:	; GetReturnValue £temporary1278

scanUnsignedLongInt$5:	; Assign input £temporary1278
x27682:	mov [bp + 16], bl	; 3: 136 94 16

scanUnsignedLongInt$6:	; Assign found 1
x27685:	mov word [bp + 17], 1	; 5: 199 70 17 1 0

scanUnsignedLongInt$7:	; CallHeader 19 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanUnsignedLongInt$8:	; IntegralToIntegral £temporary1279 input
x27690:	mov al, [bp + 16]	; 3: 138 70 16
x27693:	and ax, 255	; 3: 37 255 0
x27696:	cmp al, 0	; 2: 60 0
x27698:	jge scanUnsignedLongInt$9	; 2: 125 4
x27700:	neg al	; 2: 246 216
x27702:	neg ax	; 2: 247 216

scanUnsignedLongInt$9:	; Parameter 19 £temporary1279 6
x27704:	mov [bp + 25], ax	; 3: 137 70 25

scanUnsignedLongInt$10:	; Call 19 isspace 0
x27707:	mov word [bp + 19], scanUnsignedLongInt$11	; 5: 199 70 19 73 108
x27712:	mov [bp + 21], bp	; 3: 137 110 21
x27715:	add bp, 19	; 3: 131 197 19
x27718:	jmp isspace	; 3: 233 82 251

scanUnsignedLongInt$11:	; PostCall 19

scanUnsignedLongInt$12:	; GetReturnValue £temporary1280

scanUnsignedLongInt$13:	; Equal 20 £temporary1280 0
x27721:	cmp bx, 0	; 3: 131 251 0
x27724:	je scanUnsignedLongInt$20	; 2: 116 19

scanUnsignedLongInt$14:	; CallHeader 19 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanUnsignedLongInt$15:	; Call 19 scanChar 0
x27726:	mov word [bp + 19], scanUnsignedLongInt$16	; 5: 199 70 19 92 108
x27731:	mov [bp + 21], bp	; 3: 137 110 21
x27734:	add bp, 19	; 3: 131 197 19
x27737:	jmp scanChar	; 3: 233 131 248

scanUnsignedLongInt$16:	; PostCall 19

scanUnsignedLongInt$17:	; GetReturnValue £temporary1281

scanUnsignedLongInt$18:	; Assign input £temporary1281
x27740:	mov [bp + 16], bl	; 3: 136 94 16

scanUnsignedLongInt$19:	; Goto 7
x27743:	jmp scanUnsignedLongInt$7	; 2: 235 201

scanUnsignedLongInt$20:	; NotEqual 26 input 43
x27745:	cmp byte [bp + 16], 43	; 4: 128 126 16 43
x27749:	jne scanUnsignedLongInt$26	; 2: 117 17

scanUnsignedLongInt$21:	; CallHeader 19 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanUnsignedLongInt$22:	; Call 19 scanChar 0
x27751:	mov word [bp + 19], scanUnsignedLongInt$23	; 5: 199 70 19 117 108
x27756:	mov [bp + 21], bp	; 3: 137 110 21
x27759:	add bp, 19	; 3: 131 197 19
x27762:	jmp scanChar	; 3: 233 106 248

scanUnsignedLongInt$23:	; PostCall 19

scanUnsignedLongInt$24:	; GetReturnValue £temporary1284

scanUnsignedLongInt$25:	; Assign input £temporary1284
x27765:	mov [bp + 16], bl	; 3: 136 94 16

scanUnsignedLongInt$26:	; NotEqual 50 base 0
x27768:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x27772:	jne scanUnsignedLongInt$50	; 2: 117 95

scanUnsignedLongInt$27:	; NotEqual 49 input 48
x27774:	cmp byte [bp + 16], 48	; 4: 128 126 16 48
x27778:	jne scanUnsignedLongInt$49	; 2: 117 84

scanUnsignedLongInt$28:	; CallHeader 19 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanUnsignedLongInt$29:	; Call 19 scanChar 0
x27780:	mov word [bp + 19], scanUnsignedLongInt$30	; 5: 199 70 19 146 108
x27785:	mov [bp + 21], bp	; 3: 137 110 21
x27788:	add bp, 19	; 3: 131 197 19
x27791:	jmp scanChar	; 3: 233 77 248

scanUnsignedLongInt$30:	; PostCall 19

scanUnsignedLongInt$31:	; GetReturnValue £temporary1287

scanUnsignedLongInt$32:	; Assign input £temporary1287
x27794:	mov [bp + 16], bl	; 3: 136 94 16

scanUnsignedLongInt$33:	; CallHeader 19 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanUnsignedLongInt$34:	; IntegralToIntegral £temporary1288 input
x27797:	mov al, [bp + 16]	; 3: 138 70 16
x27800:	and ax, 255	; 3: 37 255 0
x27803:	cmp al, 0	; 2: 60 0
x27805:	jge scanUnsignedLongInt$35	; 2: 125 4
x27807:	neg al	; 2: 246 216
x27809:	neg ax	; 2: 247 216

scanUnsignedLongInt$35:	; Parameter 19 £temporary1288 6
x27811:	mov [bp + 25], ax	; 3: 137 70 25

scanUnsignedLongInt$36:	; Call 19 tolower 0
x27814:	mov word [bp + 19], scanUnsignedLongInt$37	; 5: 199 70 19 180 108
x27819:	mov [bp + 21], bp	; 3: 137 110 21
x27822:	add bp, 19	; 3: 131 197 19
x27825:	jmp tolower	; 3: 233 101 184

scanUnsignedLongInt$37:	; PostCall 19

scanUnsignedLongInt$38:	; GetReturnValue £temporary1289

scanUnsignedLongInt$39:	; NotEqual 47 £temporary1289 120
x27828:	cmp bx, 120	; 3: 131 251 120
x27831:	jne scanUnsignedLongInt$47	; 2: 117 24

scanUnsignedLongInt$40:	; Assign base 16
x27833:	mov word [bp + 6], 16	; 5: 199 70 6 16 0

scanUnsignedLongInt$41:	; CallHeader 19 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanUnsignedLongInt$42:	; Call 19 scanChar 0
x27838:	mov word [bp + 19], scanUnsignedLongInt$43	; 5: 199 70 19 204 108
x27843:	mov [bp + 21], bp	; 3: 137 110 21
x27846:	add bp, 19	; 3: 131 197 19
x27849:	jmp scanChar	; 3: 233 19 248

scanUnsignedLongInt$43:	; PostCall 19

scanUnsignedLongInt$44:	; GetReturnValue £temporary1291

scanUnsignedLongInt$45:	; Assign input £temporary1291
x27852:	mov [bp + 16], bl	; 3: 136 94 16

scanUnsignedLongInt$46:	; Goto 50
x27855:	jmp scanUnsignedLongInt$50	; 2: 235 12

scanUnsignedLongInt$47:	; Assign base 8
x27857:	mov word [bp + 6], 8	; 5: 199 70 6 8 0

scanUnsignedLongInt$48:	; Goto 50
x27862:	jmp scanUnsignedLongInt$50	; 2: 235 5

scanUnsignedLongInt$49:	; Assign base 10
x27864:	mov word [bp + 6], 10	; 5: 199 70 6 10 0

scanUnsignedLongInt$50:	; CallHeader 19 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanUnsignedLongInt$51:	; Parameter 19 input 6
x27869:	mov al, [bp + 16]	; 3: 138 70 16
x27872:	mov [bp + 25], al	; 3: 136 70 25

scanUnsignedLongInt$52:	; Parameter 19 base 7
x27875:	mov ax, [bp + 6]	; 3: 139 70 6
x27878:	mov [bp + 26], ax	; 3: 137 70 26

scanUnsignedLongInt$53:	; Call 19 isDigitInBase 0
x27881:	mov word [bp + 19], scanUnsignedLongInt$54	; 5: 199 70 19 247 108
x27886:	mov [bp + 21], bp	; 3: 137 110 21
x27889:	add bp, 19	; 3: 131 197 19
x27892:	jmp @2758$isDigitInBase	; 3: 233 144 252

scanUnsignedLongInt$54:	; PostCall 19

scanUnsignedLongInt$55:	; GetReturnValue £temporary1292

scanUnsignedLongInt$56:	; Equal 73 £temporary1292 0
x27895:	cmp bx, 0	; 3: 131 251 0
x27898:	je scanUnsignedLongInt$73	; 2: 116 79

scanUnsignedLongInt$57:	; IntegralToIntegral £temporary1293 base
x27900:	mov bx, [bp + 6]	; 3: 139 94 6
x27903:	and ebx, 65535	; 7: 102 129 227 255 255 0 0

scanUnsignedLongInt$58:	; UnsignedMultiply unsignedLongValue unsignedLongValue £temporary1293
x27910:	mov eax, [bp + 8]	; 4: 102 139 70 8
x27914:	xor edx, edx	; 3: 102 49 210
x27917:	mul ebx	; 3: 102 247 227
x27920:	mov [bp + 8], eax	; 4: 102 137 70 8

scanUnsignedLongInt$59:	; CallHeader 19 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanUnsignedLongInt$60:	; Parameter 19 input 6
x27924:	mov al, [bp + 16]	; 3: 138 70 16
x27927:	mov [bp + 25], al	; 3: 136 70 25

scanUnsignedLongInt$61:	; Call 19 digitToValue 0
x27930:	mov word [bp + 19], scanUnsignedLongInt$62	; 5: 199 70 19 40 109
x27935:	mov [bp + 21], bp	; 3: 137 110 21
x27938:	add bp, 19	; 3: 131 197 19
x27941:	jmp @2822$digitToValue	; 3: 233 230 253

scanUnsignedLongInt$62:	; PostCall 19

scanUnsignedLongInt$63:	; GetReturnValue £temporary1295

scanUnsignedLongInt$64:	; IntegralToIntegral £temporary1296 £temporary1295
x27944:	and ebx, 65535	; 7: 102 129 227 255 255 0 0

scanUnsignedLongInt$65:	; BinaryAdd unsignedLongValue unsignedLongValue £temporary1296
x27951:	add [bp + 8], ebx	; 4: 102 1 94 8

scanUnsignedLongInt$66:	; Assign found 1
x27955:	mov word [bp + 17], 1	; 5: 199 70 17 1 0

scanUnsignedLongInt$67:	; CallHeader 19 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanUnsignedLongInt$68:	; Call 19 scanChar 0
x27960:	mov word [bp + 19], scanUnsignedLongInt$69	; 5: 199 70 19 70 109
x27965:	mov [bp + 21], bp	; 3: 137 110 21
x27968:	add bp, 19	; 3: 131 197 19
x27971:	jmp scanChar	; 3: 233 153 247

scanUnsignedLongInt$69:	; PostCall 19

scanUnsignedLongInt$70:	; GetReturnValue £temporary1298

scanUnsignedLongInt$71:	; Assign input £temporary1298
x27974:	mov [bp + 16], bl	; 3: 136 94 16

scanUnsignedLongInt$72:	; Goto 50
x27977:	jmp scanUnsignedLongInt$50	; 2: 235 146

scanUnsignedLongInt$73:	; Equal 75 found 0
x27979:	cmp word [bp + 17], 0	; 4: 131 126 17 0
x27983:	je scanUnsignedLongInt$75	; 2: 116 4

scanUnsignedLongInt$74:	; Increment g_inCount
x27985:	inc word [g_inCount]	; 4: 255 6 219 100

scanUnsignedLongInt$75:	; CallHeader 19 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanUnsignedLongInt$76:	; Parameter 19 input 6
x27989:	mov al, [bp + 16]	; 3: 138 70 16
x27992:	mov [bp + 25], al	; 3: 136 70 25

scanUnsignedLongInt$77:	; Call 19 unscanChar 0
x27995:	mov word [bp + 19], scanUnsignedLongInt$78	; 5: 199 70 19 105 109
x28000:	mov [bp + 21], bp	; 3: 137 110 21
x28003:	add bp, 19	; 3: 131 197 19
x28006:	jmp unscanChar	; 3: 233 127 254

scanUnsignedLongInt$78:	; PostCall 19

scanUnsignedLongInt$79:	; SetReturnValue unsignedLongValue
x28009:	mov ebx, [bp + 8]	; 4: 102 139 94 8

scanUnsignedLongInt$80:	; Return unsignedLongValue
x28013:	mov ax, [bp]	; 3: 139 70 0
x28016:	mov di, [bp + 4]	; 3: 139 126 4
x28019:	mov bp, [bp + 2]	; 3: 139 110 2
x28022:	jmp ax	; 2: 255 224

scanUnsignedLongInt$81:	; FunctionEnd scanUnsignedLongInt

scanLongDouble:	; Assign minus 0
x28024:	mov word [bp + 6], 0	; 5: 199 70 6 0 0

scanLongDouble$1:	; Assign found 0
x28029:	mov word [bp + 8], 0	; 5: 199 70 8 0 0

scanLongDouble$2:	; PushFloat 0.0
x28034:	fldz	; 2: 217 238

scanLongDouble$3:	; PopFloat value
x28036:	fstp qword [bp + 10]	; 3: 221 94 10

scanLongDouble$4:	; PushFloat 1.0
x28039:	fld1	; 2: 217 232

scanLongDouble$5:	; PopFloat factor
x28041:	fstp qword [bp + 18]	; 3: 221 94 18

scanLongDouble$6:	; CallHeader 26 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongDouble$7:	; Call 26 scanChar 0
x28044:	mov word [bp + 26], scanLongDouble$8	; 5: 199 70 26 154 109
x28049:	mov [bp + 28], bp	; 3: 137 110 28
x28052:	add bp, 26	; 3: 131 197 26
x28055:	jmp scanChar	; 3: 233 69 247

scanLongDouble$8:	; PostCall 26

scanLongDouble$9:	; GetReturnValue £temporary1309

scanLongDouble$10:	; Assign input £temporary1309
x28058:	mov [bp + 26], bl	; 3: 136 94 26

scanLongDouble$11:	; CallHeader 27 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongDouble$12:	; IntegralToIntegral £temporary1310 input
x28061:	mov al, [bp + 26]	; 3: 138 70 26
x28064:	and ax, 255	; 3: 37 255 0
x28067:	cmp al, 0	; 2: 60 0
x28069:	jge scanLongDouble$13	; 2: 125 4
x28071:	neg al	; 2: 246 216
x28073:	neg ax	; 2: 247 216

scanLongDouble$13:	; Parameter 27 £temporary1310 6
x28075:	mov [bp + 33], ax	; 3: 137 70 33

scanLongDouble$14:	; Call 27 isspace 0
x28078:	mov word [bp + 27], scanLongDouble$15	; 5: 199 70 27 188 109
x28083:	mov [bp + 29], bp	; 3: 137 110 29
x28086:	add bp, 27	; 3: 131 197 27
x28089:	jmp isspace	; 3: 233 223 249

scanLongDouble$15:	; PostCall 27

scanLongDouble$16:	; GetReturnValue £temporary1311

scanLongDouble$17:	; Equal 24 £temporary1311 0
x28092:	cmp bx, 0	; 3: 131 251 0
x28095:	je scanLongDouble$24	; 2: 116 19

scanLongDouble$18:	; CallHeader 27 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongDouble$19:	; Call 27 scanChar 0
x28097:	mov word [bp + 27], scanLongDouble$20	; 5: 199 70 27 207 109
x28102:	mov [bp + 29], bp	; 3: 137 110 29
x28105:	add bp, 27	; 3: 131 197 27
x28108:	jmp scanChar	; 3: 233 16 247

scanLongDouble$20:	; PostCall 27

scanLongDouble$21:	; GetReturnValue £temporary1312

scanLongDouble$22:	; Assign input £temporary1312
x28111:	mov [bp + 26], bl	; 3: 136 94 26

scanLongDouble$23:	; Goto 11
x28114:	jmp scanLongDouble$11	; 2: 235 201

scanLongDouble$24:	; NotEqual 31 input 43
x28116:	cmp byte [bp + 26], 43	; 4: 128 126 26 43
x28120:	jne scanLongDouble$31	; 2: 117 19

scanLongDouble$25:	; CallHeader 27 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongDouble$26:	; Call 27 scanChar 0
x28122:	mov word [bp + 27], scanLongDouble$27	; 5: 199 70 27 232 109
x28127:	mov [bp + 29], bp	; 3: 137 110 29
x28130:	add bp, 27	; 3: 131 197 27
x28133:	jmp scanChar	; 3: 233 247 246

scanLongDouble$27:	; PostCall 27

scanLongDouble$28:	; GetReturnValue £temporary1315

scanLongDouble$29:	; Assign input £temporary1315
x28136:	mov [bp + 26], bl	; 3: 136 94 26

scanLongDouble$30:	; Goto 38
x28139:	jmp scanLongDouble$38	; 2: 235 28

scanLongDouble$31:	; NotEqual 38 input 45
x28141:	cmp byte [bp + 26], 45	; 4: 128 126 26 45
x28145:	jne scanLongDouble$38	; 2: 117 22

scanLongDouble$32:	; Assign minus 1
x28147:	mov word [bp + 6], 1	; 5: 199 70 6 1 0

scanLongDouble$33:	; CallHeader 27 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongDouble$34:	; Call 27 scanChar 0
x28152:	mov word [bp + 27], scanLongDouble$35	; 5: 199 70 27 6 110
x28157:	mov [bp + 29], bp	; 3: 137 110 29
x28160:	add bp, 27	; 3: 131 197 27
x28163:	jmp scanChar	; 3: 233 217 246

scanLongDouble$35:	; PostCall 27

scanLongDouble$36:	; GetReturnValue £temporary1317

scanLongDouble$37:	; Assign input £temporary1317
x28166:	mov [bp + 26], bl	; 3: 136 94 26

scanLongDouble$38:	; CallHeader 27 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongDouble$39:	; IntegralToIntegral £temporary1318 input
x28169:	mov al, [bp + 26]	; 3: 138 70 26
x28172:	and ax, 255	; 3: 37 255 0
x28175:	cmp al, 0	; 2: 60 0
x28177:	jge scanLongDouble$40	; 2: 125 4
x28179:	neg al	; 2: 246 216
x28181:	neg ax	; 2: 247 216

scanLongDouble$40:	; Parameter 27 £temporary1318 6
x28183:	mov [bp + 33], ax	; 3: 137 70 33

scanLongDouble$41:	; Call 27 isdigit 0
x28186:	mov word [bp + 27], scanLongDouble$42	; 5: 199 70 27 40 110
x28191:	mov [bp + 29], bp	; 3: 137 110 29
x28194:	add bp, 27	; 3: 131 197 27
x28197:	jmp isdigit	; 3: 233 59 189

scanLongDouble$42:	; PostCall 27

scanLongDouble$43:	; GetReturnValue £temporary1319

scanLongDouble$44:	; Equal 60 £temporary1319 0
x28200:	cmp bx, 0	; 3: 131 251 0
x28203:	je scanLongDouble$60	; 2: 116 61

scanLongDouble$45:	; PushFloat 10.0
x28205:	fld qword [@3023$float8$10.0#]	; 4: 221 6 155 111

scanLongDouble$46:	; PushFloat value
x28209:	fld qword [bp + 10]	; 3: 221 70 10

scanLongDouble$47:	; SignedMultiply £temporary1320 10.0 value
x28212:	fmul	; 2: 222 201

scanLongDouble$48:	; BinarySubtract £temporary1321 input 48
x28214:	mov al, [bp + 26]	; 3: 138 70 26
x28217:	sub al, 48	; 2: 44 48

scanLongDouble$49:	; IntegralToIntegral £temporary1323 £temporary1321
x28219:	and ax, 255	; 3: 37 255 0
x28222:	cmp al, 0	; 2: 60 0
x28224:	jge scanLongDouble$50	; 2: 125 4
x28226:	neg al	; 2: 246 216
x28228:	neg ax	; 2: 247 216

scanLongDouble$50:	; IntegralToFloating £temporary1322 £temporary1323
x28230:	mov [container2bytes#], ax	; 3: 163 77 27
x28233:	fild word [container2bytes#]	; 4: 223 6 77 27

scanLongDouble$51:	; BinaryAdd £temporary1324 £temporary1320 £temporary1322
x28237:	fadd	; 2: 222 193

scanLongDouble$52:	; PopFloat value
x28239:	fstp qword [bp + 10]	; 3: 221 94 10

scanLongDouble$53:	; CallHeader 27 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongDouble$54:	; Call 27 scanChar 0
x28242:	mov word [bp + 27], scanLongDouble$55	; 5: 199 70 27 96 110
x28247:	mov [bp + 29], bp	; 3: 137 110 29
x28250:	add bp, 27	; 3: 131 197 27
x28253:	jmp scanChar	; 3: 233 127 246

scanLongDouble$55:	; PostCall 27

scanLongDouble$56:	; GetReturnValue £temporary1325

scanLongDouble$57:	; Assign input £temporary1325
x28256:	mov [bp + 26], bl	; 3: 136 94 26

scanLongDouble$58:	; Assign found 1
x28259:	mov word [bp + 8], 1	; 5: 199 70 8 1 0

scanLongDouble$59:	; Goto 38
x28264:	jmp scanLongDouble$38	; 2: 235 159

scanLongDouble$60:	; NotEqual 92 input 46
x28266:	cmp byte [bp + 26], 46	; 4: 128 126 26 46
x28270:	jne scanLongDouble$92	; 2: 117 125

scanLongDouble$61:	; CallHeader 27 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongDouble$62:	; Call 27 scanChar 0
x28272:	mov word [bp + 27], scanLongDouble$63	; 5: 199 70 27 126 110
x28277:	mov [bp + 29], bp	; 3: 137 110 29
x28280:	add bp, 27	; 3: 131 197 27
x28283:	jmp scanChar	; 3: 233 97 246

scanLongDouble$63:	; PostCall 27

scanLongDouble$64:	; GetReturnValue £temporary1328

scanLongDouble$65:	; Assign input £temporary1328
x28286:	mov [bp + 26], bl	; 3: 136 94 26

scanLongDouble$66:	; CallHeader 27 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongDouble$67:	; IntegralToIntegral £temporary1329 input
x28289:	mov al, [bp + 26]	; 3: 138 70 26
x28292:	and ax, 255	; 3: 37 255 0
x28295:	cmp al, 0	; 2: 60 0
x28297:	jge scanLongDouble$68	; 2: 125 4
x28299:	neg al	; 2: 246 216
x28301:	neg ax	; 2: 247 216

scanLongDouble$68:	; Parameter 27 £temporary1329 6
x28303:	mov [bp + 33], ax	; 3: 137 70 33

scanLongDouble$69:	; Call 27 isdigit 0
x28306:	mov word [bp + 27], scanLongDouble$70	; 5: 199 70 27 160 110
x28311:	mov [bp + 29], bp	; 3: 137 110 29
x28314:	add bp, 27	; 3: 131 197 27
x28317:	jmp isdigit	; 3: 233 195 188

scanLongDouble$70:	; PostCall 27

scanLongDouble$71:	; GetReturnValue £temporary1330

scanLongDouble$72:	; Equal 92 £temporary1330 0
x28320:	cmp bx, 0	; 3: 131 251 0
x28323:	je scanLongDouble$92	; 2: 116 72

scanLongDouble$73:	; PushFloat factor
x28325:	fld qword [bp + 18]	; 3: 221 70 18

scanLongDouble$74:	; PushFloat 10.0
x28328:	fld qword [@3043$float8$10.0#]	; 4: 221 6 163 111

scanLongDouble$75:	; SignedDivide £temporary1331 factor 10.0
x28332:	fdiv	; 2: 222 249

scanLongDouble$76:	; PopFloat factor
x28334:	fstp qword [bp + 18]	; 3: 221 94 18

scanLongDouble$77:	; PushFloat value
x28337:	fld qword [bp + 10]	; 3: 221 70 10

scanLongDouble$78:	; PushFloat factor
x28340:	fld qword [bp + 18]	; 3: 221 70 18

scanLongDouble$79:	; BinarySubtract £temporary1332 input 48
x28343:	mov al, [bp + 26]	; 3: 138 70 26
x28346:	sub al, 48	; 2: 44 48

scanLongDouble$80:	; IntegralToIntegral £temporary1334 £temporary1332
x28348:	and ax, 255	; 3: 37 255 0
x28351:	cmp al, 0	; 2: 60 0
x28353:	jge scanLongDouble$81	; 2: 125 4
x28355:	neg al	; 2: 246 216
x28357:	neg ax	; 2: 247 216

scanLongDouble$81:	; IntegralToFloating £temporary1333 £temporary1334
x28359:	mov [container2bytes#], ax	; 3: 163 77 27
x28362:	fild word [container2bytes#]	; 4: 223 6 77 27

scanLongDouble$82:	; SignedMultiply £temporary1335 factor £temporary1333
x28366:	fmul	; 2: 222 201

scanLongDouble$83:	; BinaryAdd £temporary1336 value £temporary1335
x28368:	fadd	; 2: 222 193

scanLongDouble$84:	; PopFloat value
x28370:	fstp qword [bp + 10]	; 3: 221 94 10

scanLongDouble$85:	; CallHeader 27 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongDouble$86:	; Call 27 scanChar 0
x28373:	mov word [bp + 27], scanLongDouble$87	; 5: 199 70 27 227 110
x28378:	mov [bp + 29], bp	; 3: 137 110 29
x28381:	add bp, 27	; 3: 131 197 27
x28384:	jmp scanChar	; 3: 233 252 245

scanLongDouble$87:	; PostCall 27

scanLongDouble$88:	; GetReturnValue £temporary1337

scanLongDouble$89:	; Assign input £temporary1337
x28387:	mov [bp + 26], bl	; 3: 136 94 26

scanLongDouble$90:	; Assign found 1
x28390:	mov word [bp + 8], 1	; 5: 199 70 8 1 0

scanLongDouble$91:	; Goto 66
x28395:	jmp scanLongDouble$66	; 2: 235 148

scanLongDouble$92:	; CallHeader 27 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongDouble$93:	; IntegralToIntegral £temporary1339 input
x28397:	mov al, [bp + 26]	; 3: 138 70 26
x28400:	and ax, 255	; 3: 37 255 0
x28403:	cmp al, 0	; 2: 60 0
x28405:	jge scanLongDouble$94	; 2: 125 4
x28407:	neg al	; 2: 246 216
x28409:	neg ax	; 2: 247 216

scanLongDouble$94:	; Parameter 27 £temporary1339 6
x28411:	mov [bp + 33], ax	; 3: 137 70 33

scanLongDouble$95:	; Call 27 tolower 0
x28414:	mov word [bp + 27], scanLongDouble$96	; 5: 199 70 27 12 111
x28419:	mov [bp + 29], bp	; 3: 137 110 29
x28422:	add bp, 27	; 3: 131 197 27
x28425:	jmp tolower	; 3: 233 13 182

scanLongDouble$96:	; PostCall 27

scanLongDouble$97:	; GetReturnValue £temporary1340

scanLongDouble$98:	; NotEqual 118 £temporary1340 101
x28428:	cmp bx, 101	; 3: 131 251 101
x28431:	jne scanLongDouble$118	; 2: 117 80

scanLongDouble$99:	; CallHeader 27 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongDouble$100:	; Parameter 27 10 6
x28433:	mov word [bp + 33], 10	; 5: 199 70 33 10 0

scanLongDouble$101:	; Call 27 scanLongInt 0
x28438:	mov word [bp + 27], scanLongDouble$102	; 5: 199 70 27 36 111
x28443:	mov [bp + 29], bp	; 3: 137 110 29
x28446:	add bp, 27	; 3: 131 197 27
x28449:	jmp scanLongInt	; 3: 233 174 248

scanLongDouble$102:	; PostCall 27

scanLongDouble$103:	; GetReturnValue £temporary1342

scanLongDouble$104:	; IntegralToFloating £temporary1343 £temporary1342
x28452:	mov [container4bytes#], ebx	; 5: 102 137 30 78 36
x28457:	fild dword [container4bytes#]	; 4: 219 6 78 36

scanLongDouble$105:	; PopFloat exponent
x28461:	fstp qword [bp + 27]	; 3: 221 94 27

scanLongDouble$106:	; PushFloat value
x28464:	fld qword [bp + 10]	; 3: 221 70 10

scanLongDouble$107:	; CallHeader 35 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 1
x28467:	fstp qword [bp + 35]	; 3: 221 94 35

scanLongDouble$108:	; PushFloat 10.0
x28470:	fld qword [@3069$float8$10.0#]	; 4: 221 6 171 111

scanLongDouble$109:	; Parameter 35 10.0 6
x28474:	fstp qword [bp + 49]	; 3: 221 94 49

scanLongDouble$110:	; PushFloat exponent
x28477:	fld qword [bp + 27]	; 3: 221 70 27

scanLongDouble$111:	; Parameter 35 exponent 14
x28480:	fstp qword [bp + 57]	; 3: 221 94 57

scanLongDouble$112:	; Call 35 pow 0
x28483:	mov word [bp + 43], scanLongDouble$113	; 5: 199 70 43 81 111
x28488:	mov [bp + 45], bp	; 3: 137 110 45
x28491:	add bp, 43	; 3: 131 197 43
x28494:	jmp pow	; 3: 233 65 185

scanLongDouble$113:	; PostCall 35
x28497:	fstp qword [bp + 43]	; 3: 221 94 43
x28500:	fld qword [bp + 35]	; 3: 221 70 35
x28503:	fld qword [bp + 43]	; 3: 221 70 43

scanLongDouble$114:	; GetReturnValue £temporary1344

scanLongDouble$115:	; SignedMultiply £temporary1345 value £temporary1344
x28506:	fmul	; 2: 222 201

scanLongDouble$116:	; PopFloat value
x28508:	fstp qword [bp + 10]	; 3: 221 94 10

scanLongDouble$117:	; Goto 122
x28511:	jmp scanLongDouble$122	; 2: 235 20

scanLongDouble$118:	; CallHeader 27 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongDouble$119:	; Parameter 27 input 6
x28513:	mov al, [bp + 26]	; 3: 138 70 26
x28516:	mov [bp + 33], al	; 3: 136 70 33

scanLongDouble$120:	; Call 27 unscanChar 0
x28519:	mov word [bp + 27], scanLongDouble$121	; 5: 199 70 27 117 111
x28524:	mov [bp + 29], bp	; 3: 137 110 29
x28527:	add bp, 27	; 3: 131 197 27
x28530:	jmp unscanChar	; 3: 233 115 252

scanLongDouble$121:	; PostCall 27

scanLongDouble$122:	; Equal 126 minus 0
x28533:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x28537:	je scanLongDouble$126	; 2: 116 8

scanLongDouble$123:	; PushFloat value
x28539:	fld qword [bp + 10]	; 3: 221 70 10

scanLongDouble$124:	; UnarySubtract £temporary1347 value
x28542:	fchs	; 2: 217 224

scanLongDouble$125:	; PopFloat value
x28544:	fstp qword [bp + 10]	; 3: 221 94 10

scanLongDouble$126:	; Equal 128 found 0
x28547:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x28551:	je scanLongDouble$128	; 2: 116 4

scanLongDouble$127:	; Increment g_inCount
x28553:	inc word [g_inCount]	; 4: 255 6 219 100

scanLongDouble$128:	; PushFloat value
x28557:	fld qword [bp + 10]	; 3: 221 70 10

scanLongDouble$129:	; SetReturnValue value

scanLongDouble$130:	; Return value
x28560:	mov ax, [bp]	; 3: 139 70 0
x28563:	mov di, [bp + 4]	; 3: 139 126 4
x28566:	mov bp, [bp + 2]	; 3: 139 110 2
x28569:	jmp ax	; 2: 255 224

scanLongDouble$131:	; FunctionEnd scanLongDouble

@3023$float8$10.0#:
x28571:	dq 10.0	; 8: 0 0 0 0 0 0 36 64

@3043$float8$10.0#:
x28579:	dq 10.0	; 8: 0 0 0 0 0 0 36 64

@3069$float8$10.0#:
x28587:	dq 10.0	; 8: 0 0 0 0 0 0 36 64

scanPattern:	; Assign index 0
x28595:	mov word [bp + 14], 0	; 5: 199 70 14 0 0

scanPattern$1:	; CallHeader 16 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanPattern$2:	; Call 16 scanChar 0
x28600:	mov word [bp + 16], scanPattern$3	; 5: 199 70 16 198 111
x28605:	mov [bp + 18], bp	; 3: 137 110 18
x28608:	add bp, 16	; 3: 131 197 16
x28611:	jmp scanChar	; 3: 233 25 245

scanPattern$3:	; PostCall 16

scanPattern$4:	; GetReturnValue £temporary1053

scanPattern$5:	; Assign input £temporary1053
x28614:	mov [bp + 16], bl	; 3: 136 94 16

scanPattern$6:	; CallHeader 17 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanPattern$7:	; IntegralToIntegral £temporary1054 input
x28617:	mov al, [bp + 16]	; 3: 138 70 16
x28620:	and ax, 255	; 3: 37 255 0
x28623:	cmp al, 0	; 2: 60 0
x28625:	jge scanPattern$8	; 2: 125 4
x28627:	neg al	; 2: 246 216
x28629:	neg ax	; 2: 247 216

scanPattern$8:	; Parameter 17 £temporary1054 6
x28631:	mov [bp + 23], ax	; 3: 137 70 23

scanPattern$9:	; Call 17 isspace 0
x28634:	mov word [bp + 17], scanPattern$10	; 5: 199 70 17 232 111
x28639:	mov [bp + 19], bp	; 3: 137 110 19
x28642:	add bp, 17	; 3: 131 197 17
x28645:	jmp isspace	; 3: 233 179 247

scanPattern$10:	; PostCall 17

scanPattern$11:	; GetReturnValue £temporary1055

scanPattern$12:	; Equal 19 £temporary1055 0
x28648:	cmp bx, 0	; 3: 131 251 0
x28651:	je scanPattern$19	; 2: 116 19

scanPattern$13:	; CallHeader 17 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanPattern$14:	; Call 17 scanChar 0
x28653:	mov word [bp + 17], scanPattern$15	; 5: 199 70 17 251 111
x28658:	mov [bp + 19], bp	; 3: 137 110 19
x28661:	add bp, 17	; 3: 131 197 17
x28664:	jmp scanChar	; 3: 233 228 244

scanPattern$15:	; PostCall 17

scanPattern$16:	; GetReturnValue £temporary1056

scanPattern$17:	; Assign input £temporary1056
x28667:	mov [bp + 16], bl	; 3: 136 94 16

scanPattern$18:	; Goto 6
x28670:	jmp scanPattern$6	; 2: 235 201

scanPattern$19:	; Equal 55 string 0
x28672:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x28676:	je scanPattern$55	; 4: 15 132 156 0

scanPattern$20:	; NotEqual 30 not 0
x28680:	cmp word [bp + 12], 0	; 4: 131 126 12 0
x28684:	jne scanPattern$30	; 2: 117 48

scanPattern$21:	; CallHeader 17 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanPattern$22:	; Parameter 17 pattern 6
x28686:	mov ax, [bp + 8]	; 3: 139 70 8
x28689:	mov [bp + 23], ax	; 3: 137 70 23

scanPattern$23:	; Parameter 17 size 8
x28692:	mov ax, [bp + 10]	; 3: 139 70 10
x28695:	mov [bp + 25], ax	; 3: 137 70 25

scanPattern$24:	; IntegralToIntegral £temporary1061 input
x28698:	mov al, [bp + 16]	; 3: 138 70 16
x28701:	and ax, 255	; 3: 37 255 0
x28704:	cmp al, 0	; 2: 60 0
x28706:	jge scanPattern$25	; 2: 125 4
x28708:	neg al	; 2: 246 216
x28710:	neg ax	; 2: 247 216

scanPattern$25:	; Parameter 17 £temporary1061 10
x28712:	mov [bp + 27], ax	; 3: 137 70 27

scanPattern$26:	; Call 17 strnchr 0
x28715:	mov word [bp + 17], scanPattern$27	; 5: 199 70 17 57 112
x28720:	mov [bp + 19], bp	; 3: 137 110 19
x28723:	add bp, 17	; 3: 131 197 17
x28726:	jmp @2496$strnchr	; 3: 233 245 0

scanPattern$27:	; PostCall 17

scanPattern$28:	; GetReturnValue £temporary1062

scanPattern$29:	; NotEqual 40 £temporary1062 0
x28729:	cmp bx, 0	; 3: 131 251 0
x28732:	jne scanPattern$40	; 2: 117 54

scanPattern$30:	; Equal 51 not 0
x28734:	cmp word [bp + 12], 0	; 4: 131 126 12 0
x28738:	je scanPattern$51	; 2: 116 84

scanPattern$31:	; CallHeader 17 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanPattern$32:	; Parameter 17 pattern 6
x28740:	mov ax, [bp + 8]	; 3: 139 70 8
x28743:	mov [bp + 23], ax	; 3: 137 70 23

scanPattern$33:	; Parameter 17 size 8
x28746:	mov ax, [bp + 10]	; 3: 139 70 10
x28749:	mov [bp + 25], ax	; 3: 137 70 25

scanPattern$34:	; IntegralToIntegral £temporary1065 input
x28752:	mov al, [bp + 16]	; 3: 138 70 16
x28755:	and ax, 255	; 3: 37 255 0
x28758:	cmp al, 0	; 2: 60 0
x28760:	jge scanPattern$35	; 2: 125 4
x28762:	neg al	; 2: 246 216
x28764:	neg ax	; 2: 247 216

scanPattern$35:	; Parameter 17 £temporary1065 10
x28766:	mov [bp + 27], ax	; 3: 137 70 27

scanPattern$36:	; Call 17 strnchr 0
x28769:	mov word [bp + 17], scanPattern$37	; 5: 199 70 17 111 112
x28774:	mov [bp + 19], bp	; 3: 137 110 19
x28777:	add bp, 17	; 3: 131 197 17
x28780:	jmp @2496$strnchr	; 3: 233 191 0

scanPattern$37:	; PostCall 17

scanPattern$38:	; GetReturnValue £temporary1066

scanPattern$39:	; NotEqual 51 £temporary1066 0
x28783:	cmp bx, 0	; 3: 131 251 0
x28786:	jne scanPattern$51	; 2: 117 36

scanPattern$40:	; Assign £temporary1072 index
x28788:	mov ax, [bp + 14]	; 3: 139 70 14

scanPattern$41:	; Increment index
x28791:	inc word [bp + 14]	; 3: 255 70 14

scanPattern$42:	; BinaryAdd £temporary1075 string £temporary1072
x28794:	mov si, [bp + 6]	; 3: 139 118 6
x28797:	add si, ax	; 2: 1 198

scanPattern$43:	; Deref £temporary1074 -> £temporary1075 £temporary1075 0

scanPattern$44:	; Assign £temporary1074 -> £temporary1075 input
x28799:	mov al, [bp + 16]	; 3: 138 70 16
x28802:	mov [si], al	; 2: 136 4

scanPattern$45:	; CallHeader 17 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanPattern$46:	; Call 17 scanChar 0
x28804:	mov word [bp + 17], scanPattern$47	; 5: 199 70 17 146 112
x28809:	mov [bp + 19], bp	; 3: 137 110 19
x28812:	add bp, 17	; 3: 131 197 17
x28815:	jmp scanChar	; 3: 233 77 244

scanPattern$47:	; PostCall 17

scanPattern$48:	; GetReturnValue £temporary1076

scanPattern$49:	; Assign input £temporary1076
x28818:	mov [bp + 16], bl	; 3: 136 94 16

scanPattern$50:	; Goto 20
x28821:	jmp scanPattern$20	; 3: 233 112 255

scanPattern$51:	; BinaryAdd £temporary1078 string index
x28824:	mov si, [bp + 6]	; 3: 139 118 6
x28827:	add si, [bp + 14]	; 3: 3 118 14

scanPattern$52:	; Deref £temporary1077 -> £temporary1078 £temporary1078 0

scanPattern$53:	; Assign £temporary1077 -> £temporary1078 0
x28830:	mov byte [si], 0	; 3: 198 4 0

scanPattern$54:	; Goto 81
x28833:	jmp scanPattern$81	; 3: 233 127 0

scanPattern$55:	; NotEqual 65 not 0
x28836:	cmp word [bp + 12], 0	; 4: 131 126 12 0
x28840:	jne scanPattern$65	; 2: 117 48

scanPattern$56:	; CallHeader 17 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanPattern$57:	; Parameter 17 pattern 6
x28842:	mov ax, [bp + 8]	; 3: 139 70 8
x28845:	mov [bp + 23], ax	; 3: 137 70 23

scanPattern$58:	; Parameter 17 size 8
x28848:	mov ax, [bp + 10]	; 3: 139 70 10
x28851:	mov [bp + 25], ax	; 3: 137 70 25

scanPattern$59:	; IntegralToIntegral £temporary1081 input
x28854:	mov al, [bp + 16]	; 3: 138 70 16
x28857:	and ax, 255	; 3: 37 255 0
x28860:	cmp al, 0	; 2: 60 0
x28862:	jge scanPattern$60	; 2: 125 4
x28864:	neg al	; 2: 246 216
x28866:	neg ax	; 2: 247 216

scanPattern$60:	; Parameter 17 £temporary1081 10
x28868:	mov [bp + 27], ax	; 3: 137 70 27

scanPattern$61:	; Call 17 strnchr 0
x28871:	mov word [bp + 17], scanPattern$62	; 5: 199 70 17 213 112
x28876:	mov [bp + 19], bp	; 3: 137 110 19
x28879:	add bp, 17	; 3: 131 197 17
x28882:	nop	; 1: 144
x28883:	jmp @2496$strnchr	; 2: 235 89

scanPattern$62:	; PostCall 17

scanPattern$63:	; GetReturnValue £temporary1082

scanPattern$64:	; NotEqual 75 £temporary1082 0
x28885:	cmp bx, 0	; 3: 131 251 0
x28888:	jne scanPattern$75	; 2: 117 54

scanPattern$65:	; Equal 81 not 0
x28890:	cmp word [bp + 12], 0	; 4: 131 126 12 0
x28894:	je scanPattern$81	; 2: 116 67

scanPattern$66:	; CallHeader 17 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanPattern$67:	; Parameter 17 pattern 6
x28896:	mov ax, [bp + 8]	; 3: 139 70 8
x28899:	mov [bp + 23], ax	; 3: 137 70 23

scanPattern$68:	; Parameter 17 size 8
x28902:	mov ax, [bp + 10]	; 3: 139 70 10
x28905:	mov [bp + 25], ax	; 3: 137 70 25

scanPattern$69:	; IntegralToIntegral £temporary1085 input
x28908:	mov al, [bp + 16]	; 3: 138 70 16
x28911:	and ax, 255	; 3: 37 255 0
x28914:	cmp al, 0	; 2: 60 0
x28916:	jge scanPattern$70	; 2: 125 4
x28918:	neg al	; 2: 246 216
x28920:	neg ax	; 2: 247 216

scanPattern$70:	; Parameter 17 £temporary1085 10
x28922:	mov [bp + 27], ax	; 3: 137 70 27

scanPattern$71:	; Call 17 strnchr 0
x28925:	mov word [bp + 17], scanPattern$72	; 5: 199 70 17 11 113
x28930:	mov [bp + 19], bp	; 3: 137 110 19
x28933:	add bp, 17	; 3: 131 197 17
x28936:	nop	; 1: 144
x28937:	jmp @2496$strnchr	; 2: 235 35

scanPattern$72:	; PostCall 17

scanPattern$73:	; GetReturnValue £temporary1086

scanPattern$74:	; NotEqual 81 £temporary1086 0
x28939:	cmp bx, 0	; 3: 131 251 0
x28942:	jne scanPattern$81	; 2: 117 19

scanPattern$75:	; CallHeader 17 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanPattern$76:	; Call 17 scanChar 0
x28944:	mov word [bp + 17], scanPattern$77	; 5: 199 70 17 30 113
x28949:	mov [bp + 19], bp	; 3: 137 110 19
x28952:	add bp, 17	; 3: 131 197 17
x28955:	jmp scanChar	; 3: 233 193 243

scanPattern$77:	; PostCall 17

scanPattern$78:	; GetReturnValue £temporary1092

scanPattern$79:	; Assign input £temporary1092
x28958:	mov [bp + 16], bl	; 3: 136 94 16

scanPattern$80:	; Goto 55
x28961:	jmp scanPattern$55	; 2: 235 129

scanPattern$81:	; Return 0
x28963:	mov ax, [bp]	; 3: 139 70 0
x28966:	mov di, [bp + 4]	; 3: 139 126 4
x28969:	mov bp, [bp + 2]	; 3: 139 110 2
x28972:	jmp ax	; 2: 255 224

scanPattern$82:	; FunctionEnd scanPattern

@2496$strnchr:	; IntegralToIntegral £temporary1044 i
x28974:	mov ax, [bp + 10]	; 3: 139 70 10
x28977:	cmp ax, 0	; 3: 131 248 0
x28980:	jge @2496$strnchr$1	; 2: 125 4
x28982:	neg ax	; 2: 247 216
x28984:	neg al	; 2: 246 216

@2496$strnchr$1:	; Assign c £temporary1044
x28986:	mov [bp + 14], al	; 3: 136 70 14

@2496$strnchr$2:	; Assign index 0
x28989:	mov word [bp + 12], 0	; 5: 199 70 12 0 0

@2496$strnchr$3:	; SignedGreaterThanEqual 14 index size
x28994:	mov ax, [bp + 8]	; 3: 139 70 8
x28997:	cmp [bp + 12], ax	; 3: 57 70 12
x29000:	jge @2496$strnchr$14	; 2: 125 35

@2496$strnchr$4:	; BinaryAdd £temporary1048 text index
x29002:	mov si, [bp + 6]	; 3: 139 118 6
x29005:	add si, [bp + 12]	; 3: 3 118 12

@2496$strnchr$5:	; Deref £temporary1047 -> £temporary1048 £temporary1048 0

@2496$strnchr$6:	; NotEqual 12 £temporary1047 -> £temporary1048 c
x29008:	mov al, [bp + 14]	; 3: 138 70 14
x29011:	cmp [si], al	; 2: 56 4
x29013:	jne @2496$strnchr$12	; 2: 117 17

@2496$strnchr$7:	; BinaryAdd £temporary1051 text index
x29015:	mov bx, [bp + 6]	; 3: 139 94 6
x29018:	add bx, [bp + 12]	; 3: 3 94 12

@2496$strnchr$8:	; Deref £temporary1050 -> £temporary1051 £temporary1051 0

@2496$strnchr$9:	; address £temporary1052 £temporary1050 -> £temporary1051

@2496$strnchr$10:	; SetReturnValue £temporary1052

@2496$strnchr$11:	; Return £temporary1052
x29021:	mov ax, [bp]	; 3: 139 70 0
x29024:	mov di, [bp + 4]	; 3: 139 126 4
x29027:	mov bp, [bp + 2]	; 3: 139 110 2
x29030:	jmp ax	; 2: 255 224

@2496$strnchr$12:	; Increment index
x29032:	inc word [bp + 12]	; 3: 255 70 12

@2496$strnchr$13:	; Goto 3
x29035:	jmp @2496$strnchr$3	; 2: 235 213

@2496$strnchr$14:	; SetReturnValue 0
x29037:	mov bx, 0	; 3: 187 0 0

@2496$strnchr$15:	; Return 0
x29040:	mov ax, [bp]	; 3: 139 70 0
x29043:	mov di, [bp + 4]	; 3: 139 126 4
x29046:	mov bp, [bp + 2]	; 3: 139 110 2
x29049:	jmp ax	; 2: 255 224

@2496$strnchr$16:	; FunctionEnd strnchr

fclose:	; Equal 20 stream 0
x29051:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x29055:	je fclose$20	; 2: 116 86

fclose$1:	; AssignRegister ah 62
x29057:	mov ah, 62	; 2: 180 62

fclose$2:	; Deref £temporary809 -> stream stream 2
x29059:	mov si, [bp + 6]	; 3: 139 118 6

fclose$3:	; AssignRegister bx £temporary809 -> stream
x29062:	mov bx, [si + 2]	; 3: 139 92 2

fclose$4:	; Interrupt 33
x29065:	int 33	; 2: 205 33

fclose$5:	; NotCarry 9
x29067:	jnc fclose$9	; 2: 115 20

fclose$6:	; Assign errno 11
x29069:	mov word [errno], 11	; 6: 199 6 230 10 11 0

fclose$7:	; SetReturnValue -1
x29075:	mov bx, -1	; 3: 187 255 255

fclose$8:	; Return -1
x29078:	mov ax, [bp]	; 3: 139 70 0
x29081:	mov di, [bp + 4]	; 3: 139 126 4
x29084:	mov bp, [bp + 2]	; 3: 139 110 2
x29087:	jmp ax	; 2: 255 224

fclose$9:	; Deref £temporary811 -> stream stream 27
x29089:	mov si, [bp + 6]	; 3: 139 118 6

fclose$10:	; Equal 16 £temporary811 -> stream 0
x29092:	cmp word [si + 27], 0	; 4: 131 124 27 0
x29096:	je fclose$16	; 2: 116 24

fclose$11:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

fclose$12:	; Deref £temporary812 -> stream stream 4
x29098:	mov si, [bp + 6]	; 3: 139 118 6

fclose$13:	; Parameter 8 £temporary812 -> stream 6
x29101:	mov [bp + 14], si	; 3: 137 118 14
x29104:	add word [bp + 14], 4	; 4: 131 70 14 4

fclose$14:	; Call 8 remove 0
x29108:	mov word [bp + 8], fclose$15	; 5: 199 70 8 194 113
x29113:	mov [bp + 10], bp	; 3: 137 110 10
x29116:	add bp, 8	; 3: 131 197 8
x29119:	nop	; 1: 144
x29120:	jmp remove	; 2: 235 124

fclose$15:	; PostCall 8

fclose$16:	; Deref £temporary815 -> stream stream 0
x29122:	mov si, [bp + 6]	; 3: 139 118 6

fclose$17:	; Assign £temporary815 -> stream 0
x29125:	mov word [si], 0	; 4: 199 4 0 0

fclose$18:	; SetReturnValue 0
x29129:	mov bx, 0	; 3: 187 0 0

fclose$19:	; Return 0
x29132:	mov ax, [bp]	; 3: 139 70 0
x29135:	mov di, [bp + 4]	; 3: 139 126 4
x29138:	mov bp, [bp + 2]	; 3: 139 110 2
x29141:	jmp ax	; 2: 255 224

fclose$20:	; Assign index 0
x29143:	mov word [bp + 8], 0	; 5: 199 70 8 0 0

fclose$21:	; SignedGreaterThanEqual 40 index 20
x29148:	cmp word [bp + 8], 20	; 4: 131 126 8 20
x29152:	jge fclose$40	; 2: 125 74

fclose$22:	; SignedMultiply £temporary819 index 29
x29154:	mov ax, [bp + 8]	; 3: 139 70 8
x29157:	xor dx, dx	; 2: 49 210
x29159:	imul word [@1957$int2$29#]	; 4: 247 46 58 114

fclose$23:	; BinaryAdd £temporary820 g_fileArray £temporary819
x29163:	mov si, g_fileArray	; 3: 190 102 13
x29166:	add si, ax	; 2: 1 198

fclose$24:	; Deref £temporary818 -> £temporary820 £temporary820 0

fclose$25:	; Equal 38 £temporary818.open$0 -> £temporary820 0
x29168:	cmp word [si], 0	; 3: 131 60 0
x29171:	je fclose$38	; 2: 116 50

fclose$26:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

fclose$27:	; SignedMultiply £temporary822 index 29
x29173:	mov ax, [bp + 8]	; 3: 139 70 8
x29176:	xor dx, dx	; 2: 49 210
x29178:	imul word [@1962$int2$29#]	; 4: 247 46 60 114

fclose$28:	; BinaryAdd £temporary823 g_fileArray £temporary822
x29182:	mov si, g_fileArray	; 3: 190 102 13
x29185:	add si, ax	; 2: 1 198

fclose$29:	; Deref £temporary821 -> £temporary823 £temporary823 0

fclose$30:	; address £temporary824 £temporary821 -> £temporary823

fclose$31:	; Parameter 10 £temporary824 6
x29187:	mov [bp + 16], si	; 3: 137 118 16

fclose$32:	; Call 10 fclose 0
x29190:	mov word [bp + 10], fclose$33	; 5: 199 70 10 20 114
x29195:	mov [bp + 12], bp	; 3: 137 110 12
x29198:	add bp, 10	; 3: 131 197 10
x29201:	jmp fclose	; 3: 233 103 255

fclose$33:	; PostCall 10

fclose$34:	; GetReturnValue £temporary825

fclose$35:	; NotEqual 38 £temporary825 -1
x29204:	cmp bx, -1	; 3: 131 251 255
x29207:	jne fclose$38	; 2: 117 14

fclose$36:	; SetReturnValue -1
x29209:	mov bx, -1	; 3: 187 255 255

fclose$37:	; Return -1
x29212:	mov ax, [bp]	; 3: 139 70 0
x29215:	mov di, [bp + 4]	; 3: 139 126 4
x29218:	mov bp, [bp + 2]	; 3: 139 110 2
x29221:	jmp ax	; 2: 255 224

fclose$38:	; Increment index
x29223:	inc word [bp + 8]	; 3: 255 70 8

fclose$39:	; Goto 21
x29226:	jmp fclose$21	; 2: 235 176

fclose$40:	; SetReturnValue 0
x29228:	mov bx, 0	; 3: 187 0 0

fclose$41:	; Return 0
x29231:	mov ax, [bp]	; 3: 139 70 0
x29234:	mov di, [bp + 4]	; 3: 139 126 4
x29237:	mov bp, [bp + 2]	; 3: 139 110 2
x29240:	jmp ax	; 2: 255 224

fclose$42:	; FunctionEnd fclose

@1957$int2$29#:
x29242:	dw 29	; 2: 29 0

@1962$int2$29#:
x29244:	dw 29	; 2: 29 0

remove:	; AssignRegister ah 65
x29246:	mov ah, 65	; 2: 180 65

remove$1:	; AssignRegister cl 0
x29248:	mov cl, 0	; 2: 177 0

remove$2:	; AssignRegister dx name
x29250:	mov dx, [bp + 6]	; 3: 139 86 6

remove$3:	; Interrupt 33
x29253:	int 33	; 2: 205 33

remove$4:	; Carry 7
x29255:	jc remove$7	; 2: 114 14

remove$5:	; SetReturnValue 0
x29257:	mov bx, 0	; 3: 187 0 0

remove$6:	; Return 0
x29260:	mov ax, [bp]	; 3: 139 70 0
x29263:	mov di, [bp + 4]	; 3: 139 126 4
x29266:	mov bp, [bp + 2]	; 3: 139 110 2
x29269:	jmp ax	; 2: 255 224

remove$7:	; Assign errno 18
x29271:	mov word [errno], 18	; 6: 199 6 230 10 18 0

remove$8:	; SetReturnValue -1
x29277:	mov bx, -1	; 3: 187 255 255

remove$9:	; Return -1
x29280:	mov ax, [bp]	; 3: 139 70 0
x29283:	mov di, [bp + 4]	; 3: 139 126 4
x29286:	mov bp, [bp + 2]	; 3: 139 110 2
x29289:	jmp ax	; 2: 255 224

remove$10:	; FunctionEnd remove

rename:	; AssignRegister ah 86
x29291:	mov ah, 86	; 2: 180 86

rename$1:	; AssignRegister cl 0
x29293:	mov cl, 0	; 2: 177 0

rename$2:	; AssignRegister dx oldName
x29295:	mov dx, [bp + 6]	; 3: 139 86 6

rename$3:	; AssignRegister di newName
x29298:	mov di, [bp + 8]	; 3: 139 126 8

rename$4:	; Interrupt 33
x29301:	int 33	; 2: 205 33

rename$5:	; Carry 8
x29303:	jc rename$8	; 2: 114 14

rename$6:	; SetReturnValue 0
x29305:	mov bx, 0	; 3: 187 0 0

rename$7:	; Return 0
x29308:	mov ax, [bp]	; 3: 139 70 0
x29311:	mov di, [bp + 4]	; 3: 139 126 4
x29314:	mov bp, [bp + 2]	; 3: 139 110 2
x29317:	jmp ax	; 2: 255 224

rename$8:	; Assign errno 19
x29319:	mov word [errno], 19	; 6: 199 6 230 10 19 0

rename$9:	; SetReturnValue -1
x29325:	mov bx, -1	; 3: 187 255 255

rename$10:	; Return -1
x29328:	mov ax, [bp]	; 3: 139 70 0
x29331:	mov di, [bp + 4]	; 3: 139 126 4
x29334:	mov bp, [bp + 2]	; 3: 139 110 2
x29337:	jmp ax	; 2: 255 224

rename$11:	; FunctionEnd rename

fwrite:	; Deref £temporary923 -> stream stream 2
x29339:	mov si, [bp + 12]	; 3: 139 118 12

fwrite$1:	; AssignRegister bx £temporary923 -> stream
x29342:	mov bx, [si + 2]	; 3: 139 92 2

fwrite$2:	; SignedMultiply £temporary925 size nobj
x29345:	mov ax, [bp + 8]	; 3: 139 70 8
x29348:	xor dx, dx	; 2: 49 210
x29350:	imul word [bp + 10]	; 3: 247 110 10

fwrite$3:	; AssignRegister cx £temporary925
x29353:	mov cx, ax	; 2: 137 193

fwrite$4:	; AssignRegister ah 64
x29355:	mov ah, 64	; 2: 180 64

fwrite$5:	; AssignRegister dx ptr
x29357:	mov dx, [bp + 6]	; 3: 139 86 6

fwrite$6:	; Interrupt 33
x29360:	int 33	; 2: 205 33

fwrite$7:	; NotCarry 13
x29362:	jnc fwrite$13	; 2: 115 29

fwrite$8:	; Deref £temporary929 -> stream stream 21
x29364:	mov si, [bp + 12]	; 3: 139 118 12

fwrite$9:	; Assign errno 13
x29367:	mov word [errno], 13	; 6: 199 6 230 10 13 0

fwrite$10:	; Assign £temporary929 -> stream errno
x29373:	mov ax, [errno]	; 3: 161 230 10
x29376:	mov [si + 21], ax	; 3: 137 68 21

fwrite$11:	; SetReturnValue 0
x29379:	mov bx, 0	; 3: 187 0 0

fwrite$12:	; Return 0
x29382:	mov ax, [bp]	; 3: 139 70 0
x29385:	mov di, [bp + 4]	; 3: 139 126 4
x29388:	mov bp, [bp + 2]	; 3: 139 110 2
x29391:	jmp ax	; 2: 255 224

fwrite$13:	; InspectRegister £temporary930 ax

fwrite$14:	; SetReturnValue £temporary930
x29393:	mov bx, ax	; 2: 137 195

fwrite$15:	; Return £temporary930
x29395:	mov ax, [bp]	; 3: 139 70 0
x29398:	mov di, [bp + 4]	; 3: 139 126 4
x29401:	mov bp, [bp + 2]	; 3: 139 110 2
x29404:	jmp ax	; 2: 255 224

fwrite$16:	; FunctionEnd fwrite

fread:	; Deref £temporary914 -> stream stream 2
x29406:	mov si, [bp + 12]	; 3: 139 118 12

fread$1:	; AssignRegister bx £temporary914 -> stream
x29409:	mov bx, [si + 2]	; 3: 139 92 2

fread$2:	; SignedMultiply £temporary916 size nobj
x29412:	mov ax, [bp + 8]	; 3: 139 70 8
x29415:	xor dx, dx	; 2: 49 210
x29417:	imul word [bp + 10]	; 3: 247 110 10

fread$3:	; AssignRegister cx £temporary916
x29420:	mov cx, ax	; 2: 137 193

fread$4:	; AssignRegister ah 63
x29422:	mov ah, 63	; 2: 180 63

fread$5:	; AssignRegister dx ptr
x29424:	mov dx, [bp + 6]	; 3: 139 86 6

fread$6:	; Interrupt 33
x29427:	int 33	; 2: 205 33

fread$7:	; NotCarry 13
x29429:	jnc fread$13	; 2: 115 29

fread$8:	; Deref £temporary920 -> stream stream 21
x29431:	mov si, [bp + 12]	; 3: 139 118 12

fread$9:	; Assign errno 14
x29434:	mov word [errno], 14	; 6: 199 6 230 10 14 0

fread$10:	; Assign £temporary920 -> stream errno
x29440:	mov ax, [errno]	; 3: 161 230 10
x29443:	mov [si + 21], ax	; 3: 137 68 21

fread$11:	; SetReturnValue 0
x29446:	mov bx, 0	; 3: 187 0 0

fread$12:	; Return 0
x29449:	mov ax, [bp]	; 3: 139 70 0
x29452:	mov di, [bp + 4]	; 3: 139 126 4
x29455:	mov bp, [bp + 2]	; 3: 139 110 2
x29458:	jmp ax	; 2: 255 224

fread$13:	; InspectRegister £temporary921 ax

fread$14:	; SetReturnValue £temporary921
x29460:	mov bx, ax	; 2: 137 195

fread$15:	; Return £temporary921
x29462:	mov ax, [bp]	; 3: 139 70 0
x29465:	mov di, [bp + 4]	; 3: 139 126 4
x29468:	mov bp, [bp + 2]	; 3: 139 110 2
x29471:	jmp ax	; 2: 255 224

fread$16:	; FunctionEnd fread

malloc:	; IntegralToIntegral £temporary25 memorySize
x29473:	mov ax, [bp + 6]	; 3: 139 70 6

malloc$1:	; BinaryAdd newBlockSize £temporary25 4
x29476:	add ax, 4	; 3: 131 192 4
x29479:	mov [bp + 8], ax	; 3: 137 70 8

malloc$2:	; Assign minGap 0
x29482:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

malloc$3:	; Assign lastAddress 65528
x29487:	mov word [bp + 12], 65528	; 5: 199 70 12 248 255

malloc$4:	; Assign minBlockPtr 0
x29492:	mov word [bp + 14], 0	; 5: 199 70 14 0 0

malloc$5:	; Assign minPrevBlockPtr 0
x29497:	mov word [bp + 16], 0	; 5: 199 70 16 0 0

malloc$6:	; Assign prevBlockPtr 0
x29502:	mov word [bp + 18], 0	; 5: 199 70 18 0 0

malloc$7:	; Assign currBlockPtr g_firstBlockPtr
x29507:	mov ax, [g_firstBlockPtr]	; 3: 161 175 116
x29510:	mov [bp + 20], ax	; 3: 137 70 20

malloc$8:	; SignedGreaterThanEqual 20 memorySize 0
x29513:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x29517:	jge malloc$20	; 2: 125 59

malloc$9:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

malloc$10:	; Parameter 22 stderr 6
x29519:	mov ax, [stderr]	; 3: 161 121 77
x29522:	mov [bp + 28], ax	; 3: 137 70 28

malloc$11:	; Parameter 22 string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A# 8
x29525:	mov word [bp + 30], @115$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#	; 5: 199 70 30 177 116

malloc$12:	; Parameter 22 string_memorySize203E3D200# 10
x29530:	mov word [bp + 32], @116$string_memorySize203E3D200#	; 5: 199 70 32 223 116

malloc$13:	; Parameter 22 string_C3A5CUsers5CStefa5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CMalloc2Ec# 12
x29535:	mov word [bp + 34], @117$string_C3A5CUsers5CStefa5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CMalloc2Ec#	; 5: 199 70 34 239 116

malloc$14:	; Parameter 22 41 14
x29540:	mov word [bp + 36], 41	; 5: 199 70 36 41 0

malloc$15:	; Call 22 fprintf 0
x29545:	mov word [bp + 22], malloc$16	; 5: 199 70 22 124 115
x29550:	mov [bp + 24], bp	; 3: 137 110 24
x29553:	add bp, 22	; 3: 131 197 22
x29556:	mov di, bp	; 2: 137 239
x29558:	add di, 6	; 3: 131 199 6
x29561:	jmp fprintf	; 3: 233 239 234

malloc$16:	; PostCall 22

malloc$17:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

malloc$18:	; Call 22 abort 0
x29564:	mov word [bp + 22], malloc$19	; 5: 199 70 22 138 115
x29569:	mov [bp + 24], bp	; 3: 137 110 24
x29572:	add bp, 22	; 3: 131 197 22
x29575:	jmp abort	; 3: 233 28 235

malloc$19:	; PostCall 22

malloc$20:	; NotEqual 23 memorySize 0
x29578:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x29582:	jne malloc$23	; 2: 117 14

malloc$21:	; SetReturnValue 0
x29584:	mov bx, 0	; 3: 187 0 0

malloc$22:	; Return 0
x29587:	mov ax, [bp]	; 3: 139 70 0
x29590:	mov di, [bp + 4]	; 3: 139 126 4
x29593:	mov bp, [bp + 2]	; 3: 139 110 2
x29596:	jmp ax	; 2: 255 224

malloc$23:	; Equal 41 currBlockPtr 0
x29598:	cmp word [bp + 20], 0	; 4: 131 126 20 0
x29602:	je malloc$41	; 2: 116 88

malloc$24:	; IntegralToIntegral £temporary33 currBlockPtr
x29604:	mov ax, [bp + 20]	; 3: 139 70 20

malloc$25:	; Assign currAddress £temporary33
x29607:	mov [bp + 22], ax	; 3: 137 70 22

malloc$26:	; Deref £temporary34 -> currBlockPtr currBlockPtr 0
x29610:	mov si, [bp + 20]	; 3: 139 118 20

malloc$27:	; BinaryAdd £temporary35 currAddress £temporary34 -> currBlockPtr
x29613:	mov ax, [bp + 22]	; 3: 139 70 22
x29616:	add ax, [si]	; 2: 3 4

malloc$28:	; BinaryAdd £temporary36 £temporary35 4
x29618:	add ax, 4	; 3: 131 192 4

malloc$29:	; BinarySubtract currGap lastAddress £temporary36
x29621:	mov bx, [bp + 12]	; 3: 139 94 12
x29624:	sub bx, ax	; 2: 41 195
x29626:	mov [bp + 24], bx	; 3: 137 94 24

malloc$30:	; UnsignedGreaterThan 36 newBlockSize currGap
x29629:	mov ax, [bp + 24]	; 3: 139 70 24
x29632:	cmp [bp + 8], ax	; 3: 57 70 8
x29635:	ja malloc$36	; 2: 119 32

malloc$31:	; Equal 33 minGap 0
x29637:	cmp word [bp + 10], 0	; 4: 131 126 10 0
x29641:	je malloc$33	; 2: 116 8

malloc$32:	; UnsignedGreaterThanEqual 36 currGap minGap
x29643:	mov ax, [bp + 10]	; 3: 139 70 10
x29646:	cmp [bp + 24], ax	; 3: 57 70 24
x29649:	jae malloc$36	; 2: 115 18

malloc$33:	; Assign minGap currGap
x29651:	mov ax, [bp + 24]	; 3: 139 70 24
x29654:	mov [bp + 10], ax	; 3: 137 70 10

malloc$34:	; Assign minBlockPtr currBlockPtr
x29657:	mov ax, [bp + 20]	; 3: 139 70 20
x29660:	mov [bp + 14], ax	; 3: 137 70 14

malloc$35:	; Assign minPrevBlockPtr prevBlockPtr
x29663:	mov ax, [bp + 18]	; 3: 139 70 18
x29666:	mov [bp + 16], ax	; 3: 137 70 16

malloc$36:	; Assign lastAddress currAddress
x29669:	mov ax, [bp + 22]	; 3: 139 70 22
x29672:	mov [bp + 12], ax	; 3: 137 70 12

malloc$37:	; Assign prevBlockPtr currBlockPtr
x29675:	mov ax, [bp + 20]	; 3: 139 70 20
x29678:	mov [bp + 18], ax	; 3: 137 70 18

malloc$38:	; Deref £temporary43 -> currBlockPtr currBlockPtr 2
x29681:	mov si, [bp + 20]	; 3: 139 118 20

malloc$39:	; Assign currBlockPtr £temporary43 -> currBlockPtr
x29684:	mov ax, [si + 2]	; 3: 139 68 2
x29687:	mov [bp + 20], ax	; 3: 137 70 20

malloc$40:	; Goto 23
x29690:	jmp malloc$23	; 2: 235 162

malloc$41:	; Equal 61 minBlockPtr 0
x29692:	cmp word [bp + 14], 0	; 4: 131 126 14 0
x29696:	je malloc$61	; 2: 116 77

malloc$42:	; IntegralToIntegral £temporary45 minBlockPtr
x29698:	mov ax, [bp + 14]	; 3: 139 70 14

malloc$43:	; Deref £temporary46 -> minBlockPtr minBlockPtr 0
x29701:	mov si, [bp + 14]	; 3: 139 118 14

malloc$44:	; BinaryAdd £temporary47 £temporary45 £temporary46 -> minBlockPtr
x29704:	add ax, [si]	; 2: 3 4

malloc$45:	; BinaryAdd newAddress £temporary47 4
x29706:	add ax, 4	; 3: 131 192 4
x29709:	mov [bp + 22], ax	; 3: 137 70 22

malloc$46:	; IntegralToIntegral £temporary49 newAddress
x29712:	mov ax, [bp + 22]	; 3: 139 70 22

malloc$47:	; Assign newBlockPtr £temporary49
x29715:	mov [bp + 24], ax	; 3: 137 70 24

malloc$48:	; Deref £temporary50 -> newBlockPtr newBlockPtr 0
x29718:	mov si, [bp + 24]	; 3: 139 118 24

malloc$49:	; Assign £temporary50 -> newBlockPtr memorySize
x29721:	mov ax, [bp + 6]	; 3: 139 70 6
x29724:	mov [si], ax	; 2: 137 4

malloc$50:	; Deref £temporary51 -> newBlockPtr newBlockPtr 2
x29726:	mov si, [bp + 24]	; 3: 139 118 24

malloc$51:	; Assign £temporary51 -> newBlockPtr minBlockPtr
x29729:	mov ax, [bp + 14]	; 3: 139 70 14
x29732:	mov [si + 2], ax	; 3: 137 68 2

malloc$52:	; Equal 56 minPrevBlockPtr 0
x29735:	cmp word [bp + 16], 0	; 4: 131 126 16 0
x29739:	je malloc$56	; 2: 116 11

malloc$53:	; Deref £temporary53 -> minPrevBlockPtr minPrevBlockPtr 2
x29741:	mov si, [bp + 16]	; 3: 139 118 16

malloc$54:	; Assign £temporary53 -> minPrevBlockPtr newBlockPtr
x29744:	mov ax, [bp + 24]	; 3: 139 70 24
x29747:	mov [si + 2], ax	; 3: 137 68 2

malloc$55:	; Goto 57
x29750:	jmp malloc$57	; 2: 235 6

malloc$56:	; Assign g_firstBlockPtr newBlockPtr
x29752:	mov ax, [bp + 24]	; 3: 139 70 24
x29755:	mov [g_firstBlockPtr], ax	; 3: 163 175 116

malloc$57:	; BinaryAdd £temporary54 newAddress 4
x29758:	mov bx, [bp + 22]	; 3: 139 94 22
x29761:	add bx, 4	; 3: 131 195 4

malloc$58:	; IntegralToIntegral £temporary55 £temporary54

malloc$59:	; SetReturnValue £temporary55

malloc$60:	; Return £temporary55
x29764:	mov ax, [bp]	; 3: 139 70 0
x29767:	mov di, [bp + 4]	; 3: 139 126 4
x29770:	mov bp, [bp + 2]	; 3: 139 110 2
x29773:	jmp ax	; 2: 255 224

malloc$61:	; BinarySubtract newAddress lastAddress newBlockSize
x29775:	mov ax, [bp + 12]	; 3: 139 70 12
x29778:	sub ax, [bp + 8]	; 3: 43 70 8
x29781:	mov [bp + 22], ax	; 3: 137 70 22

malloc$62:	; InspectRegister £temporary57 bp

malloc$63:	; Assign stackTop £temporary57
x29784:	mov [bp + 24], bp	; 3: 137 110 24

malloc$64:	; UnsignedGreaterThan 80 stackTop newAddress
x29787:	mov ax, [bp + 22]	; 3: 139 70 22
x29790:	cmp [bp + 24], ax	; 3: 57 70 24
x29793:	ja malloc$80	; 2: 119 62

malloc$65:	; IntegralToIntegral £temporary59 newAddress
x29795:	mov ax, [bp + 22]	; 3: 139 70 22

malloc$66:	; Assign newBlockPtr £temporary59
x29798:	mov [bp + 26], ax	; 3: 137 70 26

malloc$67:	; Deref £temporary60 -> newBlockPtr newBlockPtr 0
x29801:	mov si, [bp + 26]	; 3: 139 118 26

malloc$68:	; Assign £temporary60 -> newBlockPtr memorySize
x29804:	mov ax, [bp + 6]	; 3: 139 70 6
x29807:	mov [si], ax	; 2: 137 4

malloc$69:	; Deref £temporary61 -> newBlockPtr newBlockPtr 2
x29809:	mov si, [bp + 26]	; 3: 139 118 26

malloc$70:	; Assign £temporary61 -> newBlockPtr 0
x29812:	mov word [si + 2], 0	; 5: 199 68 2 0 0

malloc$71:	; Equal 75 prevBlockPtr 0
x29817:	cmp word [bp + 18], 0	; 4: 131 126 18 0
x29821:	je malloc$75	; 2: 116 11

malloc$72:	; Deref £temporary63 -> prevBlockPtr prevBlockPtr 2
x29823:	mov si, [bp + 18]	; 3: 139 118 18

malloc$73:	; Assign £temporary63 -> prevBlockPtr newBlockPtr
x29826:	mov ax, [bp + 26]	; 3: 139 70 26
x29829:	mov [si + 2], ax	; 3: 137 68 2

malloc$74:	; Goto 76
x29832:	jmp malloc$76	; 2: 235 6

malloc$75:	; Assign g_firstBlockPtr newBlockPtr
x29834:	mov ax, [bp + 26]	; 3: 139 70 26
x29837:	mov [g_firstBlockPtr], ax	; 3: 163 175 116

malloc$76:	; BinaryAdd £temporary64 newAddress 4
x29840:	mov bx, [bp + 22]	; 3: 139 94 22
x29843:	add bx, 4	; 3: 131 195 4

malloc$77:	; IntegralToIntegral £temporary65 £temporary64

malloc$78:	; SetReturnValue £temporary65

malloc$79:	; Return £temporary65
x29846:	mov ax, [bp]	; 3: 139 70 0
x29849:	mov di, [bp + 4]	; 3: 139 126 4
x29852:	mov bp, [bp + 2]	; 3: 139 110 2
x29855:	jmp ax	; 2: 255 224

malloc$80:	; SetReturnValue 0
x29857:	mov bx, 0	; 3: 187 0 0

malloc$81:	; Return 0
x29860:	mov ax, [bp]	; 3: 139 70 0
x29863:	mov di, [bp + 4]	; 3: 139 126 4
x29866:	mov bp, [bp + 2]	; 3: 139 110 2
x29869:	jmp ax	; 2: 255 224

malloc$82:	; FunctionEnd malloc

g_firstBlockPtr:
x29871:	dw 0	; 2: 0 0

@115$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#:
x29873:	db "Assertion failed: ", 34, "%s", 34, " in file %s at line %i", 10, 0	; 46: 65 115 115 101 114 116 105 111 110 32 102 97 105 108 101 100 58 32 34 37 115 34 32 105 110 32 102 105 108 101 32 37 115 32 97 116 32 108 105 110 101 32 37 105 10 0

@116$string_memorySize203E3D200#:
x29919:	db "memorySize >= 0", 0	; 16: 109 101 109 111 114 121 83 105 122 101 32 62 61 32 48 0

@117$string_C3A5CUsers5CStefa5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CMalloc2Ec#:
x29935:	db "C:\Users\Stefa\Documents\vagrant\homestead\code\code\Malloc.c", 0	; 62: 67 58 92 85 115 101 114 115 92 83 116 101 102 97 92 68 111 99 117 109 101 110 116 115 92 118 97 103 114 97 110 116 92 104 111 109 101 115 116 101 97 100 92 99 111 100 101 92 99 111 100 101 92 77 97 108 108 111 99 46 99 0

free:	; IntegralToIntegral £temporary79 freeMemoryPtr
x29997:	mov ax, [bp + 6]	; 3: 139 70 6

free$1:	; BinarySubtract £temporary80 £temporary79 4
x30000:	sub ax, 4	; 3: 131 232 4

free$2:	; IntegralToIntegral £temporary81 £temporary80

free$3:	; Assign freeBlockPtr £temporary81
x30003:	mov [bp + 8], ax	; 3: 137 70 8

free$4:	; Assign prevBlockPtr 0
x30006:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

free$5:	; Assign currBlockPtr g_firstBlockPtr
x30011:	mov ax, [g_firstBlockPtr]	; 3: 161 175 116
x30014:	mov [bp + 12], ax	; 3: 137 70 12

free$6:	; NotEqual 8 freeMemoryPtr 0
x30017:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x30021:	jne free$8	; 2: 117 11

free$7:	; Return
x30023:	mov ax, [bp]	; 3: 139 70 0
x30026:	mov di, [bp + 4]	; 3: 139 126 4
x30029:	mov bp, [bp + 2]	; 3: 139 110 2
x30032:	jmp ax	; 2: 255 224

free$8:	; Equal 32 currBlockPtr 0
x30034:	cmp word [bp + 12], 0	; 4: 131 126 12 0
x30038:	je free$32	; 2: 116 107

free$9:	; NotEqual 28 currBlockPtr freeBlockPtr
x30040:	mov ax, [bp + 8]	; 3: 139 70 8
x30043:	cmp [bp + 12], ax	; 3: 57 70 12
x30046:	jne free$28	; 2: 117 82

free$10:	; NotEqual 15 prevBlockPtr 0
x30048:	cmp word [bp + 10], 0	; 4: 131 126 10 0
x30052:	jne free$15	; 2: 117 17

free$11:	; Deref £temporary86 -> currBlockPtr currBlockPtr 2
x30054:	mov si, [bp + 12]	; 3: 139 118 12

free$12:	; NotEqual 15 £temporary86 -> currBlockPtr 0
x30057:	cmp word [si + 2], 0	; 4: 131 124 2 0
x30061:	jne free$15	; 2: 117 8

free$13:	; Assign g_firstBlockPtr 0
x30063:	mov word [g_firstBlockPtr], 0	; 6: 199 6 175 116 0 0

free$14:	; Goto 27
x30069:	jmp free$27	; 2: 235 48

free$15:	; NotEqual 19 prevBlockPtr 0
x30071:	cmp word [bp + 10], 0	; 4: 131 126 10 0
x30075:	jne free$19	; 2: 117 11

free$16:	; Deref £temporary90 -> currBlockPtr currBlockPtr 2
x30077:	mov si, [bp + 12]	; 3: 139 118 12

free$17:	; Assign g_firstBlockPtr £temporary90 -> currBlockPtr
x30080:	mov ax, [si + 2]	; 3: 139 68 2
x30083:	mov [g_firstBlockPtr], ax	; 3: 163 175 116

free$18:	; Goto 27
x30086:	jmp free$27	; 2: 235 31

free$19:	; Deref £temporary91 -> currBlockPtr currBlockPtr 2
x30088:	mov si, [bp + 12]	; 3: 139 118 12

free$20:	; NotEqual 24 £temporary91 -> currBlockPtr 0
x30091:	cmp word [si + 2], 0	; 4: 131 124 2 0
x30095:	jne free$24	; 2: 117 10

free$21:	; Deref £temporary93 -> prevBlockPtr prevBlockPtr 2
x30097:	mov si, [bp + 10]	; 3: 139 118 10

free$22:	; Assign £temporary93 -> prevBlockPtr 0
x30100:	mov word [si + 2], 0	; 5: 199 68 2 0 0

free$23:	; Goto 27
x30105:	jmp free$27	; 2: 235 12

free$24:	; Deref £temporary94 -> prevBlockPtr prevBlockPtr 2
x30107:	mov si, [bp + 10]	; 3: 139 118 10

free$25:	; Deref £temporary95 -> currBlockPtr currBlockPtr 2
x30110:	mov di, [bp + 12]	; 3: 139 126 12

free$26:	; Assign £temporary94 -> prevBlockPtr £temporary95 -> currBlockPtr
x30113:	mov ax, [di + 2]	; 3: 139 69 2
x30116:	mov [si + 2], ax	; 3: 137 68 2

free$27:	; Return
x30119:	mov ax, [bp]	; 3: 139 70 0
x30122:	mov di, [bp + 4]	; 3: 139 126 4
x30125:	mov bp, [bp + 2]	; 3: 139 110 2
x30128:	jmp ax	; 2: 255 224

free$28:	; Assign prevBlockPtr currBlockPtr
x30130:	mov ax, [bp + 12]	; 3: 139 70 12
x30133:	mov [bp + 10], ax	; 3: 137 70 10

free$29:	; Deref £temporary96 -> currBlockPtr currBlockPtr 2
x30136:	mov si, [bp + 12]	; 3: 139 118 12

free$30:	; Assign currBlockPtr £temporary96 -> currBlockPtr
x30139:	mov ax, [si + 2]	; 3: 139 68 2
x30142:	mov [bp + 12], ax	; 3: 137 70 12

free$31:	; Goto 8
x30145:	jmp free$8	; 2: 235 143

free$32:	; Return 0
x30147:	mov ax, [bp]	; 3: 139 70 0
x30150:	mov di, [bp + 4]	; 3: 139 126 4
x30153:	mov bp, [bp + 2]	; 3: 139 110 2
x30156:	jmp ax	; 2: 255 224

free$33:	; FunctionEnd free

ftell:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

ftell$1:	; Parameter 8 stream 6
x30158:	mov ax, [bp + 6]	; 3: 139 70 6
x30161:	mov [bp + 14], ax	; 3: 137 70 14

ftell$2:	; Parameter 8 0 8
x30164:	mov word [bp + 16], 0	; 5: 199 70 16 0 0

ftell$3:	; Parameter 8 1 10
x30169:	mov word [bp + 18], 1	; 5: 199 70 18 1 0

ftell$4:	; Call 8 fseek 0
x30174:	mov word [bp + 8], ftell$5	; 5: 199 70 8 236 117
x30179:	mov [bp + 10], bp	; 3: 137 110 10
x30182:	add bp, 8	; 3: 131 197 8
x30185:	jmp fseek	; 3: 233 218 231

ftell$5:	; PostCall 8

ftell$6:	; GetReturnValue £temporary945

ftell$7:	; SetReturnValue £temporary945

ftell$8:	; Return £temporary945
x30188:	mov ax, [bp]	; 3: 139 70 0
x30191:	mov di, [bp + 4]	; 3: 139 126 4
x30194:	mov bp, [bp + 2]	; 3: 139 110 2
x30197:	jmp ax	; 2: 255 224

ftell$9:	; FunctionEnd ftell

fgetc:	; Assign c 0
x30199:	mov byte [bp + 8], 0	; 4: 198 70 8 0

fgetc$1:	; CallHeader 9 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

fgetc$2:	; address £temporary841 c
x30203:	mov si, bp	; 2: 137 238
x30205:	add si, 8	; 3: 131 198 8

fgetc$3:	; Parameter 9 £temporary841 6
x30208:	mov [bp + 15], si	; 3: 137 118 15

fgetc$4:	; Parameter 9 1 8
x30211:	mov word [bp + 17], 1	; 5: 199 70 17 1 0

fgetc$5:	; Parameter 9 1 10
x30216:	mov word [bp + 19], 1	; 5: 199 70 19 1 0

fgetc$6:	; Parameter 9 stream 12
x30221:	mov ax, [bp + 6]	; 3: 139 70 6
x30224:	mov [bp + 21], ax	; 3: 137 70 21

fgetc$7:	; Call 9 fread 0
x30227:	mov word [bp + 9], fgetc$8	; 5: 199 70 9 33 118
x30232:	mov [bp + 11], bp	; 3: 137 110 11
x30235:	add bp, 9	; 3: 131 197 9
x30238:	jmp fread	; 3: 233 189 252

fgetc$8:	; PostCall 9

fgetc$9:	; GetReturnValue £temporary842

fgetc$10:	; SignedLessThanEqual 14 £temporary842 0
x30241:	cmp bx, 0	; 3: 131 251 0
x30244:	jle fgetc$14	; 2: 126 27

fgetc$11:	; IntegralToIntegral £temporary844 c
x30246:	mov bl, [bp + 8]	; 3: 138 94 8
x30249:	and bx, 255	; 4: 129 227 255 0
x30253:	cmp bl, 0	; 3: 128 251 0
x30256:	jge fgetc$12	; 2: 125 4
x30258:	neg bl	; 2: 246 219
x30260:	neg bx	; 2: 247 219

fgetc$12:	; SetReturnValue £temporary844

fgetc$13:	; Return £temporary844
x30262:	mov ax, [bp]	; 3: 139 70 0
x30265:	mov di, [bp + 4]	; 3: 139 126 4
x30268:	mov bp, [bp + 2]	; 3: 139 110 2
x30271:	jmp ax	; 2: 255 224

fgetc$14:	; SetReturnValue -1
x30273:	mov bx, -1	; 3: 187 255 255

fgetc$15:	; Return -1
x30276:	mov ax, [bp]	; 3: 139 70 0
x30279:	mov di, [bp + 4]	; 3: 139 126 4
x30282:	mov bp, [bp + 2]	; 3: 139 110 2
x30285:	jmp ax	; 2: 255 224

fgetc$16:	; FunctionEnd fgetc

putchar:	; Assign g_outStatus 0
x30287:	mov word [g_outStatus], 0	; 6: 199 6 219 15 0 0

putchar$1:	; IntegralToIntegral £temporary1597 stdout
x30293:	mov ax, [stdout]	; 3: 161 100 13

putchar$2:	; Assign g_outDevice £temporary1597
x30296:	mov [g_outDevice], ax	; 3: 163 221 15

putchar$3:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

putchar$4:	; IntegralToIntegral £temporary1598 i
x30299:	mov ax, [bp + 6]	; 3: 139 70 6
x30302:	cmp ax, 0	; 3: 131 248 0
x30305:	jge putchar$5	; 2: 125 4
x30307:	neg ax	; 2: 247 216
x30309:	neg al	; 2: 246 216

putchar$5:	; Parameter 8 £temporary1598 6
x30311:	mov [bp + 14], al	; 3: 136 70 14

putchar$6:	; Call 8 printChar 0
x30314:	mov word [bp + 8], putchar$7	; 5: 199 70 8 120 118
x30319:	mov [bp + 10], bp	; 3: 137 110 10
x30322:	add bp, 8	; 3: 131 197 8
x30325:	jmp printChar	; 3: 233 214 165

putchar$7:	; PostCall 8

putchar$8:	; SetReturnValue 1
x30328:	mov bx, 1	; 3: 187 1 0

putchar$9:	; Return 1
x30331:	mov ax, [bp]	; 3: 139 70 0
x30334:	mov di, [bp + 4]	; 3: 139 126 4
x30337:	mov bp, [bp + 2]	; 3: 139 110 2
x30340:	jmp ax	; 2: 255 224

putchar$10:	; FunctionEnd putchar

time_test:	; Assign weekdays[0] string_Sun#
x30342:	mov word [bp + 6], @13554$string_Sun#	; 5: 199 70 6 102 121

time_test$1:	; Assign weekdays[1] string_Mon#
x30347:	mov word [bp + 8], @13555$string_Mon#	; 5: 199 70 8 106 121

time_test$2:	; Assign weekdays[2] string_Tue#
x30352:	mov word [bp + 10], @13556$string_Tue#	; 5: 199 70 10 110 121

time_test$3:	; Assign weekdays[3] string_Wed#
x30357:	mov word [bp + 12], @13557$string_Wed#	; 5: 199 70 12 114 121

time_test$4:	; Assign weekdays[4] string_Thu#
x30362:	mov word [bp + 14], @13558$string_Thu#	; 5: 199 70 14 118 121

time_test$5:	; Assign weekdays[5] string_Fri#
x30367:	mov word [bp + 16], @13559$string_Fri#	; 5: 199 70 16 122 121

time_test$6:	; Assign weekdays[6] string_Sat#
x30372:	mov word [bp + 18], @13560$string_Sat#	; 5: 199 70 18 126 121

time_test$7:	; CallHeader 20 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

time_test$8:	; Parameter 20 0 6
x30377:	mov word [bp + 26], 0	; 5: 199 70 26 0 0

time_test$9:	; Call 20 time 0
x30382:	mov word [bp + 20], time_test$10	; 5: 199 70 20 188 118
x30387:	mov [bp + 22], bp	; 3: 137 110 22
x30390:	add bp, 20	; 3: 131 197 20
x30393:	jmp time	; 3: 233 219 4

time_test$10:	; PostCall 20

time_test$11:	; GetReturnValue £temporary6238

time_test$12:	; Assign now1 £temporary6238
x30396:	mov [bp + 20], ebx	; 4: 102 137 94 20

time_test$13:	; CallHeader 24 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

time_test$14:	; address £temporary6239 now1
x30400:	mov si, bp	; 2: 137 238
x30402:	add si, 20	; 3: 131 198 20

time_test$15:	; Parameter 24 £temporary6239 6
x30405:	mov [bp + 30], si	; 3: 137 118 30

time_test$16:	; Call 24 gmtime 0
x30408:	mov word [bp + 24], time_test$17	; 5: 199 70 24 214 118
x30413:	mov [bp + 26], bp	; 3: 137 110 26
x30416:	add bp, 24	; 3: 131 197 24
x30419:	jmp gmtime	; 3: 233 161 7

time_test$17:	; PostCall 24

time_test$18:	; GetReturnValue £temporary6240

time_test$19:	; Deref £temporary6241 -> £temporary6240 £temporary6240 0

time_test$20:	; Assign s £temporary6241 -> £temporary6240
x30422:	mov si, bp	; 2: 137 238
x30424:	add si, 24	; 3: 131 198 24
x30427:	mov al, 18	; 2: 176 18

time_test$20$Loop:
x30429:	mov ah, [bx]	; 2: 138 39
x30431:	mov [si], ah	; 2: 136 36
x30433:	inc bx	; 1: 67
x30434:	inc si	; 1: 70
x30435:	dec al	; 2: 254 200
x30437:	cmp al, 0	; 2: 60 0
x30439:	jne time_test$20$Loop	; 2: 117 244

time_test$21:	; CallHeader 42 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

time_test$22:	; address £temporary6242 now1
x30441:	mov si, bp	; 2: 137 238
x30443:	add si, 20	; 3: 131 198 20

time_test$23:	; Parameter 42 £temporary6242 6
x30446:	mov [bp + 48], si	; 3: 137 118 48

time_test$24:	; Call 42 localtime 0
x30449:	mov word [bp + 42], time_test$25	; 5: 199 70 42 255 118
x30454:	mov [bp + 44], bp	; 3: 137 110 44
x30457:	add bp, 42	; 3: 131 197 42
x30460:	jmp localtime	; 3: 233 24 10

time_test$25:	; PostCall 42

time_test$26:	; GetReturnValue £temporary6243

time_test$27:	; Deref £temporary6244 -> £temporary6243 £temporary6243 0

time_test$28:	; Assign t £temporary6244 -> £temporary6243
x30463:	mov si, bp	; 2: 137 238
x30465:	add si, 42	; 3: 131 198 42
x30468:	mov al, 18	; 2: 176 18

time_test$28$Loop:
x30470:	mov ah, [bx]	; 2: 138 39
x30472:	mov [si], ah	; 2: 136 36
x30474:	inc bx	; 1: 67
x30475:	inc si	; 1: 70
x30476:	dec al	; 2: 254 200
x30478:	cmp al, 0	; 2: 60 0
x30480:	jne time_test$28$Loop	; 2: 117 244

time_test$29:	; CallHeader 60 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

time_test$30:	; address £temporary6245 s
x30482:	mov si, bp	; 2: 137 238
x30484:	add si, 24	; 3: 131 198 24

time_test$31:	; Parameter 60 £temporary6245 6
x30487:	mov [bp + 66], si	; 3: 137 118 66

time_test$32:	; Call 60 mktime 0
x30490:	mov word [bp + 60], time_test$33	; 5: 199 70 60 40 119
x30495:	mov [bp + 62], bp	; 3: 137 110 62
x30498:	add bp, 60	; 3: 131 197 60
x30501:	jmp mktime	; 3: 233 78 6

time_test$33:	; PostCall 60

time_test$34:	; GetReturnValue £temporary6246

time_test$35:	; Assign now2 £temporary6246
x30504:	mov [bp + 60], ebx	; 4: 102 137 94 60

time_test$36:	; CallHeader 64 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

time_test$37:	; Parameter 64 string_now2013A2025lu0A# 6
x30508:	mov word [bp + 70], @13586$string_now2013A2025lu0A#	; 5: 199 70 70 130 121

time_test$38:	; Parameter 64 now1 8
x30513:	mov eax, [bp + 20]	; 4: 102 139 70 20
x30517:	mov [bp + 72], eax	; 4: 102 137 70 72

time_test$39:	; Call 64 printf 0
x30521:	mov word [bp + 64], time_test$40	; 5: 199 70 64 76 119
x30526:	mov [bp + 66], bp	; 3: 137 110 66
x30529:	add bp, 64	; 3: 131 197 64
x30532:	mov di, bp	; 2: 137 239
x30534:	add di, 4	; 3: 131 199 4
x30537:	jmp printf	; 3: 233 184 149

time_test$40:	; PostCall 64

time_test$41:	; CallHeader 64 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

time_test$42:	; Parameter 64 string_now2023A2025lu0A# 6
x30540:	mov word [bp + 70], @13588$string_now2023A2025lu0A#	; 5: 199 70 70 142 121

time_test$43:	; Parameter 64 now2 8
x30545:	mov eax, [bp + 60]	; 4: 102 139 70 60
x30549:	mov [bp + 72], eax	; 4: 102 137 70 72

time_test$44:	; Call 64 printf 0
x30553:	mov word [bp + 64], time_test$45	; 5: 199 70 64 108 119
x30558:	mov [bp + 66], bp	; 3: 137 110 66
x30561:	add bp, 64	; 3: 131 197 64
x30564:	mov di, bp	; 2: 137 239
x30566:	add di, 4	; 3: 131 199 4
x30569:	jmp printf	; 3: 233 152 149

time_test$45:	; PostCall 64

time_test$46:	; CallHeader 64 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

time_test$47:	; Parameter 64 string_202020gm20time3A2025s202502i2D2502i2D2502i202502i3A2502i3A2502i2C20year20day2025i2C20week20day2025i2C20daylight20saving20time2025i0A# 6
x30572:	mov word [bp + 70], @13590$string_202020gm20time3A2025s202502i2D2502i2D2502i202502i3A2502i3A2502i2C20year20day2025i2C20week20day2025i2C20daylight20saving20time2025i0A#	; 5: 199 70 70 154 121

time_test$48:	; SignedMultiply £temporary6251 s$tm_wday 2
x30577:	mov ax, [bp + 36]	; 3: 139 70 36
x30580:	xor dx, dx	; 2: 49 210
x30582:	imul word [@13593$int2$2#]	; 4: 247 46 251 121

time_test$49:	; BinaryAdd £temporary6252 weekdays £temporary6251
x30586:	mov si, bp	; 2: 137 238
x30588:	add si, 6	; 3: 131 198 6
x30591:	add si, ax	; 2: 1 198

time_test$50:	; Deref £temporary6250 -> £temporary6252 £temporary6252 0

time_test$51:	; Parameter 64 £temporary6250 -> £temporary6252 8
x30593:	mov ax, [si]	; 2: 139 4
x30595:	mov [bp + 72], ax	; 3: 137 70 72

time_test$52:	; BinaryAdd £temporary6254 s$tm_year 1900
x30598:	mov ax, [bp + 34]	; 3: 139 70 34
x30601:	add ax, 1900	; 3: 5 108 7

time_test$53:	; Parameter 64 £temporary6254 10
x30604:	mov [bp + 74], ax	; 3: 137 70 74

time_test$54:	; BinaryAdd £temporary6256 s$tm_mon 1
x30607:	mov ax, [bp + 32]	; 3: 139 70 32
x30610:	inc ax	; 1: 64

time_test$55:	; Parameter 64 £temporary6256 12
x30611:	mov [bp + 76], ax	; 3: 137 70 76

time_test$56:	; Parameter 64 s$tm_mday 14
x30614:	mov ax, [bp + 30]	; 3: 139 70 30
x30617:	mov [bp + 78], ax	; 3: 137 70 78

time_test$57:	; Parameter 64 s$tm_hour 16
x30620:	mov ax, [bp + 28]	; 3: 139 70 28
x30623:	mov [bp + 80], ax	; 3: 137 70 80

time_test$58:	; Parameter 64 s$tm_min 18
x30626:	mov ax, [bp + 26]	; 3: 139 70 26
x30629:	mov [bp + 82], ax	; 3: 137 70 82

time_test$59:	; Parameter 64 s$tm_sec 20
x30632:	mov ax, [bp + 24]	; 3: 139 70 24
x30635:	mov [bp + 84], ax	; 3: 137 70 84

time_test$60:	; Parameter 64 s$tm_yday 22
x30638:	mov ax, [bp + 38]	; 3: 139 70 38
x30641:	mov [bp + 86], ax	; 3: 137 70 86

time_test$61:	; Parameter 64 s$tm_wday 24
x30644:	mov ax, [bp + 36]	; 3: 139 70 36
x30647:	mov [bp + 88], ax	; 3: 137 70 88

time_test$62:	; Parameter 64 s$tm_isdst 26
x30650:	mov ax, [bp + 40]	; 3: 139 70 40
x30653:	mov [bp + 90], ax	; 3: 137 70 90

time_test$63:	; Call 64 printf 0
x30656:	mov word [bp + 64], time_test$64	; 5: 199 70 64 211 119
x30661:	mov [bp + 66], bp	; 3: 137 110 66
x30664:	add bp, 64	; 3: 131 197 64
x30667:	mov di, bp	; 2: 137 239
x30669:	add di, 20	; 3: 131 199 20
x30672:	jmp printf	; 3: 233 49 149

time_test$64:	; PostCall 64

time_test$65:	; CallHeader 64 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

time_test$66:	; Parameter 64 string_local20time3A2025s202502i2D2502i2D2502i202502i3A2502i3A2502i2C20year20day2025i2C20week20day2025i2C20daylight20saving20time2025i0A# 6
x30675:	mov word [bp + 70], @13612$string_local20time3A2025s202502i2D2502i2D2502i202502i3A2502i3A2502i2C20year20day2025i2C20week20day2025i2C20daylight20saving20time2025i0A#	; 5: 199 70 70 253 121

time_test$67:	; SignedMultiply £temporary6267 t$tm_wday 2
x30680:	mov ax, [bp + 54]	; 3: 139 70 54
x30683:	xor dx, dx	; 2: 49 210
x30685:	imul word [@13615$int2$2#]	; 4: 247 46 94 122

time_test$68:	; BinaryAdd £temporary6268 weekdays £temporary6267
x30689:	mov si, bp	; 2: 137 238
x30691:	add si, 6	; 3: 131 198 6
x30694:	add si, ax	; 2: 1 198

time_test$69:	; Deref £temporary6266 -> £temporary6268 £temporary6268 0

time_test$70:	; Parameter 64 £temporary6266 -> £temporary6268 8
x30696:	mov ax, [si]	; 2: 139 4
x30698:	mov [bp + 72], ax	; 3: 137 70 72

time_test$71:	; BinaryAdd £temporary6270 t$tm_year 1900
x30701:	mov ax, [bp + 52]	; 3: 139 70 52
x30704:	add ax, 1900	; 3: 5 108 7

time_test$72:	; Parameter 64 £temporary6270 10
x30707:	mov [bp + 74], ax	; 3: 137 70 74

time_test$73:	; BinaryAdd £temporary6272 t$tm_mon 1
x30710:	mov ax, [bp + 50]	; 3: 139 70 50
x30713:	inc ax	; 1: 64

time_test$74:	; Parameter 64 £temporary6272 12
x30714:	mov [bp + 76], ax	; 3: 137 70 76

time_test$75:	; Parameter 64 t$tm_mday 14
x30717:	mov ax, [bp + 48]	; 3: 139 70 48
x30720:	mov [bp + 78], ax	; 3: 137 70 78

time_test$76:	; Parameter 64 t$tm_hour 16
x30723:	mov ax, [bp + 46]	; 3: 139 70 46
x30726:	mov [bp + 80], ax	; 3: 137 70 80

time_test$77:	; Parameter 64 t$tm_min 18
x30729:	mov ax, [bp + 44]	; 3: 139 70 44
x30732:	mov [bp + 82], ax	; 3: 137 70 82

time_test$78:	; Parameter 64 t$tm_sec 20
x30735:	mov ax, [bp + 42]	; 3: 139 70 42
x30738:	mov [bp + 84], ax	; 3: 137 70 84

time_test$79:	; Parameter 64 t$tm_yday 22
x30741:	mov ax, [bp + 56]	; 3: 139 70 56
x30744:	mov [bp + 86], ax	; 3: 137 70 86

time_test$80:	; Parameter 64 t$tm_wday 24
x30747:	mov ax, [bp + 54]	; 3: 139 70 54
x30750:	mov [bp + 88], ax	; 3: 137 70 88

time_test$81:	; Parameter 64 t$tm_isdst 26
x30753:	mov ax, [bp + 58]	; 3: 139 70 58
x30756:	mov [bp + 90], ax	; 3: 137 70 90

time_test$82:	; Call 64 printf 0
x30759:	mov word [bp + 64], time_test$83	; 5: 199 70 64 58 120
x30764:	mov [bp + 66], bp	; 3: 137 110 66
x30767:	add bp, 64	; 3: 131 197 64
x30770:	mov di, bp	; 2: 137 239
x30772:	add di, 20	; 3: 131 199 20
x30775:	jmp printf	; 3: 233 202 148

time_test$83:	; PostCall 64

time_test$84:	; CallHeader 666 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

time_test$85:	; Parameter 666 buffer1 6
x30778:	mov [bp + 672], bp	; 4: 137 174 160 2
x30782:	add word [bp + 672], 64	; 5: 131 134 160 2 64

time_test$86:	; CallHeader 666 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

time_test$87:	; address £temporary6281 s
x30787:	mov si, bp	; 2: 137 238
x30789:	add si, 24	; 3: 131 198 24

time_test$88:	; Parameter 666 £temporary6281 14
x30792:	mov [bp + 680], si	; 4: 137 182 168 2

time_test$89:	; Call 666 asctime 8
x30796:	mov word [bp + 674], time_test$90	; 6: 199 134 162 2 93 120
x30802:	mov [bp + 676], bp	; 4: 137 174 164 2
x30806:	add bp, 674	; 4: 129 197 162 2
x30810:	jmp asctime	; 3: 233 79 9

time_test$90:	; PostCall 666

time_test$91:	; GetReturnValue £temporary6282

time_test$92:	; Parameter 666 £temporary6282 8
x30813:	mov [bp + 674], bx	; 4: 137 158 162 2

time_test$93:	; Call 666 strcpy 0
x30817:	mov word [bp + 666], time_test$94	; 6: 199 134 154 2 114 120
x30823:	mov [bp + 668], bp	; 4: 137 174 156 2
x30827:	add bp, 666	; 4: 129 197 154 2
x30831:	jmp strcpy	; 3: 233 189 229

time_test$94:	; PostCall 666

time_test$95:	; CallHeader 666 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

time_test$96:	; Parameter 666 buffer2 6
x30834:	mov [bp + 672], bp	; 4: 137 174 160 2
x30838:	add word [bp + 672], 164	; 6: 129 134 160 2 164 0

time_test$97:	; CallHeader 666 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

time_test$98:	; address £temporary6284 now1
x30844:	mov si, bp	; 2: 137 238
x30846:	add si, 20	; 3: 131 198 20

time_test$99:	; Parameter 666 £temporary6284 14
x30849:	mov [bp + 680], si	; 4: 137 182 168 2

time_test$100:	; Call 666 ctime 8
x30853:	mov word [bp + 674], time_test$101	; 6: 199 134 162 2 150 120
x30859:	mov [bp + 676], bp	; 4: 137 174 164 2
x30863:	add bp, 674	; 4: 129 197 162 2
x30867:	jmp ctime	; 3: 233 220 11

time_test$101:	; PostCall 666

time_test$102:	; GetReturnValue £temporary6285

time_test$103:	; Parameter 666 £temporary6285 8
x30870:	mov [bp + 674], bx	; 4: 137 158 162 2

time_test$104:	; Call 666 strcpy 0
x30874:	mov word [bp + 666], time_test$105	; 6: 199 134 154 2 171 120
x30880:	mov [bp + 668], bp	; 4: 137 174 156 2
x30884:	add bp, 666	; 4: 129 197 154 2
x30888:	jmp strcpy	; 3: 233 132 229

time_test$105:	; PostCall 666

time_test$106:	; CallHeader 666 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

time_test$107:	; Parameter 666 string_asctime203C25s3E2C20ctime203C25s3E0A# 6
x30891:	mov word [bp + 672], @13650$string_asctime203C25s3E2C20ctime203C25s3E0A#	; 6: 199 134 160 2 96 122

time_test$108:	; Parameter 666 buffer1 8
x30897:	mov [bp + 674], bp	; 4: 137 174 162 2
x30901:	add word [bp + 674], 64	; 5: 131 134 162 2 64

time_test$109:	; Parameter 666 buffer2 10
x30906:	mov [bp + 676], bp	; 4: 137 174 164 2
x30910:	add word [bp + 676], 164	; 6: 129 134 164 2 164 0

time_test$110:	; Call 666 printf 0
x30916:	mov word [bp + 666], time_test$111	; 6: 199 134 154 2 218 120
x30922:	mov [bp + 668], bp	; 4: 137 174 156 2
x30926:	add bp, 666	; 4: 129 197 154 2
x30930:	mov di, bp	; 2: 137 239
x30932:	add di, 4	; 3: 131 199 4
x30935:	jmp printf	; 3: 233 42 148

time_test$111:	; PostCall 666

time_test$112:	; CallHeader 666 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

time_test$113:	; Parameter 666 buffer 6
x30938:	mov [bp + 672], bp	; 4: 137 174 160 2
x30942:	add word [bp + 672], 264	; 6: 129 134 160 2 8 1

time_test$114:	; Parameter 666 400 8
x30948:	mov word [bp + 674], 400	; 6: 199 134 162 2 144 1

time_test$115:	; Parameter 666 string_short20day2025a2C20long20day2025A2C20short20month2025b2C20long20month2025B2C20date2Dtime2025c2C20mday2025d2C20hour2025H2C20gm20hour2025I2C20yday2025j2C20month2025m2C20min2025M2C20am2Fpm2025p2C20sec2025S2C20week20number20sun2025U2C20week20day2025w2C20week20number20mon2025W2C20date2025x2C20time2025X2C20short20year2025y2C20long20year2025Y2C20summer2Fwinter2025Z# 10
x30954:	mov word [bp + 676], @13654$string_short20day2025a2C20long20day2025A2C20short20month2025b2C20long20month2025B2C20date2Dtime2025c2C20mday2025d2C20hour2025H2C20gm20hour2025I2C20yday2025j2C20month2025m2C20min2025M2C20am2Fpm2025p2C20sec2025S2C20week20number20sun2025U2C20week20day2025w2C20week20number20mon2025W2C20date2025x2C20time2025X2C20short20year2025y2C20long20year2025Y2C20summer2Fwinter2025Z#	; 6: 199 134 164 2 122 122

time_test$116:	; address £temporary6288 t
x30960:	mov si, bp	; 2: 137 238
x30962:	add si, 42	; 3: 131 198 42

time_test$117:	; Parameter 666 £temporary6288 12
x30965:	mov [bp + 678], si	; 4: 137 182 166 2

time_test$118:	; Call 666 strftime 0
x30969:	mov word [bp + 666], time_test$119	; 6: 199 134 154 2 10 121
x30975:	mov [bp + 668], bp	; 4: 137 174 156 2
x30979:	add bp, 666	; 4: 129 197 154 2
x30983:	jmp strftime	; 3: 233 152 11

time_test$119:	; PostCall 666

time_test$120:	; GetReturnValue £temporary6289

time_test$121:	; Assign i £temporary6289
x30986:	mov [bp + 664], bx	; 4: 137 158 152 2

time_test$122:	; CallHeader 666 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

time_test$123:	; Parameter 666 string_strftime2025i2025i203C25s3E0A# 6
x30990:	mov word [bp + 672], @13658$string_strftime2025i2025i203C25s3E0A#	; 6: 199 134 160 2 130 123

time_test$124:	; Parameter 666 i 8
x30996:	mov ax, [bp + 664]	; 4: 139 134 152 2
x31000:	mov [bp + 674], ax	; 4: 137 134 162 2

time_test$125:	; CallHeader 666 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

time_test$126:	; Parameter 666 buffer 16
x31004:	mov [bp + 682], bp	; 4: 137 174 170 2
x31008:	add word [bp + 682], 264	; 6: 129 134 170 2 8 1

time_test$127:	; Call 666 strlen 10
x31014:	mov word [bp + 676], time_test$128	; 6: 199 134 164 2 55 121
x31020:	mov [bp + 678], bp	; 4: 137 174 166 2
x31024:	add bp, 676	; 4: 129 197 164 2
x31028:	jmp strlen	; 3: 233 181 19

time_test$128:	; PostCall 666

time_test$129:	; GetReturnValue £temporary6290

time_test$130:	; Parameter 666 £temporary6290 10
x31031:	mov [bp + 676], bx	; 4: 137 158 164 2

time_test$131:	; Parameter 666 buffer 12
x31035:	mov [bp + 678], bp	; 4: 137 174 166 2
x31039:	add word [bp + 678], 264	; 6: 129 134 166 2 8 1

time_test$132:	; Call 666 printf 0
x31045:	mov word [bp + 666], time_test$133	; 6: 199 134 154 2 91 121
x31051:	mov [bp + 668], bp	; 4: 137 174 156 2
x31055:	add bp, 666	; 4: 129 197 154 2
x31059:	mov di, bp	; 2: 137 239
x31061:	add di, 6	; 3: 131 199 6
x31064:	jmp printf	; 3: 233 169 147

time_test$133:	; PostCall 666

time_test$134:	; Return 0
x31067:	mov ax, [bp]	; 3: 139 70 0
x31070:	mov di, [bp + 4]	; 3: 139 126 4
x31073:	mov bp, [bp + 2]	; 3: 139 110 2
x31076:	jmp ax	; 2: 255 224

time_test$135:	; FunctionEnd time_test

@13554$string_Sun#:
x31078:	db "Sun", 0	; 4: 83 117 110 0

@13555$string_Mon#:
x31082:	db "Mon", 0	; 4: 77 111 110 0

@13556$string_Tue#:
x31086:	db "Tue", 0	; 4: 84 117 101 0

@13557$string_Wed#:
x31090:	db "Wed", 0	; 4: 87 101 100 0

@13558$string_Thu#:
x31094:	db "Thu", 0	; 4: 84 104 117 0

@13559$string_Fri#:
x31098:	db "Fri", 0	; 4: 70 114 105 0

@13560$string_Sat#:
x31102:	db "Sat", 0	; 4: 83 97 116 0

@13586$string_now2013A2025lu0A#:
x31106:	db "now 1: %lu", 10, 0	; 12: 110 111 119 32 49 58 32 37 108 117 10 0

@13588$string_now2023A2025lu0A#:
x31118:	db "now 2: %lu", 10, 0	; 12: 110 111 119 32 50 58 32 37 108 117 10 0

@13590$string_202020gm20time3A2025s202502i2D2502i2D2502i202502i3A2502i3A2502i2C20year20day2025i2C20week20day2025i2C20daylight20saving20time2025i0A#:
x31130:	db "   gm time: %s %02i-%02i-%02i %02i:%02i:%02i, year day %i, week day %i, daylight saving time %i", 10, 0	; 97: 32 32 32 103 109 32 116 105 109 101 58 32 37 115 32 37 48 50 105 45 37 48 50 105 45 37 48 50 105 32 37 48 50 105 58 37 48 50 105 58 37 48 50 105 44 32 121 101 97 114 32 100 97 121 32 37 105 44 32 119 101 101 107 32 100 97 121 32 37 105 44 32 100 97 121 108 105 103 104 116 32 115 97 118 105 110 103 32 116 105 109 101 32 37 105 10 0

@13593$int2$2#:
x31227:	dw 2	; 2: 2 0

@13612$string_local20time3A2025s202502i2D2502i2D2502i202502i3A2502i3A2502i2C20year20day2025i2C20week20day2025i2C20daylight20saving20time2025i0A#:
x31229:	db "local time: %s %02i-%02i-%02i %02i:%02i:%02i, year day %i, week day %i, daylight saving time %i", 10, 0	; 97: 108 111 99 97 108 32 116 105 109 101 58 32 37 115 32 37 48 50 105 45 37 48 50 105 45 37 48 50 105 32 37 48 50 105 58 37 48 50 105 58 37 48 50 105 44 32 121 101 97 114 32 100 97 121 32 37 105 44 32 119 101 101 107 32 100 97 121 32 37 105 44 32 100 97 121 108 105 103 104 116 32 115 97 118 105 110 103 32 116 105 109 101 32 37 105 10 0

@13615$int2$2#:
x31326:	dw 2	; 2: 2 0

@13650$string_asctime203C25s3E2C20ctime203C25s3E0A#:
x31328:	db "asctime <%s>, ctime <%s>", 10, 0	; 26: 97 115 99 116 105 109 101 32 60 37 115 62 44 32 99 116 105 109 101 32 60 37 115 62 10 0

@13654$string_short20day2025a2C20long20day2025A2C20short20month2025b2C20long20month2025B2C20date2Dtime2025c2C20mday2025d2C20hour2025H2C20gm20hour2025I2C20yday2025j2C20month2025m2C20min2025M2C20am2Fpm2025p2C20sec2025S2C20week20number20sun2025U2C20week20day2025w2C20week20number20mon2025W2C20date2025x2C20time2025X2C20short20year2025y2C20long20year2025Y2C20summer2Fwinter2025Z#:
x31354:	db "short day %a, long day %A, short month %b, long month %B, date-time %c, mday %d, hour %H, gm hour %I, yday %j, month %m, min %M, am/pm %p, sec %S, week number sun %U, week day %w, week number mon %W, date %x, time %X, short year %y, long year %Y, summer/winter %Z", 0	; 264: 115 104 111 114 116 32 100 97 121 32 37 97 44 32 108 111 110 103 32 100 97 121 32 37 65 44 32 115 104 111 114 116 32 109 111 110 116 104 32 37 98 44 32 108 111 110 103 32 109 111 110 116 104 32 37 66 44 32 100 97 116 101 45 116 105 109 101 32 37 99 44 32 109 100 97 121 32 37 100 44 32 104 111 117 114 32 37 72 44 32 103 109 32 104 111 117 114 32 37 73 44 32 121 100 97 121 32 37 106 44 32 109 111 110 116 104 32 37 109 44 32 109 105 110 32 37 77 44 32 97 109 47 112 109 32 37 112 44 32 115 101 99 32 37 83 44 32 119 101 101 107 32 110 117 109 98 101 114 32 115 117 110 32 37 85 44 32 119 101 101 107 32 100 97 121 32 37 119 44 32 119 101 101 107 32 110 117 109 98 101 114 32 109 111 110 32 37 87 44 32 100 97 116 101 32 37 120 44 32 116 105 109 101 32 37 88 44 32 115 104 111 114 116 32 121 101 97 114 32 37 121 44 32 108 111 110 103 32 121 101 97 114 32 37 89 44 32 115 117 109 109 101 114 47 119 105 110 116 101 114 32 37 90 0

@13658$string_strftime2025i2025i203C25s3E0A#:
x31618:	db "strftime %i %i <%s>", 10, 0	; 21: 115 116 114 102 116 105 109 101 32 37 105 32 37 105 32 60 37 115 62 10 0

time:	; AssignRegister ah 42
x31639:	mov ah, 42	; 2: 180 42

time$1:	; Interrupt 33
x31641:	int 33	; 2: 205 33

time$2:	; InspectRegister £temporary3248 cx

time$3:	; BinarySubtract year £temporary3248 1900
x31643:	sub cx, 1900	; 4: 129 233 108 7
x31647:	mov [bp + 12], cx	; 3: 137 78 12

time$4:	; InspectRegister £temporary3250 dh

time$5:	; BinarySubtract month £temporary3250 1
x31650:	dec dh	; 2: 254 206
x31652:	mov [bp + 14], dh	; 3: 136 118 14

time$6:	; InspectRegister £temporary3252 dl

time$7:	; Assign monthDay £temporary3252
x31655:	mov [bp + 15], dl	; 3: 136 86 15

time$8:	; AssignRegister ah 44
x31658:	mov ah, 44	; 2: 180 44

time$9:	; Interrupt 33
x31660:	int 33	; 2: 205 33

time$10:	; InspectRegister £temporary3254 ch

time$11:	; Assign hour £temporary3254
x31662:	mov [bp + 16], ch	; 3: 136 110 16

time$12:	; InspectRegister £temporary3255 cl

time$13:	; Assign min £temporary3255
x31665:	mov [bp + 17], cl	; 3: 136 78 17

time$14:	; InspectRegister £temporary3256 dh

time$15:	; Assign sec £temporary3256
x31668:	mov [bp + 18], dh	; 3: 136 118 18

time$16:	; CallHeader 19 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

time$17:	; Call 19 localeconv 0
x31671:	mov word [bp + 19], time$18	; 5: 199 70 19 197 123
x31676:	mov [bp + 21], bp	; 3: 137 110 21
x31679:	add bp, 19	; 3: 131 197 19
x31682:	jmp localeconv	; 3: 233 176 162

time$18:	; PostCall 19

time$19:	; GetReturnValue £temporary3257

time$20:	; Assign localeConvPtr £temporary3257
x31685:	mov [bp + 19], bx	; 3: 137 94 19

time$21:	; Equal 27 localeConvPtr 0
x31688:	cmp word [bp + 19], 0	; 4: 131 126 19 0
x31692:	je time$27	; 2: 116 32

time$22:	; IntegralToIntegral £temporary3260 hour
x31694:	mov al, [bp + 16]	; 3: 138 70 16
x31697:	and ax, 255	; 3: 37 255 0
x31700:	cmp al, 0	; 2: 60 0
x31702:	jge time$23	; 2: 125 4
x31704:	neg al	; 2: 246 216
x31706:	neg ax	; 2: 247 216

time$23:	; Deref £temporary3259 -> localeConvPtr localeConvPtr 2
x31708:	mov si, [bp + 19]	; 3: 139 118 19

time$24:	; BinarySubtract £temporary3261 £temporary3260 £temporary3259 -> localeConvPtr
x31711:	sub ax, [si + 2]	; 3: 43 68 2

time$25:	; IntegralToIntegral £temporary3262 £temporary3261
x31714:	cmp ax, 0	; 3: 131 248 0
x31717:	jge time$26	; 2: 125 4
x31719:	neg ax	; 2: 247 216
x31721:	neg al	; 2: 246 216

time$26:	; Assign hour £temporary3262
x31723:	mov [bp + 16], al	; 3: 136 70 16

time$27:	; Assign daysOfMonths[0] 31
x31726:	mov word [bp + 19], 31	; 5: 199 70 19 31 0

time$28:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

time$29:	; Parameter 21 year 6
x31731:	mov ax, [bp + 12]	; 3: 139 70 12
x31734:	mov [bp + 27], ax	; 3: 137 70 27

time$30:	; Call 21 isLeapYear 0
x31737:	mov word [bp + 21], time$31	; 5: 199 70 21 7 124
x31742:	mov [bp + 23], bp	; 3: 137 110 23
x31745:	add bp, 21	; 3: 131 197 21
x31748:	jmp @7454$isLeapYear	; 3: 233 44 1

time$31:	; PostCall 21

time$32:	; GetReturnValue £temporary3263

time$33:	; Equal 36 £temporary3263 0
x31751:	cmp bx, 0	; 3: 131 251 0
x31754:	je time$36	; 2: 116 5

time$34:	; Assign £temporary3268 29
x31756:	mov ax, 29	; 3: 184 29 0

time$35:	; Goto 37
x31759:	jmp time$37	; 2: 235 3

time$36:	; Assign £temporary3268 28
x31761:	mov ax, 28	; 3: 184 28 0

time$37:	; Assign daysOfMonths[1] £temporary3268
x31764:	mov [bp + 21], ax	; 3: 137 70 21

time$38:	; Assign daysOfMonths[2] 31
x31767:	mov word [bp + 23], 31	; 5: 199 70 23 31 0

time$39:	; Assign daysOfMonths[3] 30
x31772:	mov word [bp + 25], 30	; 5: 199 70 25 30 0

time$40:	; Assign daysOfMonths[4] 31
x31777:	mov word [bp + 27], 31	; 5: 199 70 27 31 0

time$41:	; Assign daysOfMonths[5] 30
x31782:	mov word [bp + 29], 30	; 5: 199 70 29 30 0

time$42:	; Assign daysOfMonths[6] 31
x31787:	mov word [bp + 31], 31	; 5: 199 70 31 31 0

time$43:	; Assign daysOfMonths[7] 31
x31792:	mov word [bp + 33], 31	; 5: 199 70 33 31 0

time$44:	; Assign daysOfMonths[8] 30
x31797:	mov word [bp + 35], 30	; 5: 199 70 35 30 0

time$45:	; Assign daysOfMonths[9] 31
x31802:	mov word [bp + 37], 31	; 5: 199 70 37 31 0

time$46:	; Assign daysOfMonths[10] 30
x31807:	mov word [bp + 39], 30	; 5: 199 70 39 30 0

time$47:	; Assign daysOfMonths[11] 31
x31812:	mov word [bp + 41], 31	; 5: 199 70 41 31 0

time$48:	; IntegralToIntegral £temporary3281 monthDay
x31817:	mov al, [bp + 15]	; 3: 138 70 15
x31820:	and ax, 255	; 3: 37 255 0
x31823:	cmp al, 0	; 2: 60 0
x31825:	jge time$49	; 2: 125 4
x31827:	neg al	; 2: 246 216
x31829:	neg ax	; 2: 247 216

time$49:	; BinarySubtract yearDay £temporary3281 1
x31831:	dec ax	; 1: 72
x31832:	mov [bp + 43], ax	; 3: 137 70 43

time$50:	; Assign monthIndex 0
x31835:	mov word [bp + 45], 0	; 5: 199 70 45 0 0

time$51:	; IntegralToIntegral £temporary3283 month
x31840:	mov al, [bp + 14]	; 3: 138 70 14
x31843:	and ax, 255	; 3: 37 255 0
x31846:	cmp al, 0	; 2: 60 0
x31848:	jge time$52	; 2: 125 4
x31850:	neg al	; 2: 246 216
x31852:	neg ax	; 2: 247 216

time$52:	; SignedGreaterThanEqual 59 monthIndex £temporary3283
x31854:	cmp [bp + 45], ax	; 3: 57 70 45
x31857:	jge time$59	; 2: 125 26

time$53:	; SignedMultiply £temporary3287 monthIndex 2
x31859:	mov ax, [bp + 45]	; 3: 139 70 45
x31862:	xor dx, dx	; 2: 49 210
x31864:	imul word [@7578$int2$2#]	; 4: 247 46 49 125

time$54:	; BinaryAdd £temporary3288 daysOfMonths £temporary3287
x31868:	mov si, bp	; 2: 137 238
x31870:	add si, 19	; 3: 131 198 19
x31873:	add si, ax	; 2: 1 198

time$55:	; Deref £temporary3286 -> £temporary3288 £temporary3288 0

time$56:	; BinaryAdd yearDay yearDay £temporary3286 -> £temporary3288
x31875:	mov ax, [si]	; 2: 139 4
x31877:	add [bp + 43], ax	; 3: 1 70 43

time$57:	; Increment monthIndex
x31880:	inc word [bp + 45]	; 3: 255 70 45

time$58:	; Goto 51
x31883:	jmp time$51	; 2: 235 211

time$59:	; IntegralToIntegral £temporary3291 sec
x31885:	mov al, [bp + 18]	; 3: 138 70 18
x31888:	and ax, 255	; 3: 37 255 0
x31891:	cmp al, 0	; 2: 60 0
x31893:	jge time$60	; 2: 125 4
x31895:	neg al	; 2: 246 216
x31897:	neg ax	; 2: 247 216

time$60:	; Assign s$tm_sec £temporary3291
x31899:	mov [bp + 47], ax	; 3: 137 70 47

time$61:	; IntegralToIntegral £temporary3293 min
x31902:	mov al, [bp + 17]	; 3: 138 70 17
x31905:	and ax, 255	; 3: 37 255 0
x31908:	cmp al, 0	; 2: 60 0
x31910:	jge time$62	; 2: 125 4
x31912:	neg al	; 2: 246 216
x31914:	neg ax	; 2: 247 216

time$62:	; Assign s$tm_min £temporary3293
x31916:	mov [bp + 49], ax	; 3: 137 70 49

time$63:	; IntegralToIntegral £temporary3295 hour
x31919:	mov al, [bp + 16]	; 3: 138 70 16
x31922:	and ax, 255	; 3: 37 255 0
x31925:	cmp al, 0	; 2: 60 0
x31927:	jge time$64	; 2: 125 4
x31929:	neg al	; 2: 246 216
x31931:	neg ax	; 2: 247 216

time$64:	; Assign s$tm_hour £temporary3295
x31933:	mov [bp + 51], ax	; 3: 137 70 51

time$65:	; IntegralToIntegral £temporary3297 monthDay
x31936:	mov al, [bp + 15]	; 3: 138 70 15
x31939:	and ax, 255	; 3: 37 255 0
x31942:	cmp al, 0	; 2: 60 0
x31944:	jge time$66	; 2: 125 4
x31946:	neg al	; 2: 246 216
x31948:	neg ax	; 2: 247 216

time$66:	; Assign s$tm_mday £temporary3297
x31950:	mov [bp + 53], ax	; 3: 137 70 53

time$67:	; IntegralToIntegral £temporary3299 month
x31953:	mov al, [bp + 14]	; 3: 138 70 14
x31956:	and ax, 255	; 3: 37 255 0
x31959:	cmp al, 0	; 2: 60 0
x31961:	jge time$68	; 2: 125 4
x31963:	neg al	; 2: 246 216
x31965:	neg ax	; 2: 247 216

time$68:	; Assign s$tm_mon £temporary3299
x31967:	mov [bp + 55], ax	; 3: 137 70 55

time$69:	; Assign s$tm_year year
x31970:	mov ax, [bp + 12]	; 3: 139 70 12
x31973:	mov [bp + 57], ax	; 3: 137 70 57

time$70:	; Assign s$tm_wday 0
x31976:	mov word [bp + 59], 0	; 5: 199 70 59 0 0

time$71:	; Assign s$tm_yday yearDay
x31981:	mov ax, [bp + 43]	; 3: 139 70 43
x31984:	mov [bp + 61], ax	; 3: 137 70 61

time$72:	; Assign s$tm_isdst 0
x31987:	mov word [bp + 63], 0	; 5: 199 70 63 0 0

time$73:	; CallHeader 65 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

time$74:	; address £temporary3304 s
x31992:	mov si, bp	; 2: 137 238
x31994:	add si, 47	; 3: 131 198 47

time$75:	; Parameter 65 £temporary3304 6
x31997:	mov [bp + 71], si	; 3: 137 118 71

time$76:	; Call 65 mktime 0
x32000:	mov word [bp + 65], time$77	; 5: 199 70 65 14 125
x32005:	mov [bp + 67], bp	; 3: 137 110 67
x32008:	add bp, 65	; 3: 131 197 65
x32011:	nop	; 1: 144
x32012:	jmp mktime	; 2: 235 104

time$77:	; PostCall 65

time$78:	; GetReturnValue £temporary3305

time$79:	; Assign time £temporary3305
x32014:	mov [bp + 8], ebx	; 4: 102 137 94 8

time$80:	; Equal 83 timePtr 0
x32018:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x32022:	je time$83	; 2: 116 10

time$81:	; Deref £temporary3307 -> timePtr timePtr 0
x32024:	mov si, [bp + 6]	; 3: 139 118 6

time$82:	; Assign £temporary3307 -> timePtr time
x32027:	mov eax, [bp + 8]	; 4: 102 139 70 8
x32031:	mov [si], eax	; 3: 102 137 4

time$83:	; SetReturnValue time
x32034:	mov ebx, [bp + 8]	; 4: 102 139 94 8

time$84:	; Return time
x32038:	mov ax, [bp]	; 3: 139 70 0
x32041:	mov di, [bp + 4]	; 3: 139 126 4
x32044:	mov bp, [bp + 2]	; 3: 139 110 2
x32047:	jmp ax	; 2: 255 224

time$85:	; FunctionEnd time

@7578$int2$2#:
x32049:	dw 2	; 2: 2 0

@7454$isLeapYear:	; SignedModulo £temporary3238 year 4
x32051:	mov ax, [bp + 6]	; 3: 139 70 6
x32054:	xor dx, dx	; 2: 49 210
x32056:	idiv word [@7456$int2$4#]	; 4: 247 62 112 125

@7454$isLeapYear$1:	; NotEqual 4 £temporary3238 0
x32060:	cmp dx, 0	; 3: 131 250 0
x32063:	jne @7454$isLeapYear$4	; 2: 117 14

@7454$isLeapYear$2:	; SignedModulo £temporary3240 year 100
x32065:	mov ax, [bp + 6]	; 3: 139 70 6
x32068:	xor dx, dx	; 2: 49 210
x32070:	idiv word [@7462$int2$100#]	; 4: 247 62 114 125

@7454$isLeapYear$3:	; NotEqual 6 £temporary3240 0
x32074:	cmp dx, 0	; 3: 131 250 0
x32077:	jne @7454$isLeapYear$6	; 2: 117 14

@7454$isLeapYear$4:	; SignedModulo £temporary3243 year 400
x32079:	mov ax, [bp + 6]	; 3: 139 70 6
x32082:	xor dx, dx	; 2: 49 210
x32084:	idiv word [@7469$int2$400#]	; 4: 247 62 116 125

@7454$isLeapYear$5:	; NotEqual 8 £temporary3243 0
x32088:	cmp dx, 0	; 3: 131 250 0
x32091:	jne @7454$isLeapYear$8	; 2: 117 5

@7454$isLeapYear$6:	; Assign £temporary3246 1
x32093:	mov bx, 1	; 3: 187 1 0

@7454$isLeapYear$7:	; Goto 9
x32096:	jmp @7454$isLeapYear$9	; 2: 235 3

@7454$isLeapYear$8:	; Assign £temporary3246 0
x32098:	mov bx, 0	; 3: 187 0 0

@7454$isLeapYear$9:	; SetReturnValue £temporary3246

@7454$isLeapYear$10:	; Return £temporary3246
x32101:	mov ax, [bp]	; 3: 139 70 0
x32104:	mov di, [bp + 4]	; 3: 139 126 4
x32107:	mov bp, [bp + 2]	; 3: 139 110 2
x32110:	jmp ax	; 2: 255 224

@7454$isLeapYear$11:	; FunctionEnd isLeapYear

@7456$int2$4#:
x32112:	dw 4	; 2: 4 0

@7462$int2$100#:
x32114:	dw 100	; 2: 100 0

@7469$int2$400#:
x32116:	dw 400	; 2: 144 1

mktime:	; Equal 28 tp 0
x32118:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x32122:	je mktime$28	; 4: 15 132 216 0

mktime$1:	; Deref £temporary3312 -> tp tp 10
x32126:	mov si, [bp + 6]	; 3: 139 118 6

mktime$2:	; BinarySubtract £temporary3313 £temporary3312 -> tp 69
x32129:	mov ax, [si + 10]	; 3: 139 68 10
x32132:	sub ax, 69	; 3: 131 232 69

mktime$3:	; SignedDivide £temporary3314 £temporary3313 4
x32135:	xor dx, dx	; 2: 49 210
x32137:	idiv word [@7621$int2$4#]	; 4: 247 62 103 126

mktime$4:	; IntegralToIntegral £temporary3315 £temporary3314
x32141:	and eax, 65535	; 6: 102 37 255 255 0 0
x32147:	cmp ax, 0	; 3: 131 248 0
x32150:	jge mktime$5	; 2: 125 5
x32152:	neg ax	; 2: 247 216
x32154:	neg eax	; 3: 102 247 216

mktime$5:	; Assign leapDays £temporary3315
x32157:	mov [bp + 8], eax	; 4: 102 137 70 8

mktime$6:	; Deref £temporary3316 -> tp tp 10
x32161:	mov si, [bp + 6]	; 3: 139 118 6

mktime$7:	; BinarySubtract £temporary3317 £temporary3316 -> tp 70
x32164:	mov ax, [si + 10]	; 3: 139 68 10
x32167:	sub ax, 70	; 3: 131 232 70

mktime$8:	; SignedMultiply £temporary3318 £temporary3317 365
x32170:	xor dx, dx	; 2: 49 210
x32172:	imul word [@7630$int2$365#]	; 4: 247 46 105 126

mktime$9:	; IntegralToIntegral £temporary3319 £temporary3318
x32176:	and eax, 65535	; 6: 102 37 255 255 0 0
x32182:	cmp ax, 0	; 3: 131 248 0
x32185:	jge mktime$10	; 2: 125 5
x32187:	neg ax	; 2: 247 216
x32189:	neg eax	; 3: 102 247 216

mktime$10:	; BinaryAdd £temporary3320 £temporary3319 leapDays
x32192:	add eax, [bp + 8]	; 4: 102 3 70 8

mktime$11:	; Deref £temporary3321 -> tp tp 14
x32196:	mov si, [bp + 6]	; 3: 139 118 6

mktime$12:	; IntegralToIntegral £temporary3322 £temporary3321 -> tp
x32199:	mov bx, [si + 14]	; 3: 139 92 14
x32202:	and ebx, 65535	; 7: 102 129 227 255 255 0 0
x32209:	cmp bx, 0	; 3: 131 251 0
x32212:	jge mktime$13	; 2: 125 5
x32214:	neg bx	; 2: 247 219
x32216:	neg ebx	; 3: 102 247 219

mktime$13:	; BinaryAdd totalDays £temporary3320 £temporary3322
x32219:	add eax, ebx	; 3: 102 1 216
x32222:	mov [bp + 12], eax	; 4: 102 137 70 12

mktime$14:	; SignedMultiply £temporary3324 totalDays 86400
x32226:	mov eax, [bp + 12]	; 4: 102 139 70 12
x32230:	xor edx, edx	; 3: 102 49 210
x32233:	imul dword [@7639$int4$86400#]	; 5: 102 247 46 107 126
x32238:	mov ebx, eax	; 3: 102 137 195

mktime$15:	; Deref £temporary3325 -> tp tp 4
x32241:	mov si, [bp + 6]	; 3: 139 118 6

mktime$16:	; IntegralToIntegral £temporary3326 £temporary3325 -> tp
x32244:	mov ax, [si + 4]	; 3: 139 68 4
x32247:	and eax, 65535	; 6: 102 37 255 255 0 0
x32253:	cmp ax, 0	; 3: 131 248 0
x32256:	jge mktime$17	; 2: 125 5
x32258:	neg ax	; 2: 247 216
x32260:	neg eax	; 3: 102 247 216

mktime$17:	; SignedMultiply £temporary3327 £temporary3326 3600
x32263:	xor edx, edx	; 3: 102 49 210
x32266:	imul dword [@7643$int4$3600#]	; 5: 102 247 46 111 126

mktime$18:	; BinaryAdd £temporary3328 £temporary3324 £temporary3327
x32271:	add ebx, eax	; 3: 102 1 195

mktime$19:	; Deref £temporary3329 -> tp tp 2
x32274:	mov si, [bp + 6]	; 3: 139 118 6

mktime$20:	; IntegralToIntegral £temporary3330 £temporary3329 -> tp
x32277:	mov ax, [si + 2]	; 3: 139 68 2
x32280:	and eax, 65535	; 6: 102 37 255 255 0 0
x32286:	cmp ax, 0	; 3: 131 248 0
x32289:	jge mktime$21	; 2: 125 5
x32291:	neg ax	; 2: 247 216
x32293:	neg eax	; 3: 102 247 216

mktime$21:	; SignedMultiply £temporary3331 £temporary3330 60
x32296:	xor edx, edx	; 3: 102 49 210
x32299:	imul dword [@7649$int4$60#]	; 5: 102 247 46 115 126

mktime$22:	; BinaryAdd £temporary3332 £temporary3328 £temporary3331
x32304:	add ebx, eax	; 3: 102 1 195

mktime$23:	; Deref £temporary3333 -> tp tp 0
x32307:	mov si, [bp + 6]	; 3: 139 118 6

mktime$24:	; IntegralToIntegral £temporary3334 £temporary3333 -> tp
x32310:	mov ax, [si]	; 2: 139 4
x32312:	and eax, 65535	; 6: 102 37 255 255 0 0
x32318:	cmp ax, 0	; 3: 131 248 0
x32321:	jge mktime$25	; 2: 125 5
x32323:	neg ax	; 2: 247 216
x32325:	neg eax	; 3: 102 247 216

mktime$25:	; BinaryAdd £temporary3335 £temporary3332 £temporary3334
x32328:	add ebx, eax	; 3: 102 1 195

mktime$26:	; SetReturnValue £temporary3335

mktime$27:	; Return £temporary3335
x32331:	mov ax, [bp]	; 3: 139 70 0
x32334:	mov di, [bp + 4]	; 3: 139 126 4
x32337:	mov bp, [bp + 2]	; 3: 139 110 2
x32340:	jmp ax	; 2: 255 224

mktime$28:	; SetReturnValue 0
x32342:	mov ebx, 0	; 6: 102 187 0 0 0 0

mktime$29:	; Return 0
x32348:	mov ax, [bp]	; 3: 139 70 0
x32351:	mov di, [bp + 4]	; 3: 139 126 4
x32354:	mov bp, [bp + 2]	; 3: 139 110 2
x32357:	jmp ax	; 2: 255 224

mktime$30:	; FunctionEnd mktime

@7621$int2$4#:
x32359:	dw 4	; 2: 4 0

@7630$int2$365#:
x32361:	dw 365	; 2: 109 1

@7639$int4$86400#:
x32363:	dd 86400	; 4: 128 81 1 0

@7643$int4$3600#:
x32367:	dd 3600	; 4: 16 14 0 0

@7649$int4$60#:
x32371:	dd 60	; 4: 60 0 0 0

gmtime:	; Equal 89 timePtr 0
x32375:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x32379:	je gmtime$89	; 4: 15 132 78 2

gmtime$1:	; Deref £temporary3337 -> timePtr timePtr 0
x32383:	mov si, [bp + 6]	; 3: 139 118 6

gmtime$2:	; Assign time £temporary3337 -> timePtr
x32386:	mov eax, [si]	; 3: 102 139 4
x32389:	mov [bp + 8], eax	; 4: 102 137 70 8

gmtime$3:	; SignedModulo secondsOfDay time 86400
x32393:	mov eax, [bp + 8]	; 4: 102 139 70 8
x32397:	xor edx, edx	; 3: 102 49 210
x32400:	idiv dword [@7667$int4$86400#]	; 5: 102 247 62 219 128
x32405:	mov [bp + 12], edx	; 4: 102 137 86 12

gmtime$4:	; SignedModulo secondsOfHour secondsOfDay 3600
x32409:	mov eax, [bp + 12]	; 4: 102 139 70 12
x32413:	xor edx, edx	; 3: 102 49 210
x32416:	idiv dword [@7671$int4$3600#]	; 5: 102 247 62 223 128
x32421:	mov [bp + 16], edx	; 4: 102 137 86 16

gmtime$5:	; SignedDivide £temporary3341 secondsOfDay 3600
x32425:	mov eax, [bp + 12]	; 4: 102 139 70 12
x32429:	xor edx, edx	; 3: 102 49 210
x32432:	idiv dword [@7676$int4$3600#]	; 5: 102 247 62 227 128

gmtime$6:	; IntegralToIntegral £temporary3342 £temporary3341
x32437:	cmp eax, 0	; 4: 102 131 248 0
x32441:	jge gmtime$7	; 2: 125 5
x32443:	neg eax	; 3: 102 247 216
x32446:	neg ax	; 2: 247 216

gmtime$7:	; Assign g_timeStruct$tm_hour £temporary3342
x32448:	mov [@7659$g_timeStruct + 4], ax	; 3: 163 235 128

gmtime$8:	; SignedDivide £temporary3344 secondsOfHour 60
x32451:	mov eax, [bp + 16]	; 4: 102 139 70 16
x32455:	xor edx, edx	; 3: 102 49 210
x32458:	idiv dword [@7681$int4$60#]	; 5: 102 247 62 249 128

gmtime$9:	; IntegralToIntegral £temporary3345 £temporary3344
x32463:	cmp eax, 0	; 4: 102 131 248 0
x32467:	jge gmtime$10	; 2: 125 5
x32469:	neg eax	; 3: 102 247 216
x32472:	neg ax	; 2: 247 216

gmtime$10:	; Assign g_timeStruct$tm_min £temporary3345
x32474:	mov [@7659$g_timeStruct + 2], ax	; 3: 163 233 128

gmtime$11:	; SignedModulo £temporary3347 secondsOfHour 60
x32477:	mov eax, [bp + 16]	; 4: 102 139 70 16
x32481:	xor edx, edx	; 3: 102 49 210
x32484:	idiv dword [@7686$int4$60#]	; 5: 102 247 62 253 128

gmtime$12:	; IntegralToIntegral £temporary3348 £temporary3347
x32489:	cmp edx, 0	; 4: 102 131 250 0
x32493:	jge gmtime$13	; 2: 125 5
x32495:	neg edx	; 3: 102 247 218
x32498:	neg dx	; 2: 247 218

gmtime$13:	; Assign g_timeStruct$tm_sec £temporary3348
x32500:	mov [@7659$g_timeStruct], dx	; 4: 137 22 231 128

gmtime$14:	; SignedDivide totalDays time 86400
x32504:	mov eax, [bp + 8]	; 4: 102 139 70 8
x32508:	xor edx, edx	; 3: 102 49 210
x32511:	idiv dword [@7690$int4$86400#]	; 5: 102 247 62 1 129
x32516:	mov [bp + 20], eax	; 4: 102 137 70 20

gmtime$15:	; SignedGreaterThanEqual 20 totalDays 3
x32520:	cmp dword [bp + 20], 3	; 5: 102 131 126 20 3
x32525:	jge gmtime$20	; 2: 125 24

gmtime$16:	; BinaryAdd £temporary3352 totalDays 4
x32527:	mov eax, [bp + 20]	; 4: 102 139 70 20
x32531:	add eax, 4	; 4: 102 131 192 4

gmtime$17:	; IntegralToIntegral £temporary3353 £temporary3352
x32535:	cmp eax, 0	; 4: 102 131 248 0
x32539:	jge gmtime$18	; 2: 125 5
x32541:	neg eax	; 3: 102 247 216
x32544:	neg ax	; 2: 247 216

gmtime$18:	; Assign g_timeStruct$tm_wday £temporary3353
x32546:	mov [@7659$g_timeStruct + 12], ax	; 3: 163 243 128

gmtime$19:	; Goto 24
x32549:	jmp gmtime$24	; 2: 235 31

gmtime$20:	; BinarySubtract £temporary3355 totalDays 3
x32551:	mov eax, [bp + 20]	; 4: 102 139 70 20
x32555:	sub eax, 3	; 4: 102 131 232 3

gmtime$21:	; SignedModulo £temporary3356 £temporary3355 7
x32559:	xor edx, edx	; 3: 102 49 210
x32562:	idiv dword [@7706$int4$7#]	; 5: 102 247 62 5 129

gmtime$22:	; IntegralToIntegral £temporary3357 £temporary3356
x32567:	cmp edx, 0	; 4: 102 131 250 0
x32571:	jge gmtime$23	; 2: 125 5
x32573:	neg edx	; 3: 102 247 218
x32576:	neg dx	; 2: 247 218

gmtime$23:	; Assign g_timeStruct$tm_wday £temporary3357
x32578:	mov [@7659$g_timeStruct + 12], dx	; 4: 137 22 243 128

gmtime$24:	; SignedDivide £temporary3358 totalDays 365
x32582:	mov eax, [bp + 20]	; 4: 102 139 70 20
x32586:	xor edx, edx	; 3: 102 49 210
x32589:	idiv dword [@7711$int4$365#]	; 5: 102 247 62 9 129

gmtime$25:	; BinaryAdd £temporary3359 £temporary3358 1970
x32594:	add eax, 1970	; 6: 102 5 178 7 0 0

gmtime$26:	; IntegralToIntegral £temporary3360 £temporary3359
x32600:	cmp eax, 0	; 4: 102 131 248 0
x32604:	jge gmtime$27	; 2: 125 5
x32606:	neg eax	; 3: 102 247 216
x32609:	neg ax	; 2: 247 216

gmtime$27:	; Assign year £temporary3360
x32611:	mov [bp + 24], ax	; 3: 137 70 24

gmtime$28:	; BinarySubtract £temporary3361 year 1969
x32614:	mov ax, [bp + 24]	; 3: 139 70 24
x32617:	sub ax, 1969	; 3: 45 177 7

gmtime$29:	; SignedDivide leapDays £temporary3361 4
x32620:	xor dx, dx	; 2: 49 210
x32622:	idiv word [@7721$int2$4#]	; 4: 247 62 13 129
x32626:	mov [bp + 26], ax	; 3: 137 70 26

gmtime$30:	; SignedModulo totalDays totalDays 365
x32629:	mov eax, [bp + 20]	; 4: 102 139 70 20
x32633:	xor edx, edx	; 3: 102 49 210
x32636:	idiv dword [@7725$int4$365#]	; 5: 102 247 62 15 129
x32641:	mov [bp + 20], edx	; 4: 102 137 86 20

gmtime$31:	; IntegralToIntegral £temporary3364 leapDays
x32645:	mov ax, [bp + 26]	; 3: 139 70 26
x32648:	and eax, 65535	; 6: 102 37 255 255 0 0
x32654:	cmp ax, 0	; 3: 131 248 0
x32657:	jge gmtime$32	; 2: 125 5
x32659:	neg ax	; 2: 247 216
x32661:	neg eax	; 3: 102 247 216

gmtime$32:	; BinarySubtract totalDays totalDays £temporary3364
x32664:	sub [bp + 20], eax	; 4: 102 41 70 20

gmtime$33:	; SignedGreaterThanEqual 44 totalDays 0
x32668:	cmp dword [bp + 20], 0	; 5: 102 131 126 20 0
x32673:	jge gmtime$44	; 2: 125 46

gmtime$34:	; Decrement year
x32675:	dec word [bp + 24]	; 3: 255 78 24

gmtime$35:	; CallHeader 28 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

gmtime$36:	; Parameter 28 year 6
x32678:	mov ax, [bp + 24]	; 3: 139 70 24
x32681:	mov [bp + 34], ax	; 3: 137 70 34

gmtime$37:	; Call 28 isLeapYear 0
x32684:	mov word [bp + 28], gmtime$38	; 5: 199 70 28 186 127
x32689:	mov [bp + 30], bp	; 3: 137 110 30
x32692:	add bp, 28	; 3: 131 197 28
x32695:	jmp @7454$isLeapYear	; 3: 233 121 253

gmtime$38:	; PostCall 28

gmtime$39:	; GetReturnValue £temporary3368

gmtime$40:	; Equal 43 £temporary3368 0
x32698:	cmp bx, 0	; 3: 131 251 0
x32701:	je gmtime$43	; 2: 116 10

gmtime$41:	; BinaryAdd totalDays totalDays 366
x32703:	add dword [bp + 20], 366	; 8: 102 129 70 20 110 1 0 0

gmtime$42:	; Goto 44
x32711:	jmp gmtime$44	; 2: 235 8

gmtime$43:	; BinaryAdd totalDays totalDays 365
x32713:	add dword [bp + 20], 365	; 8: 102 129 70 20 109 1 0 0

gmtime$44:	; BinarySubtract g_timeStruct$tm_year year 1900
x32721:	mov ax, [bp + 24]	; 3: 139 70 24
x32724:	sub ax, 1900	; 3: 45 108 7
x32727:	mov [@7659$g_timeStruct + 10], ax	; 3: 163 241 128

gmtime$45:	; IntegralToIntegral £temporary3375 totalDays
x32730:	mov eax, [bp + 20]	; 4: 102 139 70 20
x32734:	cmp eax, 0	; 4: 102 131 248 0
x32738:	jge gmtime$46	; 2: 125 5
x32740:	neg eax	; 3: 102 247 216
x32743:	neg ax	; 2: 247 216

gmtime$46:	; Assign g_timeStruct$tm_yday £temporary3375
x32745:	mov [@7659$g_timeStruct + 14], ax	; 3: 163 245 128

gmtime$47:	; Assign daysOfMonths[0] 31
x32748:	mov word [bp + 28], 31	; 5: 199 70 28 31 0

gmtime$48:	; CallHeader 30 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

gmtime$49:	; Parameter 30 year 6
x32753:	mov ax, [bp + 24]	; 3: 139 70 24
x32756:	mov [bp + 36], ax	; 3: 137 70 36

gmtime$50:	; Call 30 isLeapYear 0
x32759:	mov word [bp + 30], gmtime$51	; 5: 199 70 30 5 128
x32764:	mov [bp + 32], bp	; 3: 137 110 32
x32767:	add bp, 30	; 3: 131 197 30
x32770:	jmp @7454$isLeapYear	; 3: 233 46 253

gmtime$51:	; PostCall 30

gmtime$52:	; GetReturnValue £temporary3376

gmtime$53:	; Equal 56 £temporary3376 0
x32773:	cmp bx, 0	; 3: 131 251 0
x32776:	je gmtime$56	; 2: 116 5

gmtime$54:	; Assign £temporary3381 29
x32778:	mov ax, 29	; 3: 184 29 0

gmtime$55:	; Goto 57
x32781:	jmp gmtime$57	; 2: 235 3

gmtime$56:	; Assign £temporary3381 28
x32783:	mov ax, 28	; 3: 184 28 0

gmtime$57:	; Assign daysOfMonths[1] £temporary3381
x32786:	mov [bp + 30], ax	; 3: 137 70 30

gmtime$58:	; Assign daysOfMonths[2] 31
x32789:	mov word [bp + 32], 31	; 5: 199 70 32 31 0

gmtime$59:	; Assign daysOfMonths[3] 30
x32794:	mov word [bp + 34], 30	; 5: 199 70 34 30 0

gmtime$60:	; Assign daysOfMonths[4] 31
x32799:	mov word [bp + 36], 31	; 5: 199 70 36 31 0

gmtime$61:	; Assign daysOfMonths[5] 30
x32804:	mov word [bp + 38], 30	; 5: 199 70 38 30 0

gmtime$62:	; Assign daysOfMonths[6] 31
x32809:	mov word [bp + 40], 31	; 5: 199 70 40 31 0

gmtime$63:	; Assign daysOfMonths[7] 31
x32814:	mov word [bp + 42], 31	; 5: 199 70 42 31 0

gmtime$64:	; Assign daysOfMonths[8] 30
x32819:	mov word [bp + 44], 30	; 5: 199 70 44 30 0

gmtime$65:	; Assign daysOfMonths[9] 31
x32824:	mov word [bp + 46], 31	; 5: 199 70 46 31 0

gmtime$66:	; Assign daysOfMonths[10] 30
x32829:	mov word [bp + 48], 30	; 5: 199 70 48 30 0

gmtime$67:	; Assign daysOfMonths[11] 31
x32834:	mov word [bp + 50], 31	; 5: 199 70 50 31 0

gmtime$68:	; Assign month 0
x32839:	mov word [bp + 52], 0	; 5: 199 70 52 0 0

gmtime$69:	; SignedMultiply £temporary3395 month 2
x32844:	mov ax, [bp + 52]	; 3: 139 70 52
x32847:	xor dx, dx	; 2: 49 210
x32849:	imul word [@7802$int2$2#]	; 4: 247 46 19 129

gmtime$70:	; BinaryAdd £temporary3396 daysOfMonths £temporary3395
x32853:	mov si, bp	; 2: 137 238
x32855:	add si, 28	; 3: 131 198 28
x32858:	add si, ax	; 2: 1 198

gmtime$71:	; Deref £temporary3394 -> £temporary3396 £temporary3396 0

gmtime$72:	; IntegralToIntegral £temporary3397 £temporary3394 -> £temporary3396
x32860:	mov ax, [si]	; 2: 139 4
x32862:	and eax, 65535	; 6: 102 37 255 255 0 0
x32868:	cmp ax, 0	; 3: 131 248 0
x32871:	jge gmtime$73	; 2: 125 5
x32873:	neg ax	; 2: 247 216
x32875:	neg eax	; 3: 102 247 216

gmtime$73:	; SignedLessThan 82 totalDays £temporary3397
x32878:	cmp [bp + 20], eax	; 4: 102 57 70 20
x32882:	jl gmtime$82	; 2: 124 43

gmtime$74:	; Assign £temporary3399 month
x32884:	mov ax, [bp + 52]	; 3: 139 70 52

gmtime$75:	; Increment month
x32887:	inc word [bp + 52]	; 3: 255 70 52

gmtime$76:	; SignedMultiply £temporary3402 £temporary3399 2
x32890:	xor dx, dx	; 2: 49 210
x32892:	imul word [@7812$int2$2#]	; 4: 247 46 21 129

gmtime$77:	; BinaryAdd £temporary3403 daysOfMonths £temporary3402
x32896:	mov si, bp	; 2: 137 238
x32898:	add si, 28	; 3: 131 198 28
x32901:	add si, ax	; 2: 1 198

gmtime$78:	; Deref £temporary3401 -> £temporary3403 £temporary3403 0

gmtime$79:	; IntegralToIntegral £temporary3404 £temporary3401 -> £temporary3403
x32903:	mov ax, [si]	; 2: 139 4
x32905:	and eax, 65535	; 6: 102 37 255 255 0 0
x32911:	cmp ax, 0	; 3: 131 248 0
x32914:	jge gmtime$80	; 2: 125 5
x32916:	neg ax	; 2: 247 216
x32918:	neg eax	; 3: 102 247 216

gmtime$80:	; BinarySubtract totalDays totalDays £temporary3404
x32921:	sub [bp + 20], eax	; 4: 102 41 70 20

gmtime$81:	; Goto 69
x32925:	jmp gmtime$69	; 2: 235 173

gmtime$82:	; Assign g_timeStruct$tm_mon month
x32927:	mov ax, [bp + 52]	; 3: 139 70 52
x32930:	mov [@7659$g_timeStruct + 8], ax	; 3: 163 239 128

gmtime$83:	; BinaryAdd £temporary3408 totalDays 1
x32933:	mov eax, [bp + 20]	; 4: 102 139 70 20
x32937:	inc eax	; 2: 102 64

gmtime$84:	; IntegralToIntegral £temporary3409 £temporary3408
x32939:	cmp eax, 0	; 4: 102 131 248 0
x32943:	jge gmtime$85	; 2: 125 5
x32945:	neg eax	; 3: 102 247 216
x32948:	neg ax	; 2: 247 216

gmtime$85:	; Assign g_timeStruct$tm_mday £temporary3409
x32950:	mov [@7659$g_timeStruct + 6], ax	; 3: 163 237 128

gmtime$86:	; Assign g_timeStruct$tm_isdst -1
x32953:	mov word [@7659$g_timeStruct + 16], -1	; 6: 199 6 247 128 255 255

gmtime$87:	; SetReturnValue (@7659$g_timeStruct,0)
x32959:	mov bx, @7659$g_timeStruct	; 3: 187 231 128

gmtime$88:	; Return (@7659$g_timeStruct,0)
x32962:	mov ax, [bp]	; 3: 139 70 0
x32965:	mov di, [bp + 4]	; 3: 139 126 4
x32968:	mov bp, [bp + 2]	; 3: 139 110 2
x32971:	jmp ax	; 2: 255 224

gmtime$89:	; SetReturnValue 0
x32973:	mov bx, 0	; 3: 187 0 0

gmtime$90:	; Return 0
x32976:	mov ax, [bp]	; 3: 139 70 0
x32979:	mov di, [bp + 4]	; 3: 139 126 4
x32982:	mov bp, [bp + 2]	; 3: 139 110 2
x32985:	jmp ax	; 2: 255 224

gmtime$91:	; FunctionEnd gmtime

@7667$int4$86400#:
x32987:	dd 86400	; 4: 128 81 1 0

@7671$int4$3600#:
x32991:	dd 3600	; 4: 16 14 0 0

@7676$int4$3600#:
x32995:	dd 3600	; 4: 16 14 0 0

@7659$g_timeStruct:
x32999:	db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0	; 18: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0

@7681$int4$60#:
x33017:	dd 60	; 4: 60 0 0 0

@7686$int4$60#:
x33021:	dd 60	; 4: 60 0 0 0

@7690$int4$86400#:
x33025:	dd 86400	; 4: 128 81 1 0

@7706$int4$7#:
x33029:	dd 7	; 4: 7 0 0 0

@7711$int4$365#:
x33033:	dd 365	; 4: 109 1 0 0

@7721$int2$4#:
x33037:	dw 4	; 2: 4 0

@7725$int4$365#:
x33039:	dd 365	; 4: 109 1 0 0

@7802$int2$2#:
x33043:	dw 2	; 2: 2 0

@7812$int2$2#:
x33045:	dw 2	; 2: 2 0

localtime:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

localtime$1:	; Parameter 8 timePtr 6
x33047:	mov ax, [bp + 6]	; 3: 139 70 6
x33050:	mov [bp + 14], ax	; 3: 137 70 14

localtime$2:	; Call 8 gmtime 0
x33053:	mov word [bp + 8], localtime$3	; 5: 199 70 8 43 129
x33058:	mov [bp + 10], bp	; 3: 137 110 10
x33061:	add bp, 8	; 3: 131 197 8
x33064:	jmp gmtime	; 3: 233 76 253

localtime$3:	; PostCall 8

localtime$4:	; GetReturnValue £temporary3413

localtime$5:	; Assign tmPtr £temporary3413
x33067:	mov [bp + 8], bx	; 3: 137 94 8

localtime$6:	; Deref £temporary3414 -> timePtr timePtr 0
x33070:	mov si, [bp + 6]	; 3: 139 118 6

localtime$7:	; Assign t £temporary3414 -> timePtr
x33073:	mov eax, [si]	; 3: 102 139 4
x33076:	mov [bp + 10], eax	; 4: 102 137 70 10

localtime$8:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

localtime$9:	; Call 14 localeconv 0
x33080:	mov word [bp + 14], localtime$10	; 5: 199 70 14 70 129
x33085:	mov [bp + 16], bp	; 3: 137 110 16
x33088:	add bp, 14	; 3: 131 197 14
x33091:	jmp localeconv	; 3: 233 47 157

localtime$10:	; PostCall 14

localtime$11:	; GetReturnValue £temporary3415

localtime$12:	; Assign localeConvPtr £temporary3415
x33094:	mov [bp + 14], bx	; 3: 137 94 14

localtime$13:	; Equal 25 localeConvPtr 0
x33097:	cmp word [bp + 14], 0	; 4: 131 126 14 0
x33101:	je localtime$25	; 2: 116 56

localtime$14:	; Deref £temporary3417 -> tmPtr tmPtr 16
x33103:	mov si, [bp + 8]	; 3: 139 118 8

localtime$15:	; NotEqual 19 £temporary3417 -> tmPtr 1
x33106:	cmp word [si + 16], 1	; 4: 131 124 16 1
x33110:	jne localtime$19	; 2: 117 7

localtime$16:	; Deref £temporary3419 -> localeConvPtr localeConvPtr 0
x33112:	mov si, [bp + 14]	; 3: 139 118 14

localtime$17:	; Assign £temporary3424 £temporary3419 -> localeConvPtr
x33115:	mov ax, [si]	; 2: 139 4

localtime$18:	; Goto 21
x33117:	jmp localtime$21	; 2: 235 6

localtime$19:	; Deref £temporary3420 -> localeConvPtr localeConvPtr 2
x33119:	mov si, [bp + 14]	; 3: 139 118 14

localtime$20:	; Assign £temporary3424 £temporary3420 -> localeConvPtr
x33122:	mov ax, [si + 2]	; 3: 139 68 2

localtime$21:	; Assign timeZone £temporary3424
x33125:	mov [bp + 16], ax	; 3: 137 70 16

localtime$22:	; IntegralToIntegral £temporary3425 timeZone
x33128:	mov ax, [bp + 16]	; 3: 139 70 16
x33131:	and eax, 65535	; 6: 102 37 255 255 0 0
x33137:	cmp ax, 0	; 3: 131 248 0
x33140:	jge localtime$23	; 2: 125 5
x33142:	neg ax	; 2: 247 216
x33144:	neg eax	; 3: 102 247 216

localtime$23:	; SignedMultiply £temporary3426 £temporary3425 3600
x33147:	xor edx, edx	; 3: 102 49 210
x33150:	imul dword [@7857$int4$3600#]	; 5: 102 247 46 168 129

localtime$24:	; BinaryAdd t t £temporary3426
x33155:	add [bp + 10], eax	; 4: 102 1 70 10

localtime$25:	; CallHeader 16 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

localtime$26:	; address £temporary3428 t
x33159:	mov si, bp	; 2: 137 238
x33161:	add si, 10	; 3: 131 198 10

localtime$27:	; Parameter 16 £temporary3428 6
x33164:	mov [bp + 22], si	; 3: 137 118 22

localtime$28:	; Call 16 gmtime 0
x33167:	mov word [bp + 16], localtime$29	; 5: 199 70 16 157 129
x33172:	mov [bp + 18], bp	; 3: 137 110 18
x33175:	add bp, 16	; 3: 131 197 16
x33178:	jmp gmtime	; 3: 233 218 252

localtime$29:	; PostCall 16

localtime$30:	; GetReturnValue £temporary3429

localtime$31:	; SetReturnValue £temporary3429

localtime$32:	; Return £temporary3429
x33181:	mov ax, [bp]	; 3: 139 70 0
x33184:	mov di, [bp + 4]	; 3: 139 126 4
x33187:	mov bp, [bp + 2]	; 3: 139 110 2
x33190:	jmp ax	; 2: 255 224

localtime$33:	; FunctionEnd localtime

@7857$int4$3600#:
x33192:	dd 3600	; 4: 16 14 0 0

asctime:	; Assign localeConvPtr 0
x33196:	mov word [bp + 8], 0	; 5: 199 70 8 0 0

asctime$1:	; Equal 7 localeConvPtr 0
x33201:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x33205:	je asctime$7	; 2: 116 20

asctime$2:	; Deref £temporary3436 -> localeConvPtr localeConvPtr 4
x33207:	mov si, [bp + 8]	; 3: 139 118 8

asctime$3:	; Equal 7 £temporary3436 -> localeConvPtr 0
x33210:	cmp word [si + 4], 0	; 4: 131 124 4 0
x33214:	je asctime$7	; 2: 116 11

asctime$4:	; Deref £temporary3439 -> localeConvPtr localeConvPtr 4
x33216:	mov si, [bp + 8]	; 3: 139 118 8

asctime$5:	; Assign shortDayList £temporary3439 -> localeConvPtr
x33219:	mov ax, [si + 4]	; 3: 139 68 4
x33222:	mov [bp + 10], ax	; 3: 137 70 10

asctime$6:	; Goto 8
x33225:	jmp asctime$8	; 2: 235 5

asctime$7:	; Assign shortDayList g_shortDayList
x33227:	mov word [bp + 10], @7880$g_shortDayList	; 5: 199 70 10 117 130

asctime$8:	; Equal 14 localeConvPtr 0
x33232:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x33236:	je asctime$14	; 2: 116 20

asctime$9:	; Deref £temporary3441 -> localeConvPtr localeConvPtr 8
x33238:	mov si, [bp + 8]	; 3: 139 118 8

asctime$10:	; Equal 14 £temporary3441 -> localeConvPtr 0
x33241:	cmp word [si + 8], 0	; 4: 131 124 8 0
x33245:	je asctime$14	; 2: 116 11

asctime$11:	; Deref £temporary3444 -> localeConvPtr localeConvPtr 8
x33247:	mov si, [bp + 8]	; 3: 139 118 8

asctime$12:	; Assign shortMonthList £temporary3444 -> localeConvPtr
x33250:	mov ax, [si + 8]	; 3: 139 68 8
x33253:	mov [bp + 12], ax	; 3: 137 70 12

asctime$13:	; Goto 15
x33256:	jmp asctime$15	; 2: 235 5

asctime$14:	; Assign shortMonthList g_shortMonthList
x33258:	mov word [bp + 12], @7901$g_shortMonthList	; 5: 199 70 12 159 130

asctime$15:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

asctime$16:	; Parameter 14 g_timeString 6
x33263:	mov word [bp + 20], @7872$g_timeString	; 5: 199 70 20 231 130

asctime$17:	; Parameter 14 string_25s2025s2025i202502i3A2502i3A2502i2025i# 8
x33268:	mov word [bp + 22], @7943$string_25s2025s2025i202502i3A2502i3A2502i2025i#	; 5: 199 70 22 231 131

asctime$18:	; Deref £temporary3445 -> tp tp 12
x33273:	mov si, [bp + 6]	; 3: 139 118 6

asctime$19:	; SignedMultiply £temporary3447 £temporary3445 -> tp 2
x33276:	mov ax, [si + 12]	; 3: 139 68 12
x33279:	xor dx, dx	; 2: 49 210
x33281:	imul word [@7946$int2$2#]	; 4: 247 46 2 132

asctime$20:	; BinaryAdd £temporary3448 shortDayList £temporary3447
x33285:	mov si, [bp + 10]	; 3: 139 118 10
x33288:	add si, ax	; 2: 1 198

asctime$21:	; Deref £temporary3446 -> £temporary3448 £temporary3448 0

asctime$22:	; Parameter 14 £temporary3446 -> £temporary3448 10
x33290:	mov ax, [si]	; 2: 139 4
x33292:	mov [bp + 24], ax	; 3: 137 70 24

asctime$23:	; Deref £temporary3449 -> tp tp 8
x33295:	mov si, [bp + 6]	; 3: 139 118 6

asctime$24:	; SignedMultiply £temporary3451 £temporary3449 -> tp 2
x33298:	mov ax, [si + 8]	; 3: 139 68 8
x33301:	xor dx, dx	; 2: 49 210
x33303:	imul word [@7951$int2$2#]	; 4: 247 46 4 132

asctime$25:	; BinaryAdd £temporary3452 shortMonthList £temporary3451
x33307:	mov si, [bp + 12]	; 3: 139 118 12
x33310:	add si, ax	; 2: 1 198

asctime$26:	; Deref £temporary3450 -> £temporary3452 £temporary3452 0

asctime$27:	; Parameter 14 £temporary3450 -> £temporary3452 12
x33312:	mov ax, [si]	; 2: 139 4
x33314:	mov [bp + 26], ax	; 3: 137 70 26

asctime$28:	; Deref £temporary3453 -> tp tp 6
x33317:	mov si, [bp + 6]	; 3: 139 118 6

asctime$29:	; Parameter 14 £temporary3453 -> tp 14
x33320:	mov ax, [si + 6]	; 3: 139 68 6
x33323:	mov [bp + 28], ax	; 3: 137 70 28

asctime$30:	; Deref £temporary3454 -> tp tp 4
x33326:	mov si, [bp + 6]	; 3: 139 118 6

asctime$31:	; Parameter 14 £temporary3454 -> tp 16
x33329:	mov ax, [si + 4]	; 3: 139 68 4
x33332:	mov [bp + 30], ax	; 3: 137 70 30

asctime$32:	; Deref £temporary3455 -> tp tp 2
x33335:	mov si, [bp + 6]	; 3: 139 118 6

asctime$33:	; Parameter 14 £temporary3455 -> tp 18
x33338:	mov ax, [si + 2]	; 3: 139 68 2
x33341:	mov [bp + 32], ax	; 3: 137 70 32

asctime$34:	; Deref £temporary3456 -> tp tp 0
x33344:	mov si, [bp + 6]	; 3: 139 118 6

asctime$35:	; Parameter 14 £temporary3456 -> tp 20
x33347:	mov ax, [si]	; 2: 139 4
x33349:	mov [bp + 34], ax	; 3: 137 70 34

asctime$36:	; Deref £temporary3457 -> tp tp 10
x33352:	mov si, [bp + 6]	; 3: 139 118 6

asctime$37:	; BinaryAdd £temporary3458 £temporary3457 -> tp 1900
x33355:	mov ax, [si + 10]	; 3: 139 68 10
x33358:	add ax, 1900	; 3: 5 108 7

asctime$38:	; Parameter 14 £temporary3458 22
x33361:	mov [bp + 36], ax	; 3: 137 70 36

asctime$39:	; Call 14 sprintf 0
x33364:	mov word [bp + 14], asctime$40	; 5: 199 70 14 103 130
x33369:	mov [bp + 16], bp	; 3: 137 110 16
x33372:	add bp, 14	; 3: 131 197 14
x33375:	mov di, bp	; 2: 137 239
x33377:	add di, 14	; 3: 131 199 14
x33380:	jmp sprintf	; 3: 233 159 1

asctime$40:	; PostCall 14

asctime$41:	; SetReturnValue g_timeString
x33383:	mov bx, @7872$g_timeString	; 3: 187 231 130

asctime$42:	; Return g_timeString
x33386:	mov ax, [bp]	; 3: 139 70 0
x33389:	mov di, [bp + 4]	; 3: 139 126 4
x33392:	mov bp, [bp + 2]	; 3: 139 110 2
x33395:	jmp ax	; 2: 255 224

asctime$43:	; FunctionEnd asctime

@7880$g_shortDayList:
x33397:	dw @7873$string_Sun# ; 2: 131 130
x33399:	dw @7874$string_Mon# ; 2: 135 130
x33401:	dw @7875$string_Tue# ; 2: 139 130
x33403:	dw @7876$string_Wed# ; 2: 143 130
x33405:	dw @7877$string_Thu# ; 2: 147 130
x33407:	dw @7878$string_Fri# ; 2: 151 130
x33409:	dw @7879$string_Sat# ; 2: 155 130

@7873$string_Sun#:
x33411:	db "Sun", 0	; 4: 83 117 110 0

@7874$string_Mon#:
x33415:	db "Mon", 0	; 4: 77 111 110 0

@7875$string_Tue#:
x33419:	db "Tue", 0	; 4: 84 117 101 0

@7876$string_Wed#:
x33423:	db "Wed", 0	; 4: 87 101 100 0

@7877$string_Thu#:
x33427:	db "Thu", 0	; 4: 84 104 117 0

@7878$string_Fri#:
x33431:	db "Fri", 0	; 4: 70 114 105 0

@7879$string_Sat#:
x33435:	db "Sat", 0	; 4: 83 97 116 0

@7901$g_shortMonthList:
x33439:	dw @7889$string_Jan# ; 2: 183 130
x33441:	dw @7890$string_Feb# ; 2: 187 130
x33443:	dw @7891$string_Mar# ; 2: 191 130
x33445:	dw @7892$string_Apr# ; 2: 195 130
x33447:	dw @7893$string_May# ; 2: 199 130
x33449:	dw @7894$string_Jun# ; 2: 203 130
x33451:	dw @7895$string_Jul# ; 2: 207 130
x33453:	dw @7896$string_Aug# ; 2: 211 130
x33455:	dw @7897$string_Sep# ; 2: 215 130
x33457:	dw @7898$string_Oct# ; 2: 219 130
x33459:	dw @7899$string_Nov# ; 2: 223 130
x33461:	dw @7900$string_Dec# ; 2: 227 130

@7889$string_Jan#:
x33463:	db "Jan", 0	; 4: 74 97 110 0

@7890$string_Feb#:
x33467:	db "Feb", 0	; 4: 70 101 98 0

@7891$string_Mar#:
x33471:	db "Mar", 0	; 4: 77 97 114 0

@7892$string_Apr#:
x33475:	db "Apr", 0	; 4: 65 112 114 0

@7893$string_May#:
x33479:	db "May", 0	; 4: 77 97 121 0

@7894$string_Jun#:
x33483:	db "Jun", 0	; 4: 74 117 110 0

@7895$string_Jul#:
x33487:	db "Jul", 0	; 4: 74 117 108 0

@7896$string_Aug#:
x33491:	db "Aug", 0	; 4: 65 117 103 0

@7897$string_Sep#:
x33495:	db "Sep", 0	; 4: 83 101 112 0

@7898$string_Oct#:
x33499:	db "Oct", 0	; 4: 79 99 116 0

@7899$string_Nov#:
x33503:	db "Nov", 0	; 4: 78 111 118 0

@7900$string_Dec#:
x33507:	db "Dec", 0	; 4: 68 101 99 0

@7872$g_timeString:
x33511:	db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0	; 256: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0

@7943$string_25s2025s2025i202502i3A2502i3A2502i2025i#:
x33767:	db "%s %s %i %02i:%02i:%02i %i", 0	; 27: 37 115 32 37 115 32 37 105 32 37 48 50 105 58 37 48 50 105 58 37 48 50 105 32 37 105 0

@7946$int2$2#:
x33794:	dw 2	; 2: 2 0

@7951$int2$2#:
x33796:	dw 2	; 2: 2 0

sprintf:	; address £temporary2225 format
x33798:	mov si, bp	; 2: 137 238
x33800:	add si, 8	; 3: 131 198 8

sprintf$1:	; IntegralToIntegral £temporary2226 £temporary2225

sprintf$2:	; BinaryAdd arg_list £temporary2226 2
x33803:	add si, 2	; 3: 131 198 2
x33806:	mov [di + 10], si	; 3: 137 117 10

sprintf$3:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

sprintf$4:	; Parameter 12 outString 6
x33809:	mov ax, [bp + 6]	; 3: 139 70 6
x33812:	mov [di + 18], ax	; 3: 137 69 18

sprintf$5:	; Parameter 12 format 8
x33815:	mov ax, [bp + 8]	; 3: 139 70 8
x33818:	mov [di + 20], ax	; 3: 137 69 20

sprintf$6:	; Parameter 12 arg_list 10
x33821:	mov ax, [di + 10]	; 3: 139 69 10
x33824:	mov [di + 22], ax	; 3: 137 69 22

sprintf$7:	; Call 12 vsprintf 0
x33827:	mov word [di + 12], sprintf$8	; 5: 199 69 12 54 132
x33832:	mov [di + 14], bp	; 3: 137 109 14
x33835:	mov [di + 16], di	; 3: 137 125 16
x33838:	add di, 12	; 3: 131 199 12
x33841:	mov bp, di	; 2: 137 253
x33843:	nop	; 1: 144
x33844:	jmp vsprintf	; 2: 235 11

sprintf$8:	; PostCall 12

sprintf$9:	; GetReturnValue £temporary2228

sprintf$10:	; SetReturnValue £temporary2228

sprintf$11:	; Return £temporary2228
x33846:	mov ax, [bp]	; 3: 139 70 0
x33849:	mov di, [bp + 4]	; 3: 139 126 4
x33852:	mov bp, [bp + 2]	; 3: 139 110 2
x33855:	jmp ax	; 2: 255 224

sprintf$12:	; FunctionEnd sprintf

vsprintf:	; Assign g_outStatus 1
x33857:	mov word [g_outStatus], 1	; 6: 199 6 219 15 1 0

vsprintf$1:	; IntegralToIntegral £temporary2233 outString
x33863:	mov ax, [bp + 6]	; 3: 139 70 6

vsprintf$2:	; Assign g_outDevice £temporary2233
x33866:	mov [g_outDevice], ax	; 3: 163 221 15

vsprintf$3:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

vsprintf$4:	; Parameter 12 format 6
x33869:	mov ax, [bp + 8]	; 3: 139 70 8
x33872:	mov [bp + 18], ax	; 3: 137 70 18

vsprintf$5:	; Parameter 12 arg_list 8
x33875:	mov ax, [bp + 10]	; 3: 139 70 10
x33878:	mov [bp + 20], ax	; 3: 137 70 20

vsprintf$6:	; Call 12 printFormat 0
x33881:	mov word [bp + 12], vsprintf$7	; 5: 199 70 12 103 132
x33886:	mov [bp + 14], bp	; 3: 137 110 14
x33889:	add bp, 12	; 3: 131 197 12
x33892:	jmp printFormat	; 3: 233 120 139

vsprintf$7:	; PostCall 12

vsprintf$8:	; GetReturnValue £temporary2234

vsprintf$9:	; SetReturnValue £temporary2234

vsprintf$10:	; Return £temporary2234
x33895:	mov ax, [bp]	; 3: 139 70 0
x33898:	mov di, [bp + 4]	; 3: 139 126 4
x33901:	mov bp, [bp + 2]	; 3: 139 110 2
x33904:	jmp ax	; 2: 255 224

vsprintf$11:	; FunctionEnd vsprintf

ctime:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

ctime$1:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

ctime$2:	; Parameter 8 time 6
x33906:	mov ax, [bp + 6]	; 3: 139 70 6
x33909:	mov [bp + 14], ax	; 3: 137 70 14

ctime$3:	; Call 8 localtime 0
x33912:	mov word [bp + 8], ctime$4	; 5: 199 70 8 134 132
x33917:	mov [bp + 10], bp	; 3: 137 110 10
x33920:	add bp, 8	; 3: 131 197 8
x33923:	jmp localtime	; 3: 233 145 252

ctime$4:	; PostCall 8

ctime$5:	; GetReturnValue £temporary3469

ctime$6:	; Parameter 8 £temporary3469 6
x33926:	mov [bp + 14], bx	; 3: 137 94 14

ctime$7:	; Call 8 asctime 0
x33929:	mov word [bp + 8], ctime$8	; 5: 199 70 8 151 132
x33934:	mov [bp + 10], bp	; 3: 137 110 10
x33937:	add bp, 8	; 3: 131 197 8
x33940:	jmp asctime	; 3: 233 21 253

ctime$8:	; PostCall 8

ctime$9:	; GetReturnValue £temporary3470

ctime$10:	; SetReturnValue £temporary3470

ctime$11:	; Return £temporary3470
x33943:	mov ax, [bp]	; 3: 139 70 0
x33946:	mov di, [bp + 4]	; 3: 139 126 4
x33949:	mov bp, [bp + 2]	; 3: 139 110 2
x33952:	jmp ax	; 2: 255 224

ctime$12:	; FunctionEnd ctime

strftime:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$1:	; Call 14 localeconv 0
x33954:	mov word [bp + 14], strftime$2	; 5: 199 70 14 176 132
x33959:	mov [bp + 16], bp	; 3: 137 110 16
x33962:	add bp, 14	; 3: 131 197 14
x33965:	jmp localeconv	; 3: 233 197 153

strftime$2:	; PostCall 14

strftime$3:	; GetReturnValue £temporary3494

strftime$4:	; Assign localeConvPtr £temporary3494
x33968:	mov [bp + 14], bx	; 3: 137 94 14

strftime$5:	; Equal 11 localeConvPtr 0
x33971:	cmp word [bp + 14], 0	; 4: 131 126 14 0
x33975:	je strftime$11	; 2: 116 20

strftime$6:	; Deref £temporary3496 -> localeConvPtr localeConvPtr 4
x33977:	mov si, [bp + 14]	; 3: 139 118 14

strftime$7:	; Equal 11 £temporary3496 -> localeConvPtr 0
x33980:	cmp word [si + 4], 0	; 4: 131 124 4 0
x33984:	je strftime$11	; 2: 116 11

strftime$8:	; Deref £temporary3499 -> localeConvPtr localeConvPtr 4
x33986:	mov si, [bp + 14]	; 3: 139 118 14

strftime$9:	; Assign shortDayList £temporary3499 -> localeConvPtr
x33989:	mov ax, [si + 4]	; 3: 139 68 4
x33992:	mov [bp + 16], ax	; 3: 137 70 16

strftime$10:	; Goto 12
x33995:	jmp strftime$12	; 2: 235 5

strftime$11:	; Assign shortDayList g_shortDayList
x33997:	mov word [bp + 16], @7880$g_shortDayList	; 5: 199 70 16 117 130

strftime$12:	; Equal 18 localeConvPtr 0
x34002:	cmp word [bp + 14], 0	; 4: 131 126 14 0
x34006:	je strftime$18	; 2: 116 20

strftime$13:	; Deref £temporary3501 -> localeConvPtr localeConvPtr 6
x34008:	mov si, [bp + 14]	; 3: 139 118 14

strftime$14:	; Equal 18 £temporary3501 -> localeConvPtr 0
x34011:	cmp word [si + 6], 0	; 4: 131 124 6 0
x34015:	je strftime$18	; 2: 116 11

strftime$15:	; Deref £temporary3504 -> localeConvPtr localeConvPtr 6
x34017:	mov si, [bp + 14]	; 3: 139 118 14

strftime$16:	; Assign longDayList £temporary3504 -> localeConvPtr
x34020:	mov ax, [si + 6]	; 3: 139 68 6
x34023:	mov [bp + 20], ax	; 3: 137 70 20

strftime$17:	; Goto 19
x34026:	jmp strftime$19	; 2: 235 5

strftime$18:	; Assign longDayList g_longDayList
x34028:	mov word [bp + 20], @7888$g_longDayList	; 5: 199 70 20 221 138

strftime$19:	; Equal 25 localeConvPtr 0
x34033:	cmp word [bp + 14], 0	; 4: 131 126 14 0
x34037:	je strftime$25	; 2: 116 20

strftime$20:	; Deref £temporary3506 -> localeConvPtr localeConvPtr 8
x34039:	mov si, [bp + 14]	; 3: 139 118 14

strftime$21:	; Equal 25 £temporary3506 -> localeConvPtr 0
x34042:	cmp word [si + 8], 0	; 4: 131 124 8 0
x34046:	je strftime$25	; 2: 116 11

strftime$22:	; Deref £temporary3509 -> localeConvPtr localeConvPtr 8
x34048:	mov si, [bp + 14]	; 3: 139 118 14

strftime$23:	; Assign shortMonthList £temporary3509 -> localeConvPtr
x34051:	mov ax, [si + 8]	; 3: 139 68 8
x34054:	mov [bp + 18], ax	; 3: 137 70 18

strftime$24:	; Goto 26
x34057:	jmp strftime$26	; 2: 235 5

strftime$25:	; Assign shortMonthList g_shortMonthList
x34059:	mov word [bp + 18], @7901$g_shortMonthList	; 5: 199 70 18 159 130

strftime$26:	; Equal 32 localeConvPtr 0
x34064:	cmp word [bp + 14], 0	; 4: 131 126 14 0
x34068:	je strftime$32	; 2: 116 20

strftime$27:	; Deref £temporary3511 -> localeConvPtr localeConvPtr 10
x34070:	mov si, [bp + 14]	; 3: 139 118 14

strftime$28:	; Equal 32 £temporary3511 -> localeConvPtr 0
x34073:	cmp word [si + 10], 0	; 4: 131 124 10 0
x34077:	je strftime$32	; 2: 116 11

strftime$29:	; Deref £temporary3514 -> localeConvPtr localeConvPtr 10
x34079:	mov si, [bp + 14]	; 3: 139 118 14

strftime$30:	; Assign longMonthList £temporary3514 -> localeConvPtr
x34082:	mov ax, [si + 10]	; 3: 139 68 10
x34085:	mov [bp + 22], ax	; 3: 137 70 22

strftime$31:	; Goto 33
x34088:	jmp strftime$33	; 2: 235 5

strftime$32:	; Assign longMonthList g_longMonthList
x34090:	mov word [bp + 22], @7914$g_longMonthList	; 5: 199 70 22 36 139

strftime$33:	; CallHeader 24 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$34:	; Parameter 24 result 6
x34095:	mov ax, [bp + 6]	; 3: 139 70 6
x34098:	mov [bp + 30], ax	; 3: 137 70 30

strftime$35:	; Parameter 24 string_# 8
x34101:	mov word [bp + 32], @8078$string_#	; 5: 199 70 32 146 139

strftime$36:	; Call 24 strcpy 0
x34106:	mov word [bp + 24], strftime$37	; 5: 199 70 24 72 133
x34111:	mov [bp + 26], bp	; 3: 137 110 26
x34114:	add bp, 24	; 3: 131 197 24
x34117:	jmp strcpy	; 3: 233 231 216

strftime$37:	; PostCall 24

strftime$38:	; CallHeader 26 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$39:	; Parameter 26 tp 6
x34120:	mov ax, [bp + 12]	; 3: 139 70 12
x34123:	mov [bp + 32], ax	; 3: 137 70 32

strftime$40:	; Call 26 getWeekNumber 0
x34126:	mov word [bp + 26], strftime$41	; 5: 199 70 26 92 133
x34131:	mov [bp + 28], bp	; 3: 137 110 28
x34134:	add bp, 26	; 3: 131 197 26
x34137:	jmp getWeekNumber	; 3: 233 213 6

strftime$41:	; PostCall 26

strftime$42:	; GetReturnValue £temporary3516

strftime$43:	; Assign weekNumberStartSunday £temporary3516
x34140:	mov [bp + 26], bx	; 3: 137 94 26

strftime$44:	; Assign weekNumberStartMonday weekNumberStartSunday
x34143:	mov ax, [bp + 26]	; 3: 139 70 26
x34146:	mov [bp + 28], ax	; 3: 137 70 28

strftime$45:	; Deref £temporary3517 -> tp tp 6
x34149:	mov si, [bp + 12]	; 3: 139 118 12

strftime$46:	; NotEqual 48 £temporary3517 -> tp 0
x34152:	cmp word [si + 6], 0	; 4: 131 124 6 0
x34156:	jne strftime$48	; 2: 117 3

strftime$47:	; Decrement weekNumberStartMonday
x34158:	dec word [bp + 28]	; 3: 255 78 28

strftime$48:	; Assign index 0
x34161:	mov word [bp + 24], 0	; 5: 199 70 24 0 0

strftime$49:	; BinaryAdd £temporary3521 format index
x34166:	mov si, [bp + 10]	; 3: 139 118 10
x34169:	add si, [bp + 24]	; 3: 3 118 24

strftime$50:	; Deref £temporary3520 -> £temporary3521 £temporary3521 0

strftime$51:	; Equal 322 £temporary3520 -> £temporary3521 0
x34172:	cmp byte [si], 0	; 3: 128 60 0
x34175:	je strftime$322	; 4: 15 132 59 5

strftime$52:	; BinaryAdd £temporary3525 format index
x34179:	mov si, [bp + 10]	; 3: 139 118 10
x34182:	add si, [bp + 24]	; 3: 3 118 24

strftime$53:	; Deref £temporary3524 -> £temporary3525 £temporary3525 0

strftime$54:	; NotEqual 297 £temporary3524 -> £temporary3525 37
x34185:	cmp byte [si], 37	; 3: 128 60 37
x34188:	jne strftime$297	; 4: 15 133 189 4

strftime$55:	; Increment index
x34192:	inc word [bp + 24]	; 3: 255 70 24

strftime$56:	; BinaryAdd £temporary3529 format index
x34195:	mov si, [bp + 10]	; 3: 139 118 10
x34198:	add si, [bp + 24]	; 3: 3 118 24

strftime$57:	; Deref £temporary3528 -> £temporary3529 £temporary3529 0

strftime$58:	; Case 82 £temporary3528 -> £temporary3529 97
x34201:	mov al, [si]	; 2: 138 4
x34203:	cmp al, 97	; 2: 60 97
x34205:	je strftime$82	; 4: 15 132 129 0

strftime$59:	; Case 92 £temporary3528 -> £temporary3529 65
x34209:	cmp al, 65	; 2: 60 65
x34211:	je strftime$92	; 4: 15 132 169 0

strftime$60:	; Case 102 £temporary3528 -> £temporary3529 98
x34215:	cmp al, 98	; 2: 60 98
x34217:	je strftime$102	; 4: 15 132 209 0

strftime$61:	; Case 112 £temporary3528 -> £temporary3529 66
x34221:	cmp al, 66	; 2: 60 66
x34223:	je strftime$112	; 4: 15 132 249 0

strftime$62:	; Case 122 £temporary3528 -> £temporary3529 99
x34227:	cmp al, 99	; 2: 60 99
x34229:	je strftime$122	; 4: 15 132 33 1

strftime$63:	; Case 142 £temporary3528 -> £temporary3529 100
x34233:	cmp al, 100	; 2: 60 100
x34235:	je strftime$142	; 4: 15 132 118 1

strftime$64:	; Case 150 £temporary3528 -> £temporary3529 72
x34239:	cmp al, 72	; 2: 60 72
x34241:	je strftime$150	; 4: 15 132 155 1

strftime$65:	; Case 158 £temporary3528 -> £temporary3529 73
x34245:	cmp al, 73	; 2: 60 73
x34247:	je strftime$158	; 4: 15 132 192 1

strftime$66:	; Case 167 £temporary3528 -> £temporary3529 106
x34251:	cmp al, 106	; 2: 60 106
x34253:	je strftime$167	; 4: 15 132 235 1

strftime$67:	; Case 175 £temporary3528 -> £temporary3529 109
x34257:	cmp al, 109	; 2: 60 109
x34259:	je strftime$175	; 4: 15 132 16 2

strftime$68:	; Case 184 £temporary3528 -> £temporary3529 77
x34263:	cmp al, 77	; 2: 60 77
x34265:	je strftime$184	; 4: 15 132 54 2

strftime$69:	; Case 192 £temporary3528 -> £temporary3529 112
x34269:	cmp al, 112	; 2: 60 112
x34271:	je strftime$192	; 4: 15 132 91 2

strftime$70:	; Case 203 £temporary3528 -> £temporary3529 83
x34275:	cmp al, 83	; 2: 60 83
x34277:	je strftime$203	; 4: 15 132 136 2

strftime$71:	; Case 211 £temporary3528 -> £temporary3529 85
x34281:	cmp al, 85	; 2: 60 85
x34283:	je strftime$211	; 4: 15 132 172 2

strftime$72:	; Case 218 £temporary3528 -> £temporary3529 119
x34287:	cmp al, 119	; 2: 60 119
x34289:	je strftime$218	; 4: 15 132 206 2

strftime$73:	; Case 226 £temporary3528 -> £temporary3529 87
x34293:	cmp al, 87	; 2: 60 87
x34295:	je strftime$226	; 4: 15 132 243 2

strftime$74:	; Case 233 £temporary3528 -> £temporary3529 120
x34299:	cmp al, 120	; 2: 60 120
x34301:	je strftime$233	; 4: 15 132 21 3

strftime$75:	; Case 245 £temporary3528 -> £temporary3529 88
x34305:	cmp al, 88	; 2: 60 88
x34307:	je strftime$245	; 4: 15 132 75 3

strftime$76:	; Case 257 £temporary3528 -> £temporary3529 121
x34311:	cmp al, 121	; 2: 60 121
x34313:	je strftime$257	; 4: 15 132 129 3

strftime$77:	; Case 266 £temporary3528 -> £temporary3529 89
x34317:	cmp al, 89	; 2: 60 89
x34319:	je strftime$266	; 4: 15 132 172 3

strftime$78:	; Case 275 £temporary3528 -> £temporary3529 90
x34323:	cmp al, 90	; 2: 60 90
x34325:	je strftime$275	; 4: 15 132 211 3

strftime$79:	; Case 286 £temporary3528 -> £temporary3529 37
x34329:	cmp al, 37	; 2: 60 37
x34331:	je strftime$286	; 4: 15 132 248 3

strftime$80:	; CaseEnd £temporary3528 -> £temporary3529

strftime$81:	; Goto 291
x34335:	jmp strftime$291	; 3: 233 15 4

strftime$82:	; CallHeader 50 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$83:	; Parameter 50 add 6
x34338:	mov [bp + 56], bp	; 3: 137 110 56
x34341:	add word [bp + 56], 30	; 4: 131 70 56 30

strftime$84:	; Deref £temporary3530 -> tp tp 12
x34345:	mov si, [bp + 12]	; 3: 139 118 12

strftime$85:	; SignedMultiply £temporary3532 £temporary3530 -> tp 2
x34348:	mov ax, [si + 12]	; 3: 139 68 12
x34351:	xor dx, dx	; 2: 49 210
x34353:	imul word [@8118$int2$2#]	; 4: 247 46 147 139

strftime$86:	; BinaryAdd £temporary3533 shortDayList £temporary3532
x34357:	mov si, [bp + 16]	; 3: 139 118 16
x34360:	add si, ax	; 2: 1 198

strftime$87:	; Deref £temporary3531 -> £temporary3533 £temporary3533 0

strftime$88:	; Parameter 50 £temporary3531 -> £temporary3533 8
x34362:	mov ax, [si]	; 2: 139 4
x34364:	mov [bp + 58], ax	; 3: 137 70 58

strftime$89:	; Call 50 strcpy 0
x34367:	mov word [bp + 50], strftime$90	; 5: 199 70 50 77 134
x34372:	mov [bp + 52], bp	; 3: 137 110 52
x34375:	add bp, 50	; 3: 131 197 50
x34378:	jmp strcpy	; 3: 233 226 215

strftime$90:	; PostCall 50

strftime$91:	; Goto 303
x34381:	jmp strftime$303	; 3: 233 21 4

strftime$92:	; CallHeader 50 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$93:	; Parameter 50 add 6
x34384:	mov [bp + 56], bp	; 3: 137 110 56
x34387:	add word [bp + 56], 30	; 4: 131 70 56 30

strftime$94:	; Deref £temporary3535 -> tp tp 12
x34391:	mov si, [bp + 12]	; 3: 139 118 12

strftime$95:	; SignedMultiply £temporary3537 £temporary3535 -> tp 2
x34394:	mov ax, [si + 12]	; 3: 139 68 12
x34397:	xor dx, dx	; 2: 49 210
x34399:	imul word [@8126$int2$2#]	; 4: 247 46 149 139

strftime$96:	; BinaryAdd £temporary3538 longDayList £temporary3537
x34403:	mov si, [bp + 20]	; 3: 139 118 20
x34406:	add si, ax	; 2: 1 198

strftime$97:	; Deref £temporary3536 -> £temporary3538 £temporary3538 0

strftime$98:	; Parameter 50 £temporary3536 -> £temporary3538 8
x34408:	mov ax, [si]	; 2: 139 4
x34410:	mov [bp + 58], ax	; 3: 137 70 58

strftime$99:	; Call 50 strcpy 0
x34413:	mov word [bp + 50], strftime$100	; 5: 199 70 50 123 134
x34418:	mov [bp + 52], bp	; 3: 137 110 52
x34421:	add bp, 50	; 3: 131 197 50
x34424:	jmp strcpy	; 3: 233 180 215

strftime$100:	; PostCall 50

strftime$101:	; Goto 303
x34427:	jmp strftime$303	; 3: 233 231 3

strftime$102:	; CallHeader 50 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$103:	; Parameter 50 add 6
x34430:	mov [bp + 56], bp	; 3: 137 110 56
x34433:	add word [bp + 56], 30	; 4: 131 70 56 30

strftime$104:	; Deref £temporary3540 -> tp tp 8
x34437:	mov si, [bp + 12]	; 3: 139 118 12

strftime$105:	; SignedMultiply £temporary3542 £temporary3540 -> tp 2
x34440:	mov ax, [si + 8]	; 3: 139 68 8
x34443:	xor dx, dx	; 2: 49 210
x34445:	imul word [@8134$int2$2#]	; 4: 247 46 151 139

strftime$106:	; BinaryAdd £temporary3543 shortMonthList £temporary3542
x34449:	mov si, [bp + 18]	; 3: 139 118 18
x34452:	add si, ax	; 2: 1 198

strftime$107:	; Deref £temporary3541 -> £temporary3543 £temporary3543 0

strftime$108:	; Parameter 50 £temporary3541 -> £temporary3543 8
x34454:	mov ax, [si]	; 2: 139 4
x34456:	mov [bp + 58], ax	; 3: 137 70 58

strftime$109:	; Call 50 strcpy 0
x34459:	mov word [bp + 50], strftime$110	; 5: 199 70 50 169 134
x34464:	mov [bp + 52], bp	; 3: 137 110 52
x34467:	add bp, 50	; 3: 131 197 50
x34470:	jmp strcpy	; 3: 233 134 215

strftime$110:	; PostCall 50

strftime$111:	; Goto 303
x34473:	jmp strftime$303	; 3: 233 185 3

strftime$112:	; CallHeader 50 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$113:	; Parameter 50 add 6
x34476:	mov [bp + 56], bp	; 3: 137 110 56
x34479:	add word [bp + 56], 30	; 4: 131 70 56 30

strftime$114:	; Deref £temporary3545 -> tp tp 8
x34483:	mov si, [bp + 12]	; 3: 139 118 12

strftime$115:	; SignedMultiply £temporary3547 £temporary3545 -> tp 2
x34486:	mov ax, [si + 8]	; 3: 139 68 8
x34489:	xor dx, dx	; 2: 49 210
x34491:	imul word [@8142$int2$2#]	; 4: 247 46 153 139

strftime$116:	; BinaryAdd £temporary3548 longMonthList £temporary3547
x34495:	mov si, [bp + 22]	; 3: 139 118 22
x34498:	add si, ax	; 2: 1 198

strftime$117:	; Deref £temporary3546 -> £temporary3548 £temporary3548 0

strftime$118:	; Parameter 50 £temporary3546 -> £temporary3548 8
x34500:	mov ax, [si]	; 2: 139 4
x34502:	mov [bp + 58], ax	; 3: 137 70 58

strftime$119:	; Call 50 strcpy 0
x34505:	mov word [bp + 50], strftime$120	; 5: 199 70 50 215 134
x34510:	mov [bp + 52], bp	; 3: 137 110 52
x34513:	add bp, 50	; 3: 131 197 50
x34516:	jmp strcpy	; 3: 233 88 215

strftime$120:	; PostCall 50

strftime$121:	; Goto 303
x34519:	jmp strftime$303	; 3: 233 139 3

strftime$122:	; CallHeader 50 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$123:	; Parameter 50 add 6
x34522:	mov [bp + 56], bp	; 3: 137 110 56
x34525:	add word [bp + 56], 30	; 4: 131 70 56 30

strftime$124:	; Parameter 50 string_2502i2D2502i2D2502i202502i3A2502i3A2502i# 8
x34529:	mov word [bp + 58], @8148$string_2502i2D2502i2D2502i202502i3A2502i3A2502i#	; 5: 199 70 58 155 139

strftime$125:	; Deref £temporary3550 -> tp tp 10
x34534:	mov si, [bp + 12]	; 3: 139 118 12

strftime$126:	; BinaryAdd £temporary3551 £temporary3550 -> tp 1900
x34537:	mov ax, [si + 10]	; 3: 139 68 10
x34540:	add ax, 1900	; 3: 5 108 7

strftime$127:	; Parameter 50 £temporary3551 10
x34543:	mov [bp + 60], ax	; 3: 137 70 60

strftime$128:	; Deref £temporary3552 -> tp tp 8
x34546:	mov si, [bp + 12]	; 3: 139 118 12

strftime$129:	; BinaryAdd £temporary3553 £temporary3552 -> tp 1
x34549:	mov ax, [si + 8]	; 3: 139 68 8
x34552:	inc ax	; 1: 64

strftime$130:	; Parameter 50 £temporary3553 12
x34553:	mov [bp + 62], ax	; 3: 137 70 62

strftime$131:	; Deref £temporary3554 -> tp tp 6
x34556:	mov si, [bp + 12]	; 3: 139 118 12

strftime$132:	; Parameter 50 £temporary3554 -> tp 14
x34559:	mov ax, [si + 6]	; 3: 139 68 6
x34562:	mov [bp + 64], ax	; 3: 137 70 64

strftime$133:	; Deref £temporary3555 -> tp tp 4
x34565:	mov si, [bp + 12]	; 3: 139 118 12

strftime$134:	; Parameter 50 £temporary3555 -> tp 16
x34568:	mov ax, [si + 4]	; 3: 139 68 4
x34571:	mov [bp + 66], ax	; 3: 137 70 66

strftime$135:	; Deref £temporary3556 -> tp tp 2
x34574:	mov si, [bp + 12]	; 3: 139 118 12

strftime$136:	; Parameter 50 £temporary3556 -> tp 18
x34577:	mov ax, [si + 2]	; 3: 139 68 2
x34580:	mov [bp + 68], ax	; 3: 137 70 68

strftime$137:	; Deref £temporary3557 -> tp tp 0
x34583:	mov si, [bp + 12]	; 3: 139 118 12

strftime$138:	; Parameter 50 £temporary3557 -> tp 20
x34586:	mov ax, [si]	; 2: 139 4
x34588:	mov [bp + 70], ax	; 3: 137 70 70

strftime$139:	; Call 50 sprintf 0
x34591:	mov word [bp + 50], strftime$140	; 5: 199 70 50 50 135
x34596:	mov [bp + 52], bp	; 3: 137 110 52
x34599:	add bp, 50	; 3: 131 197 50
x34602:	mov di, bp	; 2: 137 239
x34604:	add di, 12	; 3: 131 199 12
x34607:	jmp sprintf	; 3: 233 212 252

strftime$140:	; PostCall 50

strftime$141:	; Goto 303
x34610:	jmp strftime$303	; 3: 233 48 3

strftime$142:	; CallHeader 50 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$143:	; Parameter 50 add 6
x34613:	mov [bp + 56], bp	; 3: 137 110 56
x34616:	add word [bp + 56], 30	; 4: 131 70 56 30

strftime$144:	; Parameter 50 string_2502i# 8
x34620:	mov word [bp + 58], @8164$string_2502i#	; 5: 199 70 58 185 139

strftime$145:	; Deref £temporary3559 -> tp tp 6
x34625:	mov si, [bp + 12]	; 3: 139 118 12

strftime$146:	; Parameter 50 £temporary3559 -> tp 10
x34628:	mov ax, [si + 6]	; 3: 139 68 6
x34631:	mov [bp + 60], ax	; 3: 137 70 60

strftime$147:	; Call 50 sprintf 0
x34634:	mov word [bp + 50], strftime$148	; 5: 199 70 50 93 135
x34639:	mov [bp + 52], bp	; 3: 137 110 52
x34642:	add bp, 50	; 3: 131 197 50
x34645:	mov di, bp	; 2: 137 239
x34647:	add di, 2	; 3: 131 199 2
x34650:	jmp sprintf	; 3: 233 169 252

strftime$148:	; PostCall 50

strftime$149:	; Goto 303
x34653:	jmp strftime$303	; 3: 233 5 3

strftime$150:	; CallHeader 50 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$151:	; Parameter 50 add 6
x34656:	mov [bp + 56], bp	; 3: 137 110 56
x34659:	add word [bp + 56], 30	; 4: 131 70 56 30

strftime$152:	; Parameter 50 string_2502i# 8
x34663:	mov word [bp + 58], @8169$string_2502i#	; 5: 199 70 58 190 139

strftime$153:	; Deref £temporary3561 -> tp tp 4
x34668:	mov si, [bp + 12]	; 3: 139 118 12

strftime$154:	; Parameter 50 £temporary3561 -> tp 10
x34671:	mov ax, [si + 4]	; 3: 139 68 4
x34674:	mov [bp + 60], ax	; 3: 137 70 60

strftime$155:	; Call 50 sprintf 0
x34677:	mov word [bp + 50], strftime$156	; 5: 199 70 50 136 135
x34682:	mov [bp + 52], bp	; 3: 137 110 52
x34685:	add bp, 50	; 3: 131 197 50
x34688:	mov di, bp	; 2: 137 239
x34690:	add di, 2	; 3: 131 199 2
x34693:	jmp sprintf	; 3: 233 126 252

strftime$156:	; PostCall 50

strftime$157:	; Goto 303
x34696:	jmp strftime$303	; 3: 233 218 2

strftime$158:	; CallHeader 50 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$159:	; Parameter 50 add 6
x34699:	mov [bp + 56], bp	; 3: 137 110 56
x34702:	add word [bp + 56], 30	; 4: 131 70 56 30

strftime$160:	; Parameter 50 string_2502i# 8
x34706:	mov word [bp + 58], @8174$string_2502i#	; 5: 199 70 58 195 139

strftime$161:	; Deref £temporary3563 -> tp tp 4
x34711:	mov si, [bp + 12]	; 3: 139 118 12

strftime$162:	; SignedModulo £temporary3564 £temporary3563 -> tp 12
x34714:	mov ax, [si + 4]	; 3: 139 68 4
x34717:	xor dx, dx	; 2: 49 210
x34719:	idiv word [@8177$int2$12#]	; 4: 247 62 200 139

strftime$163:	; Parameter 50 £temporary3564 10
x34723:	mov [bp + 60], dx	; 3: 137 86 60

strftime$164:	; Call 50 sprintf 0
x34726:	mov word [bp + 50], strftime$165	; 5: 199 70 50 185 135
x34731:	mov [bp + 52], bp	; 3: 137 110 52
x34734:	add bp, 50	; 3: 131 197 50
x34737:	mov di, bp	; 2: 137 239
x34739:	add di, 2	; 3: 131 199 2
x34742:	jmp sprintf	; 3: 233 77 252

strftime$165:	; PostCall 50

strftime$166:	; Goto 303
x34745:	jmp strftime$303	; 3: 233 169 2

strftime$167:	; CallHeader 50 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$168:	; Parameter 50 add 6
x34748:	mov [bp + 56], bp	; 3: 137 110 56
x34751:	add word [bp + 56], 30	; 4: 131 70 56 30

strftime$169:	; Parameter 50 string_2503i# 8
x34755:	mov word [bp + 58], @8182$string_2503i#	; 5: 199 70 58 202 139

strftime$170:	; Deref £temporary3566 -> tp tp 14
x34760:	mov si, [bp + 12]	; 3: 139 118 12

strftime$171:	; Parameter 50 £temporary3566 -> tp 10
x34763:	mov ax, [si + 14]	; 3: 139 68 14
x34766:	mov [bp + 60], ax	; 3: 137 70 60

strftime$172:	; Call 50 sprintf 0
x34769:	mov word [bp + 50], strftime$173	; 5: 199 70 50 228 135
x34774:	mov [bp + 52], bp	; 3: 137 110 52
x34777:	add bp, 50	; 3: 131 197 50
x34780:	mov di, bp	; 2: 137 239
x34782:	add di, 2	; 3: 131 199 2
x34785:	jmp sprintf	; 3: 233 34 252

strftime$173:	; PostCall 50

strftime$174:	; Goto 303
x34788:	jmp strftime$303	; 3: 233 126 2

strftime$175:	; CallHeader 50 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$176:	; Parameter 50 add 6
x34791:	mov [bp + 56], bp	; 3: 137 110 56
x34794:	add word [bp + 56], 30	; 4: 131 70 56 30

strftime$177:	; Parameter 50 string_2502i# 8
x34798:	mov word [bp + 58], @8187$string_2502i#	; 5: 199 70 58 207 139

strftime$178:	; Deref £temporary3568 -> tp tp 8
x34803:	mov si, [bp + 12]	; 3: 139 118 12

strftime$179:	; BinaryAdd £temporary3569 £temporary3568 -> tp 1
x34806:	mov ax, [si + 8]	; 3: 139 68 8
x34809:	inc ax	; 1: 64

strftime$180:	; Parameter 50 £temporary3569 10
x34810:	mov [bp + 60], ax	; 3: 137 70 60

strftime$181:	; Call 50 sprintf 0
x34813:	mov word [bp + 50], strftime$182	; 5: 199 70 50 16 136
x34818:	mov [bp + 52], bp	; 3: 137 110 52
x34821:	add bp, 50	; 3: 131 197 50
x34824:	mov di, bp	; 2: 137 239
x34826:	add di, 2	; 3: 131 199 2
x34829:	jmp sprintf	; 3: 233 246 251

strftime$182:	; PostCall 50

strftime$183:	; Goto 303
x34832:	jmp strftime$303	; 3: 233 82 2

strftime$184:	; CallHeader 50 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$185:	; Parameter 50 add 6
x34835:	mov [bp + 56], bp	; 3: 137 110 56
x34838:	add word [bp + 56], 30	; 4: 131 70 56 30

strftime$186:	; Parameter 50 string_2502i# 8
x34842:	mov word [bp + 58], @8195$string_2502i#	; 5: 199 70 58 212 139

strftime$187:	; Deref £temporary3571 -> tp tp 2
x34847:	mov si, [bp + 12]	; 3: 139 118 12

strftime$188:	; Parameter 50 £temporary3571 -> tp 10
x34850:	mov ax, [si + 2]	; 3: 139 68 2
x34853:	mov [bp + 60], ax	; 3: 137 70 60

strftime$189:	; Call 50 sprintf 0
x34856:	mov word [bp + 50], strftime$190	; 5: 199 70 50 59 136
x34861:	mov [bp + 52], bp	; 3: 137 110 52
x34864:	add bp, 50	; 3: 131 197 50
x34867:	mov di, bp	; 2: 137 239
x34869:	add di, 2	; 3: 131 199 2
x34872:	jmp sprintf	; 3: 233 203 251

strftime$190:	; PostCall 50

strftime$191:	; Goto 303
x34875:	jmp strftime$303	; 3: 233 39 2

strftime$192:	; CallHeader 50 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$193:	; Parameter 50 add 6
x34878:	mov [bp + 56], bp	; 3: 137 110 56
x34881:	add word [bp + 56], 30	; 4: 131 70 56 30

strftime$194:	; Parameter 50 string_25s# 8
x34885:	mov word [bp + 58], @8200$string_25s#	; 5: 199 70 58 217 139

strftime$195:	; Equal 198 index 0
x34890:	cmp word [bp + 24], 0	; 4: 131 126 24 0
x34894:	je strftime$198	; 2: 116 5

strftime$196:	; Assign £temporary3577 string_AM#
x34896:	mov ax, @8201$string_AM#	; 3: 184 220 139

strftime$197:	; Goto 199
x34899:	jmp strftime$199	; 2: 235 3

strftime$198:	; Assign £temporary3577 string_PM#
x34901:	mov ax, @8202$string_PM#	; 3: 184 223 139

strftime$199:	; Parameter 50 £temporary3577 10
x34904:	mov [bp + 60], ax	; 3: 137 70 60

strftime$200:	; Call 50 sprintf 0
x34907:	mov word [bp + 50], strftime$201	; 5: 199 70 50 110 136
x34912:	mov [bp + 52], bp	; 3: 137 110 52
x34915:	add bp, 50	; 3: 131 197 50
x34918:	mov di, bp	; 2: 137 239
x34920:	add di, 2	; 3: 131 199 2
x34923:	jmp sprintf	; 3: 233 152 251

strftime$201:	; PostCall 50

strftime$202:	; Goto 303
x34926:	jmp strftime$303	; 3: 233 244 1

strftime$203:	; CallHeader 50 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$204:	; Parameter 50 add 6
x34929:	mov [bp + 56], bp	; 3: 137 110 56
x34932:	add word [bp + 56], 30	; 4: 131 70 56 30

strftime$205:	; Parameter 50 string_2502i# 8
x34936:	mov word [bp + 58], @8214$string_2502i#	; 5: 199 70 58 226 139

strftime$206:	; Deref £temporary3579 -> tp tp 0
x34941:	mov si, [bp + 12]	; 3: 139 118 12

strftime$207:	; Parameter 50 £temporary3579 -> tp 10
x34944:	mov ax, [si]	; 2: 139 4
x34946:	mov [bp + 60], ax	; 3: 137 70 60

strftime$208:	; Call 50 sprintf 0
x34949:	mov word [bp + 50], strftime$209	; 5: 199 70 50 152 136
x34954:	mov [bp + 52], bp	; 3: 137 110 52
x34957:	add bp, 50	; 3: 131 197 50
x34960:	mov di, bp	; 2: 137 239
x34962:	add di, 2	; 3: 131 199 2
x34965:	jmp sprintf	; 3: 233 110 251

strftime$209:	; PostCall 50

strftime$210:	; Goto 303
x34968:	jmp strftime$303	; 3: 233 202 1

strftime$211:	; CallHeader 50 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$212:	; Parameter 50 add 6
x34971:	mov [bp + 56], bp	; 3: 137 110 56
x34974:	add word [bp + 56], 30	; 4: 131 70 56 30

strftime$213:	; Parameter 50 string_2502i# 8
x34978:	mov word [bp + 58], @8219$string_2502i#	; 5: 199 70 58 231 139

strftime$214:	; Parameter 50 weekNumberStartSunday 10
x34983:	mov ax, [bp + 26]	; 3: 139 70 26
x34986:	mov [bp + 60], ax	; 3: 137 70 60

strftime$215:	; Call 50 sprintf 0
x34989:	mov word [bp + 50], strftime$216	; 5: 199 70 50 192 136
x34994:	mov [bp + 52], bp	; 3: 137 110 52
x34997:	add bp, 50	; 3: 131 197 50
x35000:	mov di, bp	; 2: 137 239
x35002:	add di, 2	; 3: 131 199 2
x35005:	jmp sprintf	; 3: 233 70 251

strftime$216:	; PostCall 50

strftime$217:	; Goto 303
x35008:	jmp strftime$303	; 3: 233 162 1

strftime$218:	; CallHeader 50 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$219:	; Parameter 50 add 6
x35011:	mov [bp + 56], bp	; 3: 137 110 56
x35014:	add word [bp + 56], 30	; 4: 131 70 56 30

strftime$220:	; Parameter 50 string_2502i# 8
x35018:	mov word [bp + 58], @8223$string_2502i#	; 5: 199 70 58 236 139

strftime$221:	; Deref £temporary3582 -> tp tp 12
x35023:	mov si, [bp + 12]	; 3: 139 118 12

strftime$222:	; Parameter 50 £temporary3582 -> tp 10
x35026:	mov ax, [si + 12]	; 3: 139 68 12
x35029:	mov [bp + 60], ax	; 3: 137 70 60

strftime$223:	; Call 50 sprintf 0
x35032:	mov word [bp + 50], strftime$224	; 5: 199 70 50 235 136
x35037:	mov [bp + 52], bp	; 3: 137 110 52
x35040:	add bp, 50	; 3: 131 197 50
x35043:	mov di, bp	; 2: 137 239
x35045:	add di, 2	; 3: 131 199 2
x35048:	jmp sprintf	; 3: 233 27 251

strftime$224:	; PostCall 50

strftime$225:	; Goto 303
x35051:	jmp strftime$303	; 3: 233 119 1

strftime$226:	; CallHeader 50 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$227:	; Parameter 50 add 6
x35054:	mov [bp + 56], bp	; 3: 137 110 56
x35057:	add word [bp + 56], 30	; 4: 131 70 56 30

strftime$228:	; Parameter 50 string_2502i# 8
x35061:	mov word [bp + 58], @8228$string_2502i#	; 5: 199 70 58 241 139

strftime$229:	; Parameter 50 weekNumberStartMonday 10
x35066:	mov ax, [bp + 28]	; 3: 139 70 28
x35069:	mov [bp + 60], ax	; 3: 137 70 60

strftime$230:	; Call 50 sprintf 0
x35072:	mov word [bp + 50], strftime$231	; 5: 199 70 50 19 137
x35077:	mov [bp + 52], bp	; 3: 137 110 52
x35080:	add bp, 50	; 3: 131 197 50
x35083:	mov di, bp	; 2: 137 239
x35085:	add di, 2	; 3: 131 199 2
x35088:	jmp sprintf	; 3: 233 243 250

strftime$231:	; PostCall 50

strftime$232:	; Goto 303
x35091:	jmp strftime$303	; 3: 233 79 1

strftime$233:	; CallHeader 50 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$234:	; Parameter 50 add 6
x35094:	mov [bp + 56], bp	; 3: 137 110 56
x35097:	add word [bp + 56], 30	; 4: 131 70 56 30

strftime$235:	; Parameter 50 string_2502i3A2502i3A2502i# 8
x35101:	mov word [bp + 58], @8232$string_2502i3A2502i3A2502i#	; 5: 199 70 58 246 139

strftime$236:	; Deref £temporary3585 -> tp tp 4
x35106:	mov si, [bp + 12]	; 3: 139 118 12

strftime$237:	; Parameter 50 £temporary3585 -> tp 10
x35109:	mov ax, [si + 4]	; 3: 139 68 4
x35112:	mov [bp + 60], ax	; 3: 137 70 60

strftime$238:	; Deref £temporary3586 -> tp tp 2
x35115:	mov si, [bp + 12]	; 3: 139 118 12

strftime$239:	; Parameter 50 £temporary3586 -> tp 12
x35118:	mov ax, [si + 2]	; 3: 139 68 2
x35121:	mov [bp + 62], ax	; 3: 137 70 62

strftime$240:	; Deref £temporary3587 -> tp tp 0
x35124:	mov si, [bp + 12]	; 3: 139 118 12

strftime$241:	; Parameter 50 £temporary3587 -> tp 14
x35127:	mov ax, [si]	; 2: 139 4
x35129:	mov [bp + 64], ax	; 3: 137 70 64

strftime$242:	; Call 50 sprintf 0
x35132:	mov word [bp + 50], strftime$243	; 5: 199 70 50 79 137
x35137:	mov [bp + 52], bp	; 3: 137 110 52
x35140:	add bp, 50	; 3: 131 197 50
x35143:	mov di, bp	; 2: 137 239
x35145:	add di, 6	; 3: 131 199 6
x35148:	jmp sprintf	; 3: 233 183 250

strftime$243:	; PostCall 50

strftime$244:	; Goto 303
x35151:	jmp strftime$303	; 3: 233 19 1

strftime$245:	; CallHeader 50 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$246:	; Parameter 50 add 6
x35154:	mov [bp + 56], bp	; 3: 137 110 56
x35157:	add word [bp + 56], 30	; 4: 131 70 56 30

strftime$247:	; Parameter 50 string_2502i3A2502i3A2502i# 8
x35161:	mov word [bp + 58], @8239$string_2502i3A2502i3A2502i#	; 5: 199 70 58 5 140

strftime$248:	; Deref £temporary3589 -> tp tp 4
x35166:	mov si, [bp + 12]	; 3: 139 118 12

strftime$249:	; Parameter 50 £temporary3589 -> tp 10
x35169:	mov ax, [si + 4]	; 3: 139 68 4
x35172:	mov [bp + 60], ax	; 3: 137 70 60

strftime$250:	; Deref £temporary3590 -> tp tp 2
x35175:	mov si, [bp + 12]	; 3: 139 118 12

strftime$251:	; Parameter 50 £temporary3590 -> tp 12
x35178:	mov ax, [si + 2]	; 3: 139 68 2
x35181:	mov [bp + 62], ax	; 3: 137 70 62

strftime$252:	; Deref £temporary3591 -> tp tp 0
x35184:	mov si, [bp + 12]	; 3: 139 118 12

strftime$253:	; Parameter 50 £temporary3591 -> tp 14
x35187:	mov ax, [si]	; 2: 139 4
x35189:	mov [bp + 64], ax	; 3: 137 70 64

strftime$254:	; Call 50 sprintf 0
x35192:	mov word [bp + 50], strftime$255	; 5: 199 70 50 139 137
x35197:	mov [bp + 52], bp	; 3: 137 110 52
x35200:	add bp, 50	; 3: 131 197 50
x35203:	mov di, bp	; 2: 137 239
x35205:	add di, 6	; 3: 131 199 6
x35208:	jmp sprintf	; 3: 233 123 250

strftime$255:	; PostCall 50

strftime$256:	; Goto 303
x35211:	jmp strftime$303	; 3: 233 215 0

strftime$257:	; CallHeader 50 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$258:	; Parameter 50 add 6
x35214:	mov [bp + 56], bp	; 3: 137 110 56
x35217:	add word [bp + 56], 30	; 4: 131 70 56 30

strftime$259:	; Parameter 50 string_2502i# 8
x35221:	mov word [bp + 58], @8246$string_2502i#	; 5: 199 70 58 20 140

strftime$260:	; Deref £temporary3593 -> tp tp 10
x35226:	mov si, [bp + 12]	; 3: 139 118 12

strftime$261:	; SignedModulo £temporary3594 £temporary3593 -> tp 100
x35229:	mov ax, [si + 10]	; 3: 139 68 10
x35232:	xor dx, dx	; 2: 49 210
x35234:	idiv word [@8249$int2$100#]	; 4: 247 62 25 140

strftime$262:	; Parameter 50 £temporary3594 10
x35238:	mov [bp + 60], dx	; 3: 137 86 60

strftime$263:	; Call 50 sprintf 0
x35241:	mov word [bp + 50], strftime$264	; 5: 199 70 50 188 137
x35246:	mov [bp + 52], bp	; 3: 137 110 52
x35249:	add bp, 50	; 3: 131 197 50
x35252:	mov di, bp	; 2: 137 239
x35254:	add di, 2	; 3: 131 199 2
x35257:	jmp sprintf	; 3: 233 74 250

strftime$264:	; PostCall 50

strftime$265:	; Goto 303
x35260:	jmp strftime$303	; 3: 233 166 0

strftime$266:	; CallHeader 50 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$267:	; Parameter 50 add 6
x35263:	mov [bp + 56], bp	; 3: 137 110 56
x35266:	add word [bp + 56], 30	; 4: 131 70 56 30

strftime$268:	; Parameter 50 string_2502i# 8
x35270:	mov word [bp + 58], @8254$string_2502i#	; 5: 199 70 58 27 140

strftime$269:	; Deref £temporary3596 -> tp tp 10
x35275:	mov si, [bp + 12]	; 3: 139 118 12

strftime$270:	; BinaryAdd £temporary3597 £temporary3596 -> tp 1900
x35278:	mov ax, [si + 10]	; 3: 139 68 10
x35281:	add ax, 1900	; 3: 5 108 7

strftime$271:	; Parameter 50 £temporary3597 10
x35284:	mov [bp + 60], ax	; 3: 137 70 60

strftime$272:	; Call 50 sprintf 0
x35287:	mov word [bp + 50], strftime$273	; 5: 199 70 50 234 137
x35292:	mov [bp + 52], bp	; 3: 137 110 52
x35295:	add bp, 50	; 3: 131 197 50
x35298:	mov di, bp	; 2: 137 239
x35300:	add di, 2	; 3: 131 199 2
x35303:	jmp sprintf	; 3: 233 28 250

strftime$273:	; PostCall 50

strftime$274:	; Goto 303
x35306:	jmp strftime$303	; 2: 235 121

strftime$275:	; CallHeader 50 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$276:	; Parameter 50 add 6
x35308:	mov [bp + 56], bp	; 3: 137 110 56
x35311:	add word [bp + 56], 30	; 4: 131 70 56 30

strftime$277:	; Deref £temporary3599 -> tp tp 16
x35315:	mov si, [bp + 12]	; 3: 139 118 12

strftime$278:	; Equal 281 £temporary3599 -> tp 0
x35318:	cmp word [si + 16], 0	; 4: 131 124 16 0
x35322:	je strftime$281	; 2: 116 5

strftime$279:	; Assign £temporary3604 string_summer#
x35324:	mov ax, @8263$string_summer#	; 3: 184 32 140

strftime$280:	; Goto 282
x35327:	jmp strftime$282	; 2: 235 3

strftime$281:	; Assign £temporary3604 string_winter#
x35329:	mov ax, @8264$string_winter#	; 3: 184 39 140

strftime$282:	; Parameter 50 £temporary3604 8
x35332:	mov [bp + 58], ax	; 3: 137 70 58

strftime$283:	; Call 50 strcpy 0
x35335:	mov word [bp + 50], strftime$284	; 5: 199 70 50 21 138
x35340:	mov [bp + 52], bp	; 3: 137 110 52
x35343:	add bp, 50	; 3: 131 197 50
x35346:	jmp strcpy	; 3: 233 26 212

strftime$284:	; PostCall 50

strftime$285:	; Goto 303
x35349:	jmp strftime$303	; 2: 235 78

strftime$286:	; CallHeader 50 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$287:	; Parameter 50 add 6
x35351:	mov [bp + 56], bp	; 3: 137 110 56
x35354:	add word [bp + 56], 30	; 4: 131 70 56 30

strftime$288:	; Parameter 50 string_25# 8
x35358:	mov word [bp + 58], @8276$string_25#	; 5: 199 70 58 46 140

strftime$289:	; Call 50 strcpy 0
x35363:	mov word [bp + 50], strftime$290	; 5: 199 70 50 49 138
x35368:	mov [bp + 52], bp	; 3: 137 110 52
x35371:	add bp, 50	; 3: 131 197 50
x35374:	jmp strcpy	; 3: 233 254 211

strftime$290:	; PostCall 50

strftime$291:	; CallHeader 50 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$292:	; Parameter 50 add 6
x35377:	mov [bp + 56], bp	; 3: 137 110 56
x35380:	add word [bp + 56], 30	; 4: 131 70 56 30

strftime$293:	; Parameter 50 string_# 8
x35384:	mov word [bp + 58], @8278$string_#	; 5: 199 70 58 48 140

strftime$294:	; Call 50 strcpy 0
x35389:	mov word [bp + 50], strftime$295	; 5: 199 70 50 75 138
x35394:	mov [bp + 52], bp	; 3: 137 110 52
x35397:	add bp, 50	; 3: 131 197 50
x35400:	jmp strcpy	; 3: 233 228 211

strftime$295:	; PostCall 50

strftime$296:	; Goto 303
x35403:	jmp strftime$303	; 2: 235 24

strftime$297:	; Deref £temporary3608 -> add add 0
x35405:	mov si, bp	; 2: 137 238
x35407:	add si, 30	; 3: 131 198 30

strftime$298:	; BinaryAdd £temporary3610 format index
x35410:	mov di, [bp + 10]	; 3: 139 126 10
x35413:	add di, [bp + 24]	; 3: 3 126 24

strftime$299:	; Deref £temporary3609 -> £temporary3610 £temporary3610 0

strftime$300:	; Assign £temporary3608 -> add £temporary3609 -> £temporary3610
x35416:	mov al, [di]	; 2: 138 5
x35418:	mov [si], al	; 2: 136 4

strftime$301:	; Deref £temporary3611 -> add add 1
x35420:	mov si, bp	; 2: 137 238
x35422:	add si, 30	; 3: 131 198 30

strftime$302:	; Assign £temporary3611 -> add 0
x35425:	mov byte [si + 1], 0	; 4: 198 68 1 0

strftime$303:	; CallHeader 50 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$304:	; Parameter 50 result 6
x35429:	mov ax, [bp + 6]	; 3: 139 70 6
x35432:	mov [bp + 56], ax	; 3: 137 70 56

strftime$305:	; Call 50 strlen 0
x35435:	mov word [bp + 50], strftime$306	; 5: 199 70 50 121 138
x35440:	mov [bp + 52], bp	; 3: 137 110 52
x35443:	add bp, 50	; 3: 131 197 50
x35446:	jmp strlen	; 3: 233 115 2

strftime$306:	; PostCall 50

strftime$307:	; GetReturnValue £temporary3612

strftime$308:	; CallHeader 50 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
x35449:	mov [bp + 50], bx	; 3: 137 94 50

strftime$309:	; Parameter 50 add 6
x35452:	mov [bp + 58], bp	; 3: 137 110 58
x35455:	add word [bp + 58], 30	; 4: 131 70 58 30

strftime$310:	; Call 50 strlen 0
x35459:	mov word [bp + 52], strftime$311	; 5: 199 70 52 145 138
x35464:	mov [bp + 54], bp	; 3: 137 110 54
x35467:	add bp, 52	; 3: 131 197 52
x35470:	jmp strlen	; 3: 233 91 2

strftime$311:	; PostCall 50
x35473:	mov ax, bx	; 2: 137 216
x35475:	mov bx, [bp + 50]	; 3: 139 94 50

strftime$312:	; GetReturnValue £temporary3613

strftime$313:	; BinaryAdd £temporary3614 £temporary3612 £temporary3613
x35478:	add bx, ax	; 2: 1 195

strftime$314:	; SignedGreaterThanEqual 322 £temporary3614 maxSize
x35480:	cmp bx, [bp + 8]	; 3: 59 94 8
x35483:	jge strftime$322	; 2: 125 33

strftime$315:	; CallHeader 50 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$316:	; Parameter 50 result 6
x35485:	mov ax, [bp + 6]	; 3: 139 70 6
x35488:	mov [bp + 56], ax	; 3: 137 70 56

strftime$317:	; Parameter 50 add 8
x35491:	mov [bp + 58], bp	; 3: 137 110 58
x35494:	add word [bp + 58], 30	; 4: 131 70 58 30

strftime$318:	; Call 50 strcat 0
x35498:	mov word [bp + 50], strftime$319	; 5: 199 70 50 184 138
x35503:	mov [bp + 52], bp	; 3: 137 110 52
x35506:	add bp, 50	; 3: 131 197 50
x35509:	jmp strcat	; 3: 233 87 2

strftime$319:	; PostCall 50

strftime$320:	; Increment index
x35512:	inc word [bp + 24]	; 3: 255 70 24

strftime$321:	; Goto 49
x35515:	jmp strftime$49	; 3: 233 184 250

strftime$322:	; CallHeader 24 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$323:	; Parameter 24 result 6
x35518:	mov ax, [bp + 6]	; 3: 139 70 6
x35521:	mov [bp + 30], ax	; 3: 137 70 30

strftime$324:	; Call 24 strlen 0
x35524:	mov word [bp + 24], strftime$325	; 5: 199 70 24 210 138
x35529:	mov [bp + 26], bp	; 3: 137 110 26
x35532:	add bp, 24	; 3: 131 197 24
x35535:	jmp strlen	; 3: 233 26 2

strftime$325:	; PostCall 24

strftime$326:	; GetReturnValue £temporary3617

strftime$327:	; SetReturnValue £temporary3617

strftime$328:	; Return £temporary3617
x35538:	mov ax, [bp]	; 3: 139 70 0
x35541:	mov di, [bp + 4]	; 3: 139 126 4
x35544:	mov bp, [bp + 2]	; 3: 139 110 2
x35547:	jmp ax	; 2: 255 224

strftime$329:	; FunctionEnd strftime

@7888$g_longDayList:
x35549:	dw @7881$string_Sunday# ; 2: 235 138
x35551:	dw @7882$string_Monday# ; 2: 242 138
x35553:	dw @7883$string_Tuesday# ; 2: 249 138
x35555:	dw @7884$string_Wednesday# ; 2: 1 139
x35557:	dw @7885$string_Thursday# ; 2: 11 139
x35559:	dw @7886$string_Friday# ; 2: 20 139
x35561:	dw @7887$string_Saturday# ; 2: 27 139

@7881$string_Sunday#:
x35563:	db "Sunday", 0	; 7: 83 117 110 100 97 121 0

@7882$string_Monday#:
x35570:	db "Monday", 0	; 7: 77 111 110 100 97 121 0

@7883$string_Tuesday#:
x35577:	db "Tuesday", 0	; 8: 84 117 101 115 100 97 121 0

@7884$string_Wednesday#:
x35585:	db "Wednesday", 0	; 10: 87 101 100 110 101 115 100 97 121 0

@7885$string_Thursday#:
x35595:	db "Thursday", 0	; 9: 84 104 117 114 115 100 97 121 0

@7886$string_Friday#:
x35604:	db "Friday", 0	; 7: 70 114 105 100 97 121 0

@7887$string_Saturday#:
x35611:	db "Saturday", 0	; 9: 83 97 116 117 114 100 97 121 0

@7914$g_longMonthList:
x35620:	dw @7902$string_January# ; 2: 60 139
x35622:	dw @7903$string_February# ; 2: 68 139
x35624:	dw @7904$string_March# ; 2: 77 139
x35626:	dw @7905$string_April# ; 2: 83 139
x35628:	dw @7906$string_May# ; 2: 89 139
x35630:	dw @7907$string_June# ; 2: 93 139
x35632:	dw @7908$string_July# ; 2: 98 139
x35634:	dw @7909$string_August# ; 2: 103 139
x35636:	dw @7910$string_September# ; 2: 110 139
x35638:	dw @7911$string_October# ; 2: 120 139
x35640:	dw @7912$string_November# ; 2: 128 139
x35642:	dw @7913$string_December# ; 2: 137 139

@7902$string_January#:
x35644:	db "January", 0	; 8: 74 97 110 117 97 114 121 0

@7903$string_February#:
x35652:	db "February", 0	; 9: 70 101 98 114 117 97 114 121 0

@7904$string_March#:
x35661:	db "March", 0	; 6: 77 97 114 99 104 0

@7905$string_April#:
x35667:	db "April", 0	; 6: 65 112 114 105 108 0

@7906$string_May#:
x35673:	db "May", 0	; 4: 77 97 121 0

@7907$string_June#:
x35677:	db "June", 0	; 5: 74 117 110 101 0

@7908$string_July#:
x35682:	db "July", 0	; 5: 74 117 108 121 0

@7909$string_August#:
x35687:	db "August", 0	; 7: 65 117 103 117 115 116 0

@7910$string_September#:
x35694:	db "September", 0	; 10: 83 101 112 116 101 109 98 101 114 0

@7911$string_October#:
x35704:	db "October", 0	; 8: 79 99 116 111 98 101 114 0

@7912$string_November#:
x35712:	db "November", 0	; 9: 78 111 118 101 109 98 101 114 0

@7913$string_December#:
x35721:	db "December", 0	; 9: 68 101 99 101 109 98 101 114 0

@8078$string_#:
x35730:	db 0	; 1: 0

@8118$int2$2#:
x35731:	dw 2	; 2: 2 0

@8126$int2$2#:
x35733:	dw 2	; 2: 2 0

@8134$int2$2#:
x35735:	dw 2	; 2: 2 0

@8142$int2$2#:
x35737:	dw 2	; 2: 2 0

@8148$string_2502i2D2502i2D2502i202502i3A2502i3A2502i#:
x35739:	db "%02i-%02i-%02i %02i:%02i:%02i", 0	; 30: 37 48 50 105 45 37 48 50 105 45 37 48 50 105 32 37 48 50 105 58 37 48 50 105 58 37 48 50 105 0

@8164$string_2502i#:
x35769:	db "%02i", 0	; 5: 37 48 50 105 0

@8169$string_2502i#:
x35774:	db "%02i", 0	; 5: 37 48 50 105 0

@8174$string_2502i#:
x35779:	db "%02i", 0	; 5: 37 48 50 105 0

@8177$int2$12#:
x35784:	dw 12	; 2: 12 0

@8182$string_2503i#:
x35786:	db "%03i", 0	; 5: 37 48 51 105 0

@8187$string_2502i#:
x35791:	db "%02i", 0	; 5: 37 48 50 105 0

@8195$string_2502i#:
x35796:	db "%02i", 0	; 5: 37 48 50 105 0

@8200$string_25s#:
x35801:	db "%s", 0	; 3: 37 115 0

@8201$string_AM#:
x35804:	db "AM", 0	; 3: 65 77 0

@8202$string_PM#:
x35807:	db "PM", 0	; 3: 80 77 0

@8214$string_2502i#:
x35810:	db "%02i", 0	; 5: 37 48 50 105 0

@8219$string_2502i#:
x35815:	db "%02i", 0	; 5: 37 48 50 105 0

@8223$string_2502i#:
x35820:	db "%02i", 0	; 5: 37 48 50 105 0

@8228$string_2502i#:
x35825:	db "%02i", 0	; 5: 37 48 50 105 0

@8232$string_2502i3A2502i3A2502i#:
x35830:	db "%02i:%02i:%02i", 0	; 15: 37 48 50 105 58 37 48 50 105 58 37 48 50 105 0

@8239$string_2502i3A2502i3A2502i#:
x35845:	db "%02i:%02i:%02i", 0	; 15: 37 48 50 105 58 37 48 50 105 58 37 48 50 105 0

@8246$string_2502i#:
x35860:	db "%02i", 0	; 5: 37 48 50 105 0

@8249$int2$100#:
x35865:	dw 100	; 2: 100 0

@8254$string_2502i#:
x35867:	db "%02i", 0	; 5: 37 48 50 105 0

@8263$string_summer#:
x35872:	db "summer", 0	; 7: 115 117 109 109 101 114 0

@8264$string_winter#:
x35879:	db "winter", 0	; 7: 119 105 110 116 101 114 0

@8276$string_25#:
x35886:	db "%", 0	; 2: 37 0

@8278$string_#:
x35888:	db 0	; 1: 0

getWeekNumber:	; Deref £temporary3473 -> tp tp 10
x35889:	mov si, [bp + 6]	; 3: 139 118 6

getWeekNumber$1:	; BinarySubtract £temporary3474 £temporary3473 -> tp 69
x35892:	mov ax, [si + 10]	; 3: 139 68 10
x35895:	sub ax, 69	; 3: 131 232 69

getWeekNumber$2:	; SignedDivide £temporary3475 £temporary3474 4
x35898:	xor dx, dx	; 2: 49 210
x35900:	idiv word [@7983$int2$4#]	; 4: 247 62 228 140

getWeekNumber$3:	; IntegralToIntegral £temporary3476 £temporary3475
x35904:	and eax, 65535	; 6: 102 37 255 255 0 0
x35910:	cmp ax, 0	; 3: 131 248 0
x35913:	jge getWeekNumber$4	; 2: 125 5
x35915:	neg ax	; 2: 247 216
x35917:	neg eax	; 3: 102 247 216

getWeekNumber$4:	; Assign leapDays £temporary3476
x35920:	mov [bp + 8], eax	; 4: 102 137 70 8

getWeekNumber$5:	; Deref £temporary3477 -> tp tp 10
x35924:	mov si, [bp + 6]	; 3: 139 118 6

getWeekNumber$6:	; BinarySubtract £temporary3478 £temporary3477 -> tp 70
x35927:	mov ax, [si + 10]	; 3: 139 68 10
x35930:	sub ax, 70	; 3: 131 232 70

getWeekNumber$7:	; SignedMultiply £temporary3479 £temporary3478 365
x35933:	xor dx, dx	; 2: 49 210
x35935:	imul word [@7992$int2$365#]	; 4: 247 46 230 140

getWeekNumber$8:	; IntegralToIntegral £temporary3480 £temporary3479
x35939:	and eax, 65535	; 6: 102 37 255 255 0 0
x35945:	cmp ax, 0	; 3: 131 248 0
x35948:	jge getWeekNumber$9	; 2: 125 5
x35950:	neg ax	; 2: 247 216
x35952:	neg eax	; 3: 102 247 216

getWeekNumber$9:	; BinaryAdd £temporary3481 £temporary3480 leapDays
x35955:	add eax, [bp + 8]	; 4: 102 3 70 8

getWeekNumber$10:	; IntegralToIntegral £temporary3482 £temporary3481
x35959:	cmp eax, 0	; 4: 102 131 248 0
x35963:	jge getWeekNumber$11	; 2: 125 5
x35965:	neg eax	; 3: 102 247 216
x35968:	neg ax	; 2: 247 216

getWeekNumber$11:	; Assign totalDays £temporary3482
x35970:	mov [bp + 12], ax	; 3: 137 70 12

getWeekNumber$12:	; SignedGreaterThanEqual 15 totalDays 3
x35973:	cmp word [bp + 12], 3	; 4: 131 126 12 3
x35977:	jge getWeekNumber$15	; 2: 125 11

getWeekNumber$13:	; BinaryAdd weekDayJanuaryFirst totalDays 4
x35979:	mov ax, [bp + 12]	; 3: 139 70 12
x35982:	add ax, 4	; 3: 131 192 4
x35985:	mov [bp + 14], ax	; 3: 137 70 14

getWeekNumber$14:	; Goto 17
x35988:	jmp getWeekNumber$17	; 2: 235 15

getWeekNumber$15:	; BinarySubtract £temporary3485 totalDays 3
x35990:	mov ax, [bp + 12]	; 3: 139 70 12
x35993:	sub ax, 3	; 3: 131 232 3

getWeekNumber$16:	; SignedModulo weekDayJanuaryFirst £temporary3485 7
x35996:	xor dx, dx	; 2: 49 210
x35998:	idiv word [@8009$int2$7#]	; 4: 247 62 232 140
x36002:	mov [bp + 14], dx	; 3: 137 86 14

getWeekNumber$17:	; BinarySubtract firstWeekSize 7 weekDayJanuaryFirst
x36005:	mov ax, 7	; 3: 184 7 0
x36008:	sub ax, [bp + 14]	; 3: 43 70 14
x36011:	mov [bp + 16], ax	; 3: 137 70 16

getWeekNumber$18:	; Deref £temporary3488 -> tp tp 14
x36014:	mov si, [bp + 6]	; 3: 139 118 6

getWeekNumber$19:	; SignedGreaterThanEqual 22 £temporary3488 -> tp firstWeekSize
x36017:	mov ax, [bp + 16]	; 3: 139 70 16
x36020:	cmp [si + 14], ax	; 3: 57 68 14
x36023:	jge getWeekNumber$22	; 2: 125 14

getWeekNumber$20:	; SetReturnValue 0
x36025:	mov bx, 0	; 3: 187 0 0

getWeekNumber$21:	; Return 0
x36028:	mov ax, [bp]	; 3: 139 70 0
x36031:	mov di, [bp + 4]	; 3: 139 126 4
x36034:	mov bp, [bp + 2]	; 3: 139 110 2
x36037:	jmp ax	; 2: 255 224

getWeekNumber$22:	; Deref £temporary3490 -> tp tp 14
x36039:	mov si, [bp + 6]	; 3: 139 118 6

getWeekNumber$23:	; BinarySubtract £temporary3491 £temporary3490 -> tp firstWeekSize
x36042:	mov ax, [si + 14]	; 3: 139 68 14
x36045:	sub ax, [bp + 16]	; 3: 43 70 16

getWeekNumber$24:	; SignedDivide £temporary3492 £temporary3491 7
x36048:	xor dx, dx	; 2: 49 210
x36050:	idiv word [@8022$int2$7#]	; 4: 247 62 234 140

getWeekNumber$25:	; BinaryAdd £temporary3493 £temporary3492 1
x36054:	inc ax	; 1: 64

getWeekNumber$26:	; SetReturnValue £temporary3493
x36055:	mov bx, ax	; 2: 137 195

getWeekNumber$27:	; Return £temporary3493
x36057:	mov ax, [bp]	; 3: 139 70 0
x36060:	mov di, [bp + 4]	; 3: 139 126 4
x36063:	mov bp, [bp + 2]	; 3: 139 110 2
x36066:	jmp ax	; 2: 255 224

getWeekNumber$28:	; FunctionEnd getWeekNumber

@7983$int2$4#:
x36068:	dw 4	; 2: 4 0

@7992$int2$365#:
x36070:	dw 365	; 2: 109 1

@8009$int2$7#:
x36072:	dw 7	; 2: 7 0

@8022$int2$7#:
x36074:	dw 7	; 2: 7 0

strlen:	; Assign index 0
x36076:	mov word [bp + 8], 0	; 5: 199 70 8 0 0

strlen$1:	; BinaryAdd £temporary3865 string index
x36081:	mov si, [bp + 6]	; 3: 139 118 6
x36084:	add si, [bp + 8]	; 3: 3 118 8

strlen$2:	; Deref £temporary3864 -> £temporary3865 £temporary3865 0

strlen$3:	; Equal 6 £temporary3864 -> £temporary3865 0
x36087:	cmp byte [si], 0	; 3: 128 60 0
x36090:	je strlen$6	; 2: 116 5

strlen$4:	; Increment index
x36092:	inc word [bp + 8]	; 3: 255 70 8

strlen$5:	; Goto 1
x36095:	jmp strlen$1	; 2: 235 240

strlen$6:	; SetReturnValue index
x36097:	mov bx, [bp + 8]	; 3: 139 94 8

strlen$7:	; Return index
x36100:	mov ax, [bp]	; 3: 139 70 0
x36103:	mov di, [bp + 4]	; 3: 139 126 4
x36106:	mov bp, [bp + 2]	; 3: 139 110 2
x36109:	jmp ax	; 2: 255 224

strlen$8:	; FunctionEnd strlen

strcat:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strcat$1:	; Parameter 12 target 6
x36111:	mov ax, [bp + 6]	; 3: 139 70 6
x36114:	mov [bp + 18], ax	; 3: 137 70 18

strcat$2:	; Call 12 strlen 0
x36117:	mov word [bp + 12], strcat$3	; 5: 199 70 12 35 141
x36122:	mov [bp + 14], bp	; 3: 137 110 14
x36125:	add bp, 12	; 3: 131 197 12
x36128:	nop	; 1: 144
x36129:	jmp strlen	; 2: 235 201

strcat$3:	; PostCall 12

strcat$4:	; GetReturnValue £temporary3721

strcat$5:	; Assign targetLength £temporary3721
x36131:	mov [bp + 12], bx	; 3: 137 94 12

strcat$6:	; Assign index 0
x36134:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

strcat$7:	; BinaryAdd £temporary3723 source index
x36139:	mov si, [bp + 8]	; 3: 139 118 8
x36142:	add si, [bp + 10]	; 3: 3 118 10

strcat$8:	; Deref £temporary3722 -> £temporary3723 £temporary3723 0

strcat$9:	; Equal 18 £temporary3722 -> £temporary3723 0
x36145:	cmp byte [si], 0	; 3: 128 60 0
x36148:	je strcat$18	; 2: 116 26

strcat$10:	; BinaryAdd £temporary3726 targetLength index
x36150:	mov ax, [bp + 12]	; 3: 139 70 12
x36153:	add ax, [bp + 10]	; 3: 3 70 10

strcat$11:	; BinaryAdd £temporary3728 target £temporary3726
x36156:	mov si, [bp + 6]	; 3: 139 118 6
x36159:	add si, ax	; 2: 1 198

strcat$12:	; Deref £temporary3727 -> £temporary3728 £temporary3728 0

strcat$13:	; BinaryAdd £temporary3730 source index
x36161:	mov di, [bp + 8]	; 3: 139 126 8
x36164:	add di, [bp + 10]	; 3: 3 126 10

strcat$14:	; Deref £temporary3729 -> £temporary3730 £temporary3730 0

strcat$15:	; Assign £temporary3727 -> £temporary3728 £temporary3729 -> £temporary3730
x36167:	mov al, [di]	; 2: 138 5
x36169:	mov [si], al	; 2: 136 4

strcat$16:	; Increment index
x36171:	inc word [bp + 10]	; 3: 255 70 10

strcat$17:	; Goto 7
x36174:	jmp strcat$7	; 2: 235 219

strcat$18:	; BinaryAdd £temporary3731 targetLength index
x36176:	mov ax, [bp + 12]	; 3: 139 70 12
x36179:	add ax, [bp + 10]	; 3: 3 70 10

strcat$19:	; BinaryAdd £temporary3733 target £temporary3731
x36182:	mov si, [bp + 6]	; 3: 139 118 6
x36185:	add si, ax	; 2: 1 198

strcat$20:	; Deref £temporary3732 -> £temporary3733 £temporary3733 0

strcat$21:	; Assign £temporary3732 -> £temporary3733 0
x36187:	mov byte [si], 0	; 3: 198 4 0

strcat$22:	; SetReturnValue target
x36190:	mov bx, [bp + 6]	; 3: 139 94 6

strcat$23:	; Return target
x36193:	mov ax, [bp]	; 3: 139 70 0
x36196:	mov di, [bp + 4]	; 3: 139 126 4
x36199:	mov bp, [bp + 2]	; 3: 139 110 2
x36202:	jmp ax	; 2: 255 224

strcat$24:	; FunctionEnd strcat

assert_test:	; Assign n 1
x36204:	mov word [bp + 6], 1	; 5: 199 70 6 1 0

assert_test$1:	; Equal 13 n 1
x36209:	cmp word [bp + 6], 1	; 4: 131 126 6 1
x36213:	je assert_test$13	; 2: 116 59

assert_test$2:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

assert_test$3:	; Parameter 8 stderr 6
x36215:	mov ax, [stderr]	; 3: 161 121 77
x36218:	mov [bp + 14], ax	; 3: 137 70 14

assert_test$4:	; Parameter 8 string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A# 8
x36221:	mov word [bp + 16], @9614$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#	; 5: 199 70 16 189 141

assert_test$5:	; Parameter 8 string_n203D3D201# 10
x36226:	mov word [bp + 18], @9615$string_n203D3D201#	; 5: 199 70 18 235 141

assert_test$6:	; Parameter 8 string_C3A5CUsers5CStefa5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CAssertTest2Ec# 12
x36231:	mov word [bp + 20], @9616$string_C3A5CUsers5CStefa5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CAssertTest2Ec#	; 5: 199 70 20 242 141

assert_test$7:	; Parameter 8 8 14
x36236:	mov word [bp + 22], 8	; 5: 199 70 22 8 0

assert_test$8:	; Call 8 fprintf 0
x36241:	mov word [bp + 8], assert_test$9	; 5: 199 70 8 164 141
x36246:	mov [bp + 10], bp	; 3: 137 110 10
x36249:	add bp, 8	; 3: 131 197 8
x36252:	mov di, bp	; 2: 137 239
x36254:	add di, 6	; 3: 131 199 6
x36257:	jmp fprintf	; 3: 233 199 208

assert_test$9:	; PostCall 8

assert_test$10:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

assert_test$11:	; Call 8 abort 0
x36260:	mov word [bp + 8], assert_test$12	; 5: 199 70 8 178 141
x36265:	mov [bp + 10], bp	; 3: 137 110 10
x36268:	add bp, 8	; 3: 131 197 8
x36271:	jmp abort	; 3: 233 244 208

assert_test$12:	; PostCall 8

assert_test$13:	; Return 0
x36274:	mov ax, [bp]	; 3: 139 70 0
x36277:	mov di, [bp + 4]	; 3: 139 126 4
x36280:	mov bp, [bp + 2]	; 3: 139 110 2
x36283:	jmp ax	; 2: 255 224

assert_test$14:	; FunctionEnd assert_test

@9614$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#:
x36285:	db "Assertion failed: ", 34, "%s", 34, " in file %s at line %i", 10, 0	; 46: 65 115 115 101 114 116 105 111 110 32 102 97 105 108 101 100 58 32 34 37 115 34 32 105 110 32 102 105 108 101 32 37 115 32 97 116 32 108 105 110 101 32 37 105 10 0

@9615$string_n203D3D201#:
x36331:	db "n == 1", 0	; 7: 110 32 61 61 32 49 0

@9616$string_C3A5CUsers5CStefa5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CAssertTest2Ec#:
x36338:	db "C:\Users\Stefa\Documents\vagrant\homestead\code\code\AssertTest.c", 0	; 66: 67 58 92 85 115 101 114 115 92 83 116 101 102 97 92 68 111 99 117 109 101 110 116 115 92 118 97 103 114 97 110 116 92 104 111 109 101 115 116 101 97 100 92 99 111 100 101 92 99 111 100 101 92 65 115 115 101 114 116 84 101 115 116 46 99 0

malloc_test:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

malloc_test$1:	; Parameter 6 96 6
x36404:	mov word [bp + 12], 96	; 5: 199 70 12 96 0

malloc_test$2:	; Call 6 malloc 0
x36409:	mov word [bp + 6], malloc_test$3	; 5: 199 70 6 71 142
x36414:	mov [bp + 8], bp	; 3: 137 110 8
x36417:	add bp, 6	; 3: 131 197 6
x36420:	jmp malloc	; 3: 233 218 228

malloc_test$3:	; PostCall 6

malloc_test$4:	; GetReturnValue £temporary5951

malloc_test$5:	; Assign b £temporary5951
x36423:	mov [bp + 6], bx	; 3: 137 94 6

malloc_test$6:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

malloc_test$7:	; Parameter 8 96 6
x36426:	mov word [bp + 14], 96	; 5: 199 70 14 96 0

malloc_test$8:	; Call 8 malloc 0
x36431:	mov word [bp + 8], malloc_test$9	; 5: 199 70 8 93 142
x36436:	mov [bp + 10], bp	; 3: 137 110 10
x36439:	add bp, 8	; 3: 131 197 8
x36442:	jmp malloc	; 3: 233 196 228

malloc_test$9:	; PostCall 8

malloc_test$10:	; GetReturnValue £temporary5952

malloc_test$11:	; Assign c £temporary5952
x36445:	mov [bp + 8], bx	; 3: 137 94 8

malloc_test$12:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

malloc_test$13:	; Parameter 10 96 6
x36448:	mov word [bp + 16], 96	; 5: 199 70 16 96 0

malloc_test$14:	; Call 10 malloc 0
x36453:	mov word [bp + 10], malloc_test$15	; 5: 199 70 10 115 142
x36458:	mov [bp + 12], bp	; 3: 137 110 12
x36461:	add bp, 10	; 3: 131 197 10
x36464:	jmp malloc	; 3: 233 174 228

malloc_test$15:	; PostCall 10

malloc_test$16:	; GetReturnValue £temporary5953

malloc_test$17:	; Assign d £temporary5953
x36467:	mov [bp + 10], bx	; 3: 137 94 10

malloc_test$18:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

malloc_test$19:	; Call 12 print_heap 0
x36470:	mov word [bp + 12], malloc_test$20	; 5: 199 70 12 132 142
x36475:	mov [bp + 14], bp	; 3: 137 110 14
x36478:	add bp, 12	; 3: 131 197 12
x36481:	jmp print_heap	; 3: 233 151 0

malloc_test$20:	; PostCall 12

malloc_test$21:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

malloc_test$22:	; Parameter 12 c 6
x36484:	mov ax, [bp + 8]	; 3: 139 70 8
x36487:	mov [bp + 18], ax	; 3: 137 70 18

malloc_test$23:	; Parameter 12 40 8
x36490:	mov word [bp + 20], 40	; 5: 199 70 20 40 0

malloc_test$24:	; Call 12 realloc 0
x36495:	mov word [bp + 12], malloc_test$25	; 5: 199 70 12 157 142
x36500:	mov [bp + 14], bp	; 3: 137 110 14
x36503:	add bp, 12	; 3: 131 197 12
x36506:	jmp realloc	; 3: 233 16 1

malloc_test$25:	; PostCall 12

malloc_test$26:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

malloc_test$27:	; Call 12 print_heap 0
x36509:	mov word [bp + 12], malloc_test$28	; 5: 199 70 12 171 142
x36514:	mov [bp + 14], bp	; 3: 137 110 14
x36517:	add bp, 12	; 3: 131 197 12
x36520:	nop	; 1: 144
x36521:	jmp print_heap	; 2: 235 112

malloc_test$28:	; PostCall 12

malloc_test$29:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

malloc_test$30:	; Parameter 12 40 6
x36523:	mov word [bp + 18], 40	; 5: 199 70 18 40 0

malloc_test$31:	; Call 12 malloc 0
x36528:	mov word [bp + 12], malloc_test$32	; 5: 199 70 12 190 142
x36533:	mov [bp + 14], bp	; 3: 137 110 14
x36536:	add bp, 12	; 3: 131 197 12
x36539:	jmp malloc	; 3: 233 99 228

malloc_test$32:	; PostCall 12

malloc_test$33:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

malloc_test$34:	; Call 12 print_heap 0
x36542:	mov word [bp + 12], malloc_test$35	; 5: 199 70 12 204 142
x36547:	mov [bp + 14], bp	; 3: 137 110 14
x36550:	add bp, 12	; 3: 131 197 12
x36553:	nop	; 1: 144
x36554:	jmp print_heap	; 2: 235 79

malloc_test$35:	; PostCall 12

malloc_test$36:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

malloc_test$37:	; Parameter 12 b 6
x36556:	mov ax, [bp + 6]	; 3: 139 70 6
x36559:	mov [bp + 18], ax	; 3: 137 70 18

malloc_test$38:	; Call 12 free 0
x36562:	mov word [bp + 12], malloc_test$39	; 5: 199 70 12 224 142
x36567:	mov [bp + 14], bp	; 3: 137 110 14
x36570:	add bp, 12	; 3: 131 197 12
x36573:	jmp free	; 3: 233 77 230

malloc_test$39:	; PostCall 12

malloc_test$40:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

malloc_test$41:	; Call 12 print_heap 0
x36576:	mov word [bp + 12], malloc_test$42	; 5: 199 70 12 238 142
x36581:	mov [bp + 14], bp	; 3: 137 110 14
x36584:	add bp, 12	; 3: 131 197 12
x36587:	nop	; 1: 144
x36588:	jmp print_heap	; 2: 235 45

malloc_test$42:	; PostCall 12

malloc_test$43:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

malloc_test$44:	; Parameter 12 d 6
x36590:	mov ax, [bp + 10]	; 3: 139 70 10
x36593:	mov [bp + 18], ax	; 3: 137 70 18

malloc_test$45:	; Call 12 free 0
x36596:	mov word [bp + 12], malloc_test$46	; 5: 199 70 12 2 143
x36601:	mov [bp + 14], bp	; 3: 137 110 14
x36604:	add bp, 12	; 3: 131 197 12
x36607:	jmp free	; 3: 233 43 230

malloc_test$46:	; PostCall 12

malloc_test$47:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

malloc_test$48:	; Call 12 print_heap 0
x36610:	mov word [bp + 12], malloc_test$49	; 5: 199 70 12 16 143
x36615:	mov [bp + 14], bp	; 3: 137 110 14
x36618:	add bp, 12	; 3: 131 197 12
x36621:	nop	; 1: 144
x36622:	jmp print_heap	; 2: 235 11

malloc_test$49:	; PostCall 12

malloc_test$50:	; Return 0
x36624:	mov ax, [bp]	; 3: 139 70 0
x36627:	mov di, [bp + 4]	; 3: 139 126 4
x36630:	mov bp, [bp + 2]	; 3: 139 110 2
x36633:	jmp ax	; 2: 255 224

malloc_test$51:	; FunctionEnd malloc_test

print_heap:	; Assign currBlockPtr g_firstBlockPtr
x36635:	mov ax, [g_firstBlockPtr]	; 3: 161 175 116
x36638:	mov [bp + 6], ax	; 3: 137 70 6

print_heap$1:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

print_heap$2:	; Parameter 8 string_Heap3A0A# 6
x36641:	mov word [bp + 14], @376$string_Heap3A0A#	; 5: 199 70 14 141 143

print_heap$3:	; Call 8 printf 0
x36646:	mov word [bp + 8], print_heap$4	; 5: 199 70 8 54 143
x36651:	mov [bp + 10], bp	; 3: 137 110 10
x36654:	add bp, 8	; 3: 131 197 8
x36657:	mov di, bp	; 2: 137 239
x36659:	jmp printf	; 3: 233 206 125

print_heap$4:	; PostCall 8

print_heap$5:	; Equal 17 currBlockPtr 0
x36662:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x36666:	je print_heap$17	; 2: 116 49

print_heap$6:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

print_heap$7:	; Parameter 8 string_2020Address2025u2C20Size2025u0A# 6
x36668:	mov word [bp + 14], @382$string_2020Address2025u2C20Size2025u0A#	; 5: 199 70 14 148 143

print_heap$8:	; IntegralToIntegral £temporary150 currBlockPtr
x36673:	mov ax, [bp + 6]	; 3: 139 70 6

print_heap$9:	; Parameter 8 £temporary150 8
x36676:	mov [bp + 16], ax	; 3: 137 70 16

print_heap$10:	; Deref £temporary151 -> currBlockPtr currBlockPtr 0
x36679:	mov si, [bp + 6]	; 3: 139 118 6

print_heap$11:	; Parameter 8 £temporary151 -> currBlockPtr 10
x36682:	mov ax, [si]	; 2: 139 4
x36684:	mov [bp + 18], ax	; 3: 137 70 18

print_heap$12:	; Call 8 printf 0
x36687:	mov word [bp + 8], print_heap$13	; 5: 199 70 8 98 143
x36692:	mov [bp + 10], bp	; 3: 137 110 10
x36695:	add bp, 8	; 3: 131 197 8
x36698:	mov di, bp	; 2: 137 239
x36700:	add di, 4	; 3: 131 199 4
x36703:	jmp printf	; 3: 233 162 125

print_heap$13:	; PostCall 8

print_heap$14:	; Deref £temporary153 -> currBlockPtr currBlockPtr 2
x36706:	mov si, [bp + 6]	; 3: 139 118 6

print_heap$15:	; Assign currBlockPtr £temporary153 -> currBlockPtr
x36709:	mov ax, [si + 2]	; 3: 139 68 2
x36712:	mov [bp + 6], ax	; 3: 137 70 6

print_heap$16:	; Goto 5
x36715:	jmp print_heap$5	; 2: 235 201

print_heap$17:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

print_heap$18:	; Parameter 8 string_0A# 6
x36717:	mov word [bp + 14], @387$string_0A#	; 5: 199 70 14 171 143

print_heap$19:	; Call 8 printf 0
x36722:	mov word [bp + 8], print_heap$20	; 5: 199 70 8 130 143
x36727:	mov [bp + 10], bp	; 3: 137 110 10
x36730:	add bp, 8	; 3: 131 197 8
x36733:	mov di, bp	; 2: 137 239
x36735:	jmp printf	; 3: 233 130 125

print_heap$20:	; PostCall 8

print_heap$21:	; Return 0
x36738:	mov ax, [bp]	; 3: 139 70 0
x36741:	mov di, [bp + 4]	; 3: 139 126 4
x36744:	mov bp, [bp + 2]	; 3: 139 110 2
x36747:	jmp ax	; 2: 255 224

print_heap$22:	; FunctionEnd print_heap

@376$string_Heap3A0A#:
x36749:	db "Heap:", 10, 0	; 7: 72 101 97 112 58 10 0

@382$string_2020Address2025u2C20Size2025u0A#:
x36756:	db "  Address %u, Size %u", 10, 0	; 23: 32 32 65 100 100 114 101 115 115 32 37 117 44 32 83 105 122 101 32 37 117 10 0

@387$string_0A#:
x36779:	db 10, 0	; 2: 10 0

realloc:	; SignedGreaterThanEqual 12 newMemorySize 0
x36781:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x36785:	jge realloc$12	; 2: 125 59

realloc$1:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

realloc$2:	; Parameter 10 stderr 6
x36787:	mov ax, [stderr]	; 3: 161 121 77
x36790:	mov [bp + 16], ax	; 3: 137 70 16

realloc$3:	; Parameter 10 string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A# 8
x36793:	mov word [bp + 18], @279$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#	; 5: 199 70 18 116 145

realloc$4:	; Parameter 10 string_newMemorySize203E3D200# 10
x36798:	mov word [bp + 20], @280$string_newMemorySize203E3D200#	; 5: 199 70 20 162 145

realloc$5:	; Parameter 10 string_C3A5CUsers5CStefa5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CMalloc2Ec# 12
x36803:	mov word [bp + 22], @281$string_C3A5CUsers5CStefa5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CMalloc2Ec#	; 5: 199 70 22 181 145

realloc$6:	; Parameter 10 259 14
x36808:	mov word [bp + 24], 259	; 5: 199 70 24 3 1

realloc$7:	; Call 10 fprintf 0
x36813:	mov word [bp + 10], realloc$8	; 5: 199 70 10 224 143
x36818:	mov [bp + 12], bp	; 3: 137 110 12
x36821:	add bp, 10	; 3: 131 197 10
x36824:	mov di, bp	; 2: 137 239
x36826:	add di, 6	; 3: 131 199 6
x36829:	jmp fprintf	; 3: 233 139 206

realloc$8:	; PostCall 10

realloc$9:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

realloc$10:	; Call 10 abort 0
x36832:	mov word [bp + 10], realloc$11	; 5: 199 70 10 238 143
x36837:	mov [bp + 12], bp	; 3: 137 110 12
x36840:	add bp, 10	; 3: 131 197 10
x36843:	jmp abort	; 3: 233 184 206

realloc$11:	; PostCall 10

realloc$12:	; NotEqual 25 oldMemoryPtr 0
x36846:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x36850:	jne realloc$25	; 2: 117 65

realloc$13:	; SignedGreaterThan 25 newMemorySize 0
x36852:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x36856:	jg realloc$25	; 2: 127 59

realloc$14:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

realloc$15:	; Parameter 10 stderr 6
x36858:	mov ax, [stderr]	; 3: 161 121 77
x36861:	mov [bp + 16], ax	; 3: 137 70 16

realloc$16:	; Parameter 10 string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A# 8
x36864:	mov word [bp + 18], @295$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#	; 5: 199 70 18 243 145

realloc$17:	; Parameter 10 string_2820oldMemoryPtr20213D20NULL2029207C7C202820newMemorySize203E2002029# 10
x36869:	mov word [bp + 20], @296$string_2820oldMemoryPtr20213D20NULL2029207C7C202820newMemorySize203E2002029#	; 5: 199 70 20 33 146

realloc$18:	; Parameter 10 string_C3A5CUsers5CStefa5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CMalloc2Ec# 12
x36874:	mov word [bp + 22], @297$string_C3A5CUsers5CStefa5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CMalloc2Ec#	; 5: 199 70 22 83 146

realloc$19:	; Parameter 10 260 14
x36879:	mov word [bp + 24], 260	; 5: 199 70 24 4 1

realloc$20:	; Call 10 fprintf 0
x36884:	mov word [bp + 10], realloc$21	; 5: 199 70 10 39 144
x36889:	mov [bp + 12], bp	; 3: 137 110 12
x36892:	add bp, 10	; 3: 131 197 10
x36895:	mov di, bp	; 2: 137 239
x36897:	add di, 6	; 3: 131 199 6
x36900:	jmp fprintf	; 3: 233 68 206

realloc$21:	; PostCall 10

realloc$22:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

realloc$23:	; Call 10 abort 0
x36903:	mov word [bp + 10], realloc$24	; 5: 199 70 10 53 144
x36908:	mov [bp + 12], bp	; 3: 137 110 12
x36911:	add bp, 10	; 3: 131 197 10
x36914:	jmp abort	; 3: 233 113 206

realloc$24:	; PostCall 10

realloc$25:	; NotEqual 33 oldMemoryPtr 0
x36917:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x36921:	jne realloc$33	; 2: 117 31

realloc$26:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

realloc$27:	; Parameter 10 newMemorySize 6
x36923:	mov ax, [bp + 8]	; 3: 139 70 8
x36926:	mov [bp + 16], ax	; 3: 137 70 16

realloc$28:	; Call 10 malloc 0
x36929:	mov word [bp + 10], realloc$29	; 5: 199 70 10 79 144
x36934:	mov [bp + 12], bp	; 3: 137 110 12
x36937:	add bp, 10	; 3: 131 197 10
x36940:	jmp malloc	; 3: 233 210 226

realloc$29:	; PostCall 10

realloc$30:	; GetReturnValue £temporary108

realloc$31:	; SetReturnValue £temporary108

realloc$32:	; Return £temporary108
x36943:	mov ax, [bp]	; 3: 139 70 0
x36946:	mov di, [bp + 4]	; 3: 139 126 4
x36949:	mov bp, [bp + 2]	; 3: 139 110 2
x36952:	jmp ax	; 2: 255 224

realloc$33:	; NotEqual 40 newMemorySize 0
x36954:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x36958:	jne realloc$40	; 2: 117 34

realloc$34:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

realloc$35:	; Parameter 10 oldMemoryPtr 6
x36960:	mov ax, [bp + 6]	; 3: 139 70 6
x36963:	mov [bp + 16], ax	; 3: 137 70 16

realloc$36:	; Call 10 free 0
x36966:	mov word [bp + 10], realloc$37	; 5: 199 70 10 116 144
x36971:	mov [bp + 12], bp	; 3: 137 110 12
x36974:	add bp, 10	; 3: 131 197 10
x36977:	jmp free	; 3: 233 185 228

realloc$37:	; PostCall 10

realloc$38:	; SetReturnValue 0
x36980:	mov bx, 0	; 3: 187 0 0

realloc$39:	; Return 0
x36983:	mov ax, [bp]	; 3: 139 70 0
x36986:	mov di, [bp + 4]	; 3: 139 126 4
x36989:	mov bp, [bp + 2]	; 3: 139 110 2
x36992:	jmp ax	; 2: 255 224

realloc$40:	; IntegralToIntegral £temporary111 newMemorySize
x36994:	mov ax, [bp + 8]	; 3: 139 70 8

realloc$41:	; BinaryAdd newBlockSize £temporary111 4
x36997:	add ax, 4	; 3: 131 192 4
x37000:	mov [bp + 10], ax	; 3: 137 70 10

realloc$42:	; IntegralToIntegral £temporary113 oldMemoryPtr
x37003:	mov ax, [bp + 6]	; 3: 139 70 6

realloc$43:	; BinarySubtract £temporary114 £temporary113 4
x37006:	sub ax, 4	; 3: 131 232 4

realloc$44:	; IntegralToIntegral £temporary115 £temporary114

realloc$45:	; Assign oldBlockPtr £temporary115
x37009:	mov [bp + 12], ax	; 3: 137 70 12

realloc$46:	; Deref £temporary116 -> oldBlockPtr oldBlockPtr 0
x37012:	mov si, [bp + 12]	; 3: 139 118 12

realloc$47:	; UnsignedGreaterThan 52 newBlockSize £temporary116 -> oldBlockPtr
x37015:	mov ax, [si]	; 2: 139 4
x37017:	cmp [bp + 10], ax	; 3: 57 70 10
x37020:	ja realloc$52	; 2: 119 22

realloc$48:	; Deref £temporary118 -> oldBlockPtr oldBlockPtr 0
x37022:	mov si, [bp + 12]	; 3: 139 118 12

realloc$49:	; Assign £temporary118 -> oldBlockPtr newBlockSize
x37025:	mov ax, [bp + 10]	; 3: 139 70 10
x37028:	mov [si], ax	; 2: 137 4

realloc$50:	; SetReturnValue oldMemoryPtr
x37030:	mov bx, [bp + 6]	; 3: 139 94 6

realloc$51:	; Return oldMemoryPtr
x37033:	mov ax, [bp]	; 3: 139 70 0
x37036:	mov di, [bp + 4]	; 3: 139 126 4
x37039:	mov bp, [bp + 2]	; 3: 139 110 2
x37042:	jmp ax	; 2: 255 224

realloc$52:	; Assign lastAddress 65528
x37044:	mov word [bp + 14], 65528	; 5: 199 70 14 248 255

realloc$53:	; Assign currBlockPtr g_firstBlockPtr
x37049:	mov ax, [g_firstBlockPtr]	; 3: 161 175 116
x37052:	mov [bp + 16], ax	; 3: 137 70 16

realloc$54:	; Equal 68 currBlockPtr 0
x37055:	cmp word [bp + 16], 0	; 4: 131 126 16 0
x37059:	je realloc$68	; 2: 116 66

realloc$55:	; NotEqual 63 currBlockPtr oldBlockPtr
x37061:	mov ax, [bp + 12]	; 3: 139 70 12
x37064:	cmp [bp + 16], ax	; 3: 57 70 16
x37067:	jne realloc$63	; 2: 117 41

realloc$56:	; IntegralToIntegral £temporary121 currBlockPtr
x37069:	mov ax, [bp + 16]	; 3: 139 70 16

realloc$57:	; BinarySubtract availableSize lastAddress £temporary121
x37072:	mov bx, [bp + 14]	; 3: 139 94 14
x37075:	sub bx, ax	; 2: 41 195
x37077:	mov [bp + 18], bx	; 3: 137 94 18

realloc$58:	; UnsignedLessThan 68 availableSize newBlockSize
x37080:	mov ax, [bp + 10]	; 3: 139 70 10
x37083:	cmp [bp + 18], ax	; 3: 57 70 18
x37086:	jb realloc$68	; 2: 114 39

realloc$59:	; Deref £temporary124 -> oldBlockPtr oldBlockPtr 0
x37088:	mov si, [bp + 12]	; 3: 139 118 12

realloc$60:	; Assign £temporary124 -> oldBlockPtr newBlockSize
x37091:	mov ax, [bp + 10]	; 3: 139 70 10
x37094:	mov [si], ax	; 2: 137 4

realloc$61:	; SetReturnValue oldMemoryPtr
x37096:	mov bx, [bp + 6]	; 3: 139 94 6

realloc$62:	; Return oldMemoryPtr
x37099:	mov ax, [bp]	; 3: 139 70 0
x37102:	mov di, [bp + 4]	; 3: 139 126 4
x37105:	mov bp, [bp + 2]	; 3: 139 110 2
x37108:	jmp ax	; 2: 255 224

realloc$63:	; IntegralToIntegral £temporary125 currBlockPtr
x37110:	mov ax, [bp + 16]	; 3: 139 70 16

realloc$64:	; Assign lastAddress £temporary125
x37113:	mov [bp + 14], ax	; 3: 137 70 14

realloc$65:	; Deref £temporary126 -> currBlockPtr currBlockPtr 2
x37116:	mov si, [bp + 16]	; 3: 139 118 16

realloc$66:	; Assign currBlockPtr £temporary126 -> currBlockPtr
x37119:	mov ax, [si + 2]	; 3: 139 68 2
x37122:	mov [bp + 16], ax	; 3: 137 70 16

realloc$67:	; Goto 54
x37125:	jmp realloc$54	; 2: 235 184

realloc$68:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

realloc$69:	; Parameter 14 newMemorySize 6
x37127:	mov ax, [bp + 8]	; 3: 139 70 8
x37130:	mov [bp + 20], ax	; 3: 137 70 20

realloc$70:	; Call 14 malloc 0
x37133:	mov word [bp + 14], realloc$71	; 5: 199 70 14 27 145
x37138:	mov [bp + 16], bp	; 3: 137 110 16
x37141:	add bp, 14	; 3: 131 197 14
x37144:	jmp malloc	; 3: 233 6 226

realloc$71:	; PostCall 14

realloc$72:	; GetReturnValue £temporary127

realloc$73:	; Assign newMemoryPtr £temporary127
x37147:	mov [bp + 14], bx	; 3: 137 94 14

realloc$74:	; Equal 87 newMemoryPtr 0
x37150:	cmp word [bp + 14], 0	; 4: 131 126 14 0
x37154:	je realloc$87	; 2: 116 66

realloc$75:	; CallHeader 16 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

realloc$76:	; Parameter 16 newMemoryPtr 6
x37156:	mov ax, [bp + 14]	; 3: 139 70 14
x37159:	mov [bp + 22], ax	; 3: 137 70 22

realloc$77:	; Parameter 16 oldMemoryPtr 8
x37162:	mov ax, [bp + 6]	; 3: 139 70 6
x37165:	mov [bp + 24], ax	; 3: 137 70 24

realloc$78:	; Parameter 16 newMemorySize 10
x37168:	mov ax, [bp + 8]	; 3: 139 70 8
x37171:	mov [bp + 26], ax	; 3: 137 70 26

realloc$79:	; Call 16 memcpy 0
x37174:	mov word [bp + 16], realloc$80	; 5: 199 70 16 68 145
x37179:	mov [bp + 18], bp	; 3: 137 110 18
x37182:	add bp, 16	; 3: 131 197 16
x37185:	jmp memcpy	; 3: 233 77 1

realloc$80:	; PostCall 16

realloc$81:	; CallHeader 16 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

realloc$82:	; Parameter 16 oldMemoryPtr 6
x37188:	mov ax, [bp + 6]	; 3: 139 70 6
x37191:	mov [bp + 22], ax	; 3: 137 70 22

realloc$83:	; Call 16 free 0
x37194:	mov word [bp + 16], realloc$84	; 5: 199 70 16 88 145
x37199:	mov [bp + 18], bp	; 3: 137 110 18
x37202:	add bp, 16	; 3: 131 197 16
x37205:	jmp free	; 3: 233 213 227

realloc$84:	; PostCall 16

realloc$85:	; SetReturnValue newMemoryPtr
x37208:	mov bx, [bp + 14]	; 3: 139 94 14

realloc$86:	; Return newMemoryPtr
x37211:	mov ax, [bp]	; 3: 139 70 0
x37214:	mov di, [bp + 4]	; 3: 139 126 4
x37217:	mov bp, [bp + 2]	; 3: 139 110 2
x37220:	jmp ax	; 2: 255 224

realloc$87:	; SetReturnValue 0
x37222:	mov bx, 0	; 3: 187 0 0

realloc$88:	; Return 0
x37225:	mov ax, [bp]	; 3: 139 70 0
x37228:	mov di, [bp + 4]	; 3: 139 126 4
x37231:	mov bp, [bp + 2]	; 3: 139 110 2
x37234:	jmp ax	; 2: 255 224

realloc$89:	; FunctionEnd realloc

@279$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#:
x37236:	db "Assertion failed: ", 34, "%s", 34, " in file %s at line %i", 10, 0	; 46: 65 115 115 101 114 116 105 111 110 32 102 97 105 108 101 100 58 32 34 37 115 34 32 105 110 32 102 105 108 101 32 37 115 32 97 116 32 108 105 110 101 32 37 105 10 0

@280$string_newMemorySize203E3D200#:
x37282:	db "newMemorySize >= 0", 0	; 19: 110 101 119 77 101 109 111 114 121 83 105 122 101 32 62 61 32 48 0

@281$string_C3A5CUsers5CStefa5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CMalloc2Ec#:
x37301:	db "C:\Users\Stefa\Documents\vagrant\homestead\code\code\Malloc.c", 0	; 62: 67 58 92 85 115 101 114 115 92 83 116 101 102 97 92 68 111 99 117 109 101 110 116 115 92 118 97 103 114 97 110 116 92 104 111 109 101 115 116 101 97 100 92 99 111 100 101 92 99 111 100 101 92 77 97 108 108 111 99 46 99 0

@295$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#:
x37363:	db "Assertion failed: ", 34, "%s", 34, " in file %s at line %i", 10, 0	; 46: 65 115 115 101 114 116 105 111 110 32 102 97 105 108 101 100 58 32 34 37 115 34 32 105 110 32 102 105 108 101 32 37 115 32 97 116 32 108 105 110 101 32 37 105 10 0

@296$string_2820oldMemoryPtr20213D20NULL2029207C7C202820newMemorySize203E2002029#:
x37409:	db "( oldMemoryPtr != NULL ) || ( newMemorySize > 0 )", 0	; 50: 40 32 111 108 100 77 101 109 111 114 121 80 116 114 32 33 61 32 78 85 76 76 32 41 32 124 124 32 40 32 110 101 119 77 101 109 111 114 121 83 105 122 101 32 62 32 48 32 41 0

@297$string_C3A5CUsers5CStefa5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CMalloc2Ec#:
x37459:	db "C:\Users\Stefa\Documents\vagrant\homestead\code\code\Malloc.c", 0	; 62: 67 58 92 85 115 101 114 115 92 83 116 101 102 97 92 68 111 99 117 109 101 110 116 115 92 118 97 103 114 97 110 116 92 104 111 109 101 115 116 101 97 100 92 99 111 100 101 92 99 111 100 101 92 77 97 108 108 111 99 46 99 0

memcpy:	; IntegralToIntegral £temporary3921 target
x37521:	mov ax, [bp + 6]	; 3: 139 70 6

memcpy$1:	; Assign charTarget £temporary3921
x37524:	mov [bp + 12], ax	; 3: 137 70 12

memcpy$2:	; IntegralToIntegral £temporary3922 source
x37527:	mov ax, [bp + 8]	; 3: 139 70 8

memcpy$3:	; Assign charSource £temporary3922
x37530:	mov [bp + 14], ax	; 3: 137 70 14

memcpy$4:	; Assign index 0
x37533:	mov word [bp + 16], 0	; 5: 199 70 16 0 0

memcpy$5:	; SignedGreaterThanEqual 13 index size
x37538:	mov ax, [bp + 10]	; 3: 139 70 10
x37541:	cmp [bp + 16], ax	; 3: 57 70 16
x37544:	jge memcpy$13	; 2: 125 21

memcpy$6:	; BinaryAdd £temporary3926 charTarget index
x37546:	mov si, [bp + 12]	; 3: 139 118 12
x37549:	add si, [bp + 16]	; 3: 3 118 16

memcpy$7:	; Deref £temporary3925 -> £temporary3926 £temporary3926 0

memcpy$8:	; BinaryAdd £temporary3928 charSource index
x37552:	mov di, [bp + 14]	; 3: 139 126 14
x37555:	add di, [bp + 16]	; 3: 3 126 16

memcpy$9:	; Deref £temporary3927 -> £temporary3928 £temporary3928 0

memcpy$10:	; Assign £temporary3925 -> £temporary3926 £temporary3927 -> £temporary3928
x37558:	mov al, [di]	; 2: 138 5
x37560:	mov [si], al	; 2: 136 4

memcpy$11:	; Increment index
x37562:	inc word [bp + 16]	; 3: 255 70 16

memcpy$12:	; Goto 5
x37565:	jmp memcpy$5	; 2: 235 227

memcpy$13:	; IntegralToIntegral £temporary3929 target
x37567:	mov bx, [bp + 6]	; 3: 139 94 6

memcpy$14:	; SetReturnValue £temporary3929

memcpy$15:	; Return £temporary3929
x37570:	mov ax, [bp]	; 3: 139 70 0
x37573:	mov di, [bp + 4]	; 3: 139 126 4
x37576:	mov bp, [bp + 2]	; 3: 139 110 2
x37579:	jmp ax	; 2: 255 224

memcpy$16:	; FunctionEnd memcpy

print_test:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

print_test$1:	; Parameter 6 string_3C258i3E203C252B8i3E203C25208i3E203C252D8i3E203C252B2D8i3E203C252D2B8i3E203C25202D8i3E203C252D208i3E0A# 6
x37581:	mov word [bp + 12], @9004$string_3C258i3E203C252B8i3E203C25208i3E203C252D8i3E203C252B2D8i3E203C252D2B8i3E203C25202D8i3E203C252D208i3E0A#	; 5: 199 70 12 184 148

print_test$2:	; Parameter 6 123 8
x37586:	mov word [bp + 14], 123	; 5: 199 70 14 123 0

print_test$3:	; Parameter 6 123 10
x37591:	mov word [bp + 16], 123	; 5: 199 70 16 123 0

print_test$4:	; Parameter 6 123 12
x37596:	mov word [bp + 18], 123	; 5: 199 70 18 123 0

print_test$5:	; Parameter 6 123 14
x37601:	mov word [bp + 20], 123	; 5: 199 70 20 123 0

print_test$6:	; Parameter 6 123 16
x37606:	mov word [bp + 22], 123	; 5: 199 70 22 123 0

print_test$7:	; Parameter 6 123 18
x37611:	mov word [bp + 24], 123	; 5: 199 70 24 123 0

print_test$8:	; Parameter 6 123 20
x37616:	mov word [bp + 26], 123	; 5: 199 70 26 123 0

print_test$9:	; Parameter 6 123 22
x37621:	mov word [bp + 28], 123	; 5: 199 70 28 123 0

print_test$10:	; Call 6 printf 0
x37626:	mov word [bp + 6], print_test$11	; 5: 199 70 6 13 147
x37631:	mov [bp + 8], bp	; 3: 137 110 8
x37634:	add bp, 6	; 3: 131 197 6
x37637:	mov di, bp	; 2: 137 239
x37639:	add di, 16	; 3: 131 199 16
x37642:	jmp printf	; 3: 233 247 121

print_test$11:	; PostCall 6

print_test$12:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

print_test$13:	; Parameter 6 string_3C258i3E203C252B8i3E203C25208i3E203C252D8i3E203C252B2D8i3E203C252D2B8i3E203C25202D8i3E203C252D208i3E0A# 6
x37645:	mov word [bp + 12], @9022$string_3C258i3E203C252B8i3E203C25208i3E203C252D8i3E203C252B2D8i3E203C252D2B8i3E203C25202D8i3E203C252D208i3E0A#	; 5: 199 70 12 244 148

print_test$14:	; Parameter 6 -123 8
x37650:	mov word [bp + 14], -123	; 5: 199 70 14 133 255

print_test$15:	; Parameter 6 -123 10
x37655:	mov word [bp + 16], -123	; 5: 199 70 16 133 255

print_test$16:	; Parameter 6 -123 12
x37660:	mov word [bp + 18], -123	; 5: 199 70 18 133 255

print_test$17:	; Parameter 6 -123 14
x37665:	mov word [bp + 20], -123	; 5: 199 70 20 133 255

print_test$18:	; Parameter 6 -123 16
x37670:	mov word [bp + 22], -123	; 5: 199 70 22 133 255

print_test$19:	; Parameter 6 -123 18
x37675:	mov word [bp + 24], -123	; 5: 199 70 24 133 255

print_test$20:	; Parameter 6 -123 20
x37680:	mov word [bp + 26], -123	; 5: 199 70 26 133 255

print_test$21:	; Parameter 6 -123 22
x37685:	mov word [bp + 28], -123	; 5: 199 70 28 133 255

print_test$22:	; Call 6 printf 0
x37690:	mov word [bp + 6], print_test$23	; 5: 199 70 6 77 147
x37695:	mov [bp + 8], bp	; 3: 137 110 8
x37698:	add bp, 6	; 3: 131 197 6
x37701:	mov di, bp	; 2: 137 239
x37703:	add di, 16	; 3: 131 199 16
x37706:	jmp printf	; 3: 233 183 121

print_test$23:	; PostCall 6

print_test$24:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

print_test$25:	; Parameter 6 string_3C2508i3E203C252B08i3E203C252008i3E203C250208i3E0A# 6
x37709:	mov word [bp + 12], @9040$string_3C2508i3E203C252B08i3E203C252008i3E203C250208i3E0A#	; 5: 199 70 12 48 149

print_test$26:	; Parameter 6 123 8
x37714:	mov word [bp + 14], 123	; 5: 199 70 14 123 0

print_test$27:	; Parameter 6 123 10
x37719:	mov word [bp + 16], 123	; 5: 199 70 16 123 0

print_test$28:	; Parameter 6 123 12
x37724:	mov word [bp + 18], 123	; 5: 199 70 18 123 0

print_test$29:	; Parameter 6 123 14
x37729:	mov word [bp + 20], 123	; 5: 199 70 20 123 0

print_test$30:	; Call 6 printf 0
x37734:	mov word [bp + 6], print_test$31	; 5: 199 70 6 121 147
x37739:	mov [bp + 8], bp	; 3: 137 110 8
x37742:	add bp, 6	; 3: 131 197 6
x37745:	mov di, bp	; 2: 137 239
x37747:	add di, 8	; 3: 131 199 8
x37750:	jmp printf	; 3: 233 139 121

print_test$31:	; PostCall 6

print_test$32:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

print_test$33:	; Parameter 6 string_3C2508i3E203C252B08i3E203C252008i3E203C250208i3E0A# 6
x37753:	mov word [bp + 12], @9050$string_3C2508i3E203C252B08i3E203C252008i3E203C250208i3E0A#	; 5: 199 70 12 80 149

print_test$34:	; Parameter 6 -123 8
x37758:	mov word [bp + 14], -123	; 5: 199 70 14 133 255

print_test$35:	; Parameter 6 -123 10
x37763:	mov word [bp + 16], -123	; 5: 199 70 16 133 255

print_test$36:	; Parameter 6 -123 12
x37768:	mov word [bp + 18], -123	; 5: 199 70 18 133 255

print_test$37:	; Parameter 6 -123 14
x37773:	mov word [bp + 20], -123	; 5: 199 70 20 133 255

print_test$38:	; Call 6 printf 0
x37778:	mov word [bp + 6], print_test$39	; 5: 199 70 6 165 147
x37783:	mov [bp + 8], bp	; 3: 137 110 8
x37786:	add bp, 6	; 3: 131 197 6
x37789:	mov di, bp	; 2: 137 239
x37791:	add di, 8	; 3: 131 199 8
x37794:	jmp printf	; 3: 233 95 121

print_test$39:	; PostCall 6

print_test$40:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

print_test$41:	; Parameter 6 string_3C25122E3f3E203C252B122E3f3E203C2520122E3f3E203C252D122E3f3E203C252B2D122E3f3E203C252D2B122E3f3E203C25202D122E3f3E203C252D20122E3f3E0A# 6
x37797:	mov word [bp + 12], @9060$string_3C25122E3f3E203C252B122E3f3E203C2520122E3f3E203C252D122E3f3E203C252B2D122E3f3E203C252D2B122E3f3E203C25202D122E3f3E203C252D20122E3f3E0A#	; 5: 199 70 12 112 149

print_test$42:	; PushFloat 123.456
x37802:	fld qword [@9061$float8$123.456#]	; 4: 221 6 196 149

print_test$43:	; Parameter 6 123.456 8
x37806:	fstp qword [bp + 14]	; 3: 221 94 14

print_test$44:	; PushFloat 123.456
x37809:	fld qword [@9062$float8$123.456#]	; 4: 221 6 204 149

print_test$45:	; Parameter 6 123.456 16
x37813:	fstp qword [bp + 22]	; 3: 221 94 22

print_test$46:	; PushFloat 123.456
x37816:	fld qword [@9063$float8$123.456#]	; 4: 221 6 212 149

print_test$47:	; Parameter 6 123.456 24
x37820:	fstp qword [bp + 30]	; 3: 221 94 30

print_test$48:	; PushFloat 123.456
x37823:	fld qword [@9064$float8$123.456#]	; 4: 221 6 220 149

print_test$49:	; Parameter 6 123.456 32
x37827:	fstp qword [bp + 38]	; 3: 221 94 38

print_test$50:	; PushFloat 123.456
x37830:	fld qword [@9065$float8$123.456#]	; 4: 221 6 228 149

print_test$51:	; Parameter 6 123.456 40
x37834:	fstp qword [bp + 46]	; 3: 221 94 46

print_test$52:	; PushFloat 123.456
x37837:	fld qword [@9066$float8$123.456#]	; 4: 221 6 236 149

print_test$53:	; Parameter 6 123.456 48
x37841:	fstp qword [bp + 54]	; 3: 221 94 54

print_test$54:	; PushFloat 123.456
x37844:	fld qword [@9067$float8$123.456#]	; 4: 221 6 244 149

print_test$55:	; Parameter 6 123.456 56
x37848:	fstp qword [bp + 62]	; 3: 221 94 62

print_test$56:	; PushFloat 123.456
x37851:	fld qword [@9068$float8$123.456#]	; 4: 221 6 252 149

print_test$57:	; Parameter 6 123.456 64
x37855:	fstp qword [bp + 70]	; 3: 221 94 70

print_test$58:	; Call 6 printf 0
x37858:	mov word [bp + 6], print_test$59	; 5: 199 70 6 245 147
x37863:	mov [bp + 8], bp	; 3: 137 110 8
x37866:	add bp, 6	; 3: 131 197 6
x37869:	mov di, bp	; 2: 137 239
x37871:	add di, 64	; 3: 131 199 64
x37874:	jmp printf	; 3: 233 15 121

print_test$59:	; PostCall 6

print_test$60:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

print_test$61:	; Parameter 6 string_3C25122E3f3E203C252B122E3f3E203C2520122E3f3E203C252D122E3f3E203C252B2D122E3f3E203C252D2B122E3f3E203C25202D122E3f3E203C252D20122E3f3E0A# 6
x37877:	mov word [bp + 12], @9078$string_3C25122E3f3E203C252B122E3f3E203C2520122E3f3E203C252D122E3f3E203C252B2D122E3f3E203C252D2B122E3f3E203C25202D122E3f3E203C252D20122E3f3E0A#	; 5: 199 70 12 4 150

print_test$62:	; PushFloat -123.456
x37882:	fld qword [@9079$float8$minus123.456#]	; 4: 221 6 88 150

print_test$63:	; Parameter 6 -123.456 8
x37886:	fstp qword [bp + 14]	; 3: 221 94 14

print_test$64:	; PushFloat -123.456
x37889:	fld qword [@9080$float8$minus123.456#]	; 4: 221 6 96 150

print_test$65:	; Parameter 6 -123.456 16
x37893:	fstp qword [bp + 22]	; 3: 221 94 22

print_test$66:	; PushFloat -123.456
x37896:	fld qword [@9081$float8$minus123.456#]	; 4: 221 6 104 150

print_test$67:	; Parameter 6 -123.456 24
x37900:	fstp qword [bp + 30]	; 3: 221 94 30

print_test$68:	; PushFloat -123.456
x37903:	fld qword [@9082$float8$minus123.456#]	; 4: 221 6 112 150

print_test$69:	; Parameter 6 -123.456 32
x37907:	fstp qword [bp + 38]	; 3: 221 94 38

print_test$70:	; PushFloat -123.456
x37910:	fld qword [@9083$float8$minus123.456#]	; 4: 221 6 120 150

print_test$71:	; Parameter 6 -123.456 40
x37914:	fstp qword [bp + 46]	; 3: 221 94 46

print_test$72:	; PushFloat -123.456
x37917:	fld qword [@9084$float8$minus123.456#]	; 4: 221 6 128 150

print_test$73:	; Parameter 6 -123.456 48
x37921:	fstp qword [bp + 54]	; 3: 221 94 54

print_test$74:	; PushFloat -123.456
x37924:	fld qword [@9085$float8$minus123.456#]	; 4: 221 6 136 150

print_test$75:	; Parameter 6 -123.456 56
x37928:	fstp qword [bp + 62]	; 3: 221 94 62

print_test$76:	; PushFloat -123.456
x37931:	fld qword [@9086$float8$minus123.456#]	; 4: 221 6 144 150

print_test$77:	; Parameter 6 -123.456 64
x37935:	fstp qword [bp + 70]	; 3: 221 94 70

print_test$78:	; Call 6 printf 0
x37938:	mov word [bp + 6], print_test$79	; 5: 199 70 6 69 148
x37943:	mov [bp + 8], bp	; 3: 137 110 8
x37946:	add bp, 6	; 3: 131 197 6
x37949:	mov di, bp	; 2: 137 239
x37951:	add di, 64	; 3: 131 199 64
x37954:	jmp printf	; 3: 233 191 120

print_test$79:	; PostCall 6

print_test$80:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

print_test$81:	; Parameter 6 string_3C250122E3f3E203C252B0122E3f3E203C25200122E3f3E203C25020122E3f3E0A# 6
x37957:	mov word [bp + 12], @9096$string_3C250122E3f3E203C252B0122E3f3E203C25200122E3f3E203C25020122E3f3E0A#	; 5: 199 70 12 152 150

print_test$82:	; PushFloat 123.456
x37962:	fld qword [@9097$float8$123.456#]	; 4: 221 6 196 150

print_test$83:	; Parameter 6 123.456 8
x37966:	fstp qword [bp + 14]	; 3: 221 94 14

print_test$84:	; PushFloat 123.456
x37969:	fld qword [@9098$float8$123.456#]	; 4: 221 6 204 150

print_test$85:	; Parameter 6 123.456 16
x37973:	fstp qword [bp + 22]	; 3: 221 94 22

print_test$86:	; PushFloat 123.456
x37976:	fld qword [@9099$float8$123.456#]	; 4: 221 6 212 150

print_test$87:	; Parameter 6 123.456 24
x37980:	fstp qword [bp + 30]	; 3: 221 94 30

print_test$88:	; PushFloat 123.456
x37983:	fld qword [@9100$float8$123.456#]	; 4: 221 6 220 150

print_test$89:	; Parameter 6 123.456 32
x37987:	fstp qword [bp + 38]	; 3: 221 94 38

print_test$90:	; Call 6 printf 0
x37990:	mov word [bp + 6], print_test$91	; 5: 199 70 6 121 148
x37995:	mov [bp + 8], bp	; 3: 137 110 8
x37998:	add bp, 6	; 3: 131 197 6
x38001:	mov di, bp	; 2: 137 239
x38003:	add di, 32	; 3: 131 199 32
x38006:	jmp printf	; 3: 233 139 120

print_test$91:	; PostCall 6

print_test$92:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

print_test$93:	; Parameter 6 string_3C250122E3f3E203C252B0122E3f3E203C25200122E3f3E203C25020122E3f3E0A# 6
x38009:	mov word [bp + 12], @9106$string_3C250122E3f3E203C252B0122E3f3E203C25200122E3f3E203C25020122E3f3E0A#	; 5: 199 70 12 228 150

print_test$94:	; PushFloat -123.456
x38014:	fld qword [@9107$float8$minus123.456#]	; 4: 221 6 16 151

print_test$95:	; Parameter 6 -123.456 8
x38018:	fstp qword [bp + 14]	; 3: 221 94 14

print_test$96:	; PushFloat -123.456
x38021:	fld qword [@9108$float8$minus123.456#]	; 4: 221 6 24 151

print_test$97:	; Parameter 6 -123.456 16
x38025:	fstp qword [bp + 22]	; 3: 221 94 22

print_test$98:	; PushFloat -123.456
x38028:	fld qword [@9109$float8$minus123.456#]	; 4: 221 6 32 151

print_test$99:	; Parameter 6 -123.456 24
x38032:	fstp qword [bp + 30]	; 3: 221 94 30

print_test$100:	; PushFloat -123.456
x38035:	fld qword [@9110$float8$minus123.456#]	; 4: 221 6 40 151

print_test$101:	; Parameter 6 -123.456 32
x38039:	fstp qword [bp + 38]	; 3: 221 94 38

print_test$102:	; Call 6 printf 0
x38042:	mov word [bp + 6], print_test$103	; 5: 199 70 6 173 148
x38047:	mov [bp + 8], bp	; 3: 137 110 8
x38050:	add bp, 6	; 3: 131 197 6
x38053:	mov di, bp	; 2: 137 239
x38055:	add di, 32	; 3: 131 199 32
x38058:	jmp printf	; 3: 233 87 120

print_test$103:	; PostCall 6

print_test$104:	; Return 0
x38061:	mov ax, [bp]	; 3: 139 70 0
x38064:	mov di, [bp + 4]	; 3: 139 126 4
x38067:	mov bp, [bp + 2]	; 3: 139 110 2
x38070:	jmp ax	; 2: 255 224

print_test$105:	; FunctionEnd print_test

@9004$string_3C258i3E203C252B8i3E203C25208i3E203C252D8i3E203C252B2D8i3E203C252D2B8i3E203C25202D8i3E203C252D208i3E0A#:
x38072:	db "<%8i> <%+8i> <% 8i> <%-8i> <%+-8i> <%-+8i> <% -8i> <%- 8i>", 10, 0	; 60: 60 37 56 105 62 32 60 37 43 56 105 62 32 60 37 32 56 105 62 32 60 37 45 56 105 62 32 60 37 43 45 56 105 62 32 60 37 45 43 56 105 62 32 60 37 32 45 56 105 62 32 60 37 45 32 56 105 62 10 0

@9022$string_3C258i3E203C252B8i3E203C25208i3E203C252D8i3E203C252B2D8i3E203C252D2B8i3E203C25202D8i3E203C252D208i3E0A#:
x38132:	db "<%8i> <%+8i> <% 8i> <%-8i> <%+-8i> <%-+8i> <% -8i> <%- 8i>", 10, 0	; 60: 60 37 56 105 62 32 60 37 43 56 105 62 32 60 37 32 56 105 62 32 60 37 45 56 105 62 32 60 37 43 45 56 105 62 32 60 37 45 43 56 105 62 32 60 37 32 45 56 105 62 32 60 37 45 32 56 105 62 10 0

@9040$string_3C2508i3E203C252B08i3E203C252008i3E203C250208i3E0A#:
x38192:	db "<%08i> <%+08i> <% 08i> <%0 8i>", 10, 0	; 32: 60 37 48 56 105 62 32 60 37 43 48 56 105 62 32 60 37 32 48 56 105 62 32 60 37 48 32 56 105 62 10 0

@9050$string_3C2508i3E203C252B08i3E203C252008i3E203C250208i3E0A#:
x38224:	db "<%08i> <%+08i> <% 08i> <%0 8i>", 10, 0	; 32: 60 37 48 56 105 62 32 60 37 43 48 56 105 62 32 60 37 32 48 56 105 62 32 60 37 48 32 56 105 62 10 0

@9060$string_3C25122E3f3E203C252B122E3f3E203C2520122E3f3E203C252D122E3f3E203C252B2D122E3f3E203C252D2B122E3f3E203C25202D122E3f3E203C252D20122E3f3E0A#:
x38256:	db "<%12.3f> <%+12.3f> <% 12.3f> <%-12.3f> <%+-12.3f> <%-+12.3f> <% -12.3f> <%- 12.3f>", 10, 0	; 84: 60 37 49 50 46 51 102 62 32 60 37 43 49 50 46 51 102 62 32 60 37 32 49 50 46 51 102 62 32 60 37 45 49 50 46 51 102 62 32 60 37 43 45 49 50 46 51 102 62 32 60 37 45 43 49 50 46 51 102 62 32 60 37 32 45 49 50 46 51 102 62 32 60 37 45 32 49 50 46 51 102 62 10 0

@9061$float8$123.456#:
x38340:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@9062$float8$123.456#:
x38348:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@9063$float8$123.456#:
x38356:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@9064$float8$123.456#:
x38364:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@9065$float8$123.456#:
x38372:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@9066$float8$123.456#:
x38380:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@9067$float8$123.456#:
x38388:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@9068$float8$123.456#:
x38396:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@9078$string_3C25122E3f3E203C252B122E3f3E203C2520122E3f3E203C252D122E3f3E203C252B2D122E3f3E203C252D2B122E3f3E203C25202D122E3f3E203C252D20122E3f3E0A#:
x38404:	db "<%12.3f> <%+12.3f> <% 12.3f> <%-12.3f> <%+-12.3f> <%-+12.3f> <% -12.3f> <%- 12.3f>", 10, 0	; 84: 60 37 49 50 46 51 102 62 32 60 37 43 49 50 46 51 102 62 32 60 37 32 49 50 46 51 102 62 32 60 37 45 49 50 46 51 102 62 32 60 37 43 45 49 50 46 51 102 62 32 60 37 45 43 49 50 46 51 102 62 32 60 37 32 45 49 50 46 51 102 62 32 60 37 45 32 49 50 46 51 102 62 10 0

@9079$float8$minus123.456#:
x38488:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@9080$float8$minus123.456#:
x38496:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@9081$float8$minus123.456#:
x38504:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@9082$float8$minus123.456#:
x38512:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@9083$float8$minus123.456#:
x38520:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@9084$float8$minus123.456#:
x38528:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@9085$float8$minus123.456#:
x38536:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@9086$float8$minus123.456#:
x38544:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@9096$string_3C250122E3f3E203C252B0122E3f3E203C25200122E3f3E203C25020122E3f3E0A#:
x38552:	db "<%012.3f> <%+012.3f> <% 012.3f> <%0 12.3f>", 10, 0	; 44: 60 37 48 49 50 46 51 102 62 32 60 37 43 48 49 50 46 51 102 62 32 60 37 32 48 49 50 46 51 102 62 32 60 37 48 32 49 50 46 51 102 62 10 0

@9097$float8$123.456#:
x38596:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@9098$float8$123.456#:
x38604:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@9099$float8$123.456#:
x38612:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@9100$float8$123.456#:
x38620:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@9106$string_3C250122E3f3E203C252B0122E3f3E203C25200122E3f3E203C25020122E3f3E0A#:
x38628:	db "<%012.3f> <%+012.3f> <% 012.3f> <%0 12.3f>", 10, 0	; 44: 60 37 48 49 50 46 51 102 62 32 60 37 43 48 49 50 46 51 102 62 32 60 37 32 48 49 50 46 51 102 62 32 60 37 48 32 49 50 46 51 102 62 10 0

@9107$float8$minus123.456#:
x38672:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@9108$float8$minus123.456#:
x38680:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@9109$float8$minus123.456#:
x38688:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@9110$float8$minus123.456#:
x38696:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

limits_test:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

limits_test$1:	; Parameter 6 string_CHAR_BIT203D2025i0A# 6
x38704:	mov word [bp + 12], @9494$string_CHAR_BIT203D2025i0A#	; 5: 199 70 12 253 152

limits_test$2:	; Parameter 6 8 8
x38709:	mov word [bp + 14], 8	; 5: 199 70 14 8 0

limits_test$3:	; Call 6 printf 0
x38714:	mov word [bp + 6], limits_test$4	; 5: 199 70 6 77 151
x38719:	mov [bp + 8], bp	; 3: 137 110 8
x38722:	add bp, 6	; 3: 131 197 6
x38725:	mov di, bp	; 2: 137 239
x38727:	add di, 2	; 3: 131 199 2
x38730:	jmp printf	; 3: 233 183 117

limits_test$4:	; PostCall 6

limits_test$5:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

limits_test$6:	; Parameter 6 string_CHAR_MIN203D2025i0A0A# 6
x38733:	mov word [bp + 12], @9498$string_CHAR_MIN203D2025i0A0A#	; 5: 199 70 12 12 153

limits_test$7:	; Parameter 6 -128 8
x38738:	mov word [bp + 14], -128	; 5: 199 70 14 128 255

limits_test$8:	; Call 6 printf 0
x38743:	mov word [bp + 6], limits_test$9	; 5: 199 70 6 106 151
x38748:	mov [bp + 8], bp	; 3: 137 110 8
x38751:	add bp, 6	; 3: 131 197 6
x38754:	mov di, bp	; 2: 137 239
x38756:	add di, 2	; 3: 131 199 2
x38759:	jmp printf	; 3: 233 154 117

limits_test$9:	; PostCall 6

limits_test$10:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

limits_test$11:	; Parameter 6 string_CHAR_MAX203D2025i0A# 6
x38762:	mov word [bp + 12], @9503$string_CHAR_MAX203D2025i0A#	; 5: 199 70 12 28 153

limits_test$12:	; Parameter 6 127 8
x38767:	mov word [bp + 14], 127	; 5: 199 70 14 127 0

limits_test$13:	; Call 6 printf 0
x38772:	mov word [bp + 6], limits_test$14	; 5: 199 70 6 135 151
x38777:	mov [bp + 8], bp	; 3: 137 110 8
x38780:	add bp, 6	; 3: 131 197 6
x38783:	mov di, bp	; 2: 137 239
x38785:	add di, 2	; 3: 131 199 2
x38788:	jmp printf	; 3: 233 125 117

limits_test$14:	; PostCall 6

limits_test$15:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

limits_test$16:	; Parameter 6 string_UCHAR_MAX203D2025u0A0A# 6
x38791:	mov word [bp + 12], @9508$string_UCHAR_MAX203D2025u0A0A#	; 5: 199 70 12 43 153

limits_test$17:	; Parameter 6 255 8
x38796:	mov word [bp + 14], 255	; 5: 199 70 14 255 0

limits_test$18:	; Call 6 printf 0
x38801:	mov word [bp + 6], limits_test$19	; 5: 199 70 6 164 151
x38806:	mov [bp + 8], bp	; 3: 137 110 8
x38809:	add bp, 6	; 3: 131 197 6
x38812:	mov di, bp	; 2: 137 239
x38814:	add di, 2	; 3: 131 199 2
x38817:	jmp printf	; 3: 233 96 117

limits_test$19:	; PostCall 6

limits_test$20:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

limits_test$21:	; Parameter 6 string_SHRT_MIN203D2025i0A# 6
x38820:	mov word [bp + 12], @9513$string_SHRT_MIN203D2025i0A#	; 5: 199 70 12 60 153

limits_test$22:	; Parameter 6 -128 8
x38825:	mov word [bp + 14], -128	; 5: 199 70 14 128 255

limits_test$23:	; Call 6 printf 0
x38830:	mov word [bp + 6], limits_test$24	; 5: 199 70 6 193 151
x38835:	mov [bp + 8], bp	; 3: 137 110 8
x38838:	add bp, 6	; 3: 131 197 6
x38841:	mov di, bp	; 2: 137 239
x38843:	add di, 2	; 3: 131 199 2
x38846:	jmp printf	; 3: 233 67 117

limits_test$24:	; PostCall 6

limits_test$25:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

limits_test$26:	; Parameter 6 string_SHRT_MAX203D2025i0A# 6
x38849:	mov word [bp + 12], @9518$string_SHRT_MAX203D2025i0A#	; 5: 199 70 12 75 153

limits_test$27:	; Parameter 6 127 8
x38854:	mov word [bp + 14], 127	; 5: 199 70 14 127 0

limits_test$28:	; Call 6 printf 0
x38859:	mov word [bp + 6], limits_test$29	; 5: 199 70 6 222 151
x38864:	mov [bp + 8], bp	; 3: 137 110 8
x38867:	add bp, 6	; 3: 131 197 6
x38870:	mov di, bp	; 2: 137 239
x38872:	add di, 2	; 3: 131 199 2
x38875:	jmp printf	; 3: 233 38 117

limits_test$29:	; PostCall 6

limits_test$30:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

limits_test$31:	; Parameter 6 string_USHRT_MAX203D2025u0A0A# 6
x38878:	mov word [bp + 12], @9523$string_USHRT_MAX203D2025u0A0A#	; 5: 199 70 12 90 153

limits_test$32:	; Parameter 6 255 8
x38883:	mov word [bp + 14], 255	; 5: 199 70 14 255 0

limits_test$33:	; Call 6 printf 0
x38888:	mov word [bp + 6], limits_test$34	; 5: 199 70 6 251 151
x38893:	mov [bp + 8], bp	; 3: 137 110 8
x38896:	add bp, 6	; 3: 131 197 6
x38899:	mov di, bp	; 2: 137 239
x38901:	add di, 2	; 3: 131 199 2
x38904:	jmp printf	; 3: 233 9 117

limits_test$34:	; PostCall 6

limits_test$35:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

limits_test$36:	; Parameter 6 string_INT_MIN203D2025i0A# 6
x38907:	mov word [bp + 12], @9528$string_INT_MIN203D2025i0A#	; 5: 199 70 12 107 153

limits_test$37:	; Parameter 6 -32768 8
x38912:	mov word [bp + 14], -32768	; 5: 199 70 14 0 128

limits_test$38:	; Call 6 printf 0
x38917:	mov word [bp + 6], limits_test$39	; 5: 199 70 6 24 152
x38922:	mov [bp + 8], bp	; 3: 137 110 8
x38925:	add bp, 6	; 3: 131 197 6
x38928:	mov di, bp	; 2: 137 239
x38930:	add di, 2	; 3: 131 199 2
x38933:	jmp printf	; 3: 233 236 116

limits_test$39:	; PostCall 6

limits_test$40:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

limits_test$41:	; Parameter 6 string_INT_MAX203D2025i0A# 6
x38936:	mov word [bp + 12], @9532$string_INT_MAX203D2025i0A#	; 5: 199 70 12 121 153

limits_test$42:	; Parameter 6 32767 8
x38941:	mov word [bp + 14], 32767	; 5: 199 70 14 255 127

limits_test$43:	; Call 6 printf 0
x38946:	mov word [bp + 6], limits_test$44	; 5: 199 70 6 53 152
x38951:	mov [bp + 8], bp	; 3: 137 110 8
x38954:	add bp, 6	; 3: 131 197 6
x38957:	mov di, bp	; 2: 137 239
x38959:	add di, 2	; 3: 131 199 2
x38962:	jmp printf	; 3: 233 207 116

limits_test$44:	; PostCall 6

limits_test$45:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

limits_test$46:	; Parameter 6 string_UINT_MAX203D2025u0A0A# 6
x38965:	mov word [bp + 12], @9536$string_UINT_MAX203D2025u0A0A#	; 5: 199 70 12 135 153

limits_test$47:	; Parameter 6 65535 8
x38970:	mov word [bp + 14], 65535	; 5: 199 70 14 255 255

limits_test$48:	; Call 6 printf 0
x38975:	mov word [bp + 6], limits_test$49	; 5: 199 70 6 82 152
x38980:	mov [bp + 8], bp	; 3: 137 110 8
x38983:	add bp, 6	; 3: 131 197 6
x38986:	mov di, bp	; 2: 137 239
x38988:	add di, 2	; 3: 131 199 2
x38991:	jmp printf	; 3: 233 178 116

limits_test$49:	; PostCall 6

limits_test$50:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

limits_test$51:	; Parameter 6 string_LONG_MIN203D2025li0A# 6
x38994:	mov word [bp + 12], @9540$string_LONG_MIN203D2025li0A#	; 5: 199 70 12 151 153

limits_test$52:	; Parameter 6 -2147483648 8
x38999:	mov dword [bp + 14], -2147483648	; 8: 102 199 70 14 0 0 0 128

limits_test$53:	; Call 6 printf 0
x39007:	mov word [bp + 6], limits_test$54	; 5: 199 70 6 114 152
x39012:	mov [bp + 8], bp	; 3: 137 110 8
x39015:	add bp, 6	; 3: 131 197 6
x39018:	mov di, bp	; 2: 137 239
x39020:	add di, 4	; 3: 131 199 4
x39023:	jmp printf	; 3: 233 146 116

limits_test$54:	; PostCall 6

limits_test$55:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

limits_test$56:	; Parameter 6 string_LONG_MAX203D2025li0A# 6
x39026:	mov word [bp + 12], @9544$string_LONG_MAX203D2025li0A#	; 5: 199 70 12 167 153

limits_test$57:	; Parameter 6 2147483647 8
x39031:	mov dword [bp + 14], 2147483647	; 8: 102 199 70 14 255 255 255 127

limits_test$58:	; Call 6 printf 0
x39039:	mov word [bp + 6], limits_test$59	; 5: 199 70 6 146 152
x39044:	mov [bp + 8], bp	; 3: 137 110 8
x39047:	add bp, 6	; 3: 131 197 6
x39050:	mov di, bp	; 2: 137 239
x39052:	add di, 4	; 3: 131 199 4
x39055:	jmp printf	; 3: 233 114 116

limits_test$59:	; PostCall 6

limits_test$60:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

limits_test$61:	; Parameter 6 string_ULONG_MAX203D2025lu0A# 6
x39058:	mov word [bp + 12], @9548$string_ULONG_MAX203D2025lu0A#	; 5: 199 70 12 183 153

limits_test$62:	; Parameter 6 4294967295 8
x39063:	mov dword [bp + 14], -1	; 8: 102 199 70 14 255 255 255 255

limits_test$63:	; Call 6 printf 0
x39071:	mov word [bp + 6], limits_test$64	; 5: 199 70 6 178 152
x39076:	mov [bp + 8], bp	; 3: 137 110 8
x39079:	add bp, 6	; 3: 131 197 6
x39082:	mov di, bp	; 2: 137 239
x39084:	add di, 4	; 3: 131 199 4
x39087:	jmp printf	; 3: 233 82 116

limits_test$64:	; PostCall 6

limits_test$65:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

limits_test$66:	; Parameter 6 string_ULONG_MAX203D2025lx0A# 6
x39090:	mov word [bp + 12], @9552$string_ULONG_MAX203D2025lx0A#	; 5: 199 70 12 200 153

limits_test$67:	; Parameter 6 4294967295 8
x39095:	mov dword [bp + 14], -1	; 8: 102 199 70 14 255 255 255 255

limits_test$68:	; Call 6 printf 0
x39103:	mov word [bp + 6], limits_test$69	; 5: 199 70 6 210 152
x39108:	mov [bp + 8], bp	; 3: 137 110 8
x39111:	add bp, 6	; 3: 131 197 6
x39114:	mov di, bp	; 2: 137 239
x39116:	add di, 4	; 3: 131 199 4
x39119:	jmp printf	; 3: 233 50 116

limits_test$69:	; PostCall 6

limits_test$70:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

limits_test$71:	; Parameter 6 string_ULONG_MAX203D2025lX0A# 6
x39122:	mov word [bp + 12], @9556$string_ULONG_MAX203D2025lX0A#	; 5: 199 70 12 217 153

limits_test$72:	; Parameter 6 4294967295 8
x39127:	mov dword [bp + 14], -1	; 8: 102 199 70 14 255 255 255 255

limits_test$73:	; Call 6 printf 0
x39135:	mov word [bp + 6], limits_test$74	; 5: 199 70 6 242 152
x39140:	mov [bp + 8], bp	; 3: 137 110 8
x39143:	add bp, 6	; 3: 131 197 6
x39146:	mov di, bp	; 2: 137 239
x39148:	add di, 4	; 3: 131 199 4
x39151:	jmp printf	; 3: 233 18 116

limits_test$74:	; PostCall 6

limits_test$75:	; Return 0
x39154:	mov ax, [bp]	; 3: 139 70 0
x39157:	mov di, [bp + 4]	; 3: 139 126 4
x39160:	mov bp, [bp + 2]	; 3: 139 110 2
x39163:	jmp ax	; 2: 255 224

limits_test$76:	; FunctionEnd limits_test

@9494$string_CHAR_BIT203D2025i0A#:
x39165:	db "CHAR_BIT = %i", 10, 0	; 15: 67 72 65 82 95 66 73 84 32 61 32 37 105 10 0

@9498$string_CHAR_MIN203D2025i0A0A#:
x39180:	db "CHAR_MIN = %i", 10, 10, 0	; 16: 67 72 65 82 95 77 73 78 32 61 32 37 105 10 10 0

@9503$string_CHAR_MAX203D2025i0A#:
x39196:	db "CHAR_MAX = %i", 10, 0	; 15: 67 72 65 82 95 77 65 88 32 61 32 37 105 10 0

@9508$string_UCHAR_MAX203D2025u0A0A#:
x39211:	db "UCHAR_MAX = %u", 10, 10, 0	; 17: 85 67 72 65 82 95 77 65 88 32 61 32 37 117 10 10 0

@9513$string_SHRT_MIN203D2025i0A#:
x39228:	db "SHRT_MIN = %i", 10, 0	; 15: 83 72 82 84 95 77 73 78 32 61 32 37 105 10 0

@9518$string_SHRT_MAX203D2025i0A#:
x39243:	db "SHRT_MAX = %i", 10, 0	; 15: 83 72 82 84 95 77 65 88 32 61 32 37 105 10 0

@9523$string_USHRT_MAX203D2025u0A0A#:
x39258:	db "USHRT_MAX = %u", 10, 10, 0	; 17: 85 83 72 82 84 95 77 65 88 32 61 32 37 117 10 10 0

@9528$string_INT_MIN203D2025i0A#:
x39275:	db "INT_MIN = %i", 10, 0	; 14: 73 78 84 95 77 73 78 32 61 32 37 105 10 0

@9532$string_INT_MAX203D2025i0A#:
x39289:	db "INT_MAX = %i", 10, 0	; 14: 73 78 84 95 77 65 88 32 61 32 37 105 10 0

@9536$string_UINT_MAX203D2025u0A0A#:
x39303:	db "UINT_MAX = %u", 10, 10, 0	; 16: 85 73 78 84 95 77 65 88 32 61 32 37 117 10 10 0

@9540$string_LONG_MIN203D2025li0A#:
x39319:	db "LONG_MIN = %li", 10, 0	; 16: 76 79 78 71 95 77 73 78 32 61 32 37 108 105 10 0

@9544$string_LONG_MAX203D2025li0A#:
x39335:	db "LONG_MAX = %li", 10, 0	; 16: 76 79 78 71 95 77 65 88 32 61 32 37 108 105 10 0

@9548$string_ULONG_MAX203D2025lu0A#:
x39351:	db "ULONG_MAX = %lu", 10, 0	; 17: 85 76 79 78 71 95 77 65 88 32 61 32 37 108 117 10 0

@9552$string_ULONG_MAX203D2025lx0A#:
x39368:	db "ULONG_MAX = %lx", 10, 0	; 17: 85 76 79 78 71 95 77 65 88 32 61 32 37 108 120 10 0

@9556$string_ULONG_MAX203D2025lX0A#:
x39385:	db "ULONG_MAX = %lX", 10, 0	; 17: 85 76 79 78 71 95 77 65 88 32 61 32 37 108 88 10 0

float_test:	; Empty

float_test$1:	; Return 0
x39402:	mov ax, [bp]	; 3: 139 70 0
x39405:	mov di, [bp + 4]	; 3: 139 126 4
x39408:	mov bp, [bp + 2]	; 3: 139 110 2
x39411:	jmp ax	; 2: 255 224

float_test$2:	; FunctionEnd float_test

setjmp_test:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

setjmp_test$1:	; PushFloat 10
x39413:	fld qword [@10110$float8$10#]	; 4: 221 6 61 154

setjmp_test$2:	; Parameter 6 10 6
x39417:	fstp qword [bp + 12]	; 3: 221 94 12

setjmp_test$3:	; Call 6 test 0
x39420:	mov word [bp + 6], setjmp_test$4	; 5: 199 70 6 10 154
x39425:	mov [bp + 8], bp	; 3: 137 110 8
x39428:	add bp, 6	; 3: 131 197 6
x39431:	nop	; 1: 144
x39432:	jmp test	; 2: 235 67

setjmp_test$4:	; PostCall 6

setjmp_test$5:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

setjmp_test$6:	; PushZero
x39434:	fldz	; 2: 217 238

setjmp_test$7:	; Parameter 6 0 6
x39436:	fstp qword [bp + 12]	; 3: 221 94 12

setjmp_test$8:	; Call 6 test 0
x39439:	mov word [bp + 6], setjmp_test$9	; 5: 199 70 6 29 154
x39444:	mov [bp + 8], bp	; 3: 137 110 8
x39447:	add bp, 6	; 3: 131 197 6
x39450:	nop	; 1: 144
x39451:	jmp test	; 2: 235 48

setjmp_test$9:	; PostCall 6

setjmp_test$10:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

setjmp_test$11:	; PushFloat 0.1
x39453:	fld qword [@10117$float8$0.1#]	; 4: 221 6 69 154

setjmp_test$12:	; Parameter 6 0.1 6
x39457:	fstp qword [bp + 12]	; 3: 221 94 12

setjmp_test$13:	; Call 6 test 0
x39460:	mov word [bp + 6], setjmp_test$14	; 5: 199 70 6 50 154
x39465:	mov [bp + 8], bp	; 3: 137 110 8
x39468:	add bp, 6	; 3: 131 197 6
x39471:	nop	; 1: 144
x39472:	jmp test	; 2: 235 27

setjmp_test$14:	; PostCall 6

setjmp_test$15:	; Return 0
x39474:	mov ax, [bp]	; 3: 139 70 0
x39477:	mov di, [bp + 4]	; 3: 139 126 4
x39480:	mov bp, [bp + 2]	; 3: 139 110 2
x39483:	jmp ax	; 2: 255 224

setjmp_test$16:	; FunctionEnd setjmp_test

@10110$float8$10#:
x39485:	dq 10.0	; 8: 0 0 0 0 0 0 36 64

@10117$float8$0.1#:
x39493:	dq 0.1	; 8: 154 153 153 153 153 153 185 63

test:	; CallHeader 16 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

test$1:	; Parameter 16 buffer 6
x39501:	mov word [bp + 22], buffer	; 5: 199 70 22 201 154

test$2:	; Call 16 setjmp 0
x39506:	mov word [bp + 16], test$3	; 5: 199 70 16 96 154
x39511:	mov [bp + 18], bp	; 3: 137 110 18
x39514:	add bp, 16	; 3: 131 197 16
x39517:	jmp setjmp	; 3: 233 130 0

test$3:	; PostCall 16

test$4:	; GetReturnValue £temporary4514

test$5:	; Assign message £temporary4514
x39520:	mov [bp + 14], bx	; 3: 137 94 14

test$6:	; NotEqual 21 message 0
x39523:	cmp word [bp + 14], 0	; 4: 131 126 14 0
x39527:	jne test$21	; 2: 117 55

test$7:	; CallHeader 16 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

test$8:	; Parameter 16 string_12E0202F2025f203D2025f0A# 6
x39529:	mov word [bp + 22], @10096$string_12E0202F2025f203D2025f0A#	; 5: 199 70 22 207 154

test$9:	; PushFloat x
x39534:	fld qword [bp + 6]	; 3: 221 70 6

test$10:	; Parameter 16 x 8
x39537:	fstp qword [bp + 24]	; 3: 221 94 24

test$11:	; CallHeader 16 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

test$12:	; PushFloat x
x39540:	fld qword [bp + 6]	; 3: 221 70 6

test$13:	; Parameter 16 x 22
x39543:	fstp qword [bp + 38]	; 3: 221 94 38

test$14:	; Call 16 inverse 16
x39546:	mov word [bp + 32], test$15	; 5: 199 70 32 136 154
x39551:	mov [bp + 34], bp	; 3: 137 110 34
x39554:	add bp, 32	; 3: 131 197 32
x39557:	jmp inverse	; 3: 233 141 0

test$15:	; PostCall 16

test$16:	; GetReturnValue £temporary4516

test$17:	; Parameter 16 £temporary4516 16
x39560:	fstp qword [bp + 32]	; 3: 221 94 32

test$18:	; Call 16 printf 0
x39563:	mov word [bp + 16], test$19	; 5: 199 70 16 158 154
x39568:	mov [bp + 18], bp	; 3: 137 110 18
x39571:	add bp, 16	; 3: 131 197 16
x39574:	mov di, bp	; 2: 137 239
x39576:	add di, 16	; 3: 131 199 16
x39579:	jmp printf	; 3: 233 102 114

test$19:	; PostCall 16

test$20:	; Goto 26
x39582:	jmp test$26	; 2: 235 30

test$21:	; CallHeader 16 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

test$22:	; Parameter 16 string_25s0A# 6
x39584:	mov word [bp + 22], @10099$string_25s0A#	; 5: 199 70 22 222 154

test$23:	; Parameter 16 message 8
x39589:	mov ax, [bp + 14]	; 3: 139 70 14
x39592:	mov [bp + 24], ax	; 3: 137 70 24

test$24:	; Call 16 printf 0
x39595:	mov word [bp + 16], test$25	; 5: 199 70 16 190 154
x39600:	mov [bp + 18], bp	; 3: 137 110 18
x39603:	add bp, 16	; 3: 131 197 16
x39606:	mov di, bp	; 2: 137 239
x39608:	add di, 2	; 3: 131 199 2
x39611:	jmp printf	; 3: 233 70 114

test$25:	; PostCall 16

test$26:	; Return 0
x39614:	mov ax, [bp]	; 3: 139 70 0
x39617:	mov di, [bp + 4]	; 3: 139 126 4
x39620:	mov bp, [bp + 2]	; 3: 139 110 2
x39623:	jmp ax	; 2: 255 224

test$27:	; FunctionEnd test

buffer:
x39625:	db 0, 0, 0, 0, 0, 0	; 6: 0 0 0 0 0 0

@10096$string_12E0202F2025f203D2025f0A#:
x39631:	db "1.0 / %f = %f", 10, 0	; 15: 49 46 48 32 47 32 37 102 32 61 32 37 102 10 0

@10099$string_25s0A#:
x39646:	db "%s", 10, 0	; 4: 37 115 10 0

setjmp:	; InspectRegister £temporary628 bp

setjmp$1:	; Assign bp_pointer £temporary628
x39650:	mov [bp + 8], bp	; 3: 137 110 8

setjmp$2:	; Deref £temporary629 -> buf buf 0
x39653:	mov si, [bp + 6]	; 3: 139 118 6

setjmp$3:	; Deref £temporary630 -> bp_pointer bp_pointer 0
x39656:	mov di, [bp + 8]	; 3: 139 126 8

setjmp$4:	; Assign £temporary629 -> buf £temporary630 -> bp_pointer
x39659:	mov ax, [di]	; 2: 139 5
x39661:	mov [si], ax	; 2: 137 4

setjmp$5:	; Deref £temporary631 -> buf buf 2
x39663:	mov si, [bp + 6]	; 3: 139 118 6

setjmp$6:	; Deref £temporary632 -> bp_pointer bp_pointer 2
x39666:	mov di, [bp + 8]	; 3: 139 126 8

setjmp$7:	; Assign £temporary631 -> buf £temporary632 -> bp_pointer
x39669:	mov ax, [di + 2]	; 3: 139 69 2
x39672:	mov [si + 2], ax	; 3: 137 68 2

setjmp$8:	; Deref £temporary633 -> buf buf 4
x39675:	mov si, [bp + 6]	; 3: 139 118 6

setjmp$9:	; Deref £temporary634 -> bp_pointer bp_pointer 4
x39678:	mov di, [bp + 8]	; 3: 139 126 8

setjmp$10:	; Assign £temporary633 -> buf £temporary634 -> bp_pointer
x39681:	mov ax, [di + 4]	; 3: 139 69 4
x39684:	mov [si + 4], ax	; 3: 137 68 4

setjmp$11:	; SetReturnValue 0
x39687:	mov bx, 0	; 3: 187 0 0

setjmp$12:	; Return 0
x39690:	mov ax, [bp]	; 3: 139 70 0
x39693:	mov di, [bp + 4]	; 3: 139 126 4
x39696:	mov bp, [bp + 2]	; 3: 139 110 2
x39699:	jmp ax	; 2: 255 224

setjmp$13:	; FunctionEnd setjmp

inverse:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

inverse$1:	; PushOne
x39701:	fld1	; 2: 217 232

inverse$2:	; Parameter 14 1 6
x39703:	fstp qword [bp + 20]	; 3: 221 94 20

inverse$3:	; PushFloat x
x39706:	fld qword [bp + 6]	; 3: 221 70 6

inverse$4:	; Parameter 14 x 14
x39709:	fstp qword [bp + 28]	; 3: 221 94 28

inverse$5:	; Call 14 divide 0
x39712:	mov word [bp + 14], inverse$6	; 5: 199 70 14 46 155
x39717:	mov [bp + 16], bp	; 3: 137 110 16
x39720:	add bp, 14	; 3: 131 197 14
x39723:	nop	; 1: 144
x39724:	jmp divide	; 2: 235 11

inverse$6:	; PostCall 14

inverse$7:	; GetReturnValue £temporary4506

inverse$8:	; SetReturnValue £temporary4506

inverse$9:	; Return £temporary4506
x39726:	mov ax, [bp]	; 3: 139 70 0
x39729:	mov di, [bp + 4]	; 3: 139 126 4
x39732:	mov bp, [bp + 2]	; 3: 139 110 2
x39735:	jmp ax	; 2: 255 224

inverse$10:	; FunctionEnd inverse

divide:	; PushFloat y
x39737:	fld qword [bp + 14]	; 3: 221 70 14

divide$1:	; PushZero
x39740:	fldz	; 2: 217 238

divide$2:	; Equal 8 y 0
x39742:	fcompp	; 2: 222 217
x39744:	fstsw ax	; 3: 155 223 224
x39747:	sahf	; 1: 158
x39748:	je divide$8	; 2: 116 19

divide$3:	; PushFloat x
x39750:	fld qword [bp + 6]	; 3: 221 70 6

divide$4:	; PushFloat y
x39753:	fld qword [bp + 14]	; 3: 221 70 14

divide$5:	; SignedDivide £temporary4510 x y
x39756:	fdiv	; 2: 222 249

divide$6:	; SetReturnValue £temporary4510

divide$7:	; Return £temporary4510
x39758:	mov ax, [bp]	; 3: 139 70 0
x39761:	mov di, [bp + 4]	; 3: 139 126 4
x39764:	mov bp, [bp + 2]	; 3: 139 110 2
x39767:	jmp ax	; 2: 255 224

divide$8:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

divide$9:	; Parameter 22 buffer 6
x39769:	mov word [bp + 28], buffer	; 5: 199 70 28 201 154

divide$10:	; Parameter 22 string_Division20by20Zero2E# 8
x39774:	mov word [bp + 30], @10084$string_Division20by20Zero2E#	; 5: 199 70 30 126 155

divide$11:	; Call 22 longjmp 0
x39779:	mov word [bp + 22], divide$12	; 5: 199 70 22 113 155
x39784:	mov [bp + 24], bp	; 3: 137 110 24
x39787:	add bp, 22	; 3: 131 197 22
x39790:	nop	; 1: 144
x39791:	jmp longjmp	; 2: 235 31

divide$12:	; PostCall 22

divide$13:	; PushZero
x39793:	fldz	; 2: 217 238

divide$14:	; SetReturnValue 0

divide$15:	; Return 0
x39795:	mov ax, [bp]	; 3: 139 70 0
x39798:	mov di, [bp + 4]	; 3: 139 126 4
x39801:	mov bp, [bp + 2]	; 3: 139 110 2
x39804:	jmp ax	; 2: 255 224

divide$16:	; FunctionEnd divide

@10084$string_Division20by20Zero2E#:
x39806:	db "Division by Zero.", 0	; 18: 68 105 118 105 115 105 111 110 32 98 121 32 90 101 114 111 46 0

longjmp:	; AssignRegister bx return_value
x39824:	mov bx, [bp + 8]	; 3: 139 94 8

longjmp$1:	; Deref £temporary637 -> buf buf 0
x39827:	mov si, [bp + 6]	; 3: 139 118 6

longjmp$2:	; AssignRegister cx £temporary637 -> buf
x39830:	mov cx, [si]	; 2: 139 12

longjmp$3:	; Deref £temporary639 -> buf buf 4
x39832:	mov si, [bp + 6]	; 3: 139 118 6

longjmp$4:	; AssignRegister di £temporary639 -> buf
x39835:	mov di, [si + 4]	; 3: 139 124 4

longjmp$5:	; Deref £temporary641 -> buf buf 2
x39838:	mov si, [bp + 6]	; 3: 139 118 6

longjmp$6:	; AssignRegister bp £temporary641 -> buf
x39841:	mov bp, [si + 2]	; 3: 139 108 2

longjmp$7:	; JumpRegister cx
x39844:	jmp cx	; 2: 255 225

longjmp$8:	; Return 0
x39846:	mov ax, [bp]	; 3: 139 70 0
x39849:	mov di, [bp + 4]	; 3: 139 126 4
x39852:	mov bp, [bp + 2]	; 3: 139 110 2
x39855:	jmp ax	; 2: 255 224

longjmp$9:	; FunctionEnd longjmp

stdio_test:	; Assign n 0
x39857:	mov word [bp + 6], 0	; 5: 199 70 6 0 0

stdio_test$1:	; address £temporary5600 n
x39862:	mov si, bp	; 2: 137 238
x39864:	add si, 6	; 3: 131 198 6

stdio_test$2:	; Assign p £temporary5600
x39867:	mov [bp + 8], si	; 3: 137 118 8

stdio_test$3:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$4:	; Parameter 10 string_3C25i3E203C25i3E203C25li3E203C25li3E203C25u3E203C25lu3E0A0A# 6
x39870:	mov word [bp + 16], @12122$string_3C25i3E203C25i3E203C25li3E203C25li3E203C25u3E203C25lu3E0A0A#	; 5: 199 70 16 153 163

stdio_test$5:	; Parameter 10 123 8
x39875:	mov word [bp + 18], 123	; 5: 199 70 18 123 0

stdio_test$6:	; Parameter 10 -123 10
x39880:	mov word [bp + 20], -123	; 5: 199 70 20 133 255

stdio_test$7:	; Parameter 10 123 12
x39885:	mov dword [bp + 22], 123	; 8: 102 199 70 22 123 0 0 0

stdio_test$8:	; Parameter 10 -123 16
x39893:	mov dword [bp + 26], -123	; 8: 102 199 70 26 133 255 255 255

stdio_test$9:	; Parameter 10 123 20
x39901:	mov word [bp + 30], 123	; 5: 199 70 30 123 0

stdio_test$10:	; Parameter 10 123 22
x39906:	mov dword [bp + 32], 123	; 8: 102 199 70 32 123 0 0 0

stdio_test$11:	; Call 10 printf 0
x39914:	mov word [bp + 10], stdio_test$12	; 5: 199 70 10 253 155
x39919:	mov [bp + 12], bp	; 3: 137 110 12
x39922:	add bp, 10	; 3: 131 197 10
x39925:	mov di, bp	; 2: 137 239
x39927:	add di, 18	; 3: 131 199 18
x39930:	jmp printf	; 3: 233 7 113

stdio_test$12:	; PostCall 10

stdio_test$13:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$14:	; Parameter 10 string_3C256i3E203C256i3E203C256li3E203C256li3E203C256u3E203C256lu3E0A# 6
x39933:	mov word [bp + 16], @12136$string_3C256i3E203C256i3E203C256li3E203C256li3E203C256u3E203C256lu3E0A#	; 5: 199 70 16 188 163

stdio_test$15:	; Parameter 10 123 8
x39938:	mov word [bp + 18], 123	; 5: 199 70 18 123 0

stdio_test$16:	; Parameter 10 -123 10
x39943:	mov word [bp + 20], -123	; 5: 199 70 20 133 255

stdio_test$17:	; Parameter 10 123 12
x39948:	mov dword [bp + 22], 123	; 8: 102 199 70 22 123 0 0 0

stdio_test$18:	; Parameter 10 -123 16
x39956:	mov dword [bp + 26], -123	; 8: 102 199 70 26 133 255 255 255

stdio_test$19:	; Parameter 10 123 20
x39964:	mov word [bp + 30], 123	; 5: 199 70 30 123 0

stdio_test$20:	; Parameter 10 123 22
x39969:	mov dword [bp + 32], 123	; 8: 102 199 70 32 123 0 0 0

stdio_test$21:	; Call 10 printf 0
x39977:	mov word [bp + 10], stdio_test$22	; 5: 199 70 10 60 156
x39982:	mov [bp + 12], bp	; 3: 137 110 12
x39985:	add bp, 10	; 3: 131 197 10
x39988:	mov di, bp	; 2: 137 239
x39990:	add di, 18	; 3: 131 199 18
x39993:	jmp printf	; 3: 233 200 112

stdio_test$22:	; PostCall 10

stdio_test$23:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$24:	; Parameter 10 string_3C252B6i3E203C252B6i3E203C252B6li3E203C252B6li3E203C252B6u3E203C252B6lu3E0A# 6
x39996:	mov word [bp + 16], @12150$string_3C252B6i3E203C252B6i3E203C252B6li3E203C252B6li3E203C252B6u3E203C252B6lu3E0A#	; 5: 199 70 16 228 163

stdio_test$25:	; Parameter 10 123 8
x40001:	mov word [bp + 18], 123	; 5: 199 70 18 123 0

stdio_test$26:	; Parameter 10 -123 10
x40006:	mov word [bp + 20], -123	; 5: 199 70 20 133 255

stdio_test$27:	; Parameter 10 123 12
x40011:	mov dword [bp + 22], 123	; 8: 102 199 70 22 123 0 0 0

stdio_test$28:	; Parameter 10 -123 16
x40019:	mov dword [bp + 26], -123	; 8: 102 199 70 26 133 255 255 255

stdio_test$29:	; Parameter 10 123 20
x40027:	mov word [bp + 30], 123	; 5: 199 70 30 123 0

stdio_test$30:	; Parameter 10 123 22
x40032:	mov dword [bp + 32], 123	; 8: 102 199 70 32 123 0 0 0

stdio_test$31:	; Call 10 printf 0
x40040:	mov word [bp + 10], stdio_test$32	; 5: 199 70 10 123 156
x40045:	mov [bp + 12], bp	; 3: 137 110 12
x40048:	add bp, 10	; 3: 131 197 10
x40051:	mov di, bp	; 2: 137 239
x40053:	add di, 18	; 3: 131 199 18
x40056:	jmp printf	; 3: 233 137 112

stdio_test$32:	; PostCall 10

stdio_test$33:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$34:	; Parameter 10 string_3C252D6i3E203C252D6i3E203C252D6li3E203C252D6li3E203C252D6u3E203C252D6lu3E0A# 6
x40059:	mov word [bp + 16], @12164$string_3C252D6i3E203C252D6i3E203C252D6li3E203C252D6li3E203C252D6u3E203C252D6lu3E0A#	; 5: 199 70 16 18 164

stdio_test$35:	; Parameter 10 123 8
x40064:	mov word [bp + 18], 123	; 5: 199 70 18 123 0

stdio_test$36:	; Parameter 10 -123 10
x40069:	mov word [bp + 20], -123	; 5: 199 70 20 133 255

stdio_test$37:	; Parameter 10 123 12
x40074:	mov dword [bp + 22], 123	; 8: 102 199 70 22 123 0 0 0

stdio_test$38:	; Parameter 10 -123 16
x40082:	mov dword [bp + 26], -123	; 8: 102 199 70 26 133 255 255 255

stdio_test$39:	; Parameter 10 123 20
x40090:	mov word [bp + 30], 123	; 5: 199 70 30 123 0

stdio_test$40:	; Parameter 10 123 22
x40095:	mov dword [bp + 32], 123	; 8: 102 199 70 32 123 0 0 0

stdio_test$41:	; Call 10 printf 0
x40103:	mov word [bp + 10], stdio_test$42	; 5: 199 70 10 186 156
x40108:	mov [bp + 12], bp	; 3: 137 110 12
x40111:	add bp, 10	; 3: 131 197 10
x40114:	mov di, bp	; 2: 137 239
x40116:	add di, 18	; 3: 131 199 18
x40119:	jmp printf	; 3: 233 74 112

stdio_test$42:	; PostCall 10

stdio_test$43:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$44:	; Parameter 10 string_3C252B2D6i3E203C252B2D6i3E203C252B2D6li3E203C252B2D6li3E203C252B2D6u3E203C252B2D6lu3E0A0A# 6
x40122:	mov word [bp + 16], @12178$string_3C252B2D6i3E203C252B2D6i3E203C252B2D6li3E203C252B2D6li3E203C252B2D6u3E203C252B2D6lu3E0A0A#	; 5: 199 70 16 64 164

stdio_test$45:	; Parameter 10 123 8
x40127:	mov word [bp + 18], 123	; 5: 199 70 18 123 0

stdio_test$46:	; Parameter 10 -123 10
x40132:	mov word [bp + 20], -123	; 5: 199 70 20 133 255

stdio_test$47:	; Parameter 10 123 12
x40137:	mov dword [bp + 22], 123	; 8: 102 199 70 22 123 0 0 0

stdio_test$48:	; Parameter 10 -123 16
x40145:	mov dword [bp + 26], -123	; 8: 102 199 70 26 133 255 255 255

stdio_test$49:	; Parameter 10 123 20
x40153:	mov word [bp + 30], 123	; 5: 199 70 30 123 0

stdio_test$50:	; Parameter 10 123 22
x40158:	mov dword [bp + 32], 123	; 8: 102 199 70 32 123 0 0 0

stdio_test$51:	; Call 10 printf 0
x40166:	mov word [bp + 10], stdio_test$52	; 5: 199 70 10 249 156
x40171:	mov [bp + 12], bp	; 3: 137 110 12
x40174:	add bp, 10	; 3: 131 197 10
x40177:	mov di, bp	; 2: 137 239
x40179:	add di, 18	; 3: 131 199 18
x40182:	jmp printf	; 3: 233 11 112

stdio_test$52:	; PostCall 10

stdio_test$53:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$54:	; Parameter 10 string_3C2506i3E203C2506i3E203C2506li3E203C2506li3E203C2506u3E203C2506lu3E0A# 6
x40185:	mov word [bp + 16], @12196$string_3C2506i3E203C2506i3E203C2506li3E203C2506li3E203C2506u3E203C2506lu3E0A#	; 5: 199 70 16 117 164

stdio_test$55:	; Parameter 10 123 8
x40190:	mov word [bp + 18], 123	; 5: 199 70 18 123 0

stdio_test$56:	; Parameter 10 -123 10
x40195:	mov word [bp + 20], -123	; 5: 199 70 20 133 255

stdio_test$57:	; Parameter 10 123 12
x40200:	mov dword [bp + 22], 123	; 8: 102 199 70 22 123 0 0 0

stdio_test$58:	; Parameter 10 -123 16
x40208:	mov dword [bp + 26], -123	; 8: 102 199 70 26 133 255 255 255

stdio_test$59:	; Parameter 10 123 20
x40216:	mov word [bp + 30], 123	; 5: 199 70 30 123 0

stdio_test$60:	; Parameter 10 123 22
x40221:	mov dword [bp + 32], 123	; 8: 102 199 70 32 123 0 0 0

stdio_test$61:	; Call 10 printf 0
x40229:	mov word [bp + 10], stdio_test$62	; 5: 199 70 10 56 157
x40234:	mov [bp + 12], bp	; 3: 137 110 12
x40237:	add bp, 10	; 3: 131 197 10
x40240:	mov di, bp	; 2: 137 239
x40242:	add di, 18	; 3: 131 199 18
x40245:	jmp printf	; 3: 233 204 111

stdio_test$62:	; PostCall 10

stdio_test$63:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$64:	; Parameter 10 string_3C252B06i3E203C252B06i3E203C252B06li3E203C252B06li3E203C252B06u3E203C252B06lu3E0A# 6
x40248:	mov word [bp + 16], @12210$string_3C252B06i3E203C252B06i3E203C252B06li3E203C252B06li3E203C252B06u3E203C252B06lu3E0A#	; 5: 199 70 16 163 164

stdio_test$65:	; Parameter 10 123 8
x40253:	mov word [bp + 18], 123	; 5: 199 70 18 123 0

stdio_test$66:	; Parameter 10 -123 10
x40258:	mov word [bp + 20], -123	; 5: 199 70 20 133 255

stdio_test$67:	; Parameter 10 123 12
x40263:	mov dword [bp + 22], 123	; 8: 102 199 70 22 123 0 0 0

stdio_test$68:	; Parameter 10 -123 16
x40271:	mov dword [bp + 26], -123	; 8: 102 199 70 26 133 255 255 255

stdio_test$69:	; Parameter 10 123 20
x40279:	mov word [bp + 30], 123	; 5: 199 70 30 123 0

stdio_test$70:	; Parameter 10 123 22
x40284:	mov dword [bp + 32], 123	; 8: 102 199 70 32 123 0 0 0

stdio_test$71:	; Call 10 printf 0
x40292:	mov word [bp + 10], stdio_test$72	; 5: 199 70 10 119 157
x40297:	mov [bp + 12], bp	; 3: 137 110 12
x40300:	add bp, 10	; 3: 131 197 10
x40303:	mov di, bp	; 2: 137 239
x40305:	add di, 18	; 3: 131 199 18
x40308:	jmp printf	; 3: 233 141 111

stdio_test$72:	; PostCall 10

stdio_test$73:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$74:	; Parameter 10 string_3C252D06i3E203C252D06i3E203C252D06li3E203C252D06li3E203C252D06u3E203C252D06lu3E0A# 6
x40311:	mov word [bp + 16], @12224$string_3C252D06i3E203C252D06i3E203C252D06li3E203C252D06li3E203C252D06u3E203C252D06lu3E0A#	; 5: 199 70 16 215 164

stdio_test$75:	; Parameter 10 123 8
x40316:	mov word [bp + 18], 123	; 5: 199 70 18 123 0

stdio_test$76:	; Parameter 10 -123 10
x40321:	mov word [bp + 20], -123	; 5: 199 70 20 133 255

stdio_test$77:	; Parameter 10 123 12
x40326:	mov dword [bp + 22], 123	; 8: 102 199 70 22 123 0 0 0

stdio_test$78:	; Parameter 10 -123 16
x40334:	mov dword [bp + 26], -123	; 8: 102 199 70 26 133 255 255 255

stdio_test$79:	; Parameter 10 123 20
x40342:	mov word [bp + 30], 123	; 5: 199 70 30 123 0

stdio_test$80:	; Parameter 10 123 22
x40347:	mov dword [bp + 32], 123	; 8: 102 199 70 32 123 0 0 0

stdio_test$81:	; Call 10 printf 0
x40355:	mov word [bp + 10], stdio_test$82	; 5: 199 70 10 182 157
x40360:	mov [bp + 12], bp	; 3: 137 110 12
x40363:	add bp, 10	; 3: 131 197 10
x40366:	mov di, bp	; 2: 137 239
x40368:	add di, 18	; 3: 131 199 18
x40371:	jmp printf	; 3: 233 78 111

stdio_test$82:	; PostCall 10

stdio_test$83:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$84:	; Parameter 10 string_3C252B2D06i3E203C252B2D06i3E203C252B2D06li3E203C252B2D06li3E203C252B2D06u3E203C252B2D06lu3E0A0A# 6
x40374:	mov word [bp + 16], @12238$string_3C252B2D06i3E203C252B2D06i3E203C252B2D06li3E203C252B2D06li3E203C252B2D06u3E203C252B2D06lu3E0A0A#	; 5: 199 70 16 11 165

stdio_test$85:	; Parameter 10 123 8
x40379:	mov word [bp + 18], 123	; 5: 199 70 18 123 0

stdio_test$86:	; Parameter 10 -123 10
x40384:	mov word [bp + 20], -123	; 5: 199 70 20 133 255

stdio_test$87:	; Parameter 10 123 12
x40389:	mov dword [bp + 22], 123	; 8: 102 199 70 22 123 0 0 0

stdio_test$88:	; Parameter 10 -123 16
x40397:	mov dword [bp + 26], -123	; 8: 102 199 70 26 133 255 255 255

stdio_test$89:	; Parameter 10 123 20
x40405:	mov word [bp + 30], 123	; 5: 199 70 30 123 0

stdio_test$90:	; Parameter 10 123 22
x40410:	mov dword [bp + 32], 123	; 8: 102 199 70 32 123 0 0 0

stdio_test$91:	; Call 10 printf 0
x40418:	mov word [bp + 10], stdio_test$92	; 5: 199 70 10 245 157
x40423:	mov [bp + 12], bp	; 3: 137 110 12
x40426:	add bp, 10	; 3: 131 197 10
x40429:	mov di, bp	; 2: 137 239
x40431:	add di, 18	; 3: 131 199 18
x40434:	jmp printf	; 3: 233 15 111

stdio_test$92:	; PostCall 10

stdio_test$93:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$94:	; Parameter 10 string_3C25206i3E203C25206i3E203C25206li3E203C25206li3E203C25206u3E203C25206lu3E0A# 6
x40437:	mov word [bp + 16], @12252$string_3C25206i3E203C25206i3E203C25206li3E203C25206li3E203C25206u3E203C25206lu3E0A#	; 5: 199 70 16 70 165

stdio_test$95:	; Parameter 10 123 8
x40442:	mov word [bp + 18], 123	; 5: 199 70 18 123 0

stdio_test$96:	; Parameter 10 -123 10
x40447:	mov word [bp + 20], -123	; 5: 199 70 20 133 255

stdio_test$97:	; Parameter 10 123 12
x40452:	mov dword [bp + 22], 123	; 8: 102 199 70 22 123 0 0 0

stdio_test$98:	; Parameter 10 -123 16
x40460:	mov dword [bp + 26], -123	; 8: 102 199 70 26 133 255 255 255

stdio_test$99:	; Parameter 10 123 20
x40468:	mov word [bp + 30], 123	; 5: 199 70 30 123 0

stdio_test$100:	; Parameter 10 123 22
x40473:	mov dword [bp + 32], 123	; 8: 102 199 70 32 123 0 0 0

stdio_test$101:	; Call 10 printf 0
x40481:	mov word [bp + 10], stdio_test$102	; 5: 199 70 10 52 158
x40486:	mov [bp + 12], bp	; 3: 137 110 12
x40489:	add bp, 10	; 3: 131 197 10
x40492:	mov di, bp	; 2: 137 239
x40494:	add di, 18	; 3: 131 199 18
x40497:	jmp printf	; 3: 233 208 110

stdio_test$102:	; PostCall 10

stdio_test$103:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$104:	; Parameter 10 string_3C252B206i3E203C252B206i3E203C252B206li3E203C252B206li3E203C252B206u3E203C252B206lu3E0A# 6
x40500:	mov word [bp + 16], @12266$string_3C252B206i3E203C252B206i3E203C252B206li3E203C252B206li3E203C252B206u3E203C252B206lu3E0A#	; 5: 199 70 16 116 165

stdio_test$105:	; Parameter 10 123 8
x40505:	mov word [bp + 18], 123	; 5: 199 70 18 123 0

stdio_test$106:	; Parameter 10 -123 10
x40510:	mov word [bp + 20], -123	; 5: 199 70 20 133 255

stdio_test$107:	; Parameter 10 123 12
x40515:	mov dword [bp + 22], 123	; 8: 102 199 70 22 123 0 0 0

stdio_test$108:	; Parameter 10 -123 16
x40523:	mov dword [bp + 26], -123	; 8: 102 199 70 26 133 255 255 255

stdio_test$109:	; Parameter 10 123 20
x40531:	mov word [bp + 30], 123	; 5: 199 70 30 123 0

stdio_test$110:	; Parameter 10 123 22
x40536:	mov dword [bp + 32], 123	; 8: 102 199 70 32 123 0 0 0

stdio_test$111:	; Call 10 printf 0
x40544:	mov word [bp + 10], stdio_test$112	; 5: 199 70 10 115 158
x40549:	mov [bp + 12], bp	; 3: 137 110 12
x40552:	add bp, 10	; 3: 131 197 10
x40555:	mov di, bp	; 2: 137 239
x40557:	add di, 18	; 3: 131 199 18
x40560:	jmp printf	; 3: 233 145 110

stdio_test$112:	; PostCall 10

stdio_test$113:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$114:	; Parameter 10 string_3C252D206i3E203C252D206i3E203C252D206li3E203C252D206li3E203C252D206u3E203C252D206lu3E0A# 6
x40563:	mov word [bp + 16], @12280$string_3C252D206i3E203C252D206i3E203C252D206li3E203C252D206li3E203C252D206u3E203C252D206lu3E0A#	; 5: 199 70 16 168 165

stdio_test$115:	; Parameter 10 123 8
x40568:	mov word [bp + 18], 123	; 5: 199 70 18 123 0

stdio_test$116:	; Parameter 10 -123 10
x40573:	mov word [bp + 20], -123	; 5: 199 70 20 133 255

stdio_test$117:	; Parameter 10 123 12
x40578:	mov dword [bp + 22], 123	; 8: 102 199 70 22 123 0 0 0

stdio_test$118:	; Parameter 10 -123 16
x40586:	mov dword [bp + 26], -123	; 8: 102 199 70 26 133 255 255 255

stdio_test$119:	; Parameter 10 123 20
x40594:	mov word [bp + 30], 123	; 5: 199 70 30 123 0

stdio_test$120:	; Parameter 10 123 22
x40599:	mov dword [bp + 32], 123	; 8: 102 199 70 32 123 0 0 0

stdio_test$121:	; Call 10 printf 0
x40607:	mov word [bp + 10], stdio_test$122	; 5: 199 70 10 178 158
x40612:	mov [bp + 12], bp	; 3: 137 110 12
x40615:	add bp, 10	; 3: 131 197 10
x40618:	mov di, bp	; 2: 137 239
x40620:	add di, 18	; 3: 131 199 18
x40623:	jmp printf	; 3: 233 82 110

stdio_test$122:	; PostCall 10

stdio_test$123:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$124:	; Parameter 10 string_3C252B2D206i3E203C252B2D206i3E203C252B2D206li3E203C252B2D206li3E203C252B2D206u3E203C252B2D206lu3E0A0A# 6
x40626:	mov word [bp + 16], @12294$string_3C252B2D206i3E203C252B2D206i3E203C252B2D206li3E203C252B2D206li3E203C252B2D206u3E203C252B2D206lu3E0A0A#	; 5: 199 70 16 220 165

stdio_test$125:	; Parameter 10 123 8
x40631:	mov word [bp + 18], 123	; 5: 199 70 18 123 0

stdio_test$126:	; Parameter 10 -123 10
x40636:	mov word [bp + 20], -123	; 5: 199 70 20 133 255

stdio_test$127:	; Parameter 10 123 12
x40641:	mov dword [bp + 22], 123	; 8: 102 199 70 22 123 0 0 0

stdio_test$128:	; Parameter 10 -123 16
x40649:	mov dword [bp + 26], -123	; 8: 102 199 70 26 133 255 255 255

stdio_test$129:	; Parameter 10 123 20
x40657:	mov word [bp + 30], 123	; 5: 199 70 30 123 0

stdio_test$130:	; Parameter 10 123 22
x40662:	mov dword [bp + 32], 123	; 8: 102 199 70 32 123 0 0 0

stdio_test$131:	; Call 10 printf 0
x40670:	mov word [bp + 10], stdio_test$132	; 5: 199 70 10 241 158
x40675:	mov [bp + 12], bp	; 3: 137 110 12
x40678:	add bp, 10	; 3: 131 197 10
x40681:	mov di, bp	; 2: 137 239
x40683:	add di, 18	; 3: 131 199 18
x40686:	jmp printf	; 3: 233 19 110

stdio_test$132:	; PostCall 10

stdio_test$133:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$134:	; Parameter 10 string_3C25x3E203C25X3E203C25o3E203C25lx3E203C25lX3E203C25lo3E0A# 6
x40689:	mov word [bp + 16], @12308$string_3C25x3E203C25X3E203C25o3E203C25lx3E203C25lX3E203C25lo3E0A#	; 5: 199 70 16 23 166

stdio_test$135:	; Parameter 10 123 8
x40694:	mov word [bp + 18], 123	; 5: 199 70 18 123 0

stdio_test$136:	; Parameter 10 123 10
x40699:	mov word [bp + 20], 123	; 5: 199 70 20 123 0

stdio_test$137:	; Parameter 10 123 12
x40704:	mov word [bp + 22], 123	; 5: 199 70 22 123 0

stdio_test$138:	; Parameter 10 123 14
x40709:	mov dword [bp + 24], 123	; 8: 102 199 70 24 123 0 0 0

stdio_test$139:	; Parameter 10 123 18
x40717:	mov dword [bp + 28], 123	; 8: 102 199 70 28 123 0 0 0

stdio_test$140:	; Parameter 10 123 22
x40725:	mov dword [bp + 32], 123	; 8: 102 199 70 32 123 0 0 0

stdio_test$141:	; Call 10 printf 0
x40733:	mov word [bp + 10], stdio_test$142	; 5: 199 70 10 48 159
x40738:	mov [bp + 12], bp	; 3: 137 110 12
x40741:	add bp, 10	; 3: 131 197 10
x40744:	mov di, bp	; 2: 137 239
x40746:	add di, 18	; 3: 131 199 18
x40749:	jmp printf	; 3: 233 212 109

stdio_test$142:	; PostCall 10

stdio_test$143:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$144:	; Parameter 10 string_3C2523x3E203C2523X3E203C2523o3E203C2523lx3E203C2523lX3E203C2523lo3E0A# 6
x40752:	mov word [bp + 16], @12322$string_3C2523x3E203C2523X3E203C2523o3E203C2523lx3E203C2523lX3E203C2523lo3E0A#	; 5: 199 70 16 57 166

stdio_test$145:	; Parameter 10 123 8
x40757:	mov word [bp + 18], 123	; 5: 199 70 18 123 0

stdio_test$146:	; Parameter 10 123 10
x40762:	mov word [bp + 20], 123	; 5: 199 70 20 123 0

stdio_test$147:	; Parameter 10 123 12
x40767:	mov word [bp + 22], 123	; 5: 199 70 22 123 0

stdio_test$148:	; Parameter 10 123 14
x40772:	mov dword [bp + 24], 123	; 8: 102 199 70 24 123 0 0 0

stdio_test$149:	; Parameter 10 123 18
x40780:	mov dword [bp + 28], 123	; 8: 102 199 70 28 123 0 0 0

stdio_test$150:	; Parameter 10 123 22
x40788:	mov dword [bp + 32], 123	; 8: 102 199 70 32 123 0 0 0

stdio_test$151:	; Call 10 printf 0
x40796:	mov word [bp + 10], stdio_test$152	; 5: 199 70 10 111 159
x40801:	mov [bp + 12], bp	; 3: 137 110 12
x40804:	add bp, 10	; 3: 131 197 10
x40807:	mov di, bp	; 2: 137 239
x40809:	add di, 18	; 3: 131 199 18
x40812:	jmp printf	; 3: 233 149 109

stdio_test$152:	; PostCall 10

stdio_test$153:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$154:	; Parameter 10 string_3C25253E203C25s3E203C25c3E203C25p3E0A0A# 6
x40815:	mov word [bp + 16], @12336$string_3C25253E203C25s3E203C25c3E203C25p3E0A0A#	; 5: 199 70 16 97 166

stdio_test$155:	; Parameter 10 string_Hello2C20World21# 8
x40820:	mov word [bp + 18], @12337$string_Hello2C20World21#	; 5: 199 70 18 119 166

stdio_test$156:	; Parameter 10 88 10
x40825:	mov word [bp + 20], 88	; 5: 199 70 20 88 0

stdio_test$157:	; Parameter 10 p 12
x40830:	mov ax, [bp + 8]	; 3: 139 70 8
x40833:	mov [bp + 22], ax	; 3: 137 70 22

stdio_test$158:	; Call 10 printf 0
x40836:	mov word [bp + 10], stdio_test$159	; 5: 199 70 10 151 159
x40841:	mov [bp + 12], bp	; 3: 137 110 12
x40844:	add bp, 10	; 3: 131 197 10
x40847:	mov di, bp	; 2: 137 239
x40849:	add di, 6	; 3: 131 199 6
x40852:	jmp printf	; 3: 233 109 109

stdio_test$159:	; PostCall 10

stdio_test$160:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$161:	; Parameter 10 string_3C25f3E203C25e3E203C25E3E203C25g3E203C25G3E0A# 6
x40855:	mov word [bp + 16], @12342$string_3C25f3E203C25e3E203C25E3E203C25g3E203C25G3E0A#	; 5: 199 70 16 133 166

stdio_test$162:	; PushFloat 123.456
x40860:	fld qword [@12343$float8$123.456#]	; 4: 221 6 159 166

stdio_test$163:	; Parameter 10 123.456 8
x40864:	fstp qword [bp + 18]	; 3: 221 94 18

stdio_test$164:	; PushFloat 123.456
x40867:	fld qword [@12344$float8$123.456#]	; 4: 221 6 167 166

stdio_test$165:	; Parameter 10 123.456 16
x40871:	fstp qword [bp + 26]	; 3: 221 94 26

stdio_test$166:	; PushFloat 123.456
x40874:	fld qword [@12345$float8$123.456#]	; 4: 221 6 175 166

stdio_test$167:	; Parameter 10 123.456 24
x40878:	fstp qword [bp + 34]	; 3: 221 94 34

stdio_test$168:	; PushFloat 123456.1
x40881:	fld qword [@12346$float8$123456.1#]	; 4: 221 6 183 166

stdio_test$169:	; Parameter 10 123456.1 32
x40885:	fstp qword [bp + 42]	; 3: 221 94 42

stdio_test$170:	; PushFloat 123456.1
x40888:	fld qword [@12347$float8$123456.1#]	; 4: 221 6 191 166

stdio_test$171:	; Parameter 10 123456.1 40
x40892:	fstp qword [bp + 50]	; 3: 221 94 50

stdio_test$172:	; Call 10 printf 0
x40895:	mov word [bp + 10], stdio_test$173	; 5: 199 70 10 210 159
x40900:	mov [bp + 12], bp	; 3: 137 110 12
x40903:	add bp, 10	; 3: 131 197 10
x40906:	mov di, bp	; 2: 137 239
x40908:	add di, 40	; 3: 131 199 40
x40911:	jmp printf	; 3: 233 50 109

stdio_test$173:	; PostCall 10

stdio_test$174:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$175:	; Parameter 10 string_3C25lf3E203C25le3E203C25lE3E203C25lg3E203C25lG3E0A# 6
x40914:	mov word [bp + 16], @12354$string_3C25lf3E203C25le3E203C25lE3E203C25lg3E203C25lG3E0A#	; 5: 199 70 16 199 166

stdio_test$176:	; PushFloat 123.456
x40919:	fld qword [@12355$float8$123.456#]	; 4: 221 6 230 166

stdio_test$177:	; Parameter 10 123.456 8
x40923:	fstp qword [bp + 18]	; 3: 221 94 18

stdio_test$178:	; PushFloat 123.456
x40926:	fld qword [@12356$float8$123.456#]	; 4: 221 6 238 166

stdio_test$179:	; Parameter 10 123.456 16
x40930:	fstp qword [bp + 26]	; 3: 221 94 26

stdio_test$180:	; PushFloat 123.456
x40933:	fld qword [@12357$float8$123.456#]	; 4: 221 6 246 166

stdio_test$181:	; Parameter 10 123.456 24
x40937:	fstp qword [bp + 34]	; 3: 221 94 34

stdio_test$182:	; PushFloat 123456.1
x40940:	fld qword [@12358$float8$123456.1#]	; 4: 221 6 254 166

stdio_test$183:	; Parameter 10 123456.1 32
x40944:	fstp qword [bp + 42]	; 3: 221 94 42

stdio_test$184:	; PushFloat 123456.1
x40947:	fld qword [@12359$float8$123456.1#]	; 4: 221 6 6 167

stdio_test$185:	; Parameter 10 123456.1 40
x40951:	fstp qword [bp + 50]	; 3: 221 94 50

stdio_test$186:	; Call 10 printf 0
x40954:	mov word [bp + 10], stdio_test$187	; 5: 199 70 10 13 160
x40959:	mov [bp + 12], bp	; 3: 137 110 12
x40962:	add bp, 10	; 3: 131 197 10
x40965:	mov di, bp	; 2: 137 239
x40967:	add di, 40	; 3: 131 199 40
x40970:	jmp printf	; 3: 233 247 108

stdio_test$187:	; PostCall 10

stdio_test$188:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$189:	; Parameter 10 string_3C2523f3E203C2523e3E203C2523E3E203C2523g3E203C2523G3E0A# 6
x40973:	mov word [bp + 16], @12366$string_3C2523f3E203C2523e3E203C2523E3E203C2523g3E203C2523G3E0A#	; 5: 199 70 16 14 167

stdio_test$190:	; PushFloat 123.456
x40978:	fld qword [@12367$float8$123.456#]	; 4: 221 6 45 167

stdio_test$191:	; Parameter 10 123.456 8
x40982:	fstp qword [bp + 18]	; 3: 221 94 18

stdio_test$192:	; PushFloat 123.456
x40985:	fld qword [@12368$float8$123.456#]	; 4: 221 6 53 167

stdio_test$193:	; Parameter 10 123.456 16
x40989:	fstp qword [bp + 26]	; 3: 221 94 26

stdio_test$194:	; PushFloat 123.456
x40992:	fld qword [@12369$float8$123.456#]	; 4: 221 6 61 167

stdio_test$195:	; Parameter 10 123.456 24
x40996:	fstp qword [bp + 34]	; 3: 221 94 34

stdio_test$196:	; PushFloat 123.456
x40999:	fld qword [@12370$float8$123.456#]	; 4: 221 6 69 167

stdio_test$197:	; Parameter 10 123.456 32
x41003:	fstp qword [bp + 42]	; 3: 221 94 42

stdio_test$198:	; PushFloat 123.456
x41006:	fld qword [@12371$float8$123.456#]	; 4: 221 6 77 167

stdio_test$199:	; Parameter 10 123.456 40
x41010:	fstp qword [bp + 50]	; 3: 221 94 50

stdio_test$200:	; Call 10 printf 0
x41013:	mov word [bp + 10], stdio_test$201	; 5: 199 70 10 72 160
x41018:	mov [bp + 12], bp	; 3: 137 110 12
x41021:	add bp, 10	; 3: 131 197 10
x41024:	mov di, bp	; 2: 137 239
x41026:	add di, 40	; 3: 131 199 40
x41029:	jmp printf	; 3: 233 188 108

stdio_test$201:	; PostCall 10

stdio_test$202:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$203:	; Parameter 10 string_3C2523lf3E203C2523le3E203C2523lE3E203C2523lg3E203C2523lG3E0A# 6
x41032:	mov word [bp + 16], @12378$string_3C2523lf3E203C2523le3E203C2523lE3E203C2523lg3E203C2523lG3E0A#	; 5: 199 70 16 85 167

stdio_test$204:	; PushFloat 123.456
x41037:	fld qword [@12379$float8$123.456#]	; 4: 221 6 121 167

stdio_test$205:	; Parameter 10 123.456 8
x41041:	fstp qword [bp + 18]	; 3: 221 94 18

stdio_test$206:	; PushFloat 123.456
x41044:	fld qword [@12380$float8$123.456#]	; 4: 221 6 129 167

stdio_test$207:	; Parameter 10 123.456 16
x41048:	fstp qword [bp + 26]	; 3: 221 94 26

stdio_test$208:	; PushFloat 123.456
x41051:	fld qword [@12381$float8$123.456#]	; 4: 221 6 137 167

stdio_test$209:	; Parameter 10 123.456 24
x41055:	fstp qword [bp + 34]	; 3: 221 94 34

stdio_test$210:	; PushFloat 123.456
x41058:	fld qword [@12382$float8$123.456#]	; 4: 221 6 145 167

stdio_test$211:	; Parameter 10 123.456 32
x41062:	fstp qword [bp + 42]	; 3: 221 94 42

stdio_test$212:	; PushFloat 123.456
x41065:	fld qword [@12383$float8$123.456#]	; 4: 221 6 153 167

stdio_test$213:	; Parameter 10 123.456 40
x41069:	fstp qword [bp + 50]	; 3: 221 94 50

stdio_test$214:	; Call 10 printf 0
x41072:	mov word [bp + 10], stdio_test$215	; 5: 199 70 10 131 160
x41077:	mov [bp + 12], bp	; 3: 137 110 12
x41080:	add bp, 10	; 3: 131 197 10
x41083:	mov di, bp	; 2: 137 239
x41085:	add di, 40	; 3: 131 199 40
x41088:	jmp printf	; 3: 233 129 108

stdio_test$215:	; PostCall 10

stdio_test$216:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$217:	; Parameter 10 string_3C2562E3f3E203C2562E3e3E203C2562E3E3E203C2562E3g3E203C2562E3G3E0A# 6
x41091:	mov word [bp + 16], @12390$string_3C2562E3f3E203C2562E3e3E203C2562E3E3E203C2562E3g3E203C2562E3G3E0A#	; 5: 199 70 16 161 167

stdio_test$218:	; PushFloat 123.456
x41096:	fld qword [@12391$float8$123.456#]	; 4: 221 6 202 167

stdio_test$219:	; Parameter 10 123.456 8
x41100:	fstp qword [bp + 18]	; 3: 221 94 18

stdio_test$220:	; PushFloat 123.456
x41103:	fld qword [@12392$float8$123.456#]	; 4: 221 6 210 167

stdio_test$221:	; Parameter 10 123.456 16
x41107:	fstp qword [bp + 26]	; 3: 221 94 26

stdio_test$222:	; PushFloat 123.456
x41110:	fld qword [@12393$float8$123.456#]	; 4: 221 6 218 167

stdio_test$223:	; Parameter 10 123.456 24
x41114:	fstp qword [bp + 34]	; 3: 221 94 34

stdio_test$224:	; PushFloat 123.456
x41117:	fld qword [@12394$float8$123.456#]	; 4: 221 6 226 167

stdio_test$225:	; Parameter 10 123.456 32
x41121:	fstp qword [bp + 42]	; 3: 221 94 42

stdio_test$226:	; PushFloat 123.456
x41124:	fld qword [@12395$float8$123.456#]	; 4: 221 6 234 167

stdio_test$227:	; Parameter 10 123.456 40
x41128:	fstp qword [bp + 50]	; 3: 221 94 50

stdio_test$228:	; Call 10 printf 0
x41131:	mov word [bp + 10], stdio_test$229	; 5: 199 70 10 190 160
x41136:	mov [bp + 12], bp	; 3: 137 110 12
x41139:	add bp, 10	; 3: 131 197 10
x41142:	mov di, bp	; 2: 137 239
x41144:	add di, 40	; 3: 131 199 40
x41147:	jmp printf	; 3: 233 70 108

stdio_test$229:	; PostCall 10

stdio_test$230:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$231:	; Parameter 10 string_3C2562E3lf3E203C2562E3le3E203C2562E3lE3E203C2562E3lg3E203C2562E3lG3E0A0A# 6
x41150:	mov word [bp + 16], @12402$string_3C2562E3lf3E203C2562E3le3E203C2562E3lE3E203C2562E3lg3E203C2562E3lG3E0A0A#	; 5: 199 70 16 242 167

stdio_test$232:	; PushFloat 123.456
x41155:	fld qword [@12403$float8$123.456#]	; 4: 221 6 33 168

stdio_test$233:	; Parameter 10 123.456 8
x41159:	fstp qword [bp + 18]	; 3: 221 94 18

stdio_test$234:	; PushFloat 123.456
x41162:	fld qword [@12404$float8$123.456#]	; 4: 221 6 41 168

stdio_test$235:	; Parameter 10 123.456 16
x41166:	fstp qword [bp + 26]	; 3: 221 94 26

stdio_test$236:	; PushFloat 123.456
x41169:	fld qword [@12405$float8$123.456#]	; 4: 221 6 49 168

stdio_test$237:	; Parameter 10 123.456 24
x41173:	fstp qword [bp + 34]	; 3: 221 94 34

stdio_test$238:	; PushFloat 123.456
x41176:	fld qword [@12406$float8$123.456#]	; 4: 221 6 57 168

stdio_test$239:	; Parameter 10 123.456 32
x41180:	fstp qword [bp + 42]	; 3: 221 94 42

stdio_test$240:	; PushFloat 123.456
x41183:	fld qword [@12407$float8$123.456#]	; 4: 221 6 65 168

stdio_test$241:	; Parameter 10 123.456 40
x41187:	fstp qword [bp + 50]	; 3: 221 94 50

stdio_test$242:	; Call 10 printf 0
x41190:	mov word [bp + 10], stdio_test$243	; 5: 199 70 10 249 160
x41195:	mov [bp + 12], bp	; 3: 137 110 12
x41198:	add bp, 10	; 3: 131 197 10
x41201:	mov di, bp	; 2: 137 239
x41203:	add di, 40	; 3: 131 199 40
x41206:	jmp printf	; 3: 233 11 108

stdio_test$243:	; PostCall 10

stdio_test$244:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$245:	; Parameter 10 string_3C25f3E203C25e3E203C25E3E203C25g3E203C25G3E0A# 6
x41209:	mov word [bp + 16], @12414$string_3C25f3E203C25e3E203C25E3E203C25g3E203C25G3E0A#	; 5: 199 70 16 73 168

stdio_test$246:	; PushFloat -123.456
x41214:	fld qword [@12415$float8$minus123.456#]	; 4: 221 6 99 168

stdio_test$247:	; Parameter 10 -123.456 8
x41218:	fstp qword [bp + 18]	; 3: 221 94 18

stdio_test$248:	; PushFloat -123.456
x41221:	fld qword [@12416$float8$minus123.456#]	; 4: 221 6 107 168

stdio_test$249:	; Parameter 10 -123.456 16
x41225:	fstp qword [bp + 26]	; 3: 221 94 26

stdio_test$250:	; PushFloat -123.456
x41228:	fld qword [@12417$float8$minus123.456#]	; 4: 221 6 115 168

stdio_test$251:	; Parameter 10 -123.456 24
x41232:	fstp qword [bp + 34]	; 3: 221 94 34

stdio_test$252:	; PushFloat -0.000000123456
x41235:	fld qword [@12418$float8$minus0.000000123456#]	; 4: 221 6 123 168

stdio_test$253:	; Parameter 10 -0.000000123456 32
x41239:	fstp qword [bp + 42]	; 3: 221 94 42

stdio_test$254:	; PushFloat -0.000000123456
x41242:	fld qword [@12419$float8$minus0.000000123456#]	; 4: 221 6 131 168

stdio_test$255:	; Parameter 10 -0.000000123456 40
x41246:	fstp qword [bp + 50]	; 3: 221 94 50

stdio_test$256:	; Call 10 printf 0
x41249:	mov word [bp + 10], stdio_test$257	; 5: 199 70 10 52 161
x41254:	mov [bp + 12], bp	; 3: 137 110 12
x41257:	add bp, 10	; 3: 131 197 10
x41260:	mov di, bp	; 2: 137 239
x41262:	add di, 40	; 3: 131 199 40
x41265:	jmp printf	; 3: 233 208 107

stdio_test$257:	; PostCall 10

stdio_test$258:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$259:	; Parameter 10 string_3C25lf3E203C25le3E203C25lE3E203C25lg3E203C25lG3E0A# 6
x41268:	mov word [bp + 16], @12426$string_3C25lf3E203C25le3E203C25lE3E203C25lg3E203C25lG3E0A#	; 5: 199 70 16 139 168

stdio_test$260:	; PushFloat -123.456
x41273:	fld qword [@12427$float8$minus123.456#]	; 4: 221 6 170 168

stdio_test$261:	; Parameter 10 -123.456 8
x41277:	fstp qword [bp + 18]	; 3: 221 94 18

stdio_test$262:	; PushFloat -123.456
x41280:	fld qword [@12428$float8$minus123.456#]	; 4: 221 6 178 168

stdio_test$263:	; Parameter 10 -123.456 16
x41284:	fstp qword [bp + 26]	; 3: 221 94 26

stdio_test$264:	; PushFloat -123.456
x41287:	fld qword [@12429$float8$minus123.456#]	; 4: 221 6 186 168

stdio_test$265:	; Parameter 10 -123.456 24
x41291:	fstp qword [bp + 34]	; 3: 221 94 34

stdio_test$266:	; PushFloat -0.000000123456
x41294:	fld qword [@12430$float8$minus0.000000123456#]	; 4: 221 6 194 168

stdio_test$267:	; Parameter 10 -0.000000123456 32
x41298:	fstp qword [bp + 42]	; 3: 221 94 42

stdio_test$268:	; PushFloat -0.000000123456
x41301:	fld qword [@12431$float8$minus0.000000123456#]	; 4: 221 6 202 168

stdio_test$269:	; Parameter 10 -0.000000123456 40
x41305:	fstp qword [bp + 50]	; 3: 221 94 50

stdio_test$270:	; Call 10 printf 0
x41308:	mov word [bp + 10], stdio_test$271	; 5: 199 70 10 111 161
x41313:	mov [bp + 12], bp	; 3: 137 110 12
x41316:	add bp, 10	; 3: 131 197 10
x41319:	mov di, bp	; 2: 137 239
x41321:	add di, 40	; 3: 131 199 40
x41324:	jmp printf	; 3: 233 149 107

stdio_test$271:	; PostCall 10

stdio_test$272:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$273:	; Parameter 10 string_3C2523f3E203C2523e3E203C2523E3E203C2523g3E203C2523G3E0A# 6
x41327:	mov word [bp + 16], @12438$string_3C2523f3E203C2523e3E203C2523E3E203C2523g3E203C2523G3E0A#	; 5: 199 70 16 210 168

stdio_test$274:	; PushFloat -123.456
x41332:	fld qword [@12439$float8$minus123.456#]	; 4: 221 6 241 168

stdio_test$275:	; Parameter 10 -123.456 8
x41336:	fstp qword [bp + 18]	; 3: 221 94 18

stdio_test$276:	; PushFloat -123.456
x41339:	fld qword [@12440$float8$minus123.456#]	; 4: 221 6 249 168

stdio_test$277:	; Parameter 10 -123.456 16
x41343:	fstp qword [bp + 26]	; 3: 221 94 26

stdio_test$278:	; PushFloat -123.456
x41346:	fld qword [@12441$float8$minus123.456#]	; 4: 221 6 1 169

stdio_test$279:	; Parameter 10 -123.456 24
x41350:	fstp qword [bp + 34]	; 3: 221 94 34

stdio_test$280:	; PushFloat -123.456
x41353:	fld qword [@12442$float8$minus123.456#]	; 4: 221 6 9 169

stdio_test$281:	; Parameter 10 -123.456 32
x41357:	fstp qword [bp + 42]	; 3: 221 94 42

stdio_test$282:	; PushFloat -123.456
x41360:	fld qword [@12443$float8$minus123.456#]	; 4: 221 6 17 169

stdio_test$283:	; Parameter 10 -123.456 40
x41364:	fstp qword [bp + 50]	; 3: 221 94 50

stdio_test$284:	; Call 10 printf 0
x41367:	mov word [bp + 10], stdio_test$285	; 5: 199 70 10 170 161
x41372:	mov [bp + 12], bp	; 3: 137 110 12
x41375:	add bp, 10	; 3: 131 197 10
x41378:	mov di, bp	; 2: 137 239
x41380:	add di, 40	; 3: 131 199 40
x41383:	jmp printf	; 3: 233 90 107

stdio_test$285:	; PostCall 10

stdio_test$286:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$287:	; Parameter 10 string_3C2523lf3E203C2523le3E203C2523lE3E203C2523lg3E203C2523lG3E0A# 6
x41386:	mov word [bp + 16], @12450$string_3C2523lf3E203C2523le3E203C2523lE3E203C2523lg3E203C2523lG3E0A#	; 5: 199 70 16 25 169

stdio_test$288:	; PushFloat -123.456
x41391:	fld qword [@12451$float8$minus123.456#]	; 4: 221 6 61 169

stdio_test$289:	; Parameter 10 -123.456 8
x41395:	fstp qword [bp + 18]	; 3: 221 94 18

stdio_test$290:	; PushFloat -123.456
x41398:	fld qword [@12452$float8$minus123.456#]	; 4: 221 6 69 169

stdio_test$291:	; Parameter 10 -123.456 16
x41402:	fstp qword [bp + 26]	; 3: 221 94 26

stdio_test$292:	; PushFloat -123.456
x41405:	fld qword [@12453$float8$minus123.456#]	; 4: 221 6 77 169

stdio_test$293:	; Parameter 10 -123.456 24
x41409:	fstp qword [bp + 34]	; 3: 221 94 34

stdio_test$294:	; PushFloat -123.456
x41412:	fld qword [@12454$float8$minus123.456#]	; 4: 221 6 85 169

stdio_test$295:	; Parameter 10 -123.456 32
x41416:	fstp qword [bp + 42]	; 3: 221 94 42

stdio_test$296:	; PushFloat -123.456
x41419:	fld qword [@12455$float8$minus123.456#]	; 4: 221 6 93 169

stdio_test$297:	; Parameter 10 -123.456 40
x41423:	fstp qword [bp + 50]	; 3: 221 94 50

stdio_test$298:	; Call 10 printf 0
x41426:	mov word [bp + 10], stdio_test$299	; 5: 199 70 10 229 161
x41431:	mov [bp + 12], bp	; 3: 137 110 12
x41434:	add bp, 10	; 3: 131 197 10
x41437:	mov di, bp	; 2: 137 239
x41439:	add di, 40	; 3: 131 199 40
x41442:	jmp printf	; 3: 233 31 107

stdio_test$299:	; PostCall 10

stdio_test$300:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$301:	; Parameter 10 string_3C2562E3f3E203C2562E3e3E203C2562E3E3E203C2562E3g3E203C2562E3G3E0A# 6
x41445:	mov word [bp + 16], @12462$string_3C2562E3f3E203C2562E3e3E203C2562E3E3E203C2562E3g3E203C2562E3G3E0A#	; 5: 199 70 16 101 169

stdio_test$302:	; PushFloat -123.456
x41450:	fld qword [@12463$float8$minus123.456#]	; 4: 221 6 142 169

stdio_test$303:	; Parameter 10 -123.456 8
x41454:	fstp qword [bp + 18]	; 3: 221 94 18

stdio_test$304:	; PushFloat -123.456
x41457:	fld qword [@12464$float8$minus123.456#]	; 4: 221 6 150 169

stdio_test$305:	; Parameter 10 -123.456 16
x41461:	fstp qword [bp + 26]	; 3: 221 94 26

stdio_test$306:	; PushFloat -123.456
x41464:	fld qword [@12465$float8$minus123.456#]	; 4: 221 6 158 169

stdio_test$307:	; Parameter 10 -123.456 24
x41468:	fstp qword [bp + 34]	; 3: 221 94 34

stdio_test$308:	; PushFloat -123.456
x41471:	fld qword [@12466$float8$minus123.456#]	; 4: 221 6 166 169

stdio_test$309:	; Parameter 10 -123.456 32
x41475:	fstp qword [bp + 42]	; 3: 221 94 42

stdio_test$310:	; PushFloat -123.456
x41478:	fld qword [@12467$float8$minus123.456#]	; 4: 221 6 174 169

stdio_test$311:	; Parameter 10 -123.456 40
x41482:	fstp qword [bp + 50]	; 3: 221 94 50

stdio_test$312:	; Call 10 printf 0
x41485:	mov word [bp + 10], stdio_test$313	; 5: 199 70 10 32 162
x41490:	mov [bp + 12], bp	; 3: 137 110 12
x41493:	add bp, 10	; 3: 131 197 10
x41496:	mov di, bp	; 2: 137 239
x41498:	add di, 40	; 3: 131 199 40
x41501:	jmp printf	; 3: 233 228 106

stdio_test$313:	; PostCall 10

stdio_test$314:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$315:	; Parameter 10 string_3C2562E3lf3E203C2562E3le3E203C2562E3lE3E203C2562E3lg3E203C2562E3lG3E0A0A# 6
x41504:	mov word [bp + 16], @12474$string_3C2562E3lf3E203C2562E3le3E203C2562E3lE3E203C2562E3lg3E203C2562E3lG3E0A0A#	; 5: 199 70 16 182 169

stdio_test$316:	; PushFloat -123.456
x41509:	fld qword [@12475$float8$minus123.456#]	; 4: 221 6 229 169

stdio_test$317:	; Parameter 10 -123.456 8
x41513:	fstp qword [bp + 18]	; 3: 221 94 18

stdio_test$318:	; PushFloat -123.456
x41516:	fld qword [@12476$float8$minus123.456#]	; 4: 221 6 237 169

stdio_test$319:	; Parameter 10 -123.456 16
x41520:	fstp qword [bp + 26]	; 3: 221 94 26

stdio_test$320:	; PushFloat -123.456
x41523:	fld qword [@12477$float8$minus123.456#]	; 4: 221 6 245 169

stdio_test$321:	; Parameter 10 -123.456 24
x41527:	fstp qword [bp + 34]	; 3: 221 94 34

stdio_test$322:	; PushFloat -123.456
x41530:	fld qword [@12478$float8$minus123.456#]	; 4: 221 6 253 169

stdio_test$323:	; Parameter 10 -123.456 32
x41534:	fstp qword [bp + 42]	; 3: 221 94 42

stdio_test$324:	; PushFloat -123.456
x41537:	fld qword [@12479$float8$minus123.456#]	; 4: 221 6 5 170

stdio_test$325:	; Parameter 10 -123.456 40
x41541:	fstp qword [bp + 50]	; 3: 221 94 50

stdio_test$326:	; Call 10 printf 0
x41544:	mov word [bp + 10], stdio_test$327	; 5: 199 70 10 91 162
x41549:	mov [bp + 12], bp	; 3: 137 110 12
x41552:	add bp, 10	; 3: 131 197 10
x41555:	mov di, bp	; 2: 137 239
x41557:	add di, 40	; 3: 131 199 40
x41560:	jmp printf	; 3: 233 169 106

stdio_test$327:	; PostCall 10

stdio_test$328:	; Assign a 0
x41563:	mov word [bp + 6], 0	; 5: 199 70 6 0 0

stdio_test$329:	; Assign b 0
x41568:	mov word [bp + 8], 0	; 5: 199 70 8 0 0

stdio_test$330:	; Assign n 0
x41573:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

stdio_test$331:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$332:	; Parameter 12 string_Please20write20three20integers3A20# 6
x41578:	mov word [bp + 18], @12495$string_Please20write20three20integers3A20#	; 5: 199 70 18 13 170

stdio_test$333:	; Call 12 printf 0
x41583:	mov word [bp + 12], stdio_test$334	; 5: 199 70 12 127 162
x41588:	mov [bp + 14], bp	; 3: 137 110 14
x41591:	add bp, 12	; 3: 131 197 12
x41594:	mov di, bp	; 2: 137 239
x41596:	jmp printf	; 3: 233 133 106

stdio_test$334:	; PostCall 12

stdio_test$335:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$336:	; Parameter 12 string_1232045620789# 6
x41599:	mov word [bp + 18], @12497$string_1232045620789#	; 5: 199 70 18 43 170

stdio_test$337:	; Parameter 12 string_25i20252Ai2025i2025n# 8
x41604:	mov word [bp + 20], @12498$string_25i20252Ai2025i2025n#	; 5: 199 70 20 55 170

stdio_test$338:	; address £temporary5630 a
x41609:	mov si, bp	; 2: 137 238
x41611:	add si, 6	; 3: 131 198 6

stdio_test$339:	; Parameter 12 £temporary5630 10
x41614:	mov [bp + 22], si	; 3: 137 118 22

stdio_test$340:	; address £temporary5631 b
x41617:	mov si, bp	; 2: 137 238
x41619:	add si, 8	; 3: 131 198 8

stdio_test$341:	; Parameter 12 £temporary5631 12
x41622:	mov [bp + 24], si	; 3: 137 118 24

stdio_test$342:	; address £temporary5632 n
x41625:	mov si, bp	; 2: 137 238
x41627:	add si, 10	; 3: 131 198 10

stdio_test$343:	; Parameter 12 £temporary5632 14
x41630:	mov [bp + 26], si	; 3: 137 118 26

stdio_test$344:	; Call 12 sscanf 0
x41633:	mov word [bp + 12], stdio_test$345	; 5: 199 70 12 180 162
x41638:	mov [bp + 14], bp	; 3: 137 110 14
x41641:	add bp, 12	; 3: 131 197 12
x41644:	mov di, bp	; 2: 137 239
x41646:	add di, 6	; 3: 131 199 6
x41649:	jmp sscanf	; 3: 233 15 8

stdio_test$345:	; PostCall 12

stdio_test$346:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$347:	; Parameter 12 string_3C25i3E203C25i3E203C25i3E0A# 6
x41652:	mov word [bp + 18], @12503$string_3C25i3E203C25i3E203C25i3E0A#	; 5: 199 70 18 68 170

stdio_test$348:	; Parameter 12 a 8
x41657:	mov ax, [bp + 6]	; 3: 139 70 6
x41660:	mov [bp + 20], ax	; 3: 137 70 20

stdio_test$349:	; Parameter 12 b 10
x41663:	mov ax, [bp + 8]	; 3: 139 70 8
x41666:	mov [bp + 22], ax	; 3: 137 70 22

stdio_test$350:	; Parameter 12 n 12
x41669:	mov ax, [bp + 10]	; 3: 139 70 10
x41672:	mov [bp + 24], ax	; 3: 137 70 24

stdio_test$351:	; Call 12 printf 0
x41675:	mov word [bp + 12], stdio_test$352	; 5: 199 70 12 222 162
x41680:	mov [bp + 14], bp	; 3: 137 110 14
x41683:	add bp, 12	; 3: 131 197 12
x41686:	mov di, bp	; 2: 137 239
x41688:	add di, 6	; 3: 131 199 6
x41691:	jmp printf	; 3: 233 38 106

stdio_test$352:	; PostCall 12

stdio_test$353:	; CallHeader 106 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$354:	; Parameter 106 string_Please20write20the20patterns205Babc5D3A20# 6
x41694:	mov word [bp + 112], @12508$string_Please20write20the20patterns205Babc5D3A20#	; 5: 199 70 112 84 170

stdio_test$355:	; Call 106 printf 0
x41699:	mov word [bp + 106], stdio_test$356	; 5: 199 70 106 243 162
x41704:	mov [bp + 108], bp	; 3: 137 110 108
x41707:	add bp, 106	; 3: 131 197 106
x41710:	mov di, bp	; 2: 137 239
x41712:	jmp printf	; 3: 233 17 106

stdio_test$356:	; PostCall 106

stdio_test$357:	; CallHeader 106 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$358:	; Parameter 106 string_abcdef# 6
x41715:	mov word [bp + 112], @12510$string_abcdef#	; 5: 199 70 112 118 170

stdio_test$359:	; Parameter 106 string_255Babc5D# 8
x41720:	mov word [bp + 114], @12511$string_255Babc5D#	; 5: 199 70 114 125 170

stdio_test$360:	; Parameter 106 s 10
x41725:	mov [bp + 116], bp	; 3: 137 110 116
x41728:	add word [bp + 116], 6	; 4: 131 70 116 6

stdio_test$361:	; Call 106 sscanf 0
x41732:	mov word [bp + 106], stdio_test$362	; 5: 199 70 106 23 163
x41737:	mov [bp + 108], bp	; 3: 137 110 108
x41740:	add bp, 106	; 3: 131 197 106
x41743:	mov di, bp	; 2: 137 239
x41745:	add di, 2	; 3: 131 199 2
x41748:	jmp sscanf	; 3: 233 172 7

stdio_test$362:	; PostCall 106

stdio_test$363:	; CallHeader 106 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$364:	; Parameter 106 string_3C25s3E0A# 6
x41751:	mov word [bp + 112], @12513$string_3C25s3E0A#	; 5: 199 70 112 132 170

stdio_test$365:	; Parameter 106 s 8
x41756:	mov [bp + 114], bp	; 3: 137 110 114
x41759:	add word [bp + 114], 6	; 4: 131 70 114 6

stdio_test$366:	; Call 106 printf 0
x41763:	mov word [bp + 106], stdio_test$367	; 5: 199 70 106 54 163
x41768:	mov [bp + 108], bp	; 3: 137 110 108
x41771:	add bp, 106	; 3: 131 197 106
x41774:	mov di, bp	; 2: 137 239
x41776:	add di, 2	; 3: 131 199 2
x41779:	jmp printf	; 3: 233 206 105

stdio_test$367:	; PostCall 106

stdio_test$368:	; CallHeader 106 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$369:	; Parameter 106 string_Please20write20the20patterns205B5Eabc5D3A20# 6
x41782:	mov word [bp + 112], @12515$string_Please20write20the20patterns205B5Eabc5D3A20#	; 5: 199 70 112 138 170

stdio_test$370:	; Call 106 printf 0
x41787:	mov word [bp + 106], stdio_test$371	; 5: 199 70 106 75 163
x41792:	mov [bp + 108], bp	; 3: 137 110 108
x41795:	add bp, 106	; 3: 131 197 106
x41798:	mov di, bp	; 2: 137 239
x41800:	jmp printf	; 3: 233 185 105

stdio_test$371:	; PostCall 106

stdio_test$372:	; CallHeader 106 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$373:	; Parameter 106 string_defabc# 6
x41803:	mov word [bp + 112], @12517$string_defabc#	; 5: 199 70 112 173 170

stdio_test$374:	; Parameter 106 string_255B5Eabc5D# 8
x41808:	mov word [bp + 114], @12518$string_255B5Eabc5D#	; 5: 199 70 114 180 170

stdio_test$375:	; Parameter 106 s 10
x41813:	mov [bp + 116], bp	; 3: 137 110 116
x41816:	add word [bp + 116], 6	; 4: 131 70 116 6

stdio_test$376:	; Call 106 sscanf 0
x41820:	mov word [bp + 106], stdio_test$377	; 5: 199 70 106 111 163
x41825:	mov [bp + 108], bp	; 3: 137 110 108
x41828:	add bp, 106	; 3: 131 197 106
x41831:	mov di, bp	; 2: 137 239
x41833:	add di, 2	; 3: 131 199 2
x41836:	jmp sscanf	; 3: 233 84 7

stdio_test$377:	; PostCall 106

stdio_test$378:	; CallHeader 106 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$379:	; Parameter 106 string_3C25s3E0A0A# 6
x41839:	mov word [bp + 112], @12520$string_3C25s3E0A0A#	; 5: 199 70 112 188 170

stdio_test$380:	; Parameter 106 s 8
x41844:	mov [bp + 114], bp	; 3: 137 110 114
x41847:	add word [bp + 114], 6	; 4: 131 70 114 6

stdio_test$381:	; Call 106 printf 0
x41851:	mov word [bp + 106], stdio_test$382	; 5: 199 70 106 142 163
x41856:	mov [bp + 108], bp	; 3: 137 110 108
x41859:	add bp, 106	; 3: 131 197 106
x41862:	mov di, bp	; 2: 137 239
x41864:	add di, 2	; 3: 131 199 2
x41867:	jmp printf	; 3: 233 118 105

stdio_test$382:	; PostCall 106

stdio_test$383:	; Return 0
x41870:	mov ax, [bp]	; 3: 139 70 0
x41873:	mov di, [bp + 4]	; 3: 139 126 4
x41876:	mov bp, [bp + 2]	; 3: 139 110 2
x41879:	jmp ax	; 2: 255 224

stdio_test$384:	; FunctionEnd stdio_test

@12122$string_3C25i3E203C25i3E203C25li3E203C25li3E203C25u3E203C25lu3E0A0A#:
x41881:	db "<%i> <%i> <%li> <%li> <%u> <%lu>", 10, 10, 0	; 35: 60 37 105 62 32 60 37 105 62 32 60 37 108 105 62 32 60 37 108 105 62 32 60 37 117 62 32 60 37 108 117 62 10 10 0

@12136$string_3C256i3E203C256i3E203C256li3E203C256li3E203C256u3E203C256lu3E0A#:
x41916:	db "<%6i> <%6i> <%6li> <%6li> <%6u> <%6lu>", 10, 0	; 40: 60 37 54 105 62 32 60 37 54 105 62 32 60 37 54 108 105 62 32 60 37 54 108 105 62 32 60 37 54 117 62 32 60 37 54 108 117 62 10 0

@12150$string_3C252B6i3E203C252B6i3E203C252B6li3E203C252B6li3E203C252B6u3E203C252B6lu3E0A#:
x41956:	db "<%+6i> <%+6i> <%+6li> <%+6li> <%+6u> <%+6lu>", 10, 0	; 46: 60 37 43 54 105 62 32 60 37 43 54 105 62 32 60 37 43 54 108 105 62 32 60 37 43 54 108 105 62 32 60 37 43 54 117 62 32 60 37 43 54 108 117 62 10 0

@12164$string_3C252D6i3E203C252D6i3E203C252D6li3E203C252D6li3E203C252D6u3E203C252D6lu3E0A#:
x42002:	db "<%-6i> <%-6i> <%-6li> <%-6li> <%-6u> <%-6lu>", 10, 0	; 46: 60 37 45 54 105 62 32 60 37 45 54 105 62 32 60 37 45 54 108 105 62 32 60 37 45 54 108 105 62 32 60 37 45 54 117 62 32 60 37 45 54 108 117 62 10 0

@12178$string_3C252B2D6i3E203C252B2D6i3E203C252B2D6li3E203C252B2D6li3E203C252B2D6u3E203C252B2D6lu3E0A0A#:
x42048:	db "<%+-6i> <%+-6i> <%+-6li> <%+-6li> <%+-6u> <%+-6lu>", 10, 10, 0	; 53: 60 37 43 45 54 105 62 32 60 37 43 45 54 105 62 32 60 37 43 45 54 108 105 62 32 60 37 43 45 54 108 105 62 32 60 37 43 45 54 117 62 32 60 37 43 45 54 108 117 62 10 10 0

@12196$string_3C2506i3E203C2506i3E203C2506li3E203C2506li3E203C2506u3E203C2506lu3E0A#:
x42101:	db "<%06i> <%06i> <%06li> <%06li> <%06u> <%06lu>", 10, 0	; 46: 60 37 48 54 105 62 32 60 37 48 54 105 62 32 60 37 48 54 108 105 62 32 60 37 48 54 108 105 62 32 60 37 48 54 117 62 32 60 37 48 54 108 117 62 10 0

@12210$string_3C252B06i3E203C252B06i3E203C252B06li3E203C252B06li3E203C252B06u3E203C252B06lu3E0A#:
x42147:	db "<%+06i> <%+06i> <%+06li> <%+06li> <%+06u> <%+06lu>", 10, 0	; 52: 60 37 43 48 54 105 62 32 60 37 43 48 54 105 62 32 60 37 43 48 54 108 105 62 32 60 37 43 48 54 108 105 62 32 60 37 43 48 54 117 62 32 60 37 43 48 54 108 117 62 10 0

@12224$string_3C252D06i3E203C252D06i3E203C252D06li3E203C252D06li3E203C252D06u3E203C252D06lu3E0A#:
x42199:	db "<%-06i> <%-06i> <%-06li> <%-06li> <%-06u> <%-06lu>", 10, 0	; 52: 60 37 45 48 54 105 62 32 60 37 45 48 54 105 62 32 60 37 45 48 54 108 105 62 32 60 37 45 48 54 108 105 62 32 60 37 45 48 54 117 62 32 60 37 45 48 54 108 117 62 10 0

@12238$string_3C252B2D06i3E203C252B2D06i3E203C252B2D06li3E203C252B2D06li3E203C252B2D06u3E203C252B2D06lu3E0A0A#:
x42251:	db "<%+-06i> <%+-06i> <%+-06li> <%+-06li> <%+-06u> <%+-06lu>", 10, 10, 0	; 59: 60 37 43 45 48 54 105 62 32 60 37 43 45 48 54 105 62 32 60 37 43 45 48 54 108 105 62 32 60 37 43 45 48 54 108 105 62 32 60 37 43 45 48 54 117 62 32 60 37 43 45 48 54 108 117 62 10 10 0

@12252$string_3C25206i3E203C25206i3E203C25206li3E203C25206li3E203C25206u3E203C25206lu3E0A#:
x42310:	db "<% 6i> <% 6i> <% 6li> <% 6li> <% 6u> <% 6lu>", 10, 0	; 46: 60 37 32 54 105 62 32 60 37 32 54 105 62 32 60 37 32 54 108 105 62 32 60 37 32 54 108 105 62 32 60 37 32 54 117 62 32 60 37 32 54 108 117 62 10 0

@12266$string_3C252B206i3E203C252B206i3E203C252B206li3E203C252B206li3E203C252B206u3E203C252B206lu3E0A#:
x42356:	db "<%+ 6i> <%+ 6i> <%+ 6li> <%+ 6li> <%+ 6u> <%+ 6lu>", 10, 0	; 52: 60 37 43 32 54 105 62 32 60 37 43 32 54 105 62 32 60 37 43 32 54 108 105 62 32 60 37 43 32 54 108 105 62 32 60 37 43 32 54 117 62 32 60 37 43 32 54 108 117 62 10 0

@12280$string_3C252D206i3E203C252D206i3E203C252D206li3E203C252D206li3E203C252D206u3E203C252D206lu3E0A#:
x42408:	db "<%- 6i> <%- 6i> <%- 6li> <%- 6li> <%- 6u> <%- 6lu>", 10, 0	; 52: 60 37 45 32 54 105 62 32 60 37 45 32 54 105 62 32 60 37 45 32 54 108 105 62 32 60 37 45 32 54 108 105 62 32 60 37 45 32 54 117 62 32 60 37 45 32 54 108 117 62 10 0

@12294$string_3C252B2D206i3E203C252B2D206i3E203C252B2D206li3E203C252B2D206li3E203C252B2D206u3E203C252B2D206lu3E0A0A#:
x42460:	db "<%+- 6i> <%+- 6i> <%+- 6li> <%+- 6li> <%+- 6u> <%+- 6lu>", 10, 10, 0	; 59: 60 37 43 45 32 54 105 62 32 60 37 43 45 32 54 105 62 32 60 37 43 45 32 54 108 105 62 32 60 37 43 45 32 54 108 105 62 32 60 37 43 45 32 54 117 62 32 60 37 43 45 32 54 108 117 62 10 10 0

@12308$string_3C25x3E203C25X3E203C25o3E203C25lx3E203C25lX3E203C25lo3E0A#:
x42519:	db "<%x> <%X> <%o> <%lx> <%lX> <%lo>", 10, 0	; 34: 60 37 120 62 32 60 37 88 62 32 60 37 111 62 32 60 37 108 120 62 32 60 37 108 88 62 32 60 37 108 111 62 10 0

@12322$string_3C2523x3E203C2523X3E203C2523o3E203C2523lx3E203C2523lX3E203C2523lo3E0A#:
x42553:	db "<%#x> <%#X> <%#o> <%#lx> <%#lX> <%#lo>", 10, 0	; 40: 60 37 35 120 62 32 60 37 35 88 62 32 60 37 35 111 62 32 60 37 35 108 120 62 32 60 37 35 108 88 62 32 60 37 35 108 111 62 10 0

@12336$string_3C25253E203C25s3E203C25c3E203C25p3E0A0A#:
x42593:	db "<%%> <%s> <%c> <%p>", 10, 10, 0	; 22: 60 37 37 62 32 60 37 115 62 32 60 37 99 62 32 60 37 112 62 10 10 0

@12337$string_Hello2C20World21#:
x42615:	db "Hello, World!", 0	; 14: 72 101 108 108 111 44 32 87 111 114 108 100 33 0

@12342$string_3C25f3E203C25e3E203C25E3E203C25g3E203C25G3E0A#:
x42629:	db "<%f> <%e> <%E> <%g> <%G>", 10, 0	; 26: 60 37 102 62 32 60 37 101 62 32 60 37 69 62 32 60 37 103 62 32 60 37 71 62 10 0

@12343$float8$123.456#:
x42655:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@12344$float8$123.456#:
x42663:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@12345$float8$123.456#:
x42671:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@12346$float8$123456.1#:
x42679:	dq 123456.1	; 8: 154 153 153 153 1 36 254 64

@12347$float8$123456.1#:
x42687:	dq 123456.1	; 8: 154 153 153 153 1 36 254 64

@12354$string_3C25lf3E203C25le3E203C25lE3E203C25lg3E203C25lG3E0A#:
x42695:	db "<%lf> <%le> <%lE> <%lg> <%lG>", 10, 0	; 31: 60 37 108 102 62 32 60 37 108 101 62 32 60 37 108 69 62 32 60 37 108 103 62 32 60 37 108 71 62 10 0

@12355$float8$123.456#:
x42726:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@12356$float8$123.456#:
x42734:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@12357$float8$123.456#:
x42742:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@12358$float8$123456.1#:
x42750:	dq 123456.1	; 8: 154 153 153 153 1 36 254 64

@12359$float8$123456.1#:
x42758:	dq 123456.1	; 8: 154 153 153 153 1 36 254 64

@12366$string_3C2523f3E203C2523e3E203C2523E3E203C2523g3E203C2523G3E0A#:
x42766:	db "<%#f> <%#e> <%#E> <%#g> <%#G>", 10, 0	; 31: 60 37 35 102 62 32 60 37 35 101 62 32 60 37 35 69 62 32 60 37 35 103 62 32 60 37 35 71 62 10 0

@12367$float8$123.456#:
x42797:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@12368$float8$123.456#:
x42805:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@12369$float8$123.456#:
x42813:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@12370$float8$123.456#:
x42821:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@12371$float8$123.456#:
x42829:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@12378$string_3C2523lf3E203C2523le3E203C2523lE3E203C2523lg3E203C2523lG3E0A#:
x42837:	db "<%#lf> <%#le> <%#lE> <%#lg> <%#lG>", 10, 0	; 36: 60 37 35 108 102 62 32 60 37 35 108 101 62 32 60 37 35 108 69 62 32 60 37 35 108 103 62 32 60 37 35 108 71 62 10 0

@12379$float8$123.456#:
x42873:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@12380$float8$123.456#:
x42881:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@12381$float8$123.456#:
x42889:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@12382$float8$123.456#:
x42897:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@12383$float8$123.456#:
x42905:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@12390$string_3C2562E3f3E203C2562E3e3E203C2562E3E3E203C2562E3g3E203C2562E3G3E0A#:
x42913:	db "<%6.3f> <%6.3e> <%6.3E> <%6.3g> <%6.3G>", 10, 0	; 41: 60 37 54 46 51 102 62 32 60 37 54 46 51 101 62 32 60 37 54 46 51 69 62 32 60 37 54 46 51 103 62 32 60 37 54 46 51 71 62 10 0

@12391$float8$123.456#:
x42954:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@12392$float8$123.456#:
x42962:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@12393$float8$123.456#:
x42970:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@12394$float8$123.456#:
x42978:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@12395$float8$123.456#:
x42986:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@12402$string_3C2562E3lf3E203C2562E3le3E203C2562E3lE3E203C2562E3lg3E203C2562E3lG3E0A0A#:
x42994:	db "<%6.3lf> <%6.3le> <%6.3lE> <%6.3lg> <%6.3lG>", 10, 10, 0	; 47: 60 37 54 46 51 108 102 62 32 60 37 54 46 51 108 101 62 32 60 37 54 46 51 108 69 62 32 60 37 54 46 51 108 103 62 32 60 37 54 46 51 108 71 62 10 10 0

@12403$float8$123.456#:
x43041:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@12404$float8$123.456#:
x43049:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@12405$float8$123.456#:
x43057:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@12406$float8$123.456#:
x43065:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@12407$float8$123.456#:
x43073:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@12414$string_3C25f3E203C25e3E203C25E3E203C25g3E203C25G3E0A#:
x43081:	db "<%f> <%e> <%E> <%g> <%G>", 10, 0	; 26: 60 37 102 62 32 60 37 101 62 32 60 37 69 62 32 60 37 103 62 32 60 37 71 62 10 0

@12415$float8$minus123.456#:
x43107:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@12416$float8$minus123.456#:
x43115:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@12417$float8$minus123.456#:
x43123:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@12418$float8$minus0.000000123456#:
x43131:	dq -0.000000123456	; 8: 23 95 204 117 234 145 128 190

@12419$float8$minus0.000000123456#:
x43139:	dq -0.000000123456	; 8: 23 95 204 117 234 145 128 190

@12426$string_3C25lf3E203C25le3E203C25lE3E203C25lg3E203C25lG3E0A#:
x43147:	db "<%lf> <%le> <%lE> <%lg> <%lG>", 10, 0	; 31: 60 37 108 102 62 32 60 37 108 101 62 32 60 37 108 69 62 32 60 37 108 103 62 32 60 37 108 71 62 10 0

@12427$float8$minus123.456#:
x43178:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@12428$float8$minus123.456#:
x43186:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@12429$float8$minus123.456#:
x43194:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@12430$float8$minus0.000000123456#:
x43202:	dq -0.000000123456	; 8: 23 95 204 117 234 145 128 190

@12431$float8$minus0.000000123456#:
x43210:	dq -0.000000123456	; 8: 23 95 204 117 234 145 128 190

@12438$string_3C2523f3E203C2523e3E203C2523E3E203C2523g3E203C2523G3E0A#:
x43218:	db "<%#f> <%#e> <%#E> <%#g> <%#G>", 10, 0	; 31: 60 37 35 102 62 32 60 37 35 101 62 32 60 37 35 69 62 32 60 37 35 103 62 32 60 37 35 71 62 10 0

@12439$float8$minus123.456#:
x43249:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@12440$float8$minus123.456#:
x43257:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@12441$float8$minus123.456#:
x43265:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@12442$float8$minus123.456#:
x43273:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@12443$float8$minus123.456#:
x43281:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@12450$string_3C2523lf3E203C2523le3E203C2523lE3E203C2523lg3E203C2523lG3E0A#:
x43289:	db "<%#lf> <%#le> <%#lE> <%#lg> <%#lG>", 10, 0	; 36: 60 37 35 108 102 62 32 60 37 35 108 101 62 32 60 37 35 108 69 62 32 60 37 35 108 103 62 32 60 37 35 108 71 62 10 0

@12451$float8$minus123.456#:
x43325:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@12452$float8$minus123.456#:
x43333:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@12453$float8$minus123.456#:
x43341:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@12454$float8$minus123.456#:
x43349:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@12455$float8$minus123.456#:
x43357:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@12462$string_3C2562E3f3E203C2562E3e3E203C2562E3E3E203C2562E3g3E203C2562E3G3E0A#:
x43365:	db "<%6.3f> <%6.3e> <%6.3E> <%6.3g> <%6.3G>", 10, 0	; 41: 60 37 54 46 51 102 62 32 60 37 54 46 51 101 62 32 60 37 54 46 51 69 62 32 60 37 54 46 51 103 62 32 60 37 54 46 51 71 62 10 0

@12463$float8$minus123.456#:
x43406:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@12464$float8$minus123.456#:
x43414:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@12465$float8$minus123.456#:
x43422:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@12466$float8$minus123.456#:
x43430:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@12467$float8$minus123.456#:
x43438:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@12474$string_3C2562E3lf3E203C2562E3le3E203C2562E3lE3E203C2562E3lg3E203C2562E3lG3E0A0A#:
x43446:	db "<%6.3lf> <%6.3le> <%6.3lE> <%6.3lg> <%6.3lG>", 10, 10, 0	; 47: 60 37 54 46 51 108 102 62 32 60 37 54 46 51 108 101 62 32 60 37 54 46 51 108 69 62 32 60 37 54 46 51 108 103 62 32 60 37 54 46 51 108 71 62 10 10 0

@12475$float8$minus123.456#:
x43493:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@12476$float8$minus123.456#:
x43501:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@12477$float8$minus123.456#:
x43509:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@12478$float8$minus123.456#:
x43517:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@12479$float8$minus123.456#:
x43525:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@12495$string_Please20write20three20integers3A20#:
x43533:	db "Please write three integers: ", 0	; 30: 80 108 101 97 115 101 32 119 114 105 116 101 32 116 104 114 101 101 32 105 110 116 101 103 101 114 115 58 32 0

@12497$string_1232045620789#:
x43563:	db "123 456 789", 0	; 12: 49 50 51 32 52 53 54 32 55 56 57 0

@12498$string_25i20252Ai2025i2025n#:
x43575:	db "%i %*i %i %n", 0	; 13: 37 105 32 37 42 105 32 37 105 32 37 110 0

@12503$string_3C25i3E203C25i3E203C25i3E0A#:
x43588:	db "<%i> <%i> <%i>", 10, 0	; 16: 60 37 105 62 32 60 37 105 62 32 60 37 105 62 10 0

@12508$string_Please20write20the20patterns205Babc5D3A20#:
x43604:	db "Please write the patterns [abc]: ", 0	; 34: 80 108 101 97 115 101 32 119 114 105 116 101 32 116 104 101 32 112 97 116 116 101 114 110 115 32 91 97 98 99 93 58 32 0

@12510$string_abcdef#:
x43638:	db "abcdef", 0	; 7: 97 98 99 100 101 102 0

@12511$string_255Babc5D#:
x43645:	db "%[abc]", 0	; 7: 37 91 97 98 99 93 0

@12513$string_3C25s3E0A#:
x43652:	db "<%s>", 10, 0	; 6: 60 37 115 62 10 0

@12515$string_Please20write20the20patterns205B5Eabc5D3A20#:
x43658:	db "Please write the patterns [^abc]: ", 0	; 35: 80 108 101 97 115 101 32 119 114 105 116 101 32 116 104 101 32 112 97 116 116 101 114 110 115 32 91 94 97 98 99 93 58 32 0

@12517$string_defabc#:
x43693:	db "defabc", 0	; 7: 100 101 102 97 98 99 0

@12518$string_255B5Eabc5D#:
x43700:	db "%[^abc]", 0	; 8: 37 91 94 97 98 99 93 0

@12520$string_3C25s3E0A0A#:
x43708:	db "<%s>", 10, 10, 0	; 7: 60 37 115 62 10 10 0

sscanf:	; address £temporary1577 format
x43715:	mov si, bp	; 2: 137 238
x43717:	add si, 8	; 3: 131 198 8

sscanf$1:	; IntegralToIntegral £temporary1578 £temporary1577

sscanf$2:	; BinaryAdd arg_list £temporary1578 2
x43720:	add si, 2	; 3: 131 198 2
x43723:	mov [di + 10], si	; 3: 137 117 10

sscanf$3:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

sscanf$4:	; Parameter 12 inString 6
x43726:	mov ax, [bp + 6]	; 3: 139 70 6
x43729:	mov [di + 18], ax	; 3: 137 69 18

sscanf$5:	; Parameter 12 format 8
x43732:	mov ax, [bp + 8]	; 3: 139 70 8
x43735:	mov [di + 20], ax	; 3: 137 69 20

sscanf$6:	; Parameter 12 arg_list 10
x43738:	mov ax, [di + 10]	; 3: 139 69 10
x43741:	mov [di + 22], ax	; 3: 137 69 22

sscanf$7:	; Call 12 vsscanf 0
x43744:	mov word [di + 12], sscanf$8	; 5: 199 69 12 243 170
x43749:	mov [di + 14], bp	; 3: 137 109 14
x43752:	mov [di + 16], di	; 3: 137 125 16
x43755:	add di, 12	; 3: 131 199 12
x43758:	mov bp, di	; 2: 137 253
x43760:	nop	; 1: 144
x43761:	jmp vsscanf	; 2: 235 11

sscanf$8:	; PostCall 12

sscanf$9:	; GetReturnValue £temporary1580

sscanf$10:	; SetReturnValue £temporary1580

sscanf$11:	; Return £temporary1580
x43763:	mov ax, [bp]	; 3: 139 70 0
x43766:	mov di, [bp + 4]	; 3: 139 126 4
x43769:	mov bp, [bp + 2]	; 3: 139 110 2
x43772:	jmp ax	; 2: 255 224

sscanf$12:	; FunctionEnd sscanf

vsscanf:	; Assign g_inStatus 1
x43774:	mov word [g_inStatus], 1	; 6: 199 6 184 95 1 0

vsscanf$1:	; IntegralToIntegral £temporary1585 inString
x43780:	mov ax, [bp + 6]	; 3: 139 70 6

vsscanf$2:	; Assign g_inDevice £temporary1585
x43783:	mov [g_inDevice], ax	; 3: 163 186 95

vsscanf$3:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

vsscanf$4:	; Parameter 12 format 6
x43786:	mov ax, [bp + 8]	; 3: 139 70 8
x43789:	mov [bp + 18], ax	; 3: 137 70 18

vsscanf$5:	; Parameter 12 arg_list 8
x43792:	mov ax, [bp + 10]	; 3: 139 70 10
x43795:	mov [bp + 20], ax	; 3: 137 70 20

vsscanf$6:	; Call 12 scanFormat 0
x43798:	mov word [bp + 12], vsscanf$7	; 5: 199 70 12 36 171
x43803:	mov [bp + 14], bp	; 3: 137 110 14
x43806:	add bp, 12	; 3: 131 197 12
x43809:	jmp scanFormat	; 3: 233 152 180

vsscanf$7:	; PostCall 12

vsscanf$8:	; GetReturnValue £temporary1586

vsscanf$9:	; SetReturnValue £temporary1586

vsscanf$10:	; Return £temporary1586
x43812:	mov ax, [bp]	; 3: 139 70 0
x43815:	mov di, [bp + 4]	; 3: 139 126 4
x43818:	mov bp, [bp + 2]	; 3: 139 110 2
x43821:	jmp ax	; 2: 255 224

vsscanf$11:	; FunctionEnd vsscanf

string_test:	; Assign s string_Hello2C20World21#
x43823:	mov word [bp + 8], @9688$string_Hello2C20World21#	; 5: 199 70 8 182 177

string_test$1:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$2:	; Parameter 212 string_strlen282225s2229203D2025i0A# 6
x43828:	mov word [bp + 218], @9697$string_strlen282225s2229203D2025i0A#	; 6: 199 134 218 0 196 177

string_test$3:	; Parameter 212 s 8
x43834:	mov ax, [bp + 8]	; 3: 139 70 8
x43837:	mov [bp + 220], ax	; 4: 137 134 220 0

string_test$4:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$5:	; Parameter 212 s 16
x43841:	mov ax, [bp + 8]	; 3: 139 70 8
x43844:	mov [bp + 228], ax	; 4: 137 134 228 0

string_test$6:	; Call 212 strlen 10
x43848:	mov word [bp + 222], string_test$7	; 6: 199 134 222 0 89 171
x43854:	mov [bp + 224], bp	; 4: 137 174 224 0
x43858:	add bp, 222	; 4: 129 197 222 0
x43862:	jmp strlen	; 3: 233 147 225

string_test$7:	; PostCall 212

string_test$8:	; GetReturnValue £temporary4304

string_test$9:	; Parameter 212 £temporary4304 10
x43865:	mov [bp + 222], bx	; 4: 137 158 222 0

string_test$10:	; Call 212 printf 0
x43869:	mov word [bp + 212], string_test$11	; 6: 199 134 212 0 115 171
x43875:	mov [bp + 214], bp	; 4: 137 174 214 0
x43879:	add bp, 212	; 4: 129 197 212 0
x43883:	mov di, bp	; 2: 137 239
x43885:	add di, 4	; 3: 131 199 4
x43888:	jmp printf	; 3: 233 145 97

string_test$11:	; PostCall 212

string_test$12:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$13:	; Parameter 212 t 6
x43891:	mov [bp + 218], bp	; 4: 137 174 218 0
x43895:	add word [bp + 218], 10	; 5: 131 134 218 0 10

string_test$14:	; Parameter 212 s 8
x43900:	mov ax, [bp + 8]	; 3: 139 70 8
x43903:	mov [bp + 220], ax	; 4: 137 134 220 0

string_test$15:	; Call 212 strcpy 0
x43907:	mov word [bp + 212], string_test$16	; 6: 199 134 212 0 148 171
x43913:	mov [bp + 214], bp	; 4: 137 174 214 0
x43917:	add bp, 212	; 4: 129 197 212 0
x43921:	jmp strcpy	; 3: 233 155 178

string_test$16:	; PostCall 212

string_test$17:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$18:	; Parameter 212 u 6
x43924:	mov [bp + 218], bp	; 4: 137 174 218 0
x43928:	add word [bp + 218], 110	; 5: 131 134 218 0 110

string_test$19:	; Parameter 212 s 8
x43933:	mov ax, [bp + 8]	; 3: 139 70 8
x43936:	mov [bp + 220], ax	; 4: 137 134 220 0

string_test$20:	; Parameter 212 5 10
x43940:	mov word [bp + 222], 5	; 6: 199 134 222 0 5 0

string_test$21:	; Call 212 strncpy 0
x43946:	mov word [bp + 212], string_test$22	; 6: 199 134 212 0 187 171
x43952:	mov [bp + 214], bp	; 4: 137 174 214 0
x43956:	add bp, 212	; 4: 129 197 212 0
x43960:	jmp strncpy	; 3: 233 37 8

string_test$22:	; PostCall 212

string_test$23:	; Deref £temporary4308 -> u u 5
x43963:	mov si, bp	; 2: 137 238
x43965:	add si, 110	; 3: 131 198 110

string_test$24:	; Assign £temporary4308 -> u 0
x43968:	mov byte [si + 5], 0	; 4: 198 68 5 0

string_test$25:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$26:	; Parameter 212 string_t203D202225s222C20u203D202225s220A# 6
x43972:	mov word [bp + 218], @9709$string_t203D202225s222C20u203D202225s220A#	; 6: 199 134 218 0 215 177

string_test$27:	; Parameter 212 t 8
x43978:	mov [bp + 220], bp	; 4: 137 174 220 0
x43982:	add word [bp + 220], 10	; 5: 131 134 220 0 10

string_test$28:	; Parameter 212 u 10
x43987:	mov [bp + 222], bp	; 4: 137 174 222 0
x43991:	add word [bp + 222], 110	; 5: 131 134 222 0 110

string_test$29:	; Call 212 printf 0
x43996:	mov word [bp + 212], string_test$30	; 6: 199 134 212 0 242 171
x44002:	mov [bp + 214], bp	; 4: 137 174 214 0
x44006:	add bp, 212	; 4: 129 197 212 0
x44010:	mov di, bp	; 2: 137 239
x44012:	add di, 4	; 3: 131 199 4
x44015:	jmp printf	; 3: 233 18 97

string_test$30:	; PostCall 212

string_test$31:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$32:	; Parameter 212 t 6
x44018:	mov [bp + 218], bp	; 4: 137 174 218 0
x44022:	add word [bp + 218], 10	; 5: 131 134 218 0 10

string_test$33:	; Parameter 212 string_abc# 8
x44027:	mov word [bp + 220], @9711$string_abc#	; 6: 199 134 220 0 235 177

string_test$34:	; Call 212 strcat 0
x44033:	mov word [bp + 212], string_test$35	; 6: 199 134 212 0 18 172
x44039:	mov [bp + 214], bp	; 4: 137 174 214 0
x44043:	add bp, 212	; 4: 129 197 212 0
x44047:	jmp strcat	; 3: 233 253 224

string_test$35:	; PostCall 212

string_test$36:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$37:	; Parameter 212 u 6
x44050:	mov [bp + 218], bp	; 4: 137 174 218 0
x44054:	add word [bp + 218], 110	; 5: 131 134 218 0 110

string_test$38:	; Call 212 strlen 0
x44059:	mov word [bp + 212], string_test$39	; 6: 199 134 212 0 44 172
x44065:	mov [bp + 214], bp	; 4: 137 174 214 0
x44069:	add bp, 212	; 4: 129 197 212 0
x44073:	jmp strlen	; 3: 233 192 224

string_test$39:	; PostCall 212

string_test$40:	; GetReturnValue £temporary4311

string_test$41:	; Assign i £temporary4311
x44076:	mov [bp + 6], bx	; 3: 137 94 6

string_test$42:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$43:	; Parameter 212 u 6
x44079:	mov [bp + 218], bp	; 4: 137 174 218 0
x44083:	add word [bp + 218], 110	; 5: 131 134 218 0 110

string_test$44:	; Parameter 212 string_abc# 8
x44088:	mov word [bp + 220], @9714$string_abc#	; 6: 199 134 220 0 239 177

string_test$45:	; Parameter 212 2 10
x44094:	mov word [bp + 222], 2	; 6: 199 134 222 0 2 0

string_test$46:	; Call 212 strncat 0
x44100:	mov word [bp + 212], string_test$47	; 6: 199 134 212 0 85 172
x44106:	mov [bp + 214], bp	; 4: 137 174 214 0
x44110:	add bp, 212	; 4: 129 197 212 0
x44114:	jmp strncat	; 3: 233 220 7

string_test$47:	; PostCall 212

string_test$48:	; BinaryAdd £temporary4313 i 2
x44117:	mov ax, [bp + 6]	; 3: 139 70 6
x44120:	add ax, 2	; 3: 131 192 2

string_test$49:	; BinaryAdd £temporary4315 u £temporary4313
x44123:	mov si, bp	; 2: 137 238
x44125:	add si, 110	; 3: 131 198 110
x44128:	add si, ax	; 2: 1 198

string_test$50:	; Deref £temporary4314 -> £temporary4315 £temporary4315 0

string_test$51:	; Assign £temporary4314 -> £temporary4315 0
x44130:	mov byte [si], 0	; 3: 198 4 0

string_test$52:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$53:	; Parameter 212 string_t203D202225s222C20u203D202225s220A# 6
x44133:	mov word [bp + 218], @9726$string_t203D202225s222C20u203D202225s220A#	; 6: 199 134 218 0 243 177

string_test$54:	; Parameter 212 t 8
x44139:	mov [bp + 220], bp	; 4: 137 174 220 0
x44143:	add word [bp + 220], 10	; 5: 131 134 220 0 10

string_test$55:	; Parameter 212 u 10
x44148:	mov [bp + 222], bp	; 4: 137 174 222 0
x44152:	add word [bp + 222], 110	; 5: 131 134 222 0 110

string_test$56:	; Call 212 printf 0
x44157:	mov word [bp + 212], string_test$57	; 6: 199 134 212 0 147 172
x44163:	mov [bp + 214], bp	; 4: 137 174 214 0
x44167:	add bp, 212	; 4: 129 197 212 0
x44171:	mov di, bp	; 2: 137 239
x44173:	add di, 4	; 3: 131 199 4
x44176:	jmp printf	; 3: 233 113 96

string_test$57:	; PostCall 212

string_test$58:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$59:	; Parameter 212 string_strcmp28s2C20u29203D2025i0A# 6
x44179:	mov word [bp + 218], @9728$string_strcmp28s2C20u29203D2025i0A#	; 6: 199 134 218 0 7 178

string_test$60:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$61:	; Parameter 212 s 14
x44185:	mov ax, [bp + 8]	; 3: 139 70 8
x44188:	mov [bp + 226], ax	; 4: 137 134 226 0

string_test$62:	; Parameter 212 u 16
x44192:	mov [bp + 228], bp	; 4: 137 174 228 0
x44196:	add word [bp + 228], 110	; 5: 131 134 228 0 110

string_test$63:	; Call 212 strcmp 8
x44201:	mov word [bp + 220], string_test$64	; 6: 199 134 220 0 186 172
x44207:	mov [bp + 222], bp	; 4: 137 174 222 0
x44211:	add bp, 220	; 4: 129 197 220 0
x44215:	jmp strcmp	; 3: 233 64 176

string_test$64:	; PostCall 212

string_test$65:	; GetReturnValue £temporary4317

string_test$66:	; Parameter 212 £temporary4317 8
x44218:	mov [bp + 220], bx	; 4: 137 158 220 0

string_test$67:	; Call 212 printf 0
x44222:	mov word [bp + 212], string_test$68	; 6: 199 134 212 0 212 172
x44228:	mov [bp + 214], bp	; 4: 137 174 214 0
x44232:	add bp, 212	; 4: 129 197 212 0
x44236:	mov di, bp	; 2: 137 239
x44238:	add di, 2	; 3: 131 199 2
x44241:	jmp printf	; 3: 233 48 96

string_test$68:	; PostCall 212

string_test$69:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$70:	; Parameter 212 string_strncmp28s2C20u2C20229203D2025i0A# 6
x44244:	mov word [bp + 218], @9731$string_strncmp28s2C20u2C20229203D2025i0A#	; 6: 199 134 218 0 26 178

string_test$71:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$72:	; Parameter 212 s 14
x44250:	mov ax, [bp + 8]	; 3: 139 70 8
x44253:	mov [bp + 226], ax	; 4: 137 134 226 0

string_test$73:	; Parameter 212 u 16
x44257:	mov [bp + 228], bp	; 4: 137 174 228 0
x44261:	add word [bp + 228], 110	; 5: 131 134 228 0 110

string_test$74:	; Parameter 212 2 18
x44266:	mov word [bp + 230], 2	; 6: 199 134 230 0 2 0

string_test$75:	; Call 212 strncmp 8
x44272:	mov word [bp + 220], string_test$76	; 6: 199 134 220 0 1 173
x44278:	mov [bp + 222], bp	; 4: 137 174 222 0
x44282:	add bp, 220	; 4: 129 197 220 0
x44286:	jmp strncmp	; 3: 233 151 7

string_test$76:	; PostCall 212

string_test$77:	; GetReturnValue £temporary4319

string_test$78:	; Parameter 212 £temporary4319 8
x44289:	mov [bp + 220], bx	; 4: 137 158 220 0

string_test$79:	; Call 212 printf 0
x44293:	mov word [bp + 212], string_test$80	; 6: 199 134 212 0 27 173
x44299:	mov [bp + 214], bp	; 4: 137 174 214 0
x44303:	add bp, 212	; 4: 129 197 212 0
x44307:	mov di, bp	; 2: 137 239
x44309:	add di, 2	; 3: 131 199 2
x44312:	jmp printf	; 3: 233 233 95

string_test$80:	; PostCall 212

string_test$81:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$82:	; Parameter 212 s 6
x44315:	mov ax, [bp + 8]	; 3: 139 70 8
x44318:	mov [bp + 218], ax	; 4: 137 134 218 0

string_test$83:	; Parameter 212 108 8
x44322:	mov word [bp + 220], 108	; 6: 199 134 220 0 108 0

string_test$84:	; Call 212 strchr 0
x44328:	mov word [bp + 212], string_test$85	; 6: 199 134 212 0 57 173
x44334:	mov [bp + 214], bp	; 4: 137 174 214 0
x44338:	add bp, 212	; 4: 129 197 212 0
x44342:	jmp strchr	; 3: 233 130 116

string_test$85:	; PostCall 212

string_test$86:	; GetReturnValue £temporary4321

string_test$87:	; Assign p £temporary4321
x44345:	mov [bp + 210], bx	; 4: 137 158 210 0

string_test$88:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$89:	; Parameter 212 string_strchr28s2C2027l2729203D2025i0A# 6
x44349:	mov word [bp + 218], @9741$string_strchr28s2C2027l2729203D2025i0A#	; 6: 199 134 218 0 49 178

string_test$90:	; Equal 93 p 0
x44355:	cmp word [bp + 210], 0	; 5: 131 190 210 0 0
x44360:	je string_test$93	; 2: 116 9

string_test$91:	; BinarySubtract £temporary4327 p s
x44362:	mov ax, [bp + 210]	; 4: 139 134 210 0
x44366:	sub ax, [bp + 8]	; 3: 43 70 8

string_test$92:	; Goto 94
x44369:	jmp string_test$94	; 2: 235 3

string_test$93:	; Assign £temporary4327 -1
x44371:	mov ax, -1	; 3: 184 255 255

string_test$94:	; Parameter 212 £temporary4327 8
x44374:	mov [bp + 220], ax	; 4: 137 134 220 0

string_test$95:	; Call 212 printf 0
x44378:	mov word [bp + 212], string_test$96	; 6: 199 134 212 0 112 173
x44384:	mov [bp + 214], bp	; 4: 137 174 214 0
x44388:	add bp, 212	; 4: 129 197 212 0
x44392:	mov di, bp	; 2: 137 239
x44394:	add di, 2	; 3: 131 199 2
x44397:	jmp printf	; 3: 233 148 95

string_test$96:	; PostCall 212

string_test$97:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$98:	; Parameter 212 s 6
x44400:	mov ax, [bp + 8]	; 3: 139 70 8
x44403:	mov [bp + 218], ax	; 4: 137 134 218 0

string_test$99:	; Parameter 212 108 8
x44407:	mov word [bp + 220], 108	; 6: 199 134 220 0 108 0

string_test$100:	; Call 212 strrchr 0
x44413:	mov word [bp + 212], string_test$101	; 6: 199 134 212 0 142 173
x44419:	mov [bp + 214], bp	; 4: 137 174 214 0
x44423:	add bp, 212	; 4: 129 197 212 0
x44427:	jmp strrchr	; 3: 233 142 7

string_test$101:	; PostCall 212

string_test$102:	; GetReturnValue £temporary4329

string_test$103:	; Assign p £temporary4329
x44430:	mov [bp + 210], bx	; 4: 137 158 210 0

string_test$104:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$105:	; Parameter 212 string_strrchr28s2C2027l2729203D2025i0A# 6
x44434:	mov word [bp + 218], @9760$string_strrchr28s2C2027l2729203D2025i0A#	; 6: 199 134 218 0 70 178

string_test$106:	; Equal 109 p 0
x44440:	cmp word [bp + 210], 0	; 5: 131 190 210 0 0
x44445:	je string_test$109	; 2: 116 9

string_test$107:	; BinarySubtract £temporary4335 p s
x44447:	mov ax, [bp + 210]	; 4: 139 134 210 0
x44451:	sub ax, [bp + 8]	; 3: 43 70 8

string_test$108:	; Goto 110
x44454:	jmp string_test$110	; 2: 235 3

string_test$109:	; Assign £temporary4335 -1
x44456:	mov ax, -1	; 3: 184 255 255

string_test$110:	; Parameter 212 £temporary4335 8
x44459:	mov [bp + 220], ax	; 4: 137 134 220 0

string_test$111:	; Call 212 printf 0
x44463:	mov word [bp + 212], string_test$112	; 6: 199 134 212 0 197 173
x44469:	mov [bp + 214], bp	; 4: 137 174 214 0
x44473:	add bp, 212	; 4: 129 197 212 0
x44477:	mov di, bp	; 2: 137 239
x44479:	add di, 2	; 3: 131 199 2
x44482:	jmp printf	; 3: 233 63 95

string_test$112:	; PostCall 212

string_test$113:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$114:	; Parameter 212 s 6
x44485:	mov ax, [bp + 8]	; 3: 139 70 8
x44488:	mov [bp + 218], ax	; 4: 137 134 218 0

string_test$115:	; Parameter 212 120 8
x44492:	mov word [bp + 220], 120	; 6: 199 134 220 0 120 0

string_test$116:	; Call 212 strchr 0
x44498:	mov word [bp + 212], string_test$117	; 6: 199 134 212 0 227 173
x44504:	mov [bp + 214], bp	; 4: 137 174 214 0
x44508:	add bp, 212	; 4: 129 197 212 0
x44512:	jmp strchr	; 3: 233 216 115

string_test$117:	; PostCall 212

string_test$118:	; GetReturnValue £temporary4337

string_test$119:	; Assign p £temporary4337
x44515:	mov [bp + 210], bx	; 4: 137 158 210 0

string_test$120:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$121:	; Parameter 212 string_strchr28s2C2027x2729203D2025i0A# 6
x44519:	mov word [bp + 218], @9779$string_strchr28s2C2027x2729203D2025i0A#	; 6: 199 134 218 0 92 178

string_test$122:	; Equal 125 p 0
x44525:	cmp word [bp + 210], 0	; 5: 131 190 210 0 0
x44530:	je string_test$125	; 2: 116 9

string_test$123:	; BinarySubtract £temporary4343 p s
x44532:	mov ax, [bp + 210]	; 4: 139 134 210 0
x44536:	sub ax, [bp + 8]	; 3: 43 70 8

string_test$124:	; Goto 126
x44539:	jmp string_test$126	; 2: 235 3

string_test$125:	; Assign £temporary4343 -1
x44541:	mov ax, -1	; 3: 184 255 255

string_test$126:	; Parameter 212 £temporary4343 8
x44544:	mov [bp + 220], ax	; 4: 137 134 220 0

string_test$127:	; Call 212 printf 0
x44548:	mov word [bp + 212], string_test$128	; 6: 199 134 212 0 26 174
x44554:	mov [bp + 214], bp	; 4: 137 174 214 0
x44558:	add bp, 212	; 4: 129 197 212 0
x44562:	mov di, bp	; 2: 137 239
x44564:	add di, 2	; 3: 131 199 2
x44567:	jmp printf	; 3: 233 234 94

string_test$128:	; PostCall 212

string_test$129:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$130:	; Parameter 212 s 6
x44570:	mov ax, [bp + 8]	; 3: 139 70 8
x44573:	mov [bp + 218], ax	; 4: 137 134 218 0

string_test$131:	; Parameter 212 120 8
x44577:	mov word [bp + 220], 120	; 6: 199 134 220 0 120 0

string_test$132:	; Call 212 strrchr 0
x44583:	mov word [bp + 212], string_test$133	; 6: 199 134 212 0 56 174
x44589:	mov [bp + 214], bp	; 4: 137 174 214 0
x44593:	add bp, 212	; 4: 129 197 212 0
x44597:	jmp strrchr	; 3: 233 228 6

string_test$133:	; PostCall 212

string_test$134:	; GetReturnValue £temporary4345

string_test$135:	; Assign p £temporary4345
x44600:	mov [bp + 210], bx	; 4: 137 158 210 0

string_test$136:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$137:	; Parameter 212 string_strrchr28s2C2027x2729203D2025i0A# 6
x44604:	mov word [bp + 218], @9798$string_strrchr28s2C2027x2729203D2025i0A#	; 6: 199 134 218 0 113 178

string_test$138:	; Equal 141 p 0
x44610:	cmp word [bp + 210], 0	; 5: 131 190 210 0 0
x44615:	je string_test$141	; 2: 116 9

string_test$139:	; BinarySubtract £temporary4351 p s
x44617:	mov ax, [bp + 210]	; 4: 139 134 210 0
x44621:	sub ax, [bp + 8]	; 3: 43 70 8

string_test$140:	; Goto 142
x44624:	jmp string_test$142	; 2: 235 3

string_test$141:	; Assign £temporary4351 -1
x44626:	mov ax, -1	; 3: 184 255 255

string_test$142:	; Parameter 212 £temporary4351 8
x44629:	mov [bp + 220], ax	; 4: 137 134 220 0

string_test$143:	; Call 212 printf 0
x44633:	mov word [bp + 212], string_test$144	; 6: 199 134 212 0 111 174
x44639:	mov [bp + 214], bp	; 4: 137 174 214 0
x44643:	add bp, 212	; 4: 129 197 212 0
x44647:	mov di, bp	; 2: 137 239
x44649:	add di, 2	; 3: 131 199 2
x44652:	jmp printf	; 3: 233 149 94

string_test$144:	; PostCall 212

string_test$145:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$146:	; Parameter 212 s 6
x44655:	mov ax, [bp + 8]	; 3: 139 70 8
x44658:	mov [bp + 218], ax	; 4: 137 134 218 0

string_test$147:	; Parameter 212 string_Hello2C20World21# 8
x44662:	mov word [bp + 220], @9813$string_Hello2C20World21#	; 6: 199 134 220 0 135 178

string_test$148:	; Parameter 212 20 10
x44668:	mov word [bp + 222], 20	; 6: 199 134 222 0 20 0

string_test$149:	; Call 212 memcpy 0
x44674:	mov word [bp + 212], string_test$150	; 6: 199 134 212 0 147 174
x44680:	mov [bp + 214], bp	; 4: 137 174 214 0
x44684:	add bp, 212	; 4: 129 197 212 0
x44688:	jmp memcpy	; 3: 233 254 227

string_test$150:	; PostCall 212

string_test$151:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$152:	; Parameter 212 t 6
x44691:	mov [bp + 218], bp	; 4: 137 174 218 0
x44695:	add word [bp + 218], 10	; 5: 131 134 218 0 10

string_test$153:	; Parameter 212 string_Hello2C20World21# 8
x44700:	mov word [bp + 220], @9820$string_Hello2C20World21#	; 6: 199 134 220 0 149 178

string_test$154:	; Parameter 212 20 10
x44706:	mov word [bp + 222], 20	; 6: 199 134 222 0 20 0

string_test$155:	; Call 212 memmove 0
x44712:	mov word [bp + 212], string_test$156	; 6: 199 134 212 0 185 174
x44718:	mov [bp + 214], bp	; 4: 137 174 214 0
x44722:	add bp, 212	; 4: 129 197 212 0
x44726:	jmp memmove	; 3: 233 176 6

string_test$156:	; PostCall 212

string_test$157:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$158:	; Parameter 212 u 6
x44729:	mov [bp + 218], bp	; 4: 137 174 218 0
x44733:	add word [bp + 218], 110	; 5: 131 134 218 0 110

string_test$159:	; Parameter 212 88 8
x44738:	mov word [bp + 220], 88	; 6: 199 134 220 0 88 0

string_test$160:	; Parameter 212 20 10
x44744:	mov word [bp + 222], 20	; 6: 199 134 222 0 20 0

string_test$161:	; Call 212 memset 0
x44750:	mov word [bp + 212], string_test$162	; 6: 199 134 212 0 223 174
x44756:	mov [bp + 214], bp	; 4: 137 174 214 0
x44760:	add bp, 212	; 4: 129 197 212 0
x44764:	jmp memset	; 3: 233 240 6

string_test$162:	; PostCall 212

string_test$163:	; Deref £temporary4356 -> u u 19
x44767:	mov si, bp	; 2: 137 238
x44769:	add si, 110	; 3: 131 198 110

string_test$164:	; Assign £temporary4356 -> u 0
x44772:	mov byte [si + 19], 0	; 4: 198 68 19 0

string_test$165:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$166:	; Parameter 212 string_s203D202225s222C20t203D202225s222C20u203D202225s220A# 6
x44776:	mov word [bp + 218], @9842$string_s203D202225s222C20t203D202225s222C20u203D202225s220A#	; 6: 199 134 218 0 163 178

string_test$167:	; Parameter 212 s 8
x44782:	mov ax, [bp + 8]	; 3: 139 70 8
x44785:	mov [bp + 220], ax	; 4: 137 134 220 0

string_test$168:	; Parameter 212 t 10
x44789:	mov [bp + 222], bp	; 4: 137 174 222 0
x44793:	add word [bp + 222], 10	; 5: 131 134 222 0 10

string_test$169:	; Parameter 212 u 12
x44798:	mov [bp + 224], bp	; 4: 137 174 224 0
x44802:	add word [bp + 224], 110	; 5: 131 134 224 0 110

string_test$170:	; Call 212 printf 0
x44807:	mov word [bp + 212], string_test$171	; 6: 199 134 212 0 29 175
x44813:	mov [bp + 214], bp	; 4: 137 174 214 0
x44817:	add bp, 212	; 4: 129 197 212 0
x44821:	mov di, bp	; 2: 137 239
x44823:	add di, 6	; 3: 131 199 6
x44826:	jmp printf	; 3: 233 231 93

string_test$171:	; PostCall 212

string_test$172:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$173:	; Parameter 212 s 6
x44829:	mov ax, [bp + 8]	; 3: 139 70 8
x44832:	mov [bp + 218], ax	; 4: 137 134 218 0

string_test$174:	; Parameter 212 108 8
x44836:	mov word [bp + 220], 108	; 6: 199 134 220 0 108 0

string_test$175:	; Parameter 212 20 10
x44842:	mov word [bp + 222], 20	; 6: 199 134 222 0 20 0

string_test$176:	; Call 212 memchr 0
x44848:	mov word [bp + 212], string_test$177	; 6: 199 134 212 0 65 175
x44854:	mov [bp + 214], bp	; 4: 137 174 214 0
x44858:	add bp, 212	; 4: 129 197 212 0
x44862:	jmp memchr	; 3: 233 206 6

string_test$177:	; PostCall 212

string_test$178:	; GetReturnValue £temporary4358

string_test$179:	; Assign p £temporary4358
x44865:	mov [bp + 210], bx	; 4: 137 158 210 0

string_test$180:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$181:	; Parameter 212 string_memchr28s2C2027l272C20SIZE202A20sizeof28char2929203D2025i0A# 6
x44869:	mov word [bp + 218], @9853$string_memchr28s2C2027l272C20SIZE202A20sizeof28char2929203D2025i0A#	; 6: 199 134 218 0 193 178

string_test$182:	; Equal 185 p 0
x44875:	cmp word [bp + 210], 0	; 5: 131 190 210 0 0
x44880:	je string_test$185	; 2: 116 9

string_test$183:	; BinarySubtract £temporary4364 p s
x44882:	mov ax, [bp + 210]	; 4: 139 134 210 0
x44886:	sub ax, [bp + 8]	; 3: 43 70 8

string_test$184:	; Goto 186
x44889:	jmp string_test$186	; 2: 235 3

string_test$185:	; Assign £temporary4364 -1
x44891:	mov ax, -1	; 3: 184 255 255

string_test$186:	; Parameter 212 £temporary4364 8
x44894:	mov [bp + 220], ax	; 4: 137 134 220 0

string_test$187:	; Call 212 printf 0
x44898:	mov word [bp + 212], string_test$188	; 6: 199 134 212 0 120 175
x44904:	mov [bp + 214], bp	; 4: 137 174 214 0
x44908:	add bp, 212	; 4: 129 197 212 0
x44912:	mov di, bp	; 2: 137 239
x44914:	add di, 2	; 3: 131 199 2
x44917:	jmp printf	; 3: 233 140 93

string_test$188:	; PostCall 212

string_test$189:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$190:	; Parameter 212 s 6
x44920:	mov ax, [bp + 8]	; 3: 139 70 8
x44923:	mov [bp + 218], ax	; 4: 137 134 218 0

string_test$191:	; Parameter 212 120 8
x44927:	mov word [bp + 220], 120	; 6: 199 134 220 0 120 0

string_test$192:	; Parameter 212 20 10
x44933:	mov word [bp + 222], 20	; 6: 199 134 222 0 20 0

string_test$193:	; Call 212 memchr 0
x44939:	mov word [bp + 212], string_test$194	; 6: 199 134 212 0 156 175
x44945:	mov [bp + 214], bp	; 4: 137 174 214 0
x44949:	add bp, 212	; 4: 129 197 212 0
x44953:	jmp memchr	; 3: 233 115 6

string_test$194:	; PostCall 212

string_test$195:	; GetReturnValue £temporary4366

string_test$196:	; Assign p £temporary4366
x44956:	mov [bp + 210], bx	; 4: 137 158 210 0

string_test$197:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$198:	; Parameter 212 string_memchr28s2C2027x272C20SIZE202A20sizeof28char2929203D2025i0A# 6
x44960:	mov word [bp + 218], @9877$string_memchr28s2C2027x272C20SIZE202A20sizeof28char2929203D2025i0A#	; 6: 199 134 218 0 235 178

string_test$199:	; Equal 202 p 0
x44966:	cmp word [bp + 210], 0	; 5: 131 190 210 0 0
x44971:	je string_test$202	; 2: 116 9

string_test$200:	; BinarySubtract £temporary4372 p s
x44973:	mov ax, [bp + 210]	; 4: 139 134 210 0
x44977:	sub ax, [bp + 8]	; 3: 43 70 8

string_test$201:	; Goto 203
x44980:	jmp string_test$203	; 2: 235 3

string_test$202:	; Assign £temporary4372 -1
x44982:	mov ax, -1	; 3: 184 255 255

string_test$203:	; Parameter 212 £temporary4372 8
x44985:	mov [bp + 220], ax	; 4: 137 134 220 0

string_test$204:	; Call 212 printf 0
x44989:	mov word [bp + 212], string_test$205	; 6: 199 134 212 0 211 175
x44995:	mov [bp + 214], bp	; 4: 137 174 214 0
x44999:	add bp, 212	; 4: 129 197 212 0
x45003:	mov di, bp	; 2: 137 239
x45005:	add di, 2	; 3: 131 199 2
x45008:	jmp printf	; 3: 233 49 93

string_test$205:	; PostCall 212

string_test$206:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$207:	; Parameter 212 string_s3A202225s222C20t3A202225s220A# 6
x45011:	mov word [bp + 218], @9892$string_s3A202225s222C20t3A202225s220A#	; 6: 199 134 218 0 21 179

string_test$208:	; Parameter 212 s 8
x45017:	mov ax, [bp + 8]	; 3: 139 70 8
x45020:	mov [bp + 220], ax	; 4: 137 134 220 0

string_test$209:	; Parameter 212 t 10
x45024:	mov [bp + 222], bp	; 4: 137 174 222 0
x45028:	add word [bp + 222], 10	; 5: 131 134 222 0 10

string_test$210:	; Call 212 printf 0
x45033:	mov word [bp + 212], string_test$211	; 6: 199 134 212 0 255 175
x45039:	mov [bp + 214], bp	; 4: 137 174 214 0
x45043:	add bp, 212	; 4: 129 197 212 0
x45047:	mov di, bp	; 2: 137 239
x45049:	add di, 4	; 3: 131 199 4
x45052:	jmp printf	; 3: 233 5 93

string_test$211:	; PostCall 212

string_test$212:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$213:	; Parameter 212 string_strcmp28s2C20t29203D2025i0A# 6
x45055:	mov word [bp + 218], @9894$string_strcmp28s2C20t29203D2025i0A#	; 6: 199 134 218 0 39 179

string_test$214:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$215:	; Parameter 212 s 14
x45061:	mov ax, [bp + 8]	; 3: 139 70 8
x45064:	mov [bp + 226], ax	; 4: 137 134 226 0

string_test$216:	; Parameter 212 t 16
x45068:	mov [bp + 228], bp	; 4: 137 174 228 0
x45072:	add word [bp + 228], 10	; 5: 131 134 228 0 10

string_test$217:	; Call 212 strcmp 8
x45077:	mov word [bp + 220], string_test$218	; 6: 199 134 220 0 38 176
x45083:	mov [bp + 222], bp	; 4: 137 174 222 0
x45087:	add bp, 220	; 4: 129 197 220 0
x45091:	jmp strcmp	; 3: 233 212 172

string_test$218:	; PostCall 212

string_test$219:	; GetReturnValue £temporary4375

string_test$220:	; Parameter 212 £temporary4375 8
x45094:	mov [bp + 220], bx	; 4: 137 158 220 0

string_test$221:	; Call 212 printf 0
x45098:	mov word [bp + 212], string_test$222	; 6: 199 134 212 0 64 176
x45104:	mov [bp + 214], bp	; 4: 137 174 214 0
x45108:	add bp, 212	; 4: 129 197 212 0
x45112:	mov di, bp	; 2: 137 239
x45114:	add di, 2	; 3: 131 199 2
x45117:	jmp printf	; 3: 233 196 92

string_test$222:	; PostCall 212

string_test$223:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$224:	; Parameter 212 string_memcmp28s2C20t2C20SIZE202A20sizeof28char2929203D2025i0A# 6
x45120:	mov word [bp + 218], @9897$string_memcmp28s2C20t2C20SIZE202A20sizeof28char2929203D2025i0A#	; 6: 199 134 218 0 58 179

string_test$225:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$226:	; Parameter 212 s 14
x45126:	mov ax, [bp + 8]	; 3: 139 70 8
x45129:	mov [bp + 226], ax	; 4: 137 134 226 0

string_test$227:	; Parameter 212 t 16
x45133:	mov [bp + 228], bp	; 4: 137 174 228 0
x45137:	add word [bp + 228], 10	; 5: 131 134 228 0 10

string_test$228:	; Parameter 212 20 18
x45142:	mov word [bp + 230], 20	; 6: 199 134 230 0 20 0

string_test$229:	; Call 212 memcmp 8
x45148:	mov word [bp + 220], string_test$230	; 6: 199 134 220 0 109 176
x45154:	mov [bp + 222], bp	; 4: 137 174 222 0
x45158:	add bp, 220	; 4: 129 197 220 0
x45162:	jmp memcmp	; 3: 233 245 5

string_test$230:	; PostCall 212

string_test$231:	; GetReturnValue £temporary4377

string_test$232:	; Parameter 212 £temporary4377 8
x45165:	mov [bp + 220], bx	; 4: 137 158 220 0

string_test$233:	; Call 212 printf 0
x45169:	mov word [bp + 212], string_test$234	; 6: 199 134 212 0 135 176
x45175:	mov [bp + 214], bp	; 4: 137 174 214 0
x45179:	add bp, 212	; 4: 129 197 212 0
x45183:	mov di, bp	; 2: 137 239
x45185:	add di, 2	; 3: 131 199 2
x45188:	jmp printf	; 3: 233 125 92

string_test$234:	; PostCall 212

string_test$235:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$236:	; Parameter 212 string_strspn28s2C2022Hello2C20C2229203D2025i0A# 6
x45191:	mov word [bp + 218], @9905$string_strspn28s2C2022Hello2C20C2229203D2025i0A#	; 6: 199 134 218 0 98 179

string_test$237:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$238:	; Parameter 212 s 14
x45197:	mov ax, [bp + 8]	; 3: 139 70 8
x45200:	mov [bp + 226], ax	; 4: 137 134 226 0

string_test$239:	; Parameter 212 string_Hello2C20C# 16
x45204:	mov word [bp + 228], @9906$string_Hello2C20C#	; 6: 199 134 228 0 126 179

string_test$240:	; Call 212 strspn 8
x45210:	mov word [bp + 220], string_test$241	; 6: 199 134 220 0 171 176
x45216:	mov [bp + 222], bp	; 4: 137 174 222 0
x45220:	add bp, 220	; 4: 129 197 220 0
x45224:	jmp strspn	; 3: 233 35 6

string_test$241:	; PostCall 212

string_test$242:	; GetReturnValue £temporary4379

string_test$243:	; Parameter 212 £temporary4379 8
x45227:	mov [bp + 220], bx	; 4: 137 158 220 0

string_test$244:	; Call 212 printf 0
x45231:	mov word [bp + 212], string_test$245	; 6: 199 134 212 0 197 176
x45237:	mov [bp + 214], bp	; 4: 137 174 214 0
x45241:	add bp, 212	; 4: 129 197 212 0
x45245:	mov di, bp	; 2: 137 239
x45247:	add di, 2	; 3: 131 199 2
x45250:	jmp printf	; 3: 233 63 92

string_test$245:	; PostCall 212

string_test$246:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$247:	; Parameter 212 string_strcspn28s2C2022Hello2C20C2229203D2025i0A# 6
x45253:	mov word [bp + 218], @9909$string_strcspn28s2C2022Hello2C20C2229203D2025i0A#	; 6: 199 134 218 0 135 179

string_test$248:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$249:	; Parameter 212 s 14
x45259:	mov ax, [bp + 8]	; 3: 139 70 8
x45262:	mov [bp + 226], ax	; 4: 137 134 226 0

string_test$250:	; Parameter 212 string_Hello2C20C# 16
x45266:	mov word [bp + 228], @9910$string_Hello2C20C#	; 6: 199 134 228 0 164 179

string_test$251:	; Call 212 strcspn 8
x45272:	mov word [bp + 220], string_test$252	; 6: 199 134 220 0 233 176
x45278:	mov [bp + 222], bp	; 4: 137 174 222 0
x45282:	add bp, 220	; 4: 129 197 220 0
x45286:	jmp strcspn	; 3: 233 69 6

string_test$252:	; PostCall 212

string_test$253:	; GetReturnValue £temporary4381

string_test$254:	; Parameter 212 £temporary4381 8
x45289:	mov [bp + 220], bx	; 4: 137 158 220 0

string_test$255:	; Call 212 printf 0
x45293:	mov word [bp + 212], string_test$256	; 6: 199 134 212 0 3 177
x45299:	mov [bp + 214], bp	; 4: 137 174 214 0
x45303:	add bp, 212	; 4: 129 197 212 0
x45307:	mov di, bp	; 2: 137 239
x45309:	add di, 2	; 3: 131 199 2
x45312:	jmp printf	; 3: 233 1 92

string_test$256:	; PostCall 212

string_test$257:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$258:	; Parameter 212 string_strerror28errno29203D202225s220A# 6
x45315:	mov word [bp + 218], @9913$string_strerror28errno29203D202225s220A#	; 6: 199 134 218 0 173 179

string_test$259:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$260:	; Parameter 212 errno 14
x45321:	mov ax, [errno]	; 3: 161 230 10
x45324:	mov [bp + 226], ax	; 4: 137 134 226 0

string_test$261:	; Call 212 strerror 8
x45328:	mov word [bp + 220], string_test$262	; 6: 199 134 220 0 33 177
x45334:	mov [bp + 222], bp	; 4: 137 174 222 0
x45338:	add bp, 220	; 4: 129 197 220 0
x45342:	jmp strerror	; 3: 233 238 130

string_test$262:	; PostCall 212

string_test$263:	; GetReturnValue £temporary4383

string_test$264:	; Parameter 212 £temporary4383 8
x45345:	mov [bp + 220], bx	; 4: 137 158 220 0

string_test$265:	; Call 212 printf 0
x45349:	mov word [bp + 212], string_test$266	; 6: 199 134 212 0 59 177
x45355:	mov [bp + 214], bp	; 4: 137 174 214 0
x45359:	add bp, 212	; 4: 129 197 212 0
x45363:	mov di, bp	; 2: 137 239
x45365:	add di, 2	; 3: 131 199 2
x45368:	jmp printf	; 3: 233 201 91

string_test$266:	; PostCall 212

string_test$267:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$268:	; Parameter 212 s 6
x45371:	mov ax, [bp + 8]	; 3: 139 70 8
x45374:	mov [bp + 218], ax	; 4: 137 134 218 0

string_test$269:	; Parameter 212 string_2C# 8
x45378:	mov word [bp + 220], @9916$string_2C#	; 6: 199 134 220 0 197 179

string_test$270:	; Call 212 strtok 0
x45384:	mov word [bp + 212], string_test$271	; 6: 199 134 212 0 89 177
x45390:	mov [bp + 214], bp	; 4: 137 174 214 0
x45394:	add bp, 212	; 4: 129 197 212 0
x45398:	jmp strtok	; 3: 233 53 6

string_test$271:	; PostCall 212

string_test$272:	; GetReturnValue £temporary4385

string_test$273:	; Assign p £temporary4385
x45401:	mov [bp + 210], bx	; 4: 137 158 210 0

string_test$274:	; Equal 288 p 0
x45405:	cmp word [bp + 210], 0	; 5: 131 190 210 0 0
x45410:	je string_test$288	; 2: 116 71

string_test$275:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$276:	; Parameter 212 string_strtok28s2C20222C2229203D202225s220A# 6
x45412:	mov word [bp + 218], @9922$string_strtok28s2C20222C2229203D202225s220A#	; 6: 199 134 218 0 199 179

string_test$277:	; Parameter 212 p 8
x45418:	mov ax, [bp + 210]	; 4: 139 134 210 0
x45422:	mov [bp + 220], ax	; 4: 137 134 220 0

string_test$278:	; Call 212 printf 0
x45426:	mov word [bp + 212], string_test$279	; 6: 199 134 212 0 136 177
x45432:	mov [bp + 214], bp	; 4: 137 174 214 0
x45436:	add bp, 212	; 4: 129 197 212 0
x45440:	mov di, bp	; 2: 137 239
x45442:	add di, 2	; 3: 131 199 2
x45445:	jmp printf	; 3: 233 124 91

string_test$279:	; PostCall 212

string_test$280:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$281:	; Parameter 212 0 6
x45448:	mov word [bp + 218], 0	; 6: 199 134 218 0 0 0

string_test$282:	; Parameter 212 string_2C# 8
x45454:	mov word [bp + 220], @9927$string_2C#	; 6: 199 134 220 0 222 179

string_test$283:	; Call 212 strtok 0
x45460:	mov word [bp + 212], string_test$284	; 6: 199 134 212 0 165 177
x45466:	mov [bp + 214], bp	; 4: 137 174 214 0
x45470:	add bp, 212	; 4: 129 197 212 0
x45474:	jmp strtok	; 3: 233 233 5

string_test$284:	; PostCall 212

string_test$285:	; GetReturnValue £temporary4388

string_test$286:	; Assign p £temporary4388
x45477:	mov [bp + 210], bx	; 4: 137 158 210 0

string_test$287:	; Goto 274
x45481:	jmp string_test$274	; 2: 235 178

string_test$288:	; Return 0
x45483:	mov ax, [bp]	; 3: 139 70 0
x45486:	mov di, [bp + 4]	; 3: 139 126 4
x45489:	mov bp, [bp + 2]	; 3: 139 110 2
x45492:	jmp ax	; 2: 255 224

string_test$289:	; FunctionEnd string_test

@9688$string_Hello2C20World21#:
x45494:	db "Hello, World!", 0	; 14: 72 101 108 108 111 44 32 87 111 114 108 100 33 0

@9697$string_strlen282225s2229203D2025i0A#:
x45508:	db "strlen(", 34, "%s", 34, ") = %i", 10, 0	; 19: 115 116 114 108 101 110 40 34 37 115 34 41 32 61 32 37 105 10 0

@9709$string_t203D202225s222C20u203D202225s220A#:
x45527:	db "t = ", 34, "%s", 34, ", u = ", 34, "%s", 34, 10, 0	; 20: 116 32 61 32 34 37 115 34 44 32 117 32 61 32 34 37 115 34 10 0

@9711$string_abc#:
x45547:	db "abc", 0	; 4: 97 98 99 0

@9714$string_abc#:
x45551:	db "abc", 0	; 4: 97 98 99 0

@9726$string_t203D202225s222C20u203D202225s220A#:
x45555:	db "t = ", 34, "%s", 34, ", u = ", 34, "%s", 34, 10, 0	; 20: 116 32 61 32 34 37 115 34 44 32 117 32 61 32 34 37 115 34 10 0

@9728$string_strcmp28s2C20u29203D2025i0A#:
x45575:	db "strcmp(s, u) = %i", 10, 0	; 19: 115 116 114 99 109 112 40 115 44 32 117 41 32 61 32 37 105 10 0

@9731$string_strncmp28s2C20u2C20229203D2025i0A#:
x45594:	db "strncmp(s, u, 2) = %i", 10, 0	; 23: 115 116 114 110 99 109 112 40 115 44 32 117 44 32 50 41 32 61 32 37 105 10 0

@9741$string_strchr28s2C2027l2729203D2025i0A#:
x45617:	db "strchr(s, ", 39, "l", 39, ") = %i", 10, 0	; 21: 115 116 114 99 104 114 40 115 44 32 39 108 39 41 32 61 32 37 105 10 0

@9760$string_strrchr28s2C2027l2729203D2025i0A#:
x45638:	db "strrchr(s, ", 39, "l", 39, ") = %i", 10, 0	; 22: 115 116 114 114 99 104 114 40 115 44 32 39 108 39 41 32 61 32 37 105 10 0

@9779$string_strchr28s2C2027x2729203D2025i0A#:
x45660:	db "strchr(s, ", 39, "x", 39, ") = %i", 10, 0	; 21: 115 116 114 99 104 114 40 115 44 32 39 120 39 41 32 61 32 37 105 10 0

@9798$string_strrchr28s2C2027x2729203D2025i0A#:
x45681:	db "strrchr(s, ", 39, "x", 39, ") = %i", 10, 0	; 22: 115 116 114 114 99 104 114 40 115 44 32 39 120 39 41 32 61 32 37 105 10 0

@9813$string_Hello2C20World21#:
x45703:	db "Hello, World!", 0	; 14: 72 101 108 108 111 44 32 87 111 114 108 100 33 0

@9820$string_Hello2C20World21#:
x45717:	db "Hello, World!", 0	; 14: 72 101 108 108 111 44 32 87 111 114 108 100 33 0

@9842$string_s203D202225s222C20t203D202225s222C20u203D202225s220A#:
x45731:	db "s = ", 34, "%s", 34, ", t = ", 34, "%s", 34, ", u = ", 34, "%s", 34, 10, 0	; 30: 115 32 61 32 34 37 115 34 44 32 116 32 61 32 34 37 115 34 44 32 117 32 61 32 34 37 115 34 10 0

@9853$string_memchr28s2C2027l272C20SIZE202A20sizeof28char2929203D2025i0A#:
x45761:	db "memchr(s, ", 39, "l", 39, ", SIZE * sizeof(char)) = %i", 10, 0	; 42: 109 101 109 99 104 114 40 115 44 32 39 108 39 44 32 83 73 90 69 32 42 32 115 105 122 101 111 102 40 99 104 97 114 41 41 32 61 32 37 105 10 0

@9877$string_memchr28s2C2027x272C20SIZE202A20sizeof28char2929203D2025i0A#:
x45803:	db "memchr(s, ", 39, "x", 39, ", SIZE * sizeof(char)) = %i", 10, 0	; 42: 109 101 109 99 104 114 40 115 44 32 39 120 39 44 32 83 73 90 69 32 42 32 115 105 122 101 111 102 40 99 104 97 114 41 41 32 61 32 37 105 10 0

@9892$string_s3A202225s222C20t3A202225s220A#:
x45845:	db "s: ", 34, "%s", 34, ", t: ", 34, "%s", 34, 10, 0	; 18: 115 58 32 34 37 115 34 44 32 116 58 32 34 37 115 34 10 0

@9894$string_strcmp28s2C20t29203D2025i0A#:
x45863:	db "strcmp(s, t) = %i", 10, 0	; 19: 115 116 114 99 109 112 40 115 44 32 116 41 32 61 32 37 105 10 0

@9897$string_memcmp28s2C20t2C20SIZE202A20sizeof28char2929203D2025i0A#:
x45882:	db "memcmp(s, t, SIZE * sizeof(char)) = %i", 10, 0	; 40: 109 101 109 99 109 112 40 115 44 32 116 44 32 83 73 90 69 32 42 32 115 105 122 101 111 102 40 99 104 97 114 41 41 32 61 32 37 105 10 0

@9905$string_strspn28s2C2022Hello2C20C2229203D2025i0A#:
x45922:	db "strspn(s, ", 34, "Hello, C", 34, ") = %i", 10, 0	; 28: 115 116 114 115 112 110 40 115 44 32 34 72 101 108 108 111 44 32 67 34 41 32 61 32 37 105 10 0

@9906$string_Hello2C20C#:
x45950:	db "Hello, C", 0	; 9: 72 101 108 108 111 44 32 67 0

@9909$string_strcspn28s2C2022Hello2C20C2229203D2025i0A#:
x45959:	db "strcspn(s, ", 34, "Hello, C", 34, ") = %i", 10, 0	; 29: 115 116 114 99 115 112 110 40 115 44 32 34 72 101 108 108 111 44 32 67 34 41 32 61 32 37 105 10 0

@9910$string_Hello2C20C#:
x45988:	db "Hello, C", 0	; 9: 72 101 108 108 111 44 32 67 0

@9913$string_strerror28errno29203D202225s220A#:
x45997:	db "strerror(errno) = ", 34, "%s", 34, 10, 0	; 24: 115 116 114 101 114 114 111 114 40 101 114 114 110 111 41 32 61 32 34 37 115 34 10 0

@9916$string_2C#:
x46021:	db ",", 0	; 2: 44 0

@9922$string_strtok28s2C20222C2229203D202225s220A#:
x46023:	db "strtok(s, ", 34, ",", 34, ") = ", 34, "%s", 34, 10, 0	; 23: 115 116 114 116 111 107 40 115 44 32 34 44 34 41 32 61 32 34 37 115 34 10 0

@9927$string_2C#:
x46046:	db ",", 0	; 2: 44 0

strncpy:	; Assign index 0
x46048:	mov word [bp + 12], 0	; 5: 199 70 12 0 0

strncpy$1:	; SignedGreaterThanEqual 12 index size
x46053:	mov ax, [bp + 10]	; 3: 139 70 10
x46056:	cmp [bp + 12], ax	; 3: 57 70 12
x46059:	jge strncpy$12	; 2: 125 32

strncpy$2:	; BinaryAdd £temporary3709 source index
x46061:	mov si, [bp + 8]	; 3: 139 118 8
x46064:	add si, [bp + 12]	; 3: 3 118 12

strncpy$3:	; Deref £temporary3708 -> £temporary3709 £temporary3709 0

strncpy$4:	; Equal 12 £temporary3708 -> £temporary3709 0
x46067:	cmp byte [si], 0	; 3: 128 60 0
x46070:	je strncpy$12	; 2: 116 21

strncpy$5:	; BinaryAdd £temporary3714 target index
x46072:	mov si, [bp + 6]	; 3: 139 118 6
x46075:	add si, [bp + 12]	; 3: 3 118 12

strncpy$6:	; Deref £temporary3713 -> £temporary3714 £temporary3714 0

strncpy$7:	; BinaryAdd £temporary3716 source index
x46078:	mov di, [bp + 8]	; 3: 139 126 8
x46081:	add di, [bp + 12]	; 3: 3 126 12

strncpy$8:	; Deref £temporary3715 -> £temporary3716 £temporary3716 0

strncpy$9:	; Assign £temporary3713 -> £temporary3714 £temporary3715 -> £temporary3716
x46084:	mov al, [di]	; 2: 138 5
x46086:	mov [si], al	; 2: 136 4

strncpy$10:	; Increment index
x46088:	inc word [bp + 12]	; 3: 255 70 12

strncpy$11:	; Goto 1
x46091:	jmp strncpy$1	; 2: 235 216

strncpy$12:	; SignedGreaterThanEqual 18 index size
x46093:	mov ax, [bp + 10]	; 3: 139 70 10
x46096:	cmp [bp + 12], ax	; 3: 57 70 12
x46099:	jge strncpy$18	; 2: 125 14

strncpy$13:	; BinaryAdd £temporary3720 target index
x46101:	mov si, [bp + 6]	; 3: 139 118 6
x46104:	add si, [bp + 12]	; 3: 3 118 12

strncpy$14:	; Deref £temporary3719 -> £temporary3720 £temporary3720 0

strncpy$15:	; Assign £temporary3719 -> £temporary3720 0
x46107:	mov byte [si], 0	; 3: 198 4 0

strncpy$16:	; Increment index
x46110:	inc word [bp + 12]	; 3: 255 70 12

strncpy$17:	; Goto 12
x46113:	jmp strncpy$12	; 2: 235 234

strncpy$18:	; SetReturnValue target
x46115:	mov bx, [bp + 6]	; 3: 139 94 6

strncpy$19:	; Return target
x46118:	mov ax, [bp]	; 3: 139 70 0
x46121:	mov di, [bp + 4]	; 3: 139 126 4
x46124:	mov bp, [bp + 2]	; 3: 139 110 2
x46127:	jmp ax	; 2: 255 224

strncpy$20:	; FunctionEnd strncpy

strncat:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strncat$1:	; Parameter 14 target 6
x46129:	mov ax, [bp + 6]	; 3: 139 70 6
x46132:	mov [bp + 20], ax	; 3: 137 70 20

strncat$2:	; Call 14 strlen 0
x46135:	mov word [bp + 14], strncat$3	; 5: 199 70 14 69 180
x46140:	mov [bp + 16], bp	; 3: 137 110 16
x46143:	add bp, 14	; 3: 131 197 14
x46146:	jmp strlen	; 3: 233 167 216

strncat$3:	; PostCall 14

strncat$4:	; GetReturnValue £temporary3735

strncat$5:	; Assign targetLength £temporary3735
x46149:	mov [bp + 14], bx	; 3: 137 94 14

strncat$6:	; Assign index 0
x46152:	mov word [bp + 12], 0	; 5: 199 70 12 0 0

strncat$7:	; BinarySubtract £temporary3736 size 1
x46157:	mov ax, [bp + 10]	; 3: 139 70 10
x46160:	dec ax	; 1: 72

strncat$8:	; SignedGreaterThanEqual 20 index £temporary3736
x46161:	cmp [bp + 12], ax	; 3: 57 70 12
x46164:	jge strncat$20	; 2: 125 37

strncat$9:	; BinaryAdd £temporary3739 source index
x46166:	mov si, [bp + 8]	; 3: 139 118 8
x46169:	add si, [bp + 12]	; 3: 3 118 12

strncat$10:	; Deref £temporary3738 -> £temporary3739 £temporary3739 0

strncat$11:	; Equal 20 £temporary3738 -> £temporary3739 0
x46172:	cmp byte [si], 0	; 3: 128 60 0
x46175:	je strncat$20	; 2: 116 26

strncat$12:	; BinaryAdd £temporary3743 targetLength index
x46177:	mov ax, [bp + 14]	; 3: 139 70 14
x46180:	add ax, [bp + 12]	; 3: 3 70 12

strncat$13:	; BinaryAdd £temporary3745 target £temporary3743
x46183:	mov si, [bp + 6]	; 3: 139 118 6
x46186:	add si, ax	; 2: 1 198

strncat$14:	; Deref £temporary3744 -> £temporary3745 £temporary3745 0

strncat$15:	; BinaryAdd £temporary3747 source index
x46188:	mov di, [bp + 8]	; 3: 139 126 8
x46191:	add di, [bp + 12]	; 3: 3 126 12

strncat$16:	; Deref £temporary3746 -> £temporary3747 £temporary3747 0

strncat$17:	; Assign £temporary3744 -> £temporary3745 £temporary3746 -> £temporary3747
x46194:	mov al, [di]	; 2: 138 5
x46196:	mov [si], al	; 2: 136 4

strncat$18:	; Increment index
x46198:	inc word [bp + 12]	; 3: 255 70 12

strncat$19:	; Goto 7
x46201:	jmp strncat$7	; 2: 235 210

strncat$20:	; BinaryAdd £temporary3748 targetLength size
x46203:	mov ax, [bp + 14]	; 3: 139 70 14
x46206:	add ax, [bp + 10]	; 3: 3 70 10

strncat$21:	; BinarySubtract £temporary3749 £temporary3748 1
x46209:	dec ax	; 1: 72

strncat$22:	; BinaryAdd £temporary3751 target £temporary3749
x46210:	mov si, [bp + 6]	; 3: 139 118 6
x46213:	add si, ax	; 2: 1 198

strncat$23:	; Deref £temporary3750 -> £temporary3751 £temporary3751 0

strncat$24:	; Assign £temporary3750 -> £temporary3751 0
x46215:	mov byte [si], 0	; 3: 198 4 0

strncat$25:	; SetReturnValue target
x46218:	mov bx, [bp + 6]	; 3: 139 94 6

strncat$26:	; Return target
x46221:	mov ax, [bp]	; 3: 139 70 0
x46224:	mov di, [bp + 4]	; 3: 139 126 4
x46227:	mov bp, [bp + 2]	; 3: 139 110 2
x46230:	jmp ax	; 2: 255 224

strncat$27:	; FunctionEnd strncat

strncmp:	; Assign index 0
x46232:	mov word [bp + 12], 0	; 5: 199 70 12 0 0

strncmp$1:	; SignedGreaterThanEqual 26 index size
x46237:	mov ax, [bp + 10]	; 3: 139 70 10
x46240:	cmp [bp + 12], ax	; 3: 57 70 12
x46243:	jge strncmp$26	; 2: 125 105

strncmp$2:	; BinaryAdd £temporary3775 left index
x46245:	mov si, [bp + 6]	; 3: 139 118 6
x46248:	add si, [bp + 12]	; 3: 3 118 12

strncmp$3:	; Deref £temporary3774 -> £temporary3775 £temporary3775 0

strncmp$4:	; NotEqual 10 £temporary3774 -> £temporary3775 0
x46251:	cmp byte [si], 0	; 3: 128 60 0
x46254:	jne strncmp$10	; 2: 117 25

strncmp$5:	; BinaryAdd £temporary3778 right index
x46256:	mov si, [bp + 8]	; 3: 139 118 8
x46259:	add si, [bp + 12]	; 3: 3 118 12

strncmp$6:	; Deref £temporary3777 -> £temporary3778 £temporary3778 0

strncmp$7:	; NotEqual 10 £temporary3777 -> £temporary3778 0
x46262:	cmp byte [si], 0	; 3: 128 60 0
x46265:	jne strncmp$10	; 2: 117 14

strncmp$8:	; SetReturnValue 0
x46267:	mov bx, 0	; 3: 187 0 0

strncmp$9:	; Return 0
x46270:	mov ax, [bp]	; 3: 139 70 0
x46273:	mov di, [bp + 4]	; 3: 139 126 4
x46276:	mov bp, [bp + 2]	; 3: 139 110 2
x46279:	jmp ax	; 2: 255 224

strncmp$10:	; BinaryAdd £temporary3782 left index
x46281:	mov si, [bp + 6]	; 3: 139 118 6
x46284:	add si, [bp + 12]	; 3: 3 118 12

strncmp$11:	; Deref £temporary3781 -> £temporary3782 £temporary3782 0

strncmp$12:	; BinaryAdd £temporary3784 right index
x46287:	mov di, [bp + 8]	; 3: 139 126 8
x46290:	add di, [bp + 12]	; 3: 3 126 12

strncmp$13:	; Deref £temporary3783 -> £temporary3784 £temporary3784 0

strncmp$14:	; SignedGreaterThanEqual 17 £temporary3781 -> £temporary3782 £temporary3783 -> £temporary3784
x46293:	mov al, [di]	; 2: 138 5
x46295:	cmp [si], al	; 2: 56 4
x46297:	jge strncmp$17	; 2: 125 14

strncmp$15:	; SetReturnValue -1
x46299:	mov bx, -1	; 3: 187 255 255

strncmp$16:	; Return -1
x46302:	mov ax, [bp]	; 3: 139 70 0
x46305:	mov di, [bp + 4]	; 3: 139 126 4
x46308:	mov bp, [bp + 2]	; 3: 139 110 2
x46311:	jmp ax	; 2: 255 224

strncmp$17:	; BinaryAdd £temporary3787 left index
x46313:	mov si, [bp + 6]	; 3: 139 118 6
x46316:	add si, [bp + 12]	; 3: 3 118 12

strncmp$18:	; Deref £temporary3786 -> £temporary3787 £temporary3787 0

strncmp$19:	; BinaryAdd £temporary3789 right index
x46319:	mov di, [bp + 8]	; 3: 139 126 8
x46322:	add di, [bp + 12]	; 3: 3 126 12

strncmp$20:	; Deref £temporary3788 -> £temporary3789 £temporary3789 0

strncmp$21:	; SignedLessThanEqual 24 £temporary3786 -> £temporary3787 £temporary3788 -> £temporary3789
x46325:	mov al, [di]	; 2: 138 5
x46327:	cmp [si], al	; 2: 56 4
x46329:	jle strncmp$24	; 2: 126 14

strncmp$22:	; SetReturnValue 1
x46331:	mov bx, 1	; 3: 187 1 0

strncmp$23:	; Return 1
x46334:	mov ax, [bp]	; 3: 139 70 0
x46337:	mov di, [bp + 4]	; 3: 139 126 4
x46340:	mov bp, [bp + 2]	; 3: 139 110 2
x46343:	jmp ax	; 2: 255 224

strncmp$24:	; Increment index
x46345:	inc word [bp + 12]	; 3: 255 70 12

strncmp$25:	; Goto 1
x46348:	jmp strncmp$1	; 2: 235 143

strncmp$26:	; SetReturnValue 0
x46350:	mov bx, 0	; 3: 187 0 0

strncmp$27:	; Return 0
x46353:	mov ax, [bp]	; 3: 139 70 0
x46356:	mov di, [bp + 4]	; 3: 139 126 4
x46359:	mov bp, [bp + 2]	; 3: 139 110 2
x46362:	jmp ax	; 2: 255 224

strncmp$28:	; FunctionEnd strncmp

strrchr:	; Assign result 0
x46364:	mov word [bp + 12], 0	; 5: 199 70 12 0 0

strrchr$1:	; IntegralToIntegral £temporary3802 i
x46369:	mov ax, [bp + 8]	; 3: 139 70 8
x46372:	cmp ax, 0	; 3: 131 248 0
x46375:	jge strrchr$2	; 2: 125 4
x46377:	neg ax	; 2: 247 216
x46379:	neg al	; 2: 246 216

strrchr$2:	; Assign c £temporary3802
x46381:	mov [bp + 14], al	; 3: 136 70 14

strrchr$3:	; Assign index 0
x46384:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

strrchr$4:	; BinaryAdd £temporary3804 text index
x46389:	mov si, [bp + 6]	; 3: 139 118 6
x46392:	add si, [bp + 10]	; 3: 3 118 10

strrchr$5:	; Deref £temporary3803 -> £temporary3804 £temporary3804 0

strrchr$6:	; Equal 16 £temporary3803 -> £temporary3804 0
x46395:	cmp byte [si], 0	; 3: 128 60 0
x46398:	je strrchr$16	; 2: 116 27

strrchr$7:	; BinaryAdd £temporary3808 text index
x46400:	mov si, [bp + 6]	; 3: 139 118 6
x46403:	add si, [bp + 10]	; 3: 3 118 10

strrchr$8:	; Deref £temporary3807 -> £temporary3808 £temporary3808 0

strrchr$9:	; NotEqual 14 £temporary3807 -> £temporary3808 c
x46406:	mov al, [bp + 14]	; 3: 138 70 14
x46409:	cmp [si], al	; 2: 56 4
x46411:	jne strrchr$14	; 2: 117 9

strrchr$10:	; BinaryAdd £temporary3811 text index
x46413:	mov si, [bp + 6]	; 3: 139 118 6
x46416:	add si, [bp + 10]	; 3: 3 118 10

strrchr$11:	; Deref £temporary3810 -> £temporary3811 £temporary3811 0

strrchr$12:	; address £temporary3812 £temporary3810 -> £temporary3811

strrchr$13:	; Assign result £temporary3812
x46419:	mov [bp + 12], si	; 3: 137 118 12

strrchr$14:	; Increment index
x46422:	inc word [bp + 10]	; 3: 255 70 10

strrchr$15:	; Goto 4
x46425:	jmp strrchr$4	; 2: 235 218

strrchr$16:	; SetReturnValue result
x46427:	mov bx, [bp + 12]	; 3: 139 94 12

strrchr$17:	; Return result
x46430:	mov ax, [bp]	; 3: 139 70 0
x46433:	mov di, [bp + 4]	; 3: 139 126 4
x46436:	mov bp, [bp + 2]	; 3: 139 110 2
x46439:	jmp ax	; 2: 255 224

strrchr$18:	; FunctionEnd strrchr

memmove:	; IntegralToIntegral £temporary3930 target
x46441:	mov ax, [bp + 6]	; 3: 139 70 6

memmove$1:	; Assign charTarget £temporary3930
x46444:	mov [bp + 12], ax	; 3: 137 70 12

memmove$2:	; IntegralToIntegral £temporary3931 source
x46447:	mov ax, [bp + 8]	; 3: 139 70 8

memmove$3:	; Assign charSource £temporary3931
x46450:	mov [bp + 14], ax	; 3: 137 70 14

memmove$4:	; SignedGreaterThanEqual 14 source target
x46453:	mov ax, [bp + 6]	; 3: 139 70 6
x46456:	cmp [bp + 8], ax	; 3: 57 70 8
x46459:	jge memmove$14	; 2: 125 34

memmove$5:	; BinarySubtract index size 1
x46461:	mov ax, [bp + 10]	; 3: 139 70 10
x46464:	dec ax	; 1: 72
x46465:	mov [bp + 16], ax	; 3: 137 70 16

memmove$6:	; SignedLessThan 23 index 0
x46468:	cmp word [bp + 16], 0	; 4: 131 126 16 0
x46472:	jl memmove$23	; 2: 124 55

memmove$7:	; BinaryAdd £temporary3937 charTarget index
x46474:	mov si, [bp + 12]	; 3: 139 118 12
x46477:	add si, [bp + 16]	; 3: 3 118 16

memmove$8:	; Deref £temporary3936 -> £temporary3937 £temporary3937 0

memmove$9:	; BinaryAdd £temporary3939 charSource index
x46480:	mov di, [bp + 14]	; 3: 139 126 14
x46483:	add di, [bp + 16]	; 3: 3 126 16

memmove$10:	; Deref £temporary3938 -> £temporary3939 £temporary3939 0

memmove$11:	; Assign £temporary3936 -> £temporary3937 £temporary3938 -> £temporary3939
x46486:	mov al, [di]	; 2: 138 5
x46488:	mov [si], al	; 2: 136 4

memmove$12:	; Decrement index
x46490:	dec word [bp + 16]	; 3: 255 78 16

memmove$13:	; Goto 6
x46493:	jmp memmove$6	; 2: 235 229

memmove$14:	; Assign index 0
x46495:	mov word [bp + 16], 0	; 5: 199 70 16 0 0

memmove$15:	; SignedGreaterThanEqual 23 index size
x46500:	mov ax, [bp + 10]	; 3: 139 70 10
x46503:	cmp [bp + 16], ax	; 3: 57 70 16
x46506:	jge memmove$23	; 2: 125 21

memmove$16:	; BinaryAdd £temporary3943 charTarget index
x46508:	mov si, [bp + 12]	; 3: 139 118 12
x46511:	add si, [bp + 16]	; 3: 3 118 16

memmove$17:	; Deref £temporary3942 -> £temporary3943 £temporary3943 0

memmove$18:	; BinaryAdd £temporary3945 charSource index
x46514:	mov di, [bp + 14]	; 3: 139 126 14
x46517:	add di, [bp + 16]	; 3: 3 126 16

memmove$19:	; Deref £temporary3944 -> £temporary3945 £temporary3945 0

memmove$20:	; Assign £temporary3942 -> £temporary3943 £temporary3944 -> £temporary3945
x46520:	mov al, [di]	; 2: 138 5
x46522:	mov [si], al	; 2: 136 4

memmove$21:	; Increment index
x46524:	inc word [bp + 16]	; 3: 255 70 16

memmove$22:	; Goto 15
x46527:	jmp memmove$15	; 2: 235 227

memmove$23:	; IntegralToIntegral £temporary3946 target
x46529:	mov bx, [bp + 6]	; 3: 139 94 6

memmove$24:	; SetReturnValue £temporary3946

memmove$25:	; Return £temporary3946
x46532:	mov ax, [bp]	; 3: 139 70 0
x46535:	mov di, [bp + 4]	; 3: 139 126 4
x46538:	mov bp, [bp + 2]	; 3: 139 110 2
x46541:	jmp ax	; 2: 255 224

memmove$26:	; FunctionEnd memmove

memset:	; IntegralToIntegral £temporary3972 block
x46543:	mov ax, [bp + 6]	; 3: 139 70 6

memset$1:	; Assign charBlock £temporary3972
x46546:	mov [bp + 12], ax	; 3: 137 70 12

memset$2:	; IntegralToIntegral £temporary3973 i
x46549:	mov ax, [bp + 8]	; 3: 139 70 8
x46552:	cmp ax, 0	; 3: 131 248 0
x46555:	jge memset$3	; 2: 125 4
x46557:	neg ax	; 2: 247 216
x46559:	neg al	; 2: 246 216

memset$3:	; Assign c £temporary3973
x46561:	mov [bp + 14], al	; 3: 136 70 14

memset$4:	; Assign index 0
x46564:	mov word [bp + 15], 0	; 5: 199 70 15 0 0

memset$5:	; SignedGreaterThanEqual 11 index size
x46569:	mov ax, [bp + 10]	; 3: 139 70 10
x46572:	cmp [bp + 15], ax	; 3: 57 70 15
x46575:	jge memset$11	; 2: 125 16

memset$6:	; BinaryAdd £temporary3977 charBlock index
x46577:	mov si, [bp + 12]	; 3: 139 118 12
x46580:	add si, [bp + 15]	; 3: 3 118 15

memset$7:	; Deref £temporary3976 -> £temporary3977 £temporary3977 0

memset$8:	; Assign £temporary3976 -> £temporary3977 c
x46583:	mov al, [bp + 14]	; 3: 138 70 14
x46586:	mov [si], al	; 2: 136 4

memset$9:	; Increment index
x46588:	inc word [bp + 15]	; 3: 255 70 15

memset$10:	; Goto 5
x46591:	jmp memset$5	; 2: 235 232

memset$11:	; SetReturnValue block
x46593:	mov bx, [bp + 6]	; 3: 139 94 6

memset$12:	; Return block
x46596:	mov ax, [bp]	; 3: 139 70 0
x46599:	mov di, [bp + 4]	; 3: 139 126 4
x46602:	mov bp, [bp + 2]	; 3: 139 110 2
x46605:	jmp ax	; 2: 255 224

memset$13:	; FunctionEnd memset

memchr:	; IntegralToIntegral £temporary3961 block
x46607:	mov ax, [bp + 6]	; 3: 139 70 6

memchr$1:	; Assign charBlock £temporary3961
x46610:	mov [bp + 14], ax	; 3: 137 70 14

memchr$2:	; IntegralToIntegral £temporary3962 i
x46613:	mov ax, [bp + 8]	; 3: 139 70 8
x46616:	cmp ax, 0	; 3: 131 248 0
x46619:	jge memchr$3	; 2: 125 4
x46621:	neg ax	; 2: 247 216
x46623:	neg al	; 2: 246 216

memchr$3:	; Assign c £temporary3962
x46625:	mov [bp + 16], al	; 3: 136 70 16

memchr$4:	; Assign index 0
x46628:	mov word [bp + 12], 0	; 5: 199 70 12 0 0

memchr$5:	; SignedGreaterThanEqual 17 index size
x46633:	mov ax, [bp + 10]	; 3: 139 70 10
x46636:	cmp [bp + 12], ax	; 3: 57 70 12
x46639:	jge memchr$17	; 2: 125 35

memchr$6:	; BinaryAdd £temporary3966 charBlock index
x46641:	mov si, [bp + 14]	; 3: 139 118 14
x46644:	add si, [bp + 12]	; 3: 3 118 12

memchr$7:	; Deref £temporary3965 -> £temporary3966 £temporary3966 0

memchr$8:	; NotEqual 15 £temporary3965 -> £temporary3966 c
x46647:	mov al, [bp + 16]	; 3: 138 70 16
x46650:	cmp [si], al	; 2: 56 4
x46652:	jne memchr$15	; 2: 117 17

memchr$9:	; BinaryAdd £temporary3969 charBlock index
x46654:	mov bx, [bp + 14]	; 3: 139 94 14
x46657:	add bx, [bp + 12]	; 3: 3 94 12

memchr$10:	; Deref £temporary3968 -> £temporary3969 £temporary3969 0

memchr$11:	; address £temporary3970 £temporary3968 -> £temporary3969

memchr$12:	; IntegralToIntegral £temporary3971 £temporary3970

memchr$13:	; SetReturnValue £temporary3971

memchr$14:	; Return £temporary3971
x46660:	mov ax, [bp]	; 3: 139 70 0
x46663:	mov di, [bp + 4]	; 3: 139 126 4
x46666:	mov bp, [bp + 2]	; 3: 139 110 2
x46669:	jmp ax	; 2: 255 224

memchr$15:	; Increment index
x46671:	inc word [bp + 12]	; 3: 255 70 12

memchr$16:	; Goto 5
x46674:	jmp memchr$5	; 2: 235 213

memchr$17:	; SetReturnValue 0
x46676:	mov bx, 0	; 3: 187 0 0

memchr$18:	; Return 0
x46679:	mov ax, [bp]	; 3: 139 70 0
x46682:	mov di, [bp + 4]	; 3: 139 126 4
x46685:	mov bp, [bp + 2]	; 3: 139 110 2
x46688:	jmp ax	; 2: 255 224

memchr$19:	; FunctionEnd memchr

memcmp:	; IntegralToIntegral £temporary3947 left
x46690:	mov ax, [bp + 6]	; 3: 139 70 6

memcmp$1:	; Assign charLeft £temporary3947
x46693:	mov [bp + 12], ax	; 3: 137 70 12

memcmp$2:	; IntegralToIntegral £temporary3948 right
x46696:	mov ax, [bp + 8]	; 3: 139 70 8

memcmp$3:	; Assign charRight £temporary3948
x46699:	mov [bp + 14], ax	; 3: 137 70 14

memcmp$4:	; Assign index 0
x46702:	mov word [bp + 16], 0	; 5: 199 70 16 0 0

memcmp$5:	; SignedGreaterThanEqual 22 index size
x46707:	mov ax, [bp + 10]	; 3: 139 70 10
x46710:	cmp [bp + 16], ax	; 3: 57 70 16
x46713:	jge memcmp$22	; 2: 125 69

memcmp$6:	; BinaryAdd £temporary3952 charLeft index
x46715:	mov si, [bp + 12]	; 3: 139 118 12
x46718:	add si, [bp + 16]	; 3: 3 118 16

memcmp$7:	; Deref £temporary3951 -> £temporary3952 £temporary3952 0

memcmp$8:	; BinaryAdd £temporary3954 charRight index
x46721:	mov di, [bp + 14]	; 3: 139 126 14
x46724:	add di, [bp + 16]	; 3: 3 126 16

memcmp$9:	; Deref £temporary3953 -> £temporary3954 £temporary3954 0

memcmp$10:	; SignedGreaterThanEqual 13 £temporary3951 -> £temporary3952 £temporary3953 -> £temporary3954
x46727:	mov al, [di]	; 2: 138 5
x46729:	cmp [si], al	; 2: 56 4
x46731:	jge memcmp$13	; 2: 125 14

memcmp$11:	; SetReturnValue -1
x46733:	mov bx, -1	; 3: 187 255 255

memcmp$12:	; Return -1
x46736:	mov ax, [bp]	; 3: 139 70 0
x46739:	mov di, [bp + 4]	; 3: 139 126 4
x46742:	mov bp, [bp + 2]	; 3: 139 110 2
x46745:	jmp ax	; 2: 255 224

memcmp$13:	; BinaryAdd £temporary3957 charLeft index
x46747:	mov si, [bp + 12]	; 3: 139 118 12
x46750:	add si, [bp + 16]	; 3: 3 118 16

memcmp$14:	; Deref £temporary3956 -> £temporary3957 £temporary3957 0

memcmp$15:	; BinaryAdd £temporary3959 charRight index
x46753:	mov di, [bp + 14]	; 3: 139 126 14
x46756:	add di, [bp + 16]	; 3: 3 126 16

memcmp$16:	; Deref £temporary3958 -> £temporary3959 £temporary3959 0

memcmp$17:	; SignedLessThanEqual 20 £temporary3956 -> £temporary3957 £temporary3958 -> £temporary3959
x46759:	mov al, [di]	; 2: 138 5
x46761:	cmp [si], al	; 2: 56 4
x46763:	jle memcmp$20	; 2: 126 14

memcmp$18:	; SetReturnValue 1
x46765:	mov bx, 1	; 3: 187 1 0

memcmp$19:	; Return 1
x46768:	mov ax, [bp]	; 3: 139 70 0
x46771:	mov di, [bp + 4]	; 3: 139 126 4
x46774:	mov bp, [bp + 2]	; 3: 139 110 2
x46777:	jmp ax	; 2: 255 224

memcmp$20:	; Increment index
x46779:	inc word [bp + 16]	; 3: 255 70 16

memcmp$21:	; Goto 5
x46782:	jmp memcmp$5	; 2: 235 179

memcmp$22:	; SetReturnValue 0
x46784:	mov bx, 0	; 3: 187 0 0

memcmp$23:	; Return 0
x46787:	mov ax, [bp]	; 3: 139 70 0
x46790:	mov di, [bp + 4]	; 3: 139 126 4
x46793:	mov bp, [bp + 2]	; 3: 139 110 2
x46796:	jmp ax	; 2: 255 224

memcmp$24:	; FunctionEnd memcmp

strspn:	; Assign index 0
x46798:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

strspn$1:	; BinaryAdd £temporary3814 mainString index
x46803:	mov si, [bp + 6]	; 3: 139 118 6
x46806:	add si, [bp + 10]	; 3: 3 118 10

strspn$2:	; Deref £temporary3813 -> £temporary3814 £temporary3814 0

strspn$3:	; Equal 18 £temporary3813 -> £temporary3814 0
x46809:	cmp byte [si], 0	; 3: 128 60 0
x46812:	je strspn$18	; 2: 116 66

strspn$4:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strspn$5:	; Parameter 12 charSet 6
x46814:	mov ax, [bp + 8]	; 3: 139 70 8
x46817:	mov [bp + 18], ax	; 3: 137 70 18

strspn$6:	; BinaryAdd £temporary3818 mainString index
x46820:	mov si, [bp + 6]	; 3: 139 118 6
x46823:	add si, [bp + 10]	; 3: 3 118 10

strspn$7:	; Deref £temporary3817 -> £temporary3818 £temporary3818 0

strspn$8:	; IntegralToIntegral £temporary3819 £temporary3817 -> £temporary3818
x46826:	mov al, [si]	; 2: 138 4
x46828:	and ax, 255	; 3: 37 255 0
x46831:	cmp al, 0	; 2: 60 0
x46833:	jge strspn$9	; 2: 125 4
x46835:	neg al	; 2: 246 216
x46837:	neg ax	; 2: 247 216

strspn$9:	; Parameter 12 £temporary3819 8
x46839:	mov [bp + 20], ax	; 3: 137 70 20

strspn$10:	; Call 12 strchr 0
x46842:	mov word [bp + 12], strspn$11	; 5: 199 70 12 8 183
x46847:	mov [bp + 14], bp	; 3: 137 110 14
x46850:	add bp, 12	; 3: 131 197 12
x46853:	jmp strchr	; 3: 233 179 106

strspn$11:	; PostCall 12

strspn$12:	; GetReturnValue £temporary3820

strspn$13:	; NotEqual 16 £temporary3820 0
x46856:	cmp bx, 0	; 3: 131 251 0
x46859:	jne strspn$16	; 2: 117 14

strspn$14:	; SetReturnValue index
x46861:	mov bx, [bp + 10]	; 3: 139 94 10

strspn$15:	; Return index
x46864:	mov ax, [bp]	; 3: 139 70 0
x46867:	mov di, [bp + 4]	; 3: 139 126 4
x46870:	mov bp, [bp + 2]	; 3: 139 110 2
x46873:	jmp ax	; 2: 255 224

strspn$16:	; Increment index
x46875:	inc word [bp + 10]	; 3: 255 70 10

strspn$17:	; Goto 1
x46878:	jmp strspn$1	; 2: 235 179

strspn$18:	; SetReturnValue -1
x46880:	mov bx, -1	; 3: 187 255 255

strspn$19:	; Return -1
x46883:	mov ax, [bp]	; 3: 139 70 0
x46886:	mov di, [bp + 4]	; 3: 139 126 4
x46889:	mov bp, [bp + 2]	; 3: 139 110 2
x46892:	jmp ax	; 2: 255 224

strspn$20:	; FunctionEnd strspn

strcspn:	; Assign index 0
x46894:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

strcspn$1:	; BinaryAdd £temporary3825 mainString index
x46899:	mov si, [bp + 6]	; 3: 139 118 6
x46902:	add si, [bp + 10]	; 3: 3 118 10

strcspn$2:	; Deref £temporary3824 -> £temporary3825 £temporary3825 0

strcspn$3:	; Equal 18 £temporary3824 -> £temporary3825 0
x46905:	cmp byte [si], 0	; 3: 128 60 0
x46908:	je strcspn$18	; 2: 116 66

strcspn$4:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strcspn$5:	; Parameter 12 charSet 6
x46910:	mov ax, [bp + 8]	; 3: 139 70 8
x46913:	mov [bp + 18], ax	; 3: 137 70 18

strcspn$6:	; BinaryAdd £temporary3829 mainString index
x46916:	mov si, [bp + 6]	; 3: 139 118 6
x46919:	add si, [bp + 10]	; 3: 3 118 10

strcspn$7:	; Deref £temporary3828 -> £temporary3829 £temporary3829 0

strcspn$8:	; IntegralToIntegral £temporary3830 £temporary3828 -> £temporary3829
x46922:	mov al, [si]	; 2: 138 4
x46924:	and ax, 255	; 3: 37 255 0
x46927:	cmp al, 0	; 2: 60 0
x46929:	jge strcspn$9	; 2: 125 4
x46931:	neg al	; 2: 246 216
x46933:	neg ax	; 2: 247 216

strcspn$9:	; Parameter 12 £temporary3830 8
x46935:	mov [bp + 20], ax	; 3: 137 70 20

strcspn$10:	; Call 12 strchr 0
x46938:	mov word [bp + 12], strcspn$11	; 5: 199 70 12 104 183
x46943:	mov [bp + 14], bp	; 3: 137 110 14
x46946:	add bp, 12	; 3: 131 197 12
x46949:	jmp strchr	; 3: 233 83 106

strcspn$11:	; PostCall 12

strcspn$12:	; GetReturnValue £temporary3831

strcspn$13:	; Equal 16 £temporary3831 0
x46952:	cmp bx, 0	; 3: 131 251 0
x46955:	je strcspn$16	; 2: 116 14

strcspn$14:	; SetReturnValue index
x46957:	mov bx, [bp + 10]	; 3: 139 94 10

strcspn$15:	; Return index
x46960:	mov ax, [bp]	; 3: 139 70 0
x46963:	mov di, [bp + 4]	; 3: 139 126 4
x46966:	mov bp, [bp + 2]	; 3: 139 110 2
x46969:	jmp ax	; 2: 255 224

strcspn$16:	; Increment index
x46971:	inc word [bp + 10]	; 3: 255 70 10

strcspn$17:	; Goto 1
x46974:	jmp strcspn$1	; 2: 235 179

strcspn$18:	; SetReturnValue -1
x46976:	mov bx, -1	; 3: 187 255 255

strcspn$19:	; Return -1
x46979:	mov ax, [bp]	; 3: 139 70 0
x46982:	mov di, [bp + 4]	; 3: 139 126 4
x46985:	mov bp, [bp + 2]	; 3: 139 110 2
x46988:	jmp ax	; 2: 255 224

strcspn$20:	; FunctionEnd strcspn

strtok:	; Equal 37 string 0
x46990:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x46994:	je strtok$37	; 4: 15 132 150 0

strtok$1:	; Deref £temporary3876 -> string string 0
x46998:	mov si, [bp + 6]	; 3: 139 118 6

strtok$2:	; NotEqual 5 £temporary3876 -> string 0
x47001:	cmp byte [si], 0	; 3: 128 60 0
x47004:	jne strtok$5	; 2: 117 14

strtok$3:	; SetReturnValue 0
x47006:	mov bx, 0	; 3: 187 0 0

strtok$4:	; Return 0
x47009:	mov ax, [bp]	; 3: 139 70 0
x47012:	mov di, [bp + 4]	; 3: 139 126 4
x47015:	mov bp, [bp + 2]	; 3: 139 110 2
x47018:	jmp ax	; 2: 255 224

strtok$5:	; Assign index 0
x47020:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

strtok$6:	; BinaryAdd £temporary3879 string index
x47025:	mov si, [bp + 6]	; 3: 139 118 6
x47028:	add si, [bp + 10]	; 3: 3 118 10

strtok$7:	; Deref £temporary3878 -> £temporary3879 £temporary3879 0

strtok$8:	; Equal 31 £temporary3878 -> £temporary3879 0
x47031:	cmp byte [si], 0	; 3: 128 60 0
x47034:	je strtok$31	; 2: 116 88

strtok$9:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtok$10:	; Parameter 14 charSet 6
x47036:	mov ax, [bp + 8]	; 3: 139 70 8
x47039:	mov [bp + 20], ax	; 3: 137 70 20

strtok$11:	; BinaryAdd £temporary3883 string index
x47042:	mov si, [bp + 6]	; 3: 139 118 6
x47045:	add si, [bp + 10]	; 3: 3 118 10

strtok$12:	; Deref £temporary3882 -> £temporary3883 £temporary3883 0

strtok$13:	; IntegralToIntegral £temporary3884 £temporary3882 -> £temporary3883
x47048:	mov al, [si]	; 2: 138 4
x47050:	and ax, 255	; 3: 37 255 0
x47053:	cmp al, 0	; 2: 60 0
x47055:	jge strtok$14	; 2: 125 4
x47057:	neg al	; 2: 246 216
x47059:	neg ax	; 2: 247 216

strtok$14:	; Parameter 14 £temporary3884 8
x47061:	mov [bp + 22], ax	; 3: 137 70 22

strtok$15:	; Call 14 strchr 0
x47064:	mov word [bp + 14], strtok$16	; 5: 199 70 14 230 183
x47069:	mov [bp + 16], bp	; 3: 137 110 16
x47072:	add bp, 14	; 3: 131 197 14
x47075:	jmp strchr	; 3: 233 213 105

strtok$16:	; PostCall 14

strtok$17:	; GetReturnValue £temporary3885

strtok$18:	; Equal 29 £temporary3885 0
x47078:	cmp bx, 0	; 3: 131 251 0
x47081:	je strtok$29	; 2: 116 36

strtok$19:	; BinaryAdd £temporary3888 string index
x47083:	mov si, [bp + 6]	; 3: 139 118 6
x47086:	add si, [bp + 10]	; 3: 3 118 10

strtok$20:	; Deref £temporary3887 -> £temporary3888 £temporary3888 0

strtok$21:	; Assign £temporary3887 -> £temporary3888 0
x47089:	mov byte [si], 0	; 3: 198 4 0

strtok$22:	; BinaryAdd £temporary3889 index 1
x47092:	mov ax, [bp + 10]	; 3: 139 70 10
x47095:	inc ax	; 1: 64

strtok$23:	; BinaryAdd £temporary3891 string £temporary3889
x47096:	mov si, [bp + 6]	; 3: 139 118 6
x47099:	add si, ax	; 2: 1 198

strtok$24:	; Deref £temporary3890 -> £temporary3891 £temporary3891 0

strtok$25:	; address £temporary3892 £temporary3890 -> £temporary3891

strtok$26:	; Assign token £temporary3892
x47101:	mov [@8781$token], si	; 4: 137 54 233 184

strtok$27:	; SetReturnValue string
x47105:	mov bx, [bp + 6]	; 3: 139 94 6

strtok$28:	; Return string
x47108:	mov ax, [bp]	; 3: 139 70 0
x47111:	mov di, [bp + 4]	; 3: 139 126 4
x47114:	mov bp, [bp + 2]	; 3: 139 110 2
x47117:	jmp ax	; 2: 255 224

strtok$29:	; Increment index
x47119:	inc word [bp + 10]	; 3: 255 70 10

strtok$30:	; Goto 6
x47122:	jmp strtok$6	; 2: 235 157

strtok$31:	; BinaryAdd £temporary3894 string index
x47124:	mov si, [bp + 6]	; 3: 139 118 6
x47127:	add si, [bp + 10]	; 3: 3 118 10

strtok$32:	; Deref £temporary3893 -> £temporary3894 £temporary3894 0

strtok$33:	; address £temporary3895 £temporary3893 -> £temporary3894

strtok$34:	; Assign token £temporary3895
x47130:	mov [@8781$token], si	; 4: 137 54 233 184

strtok$35:	; SetReturnValue string
x47134:	mov bx, [bp + 6]	; 3: 139 94 6

strtok$36:	; Return string
x47137:	mov ax, [bp]	; 3: 139 70 0
x47140:	mov di, [bp + 4]	; 3: 139 126 4
x47143:	mov bp, [bp + 2]	; 3: 139 110 2
x47146:	jmp ax	; 2: 255 224

strtok$37:	; NotEqual 40 token 0
x47148:	cmp word [@8781$token], 0	; 5: 131 62 233 184 0
x47153:	jne strtok$40	; 2: 117 14

strtok$38:	; SetReturnValue 0
x47155:	mov bx, 0	; 3: 187 0 0

strtok$39:	; Return 0
x47158:	mov ax, [bp]	; 3: 139 70 0
x47161:	mov di, [bp + 4]	; 3: 139 126 4
x47164:	mov bp, [bp + 2]	; 3: 139 110 2
x47167:	jmp ax	; 2: 255 224

strtok$40:	; NotEqual 43 (@8781$token,0) 0
x47169:	mov si, [@8781$token]	; 4: 139 54 233 184
x47173:	cmp byte [si], 0	; 3: 128 60 0
x47176:	jne strtok$43	; 2: 117 14

strtok$41:	; SetReturnValue 0
x47178:	mov bx, 0	; 3: 187 0 0

strtok$42:	; Return 0
x47181:	mov ax, [bp]	; 3: 139 70 0
x47184:	mov di, [bp + 4]	; 3: 139 126 4
x47187:	mov bp, [bp + 2]	; 3: 139 110 2
x47190:	jmp ax	; 2: 255 224

strtok$43:	; Assign index 0
x47192:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

strtok$44:	; BinaryAdd £temporary3900 token index
x47197:	mov si, [@8781$token]	; 4: 139 54 233 184
x47201:	add si, [bp + 10]	; 3: 3 118 10

strtok$45:	; Deref £temporary3899 -> £temporary3900 £temporary3900 0

strtok$46:	; Equal 70 £temporary3899 -> £temporary3900 0
x47204:	cmp byte [si], 0	; 3: 128 60 0
x47207:	je strtok$70	; 2: 116 97

strtok$47:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtok$48:	; Parameter 14 charSet 6
x47209:	mov ax, [bp + 8]	; 3: 139 70 8
x47212:	mov [bp + 20], ax	; 3: 137 70 20

strtok$49:	; BinaryAdd £temporary3904 token index
x47215:	mov si, [@8781$token]	; 4: 139 54 233 184
x47219:	add si, [bp + 10]	; 3: 3 118 10

strtok$50:	; Deref £temporary3903 -> £temporary3904 £temporary3904 0

strtok$51:	; IntegralToIntegral £temporary3905 £temporary3903 -> £temporary3904
x47222:	mov al, [si]	; 2: 138 4
x47224:	and ax, 255	; 3: 37 255 0
x47227:	cmp al, 0	; 2: 60 0
x47229:	jge strtok$52	; 2: 125 4
x47231:	neg al	; 2: 246 216
x47233:	neg ax	; 2: 247 216

strtok$52:	; Parameter 14 £temporary3905 8
x47235:	mov [bp + 22], ax	; 3: 137 70 22

strtok$53:	; Call 14 strchr 0
x47238:	mov word [bp + 14], strtok$54	; 5: 199 70 14 148 184
x47243:	mov [bp + 16], bp	; 3: 137 110 16
x47246:	add bp, 14	; 3: 131 197 14
x47249:	jmp strchr	; 3: 233 39 105

strtok$54:	; PostCall 14

strtok$55:	; GetReturnValue £temporary3906

strtok$56:	; Equal 68 £temporary3906 0
x47252:	cmp bx, 0	; 3: 131 251 0
x47255:	je strtok$68	; 2: 116 44

strtok$57:	; Assign tokenStart2 token
x47257:	mov ax, [@8781$token]	; 3: 161 233 184
x47260:	mov [bp + 14], ax	; 3: 137 70 14

strtok$58:	; BinaryAdd £temporary3909 token index
x47263:	mov si, [@8781$token]	; 4: 139 54 233 184
x47267:	add si, [bp + 10]	; 3: 3 118 10

strtok$59:	; Deref £temporary3908 -> £temporary3909 £temporary3909 0

strtok$60:	; Assign £temporary3908 -> £temporary3909 0
x47270:	mov byte [si], 0	; 3: 198 4 0

strtok$61:	; BinaryAdd £temporary3910 index 1
x47273:	mov ax, [bp + 10]	; 3: 139 70 10
x47276:	inc ax	; 1: 64

strtok$62:	; BinaryAdd £temporary3912 token £temporary3910
x47277:	mov si, [@8781$token]	; 4: 139 54 233 184
x47281:	add si, ax	; 2: 1 198

strtok$63:	; Deref £temporary3911 -> £temporary3912 £temporary3912 0

strtok$64:	; address £temporary3913 £temporary3911 -> £temporary3912

strtok$65:	; Assign token £temporary3913
x47283:	mov [@8781$token], si	; 4: 137 54 233 184

strtok$66:	; SetReturnValue tokenStart2
x47287:	mov bx, [bp + 14]	; 3: 139 94 14

strtok$67:	; Return tokenStart2
x47290:	mov ax, [bp]	; 3: 139 70 0
x47293:	mov di, [bp + 4]	; 3: 139 126 4
x47296:	mov bp, [bp + 2]	; 3: 139 110 2
x47299:	jmp ax	; 2: 255 224

strtok$68:	; Increment index
x47301:	inc word [bp + 10]	; 3: 255 70 10

strtok$69:	; Goto 44
x47304:	jmp strtok$44	; 2: 235 147

strtok$70:	; Assign tokenStart token
x47306:	mov ax, [@8781$token]	; 3: 161 233 184
x47309:	mov [bp + 12], ax	; 3: 137 70 12

strtok$71:	; BinaryAdd £temporary3915 token index
x47312:	mov si, [@8781$token]	; 4: 139 54 233 184
x47316:	add si, [bp + 10]	; 3: 3 118 10

strtok$72:	; Deref £temporary3914 -> £temporary3915 £temporary3915 0

strtok$73:	; address £temporary3916 £temporary3914 -> £temporary3915

strtok$74:	; Assign token £temporary3916
x47319:	mov [@8781$token], si	; 4: 137 54 233 184

strtok$75:	; SetReturnValue tokenStart
x47323:	mov bx, [bp + 12]	; 3: 139 94 12

strtok$76:	; Return tokenStart
x47326:	mov ax, [bp]	; 3: 139 70 0
x47329:	mov di, [bp + 4]	; 3: 139 126 4
x47332:	mov bp, [bp + 2]	; 3: 139 110 2
x47335:	jmp ax	; 2: 255 224

strtok$77:	; FunctionEnd strtok

@8781$token:
x47337:	dw 0	; 2: 0 0

stdlib_test:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$1:	; Parameter 8 string_atof28221232E4562229203D2025f0A# 6
x47339:	mov word [bp + 14], @13228$string_atof28221232E4562229203D2025f0A#	; 5: 199 70 14 46 190

stdlib_test$2:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$3:	; Parameter 8 string_1232E456# 14
x47344:	mov word [bp + 22], @13229$string_1232E456#	; 5: 199 70 22 68 190

stdlib_test$4:	; Call 8 atof 8
x47349:	mov word [bp + 16], stdlib_test$5	; 5: 199 70 16 3 185
x47354:	mov [bp + 18], bp	; 3: 137 110 18
x47357:	add bp, 16	; 3: 131 197 16
x47360:	jmp atof	; 3: 233 42 7

stdlib_test$5:	; PostCall 8

stdlib_test$6:	; GetReturnValue £temporary6056

stdlib_test$7:	; Parameter 8 £temporary6056 8
x47363:	fstp qword [bp + 16]	; 3: 221 94 16

stdlib_test$8:	; Call 8 printf 0
x47366:	mov word [bp + 8], stdlib_test$9	; 5: 199 70 8 25 185
x47371:	mov [bp + 10], bp	; 3: 137 110 10
x47374:	add bp, 8	; 3: 131 197 8
x47377:	mov di, bp	; 2: 137 239
x47379:	add di, 8	; 3: 131 199 8
x47382:	jmp printf	; 3: 233 235 83

stdlib_test$9:	; PostCall 8

stdlib_test$10:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$11:	; Parameter 8 string_strtod28221232E456789abc222C2026p29203D202825f2C2025s290A# 6
x47385:	mov word [bp + 14], @13232$string_strtod28221232E456789abc222C2026p29203D202825f2C2025s290A#	; 5: 199 70 14 76 190

stdlib_test$12:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$13:	; Parameter 8 string_1232E456789abc# 14
x47390:	mov word [bp + 22], @13233$string_1232E456789abc#	; 5: 199 70 22 116 190

stdlib_test$14:	; address £temporary6058 p
x47395:	mov si, bp	; 2: 137 238
x47397:	add si, 6	; 3: 131 198 6

stdlib_test$15:	; Parameter 8 £temporary6058 16
x47400:	mov [bp + 24], si	; 3: 137 118 24

stdlib_test$16:	; Call 8 strtod 8
x47403:	mov word [bp + 16], stdlib_test$17	; 5: 199 70 16 57 185
x47408:	mov [bp + 18], bp	; 3: 137 110 18
x47411:	add bp, 16	; 3: 131 197 16
x47414:	jmp strtod	; 3: 233 24 7

stdlib_test$17:	; PostCall 8

stdlib_test$18:	; GetReturnValue £temporary6059

stdlib_test$19:	; Parameter 8 £temporary6059 8
x47417:	fstp qword [bp + 16]	; 3: 221 94 16

stdlib_test$20:	; Parameter 8 p 16
x47420:	mov ax, [bp + 6]	; 3: 139 70 6
x47423:	mov [bp + 24], ax	; 3: 137 70 24

stdlib_test$21:	; Call 8 printf 0
x47426:	mov word [bp + 8], stdlib_test$22	; 5: 199 70 8 85 185
x47431:	mov [bp + 10], bp	; 3: 137 110 10
x47434:	add bp, 8	; 3: 131 197 8
x47437:	mov di, bp	; 2: 137 239
x47439:	add di, 10	; 3: 131 199 10
x47442:	jmp printf	; 3: 233 175 83

stdlib_test$22:	; PostCall 8

stdlib_test$23:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$24:	; Parameter 6 string_0Agetenv2822path2229203D2025s0A# 6
x47445:	mov word [bp + 12], @13237$string_0Agetenv2822path2229203D2025s0A#	; 5: 199 70 12 130 190

stdlib_test$25:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$26:	; Parameter 6 string_path# 14
x47450:	mov word [bp + 20], @13238$string_path#	; 5: 199 70 20 152 190

stdlib_test$27:	; Call 6 getenv 8
x47455:	mov word [bp + 14], stdlib_test$28	; 5: 199 70 14 109 185
x47460:	mov [bp + 16], bp	; 3: 137 110 16
x47463:	add bp, 14	; 3: 131 197 14
x47466:	jmp getenv	; 3: 233 65 7

stdlib_test$28:	; PostCall 6

stdlib_test$29:	; GetReturnValue £temporary6061

stdlib_test$30:	; Parameter 6 £temporary6061 8
x47469:	mov [bp + 14], bx	; 3: 137 94 14

stdlib_test$31:	; Call 6 printf 0
x47472:	mov word [bp + 6], stdlib_test$32	; 5: 199 70 6 131 185
x47477:	mov [bp + 8], bp	; 3: 137 110 8
x47480:	add bp, 6	; 3: 131 197 6
x47483:	mov di, bp	; 2: 137 239
x47485:	add di, 2	; 3: 131 199 2
x47488:	jmp printf	; 3: 233 129 83

stdlib_test$32:	; PostCall 6

stdlib_test$33:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$34:	; Parameter 6 string_system2822dir22290A# 6
x47491:	mov word [bp + 12], @13241$string_system2822dir22290A#	; 5: 199 70 12 157 190

stdlib_test$35:	; Call 6 printf 0
x47496:	mov word [bp + 6], stdlib_test$36	; 5: 199 70 6 152 185
x47501:	mov [bp + 8], bp	; 3: 137 110 8
x47504:	add bp, 6	; 3: 131 197 6
x47507:	mov di, bp	; 2: 137 239
x47509:	jmp printf	; 3: 233 108 83

stdlib_test$36:	; PostCall 6

stdlib_test$37:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$38:	; Parameter 6 string_dir# 6
x47512:	mov word [bp + 12], @13243$string_dir#	; 5: 199 70 12 172 190

stdlib_test$39:	; Call 6 system 0
x47517:	mov word [bp + 6], stdlib_test$40	; 5: 199 70 6 171 185
x47522:	mov [bp + 8], bp	; 3: 137 110 8
x47525:	add bp, 6	; 3: 131 197 6
x47528:	jmp system	; 3: 233 17 7

stdlib_test$40:	; PostCall 6

stdlib_test$41:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$42:	; Parameter 6 string_0Aabs282D329203D2025i2C20abs28329203D2025i0A# 6
x47531:	mov word [bp + 12], @13245$string_0Aabs282D329203D2025i2C20abs28329203D2025i0A#	; 5: 199 70 12 176 190

stdlib_test$43:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$44:	; Parameter 6 -3 14
x47536:	mov word [bp + 20], -3	; 5: 199 70 20 253 255

stdlib_test$45:	; Call 6 _abs 8
x47541:	mov word [bp + 14], stdlib_test$46	; 5: 199 70 14 195 185
x47546:	mov [bp + 16], bp	; 3: 137 110 16
x47549:	add bp, 14	; 3: 131 197 14
x47552:	jmp _abs	; 3: 233 7 7

stdlib_test$46:	; PostCall 6

stdlib_test$47:	; GetReturnValue £temporary6065

stdlib_test$48:	; Parameter 6 £temporary6065 8
x47555:	mov [bp + 14], bx	; 3: 137 94 14

stdlib_test$49:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$50:	; Parameter 6 3 16
x47558:	mov word [bp + 22], 3	; 5: 199 70 22 3 0

stdlib_test$51:	; Call 6 _abs 10
x47563:	mov word [bp + 16], stdlib_test$52	; 5: 199 70 16 217 185
x47568:	mov [bp + 18], bp	; 3: 137 110 18
x47571:	add bp, 16	; 3: 131 197 16
x47574:	jmp _abs	; 3: 233 241 6

stdlib_test$52:	; PostCall 6

stdlib_test$53:	; GetReturnValue £temporary6066

stdlib_test$54:	; Parameter 6 £temporary6066 10
x47577:	mov [bp + 16], bx	; 3: 137 94 16

stdlib_test$55:	; Call 6 printf 0
x47580:	mov word [bp + 6], stdlib_test$56	; 5: 199 70 6 239 185
x47585:	mov [bp + 8], bp	; 3: 137 110 8
x47588:	add bp, 6	; 3: 131 197 6
x47591:	mov di, bp	; 2: 137 239
x47593:	add di, 4	; 3: 131 199 4
x47596:	jmp printf	; 3: 233 21 83

stdlib_test$56:	; PostCall 6

stdlib_test$57:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$58:	; Parameter 6 string_labs282D3l29203D2025li2C20labs283l29203D2025li0A0A# 6
x47599:	mov word [bp + 12], @13255$string_labs282D3l29203D2025li2C20labs283l29203D2025li0A0A#	; 5: 199 70 12 204 190

stdlib_test$59:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$60:	; Parameter 6 -3 14
x47604:	mov dword [bp + 20], -3	; 8: 102 199 70 20 253 255 255 255

stdlib_test$61:	; Call 6 labs 8
x47612:	mov word [bp + 14], stdlib_test$62	; 5: 199 70 14 10 186
x47617:	mov [bp + 16], bp	; 3: 137 110 16
x47620:	add bp, 14	; 3: 131 197 14
x47623:	jmp labs	; 3: 233 69 97

stdlib_test$62:	; PostCall 6

stdlib_test$63:	; GetReturnValue £temporary6068

stdlib_test$64:	; Parameter 6 £temporary6068 8
x47626:	mov [bp + 14], ebx	; 4: 102 137 94 14

stdlib_test$65:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$66:	; Parameter 6 3 18
x47630:	mov dword [bp + 24], 3	; 8: 102 199 70 24 3 0 0 0

stdlib_test$67:	; Call 6 labs 12
x47638:	mov word [bp + 18], stdlib_test$68	; 5: 199 70 18 36 186
x47643:	mov [bp + 20], bp	; 3: 137 110 20
x47646:	add bp, 18	; 3: 131 197 18
x47649:	jmp labs	; 3: 233 43 97

stdlib_test$68:	; PostCall 6

stdlib_test$69:	; GetReturnValue £temporary6069

stdlib_test$70:	; Parameter 6 £temporary6069 12
x47652:	mov [bp + 18], ebx	; 4: 102 137 94 18

stdlib_test$71:	; Call 6 printf 0
x47656:	mov word [bp + 6], stdlib_test$72	; 5: 199 70 6 59 186
x47661:	mov [bp + 8], bp	; 3: 137 110 8
x47664:	add bp, 6	; 3: 131 197 6
x47667:	mov di, bp	; 2: 137 239
x47669:	add di, 8	; 3: 131 199 8
x47672:	jmp printf	; 3: 233 201 82

stdlib_test$72:	; PostCall 6

stdlib_test$73:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$74:	; Parameter 6 10 6
x47675:	mov word [bp + 12], 10	; 5: 199 70 12 10 0

stdlib_test$75:	; Parameter 6 3 8
x47680:	mov word [bp + 14], 3	; 5: 199 70 14 3 0

stdlib_test$76:	; Call 6 div 0
x47685:	mov word [bp + 6], stdlib_test$77	; 5: 199 70 6 83 186
x47690:	mov [bp + 8], bp	; 3: 137 110 8
x47693:	add bp, 6	; 3: 131 197 6
x47696:	jmp div	; 3: 233 146 6

stdlib_test$77:	; PostCall 6

stdlib_test$78:	; GetReturnValue £temporary6071 -> £temporary6072

stdlib_test$79:	; Assign i £temporary6071 -> £temporary6072
x47699:	mov si, bp	; 2: 137 238
x47701:	add si, 6	; 3: 131 198 6
x47704:	mov al, 4	; 2: 176 4

stdlib_test$79$Loop:
x47706:	mov ah, [bx]	; 2: 138 39
x47708:	mov [si], ah	; 2: 136 36
x47710:	inc bx	; 1: 67
x47711:	inc si	; 1: 70
x47712:	dec al	; 2: 254 200
x47714:	cmp al, 0	; 2: 60 0
x47716:	jne stdlib_test$79$Loop	; 2: 117 244

stdlib_test$80:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$81:	; Parameter 10 string_div_t28102C20329203D202825i2C2025i290A# 6
x47718:	mov word [bp + 16], @13274$string_div_t28102C20329203D202825i2C2025i290A#	; 5: 199 70 16 238 190

stdlib_test$82:	; Parameter 10 i$quot 8
x47723:	mov ax, [bp + 6]	; 3: 139 70 6
x47726:	mov [bp + 18], ax	; 3: 137 70 18

stdlib_test$83:	; Parameter 10 i$rem 10
x47729:	mov ax, [bp + 8]	; 3: 139 70 8
x47732:	mov [bp + 20], ax	; 3: 137 70 20

stdlib_test$84:	; Call 10 printf 0
x47735:	mov word [bp + 10], stdlib_test$85	; 5: 199 70 10 138 186
x47740:	mov [bp + 12], bp	; 3: 137 110 12
x47743:	add bp, 10	; 3: 131 197 10
x47746:	mov di, bp	; 2: 137 239
x47748:	add di, 4	; 3: 131 199 4
x47751:	jmp printf	; 3: 233 122 82

stdlib_test$85:	; PostCall 10

stdlib_test$86:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$87:	; ParameterInitSize

stdlib_test$88:	; Parameter 10 i 6
x47754:	mov si, bp	; 2: 137 238
x47756:	add si, 6	; 3: 131 198 6
x47759:	mov di, bp	; 2: 137 239
x47761:	add di, 16	; 3: 131 199 16
x47764:	mov al, 4	; 2: 176 4

stdlib_test$88$Loop:
x47766:	mov ah, [si]	; 2: 138 36
x47768:	mov [di], ah	; 2: 136 37
x47770:	inc si	; 1: 70
x47771:	inc di	; 1: 71
x47772:	dec al	; 2: 254 200
x47774:	cmp al, 0	; 2: 60 0
x47776:	jne stdlib_test$88$Loop	; 2: 117 244

stdlib_test$89:	; Call 10 print_div 0
x47778:	mov word [bp + 10], stdlib_test$90	; 5: 199 70 10 176 186
x47783:	mov [bp + 12], bp	; 3: 137 110 12
x47786:	add bp, 10	; 3: 131 197 10
x47789:	jmp print_div	; 3: 233 129 6

stdlib_test$90:	; PostCall 10

stdlib_test$91:	; GetReturnValue £temporary6076 -> £temporary6077

stdlib_test$92:	; Assign j £temporary6076 -> £temporary6077
x47792:	mov si, bp	; 2: 137 238
x47794:	add si, 10	; 3: 131 198 10
x47797:	mov al, 4	; 2: 176 4

stdlib_test$92$Loop:
x47799:	mov ah, [bx]	; 2: 138 39
x47801:	mov [si], ah	; 2: 136 36
x47803:	inc bx	; 1: 67
x47804:	inc si	; 1: 70
x47805:	dec al	; 2: 254 200
x47807:	cmp al, 0	; 2: 60 0
x47809:	jne stdlib_test$92$Loop	; 2: 117 244

stdlib_test$93:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$94:	; Parameter 14 string_div_t28102C20329203D202825i2C2025i290A0A# 6
x47811:	mov word [bp + 20], @13281$string_div_t28102C20329203D202825i2C2025i290A0A#	; 5: 199 70 20 7 191

stdlib_test$95:	; Parameter 14 j$quot 8
x47816:	mov ax, [bp + 10]	; 3: 139 70 10
x47819:	mov [bp + 22], ax	; 3: 137 70 22

stdlib_test$96:	; Parameter 14 j$rem 10
x47822:	mov ax, [bp + 12]	; 3: 139 70 12
x47825:	mov [bp + 24], ax	; 3: 137 70 24

stdlib_test$97:	; Call 14 printf 0
x47828:	mov word [bp + 14], stdlib_test$98	; 5: 199 70 14 231 186
x47833:	mov [bp + 16], bp	; 3: 137 110 16
x47836:	add bp, 14	; 3: 131 197 14
x47839:	mov di, bp	; 2: 137 239
x47841:	add di, 4	; 3: 131 199 4
x47844:	jmp printf	; 3: 233 29 82

stdlib_test$98:	; PostCall 14

stdlib_test$99:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$100:	; Parameter 6 10 6
x47847:	mov dword [bp + 12], 10	; 8: 102 199 70 12 10 0 0 0

stdlib_test$101:	; Parameter 6 3 10
x47855:	mov dword [bp + 16], 3	; 8: 102 199 70 16 3 0 0 0

stdlib_test$102:	; Call 6 ldiv 0
x47863:	mov word [bp + 6], stdlib_test$103	; 5: 199 70 6 5 187
x47868:	mov [bp + 8], bp	; 3: 137 110 8
x47871:	add bp, 6	; 3: 131 197 6
x47874:	jmp ldiv	; 3: 233 124 6

stdlib_test$103:	; PostCall 6

stdlib_test$104:	; GetReturnValue £temporary6081 -> £temporary6082

stdlib_test$105:	; Assign li £temporary6081 -> £temporary6082
x47877:	mov si, bp	; 2: 137 238
x47879:	add si, 6	; 3: 131 198 6
x47882:	mov al, 8	; 2: 176 8

stdlib_test$105$Loop:
x47884:	mov ah, [bx]	; 2: 138 39
x47886:	mov [si], ah	; 2: 136 36
x47888:	inc bx	; 1: 67
x47889:	inc si	; 1: 70
x47890:	dec al	; 2: 254 200
x47892:	cmp al, 0	; 2: 60 0
x47894:	jne stdlib_test$105$Loop	; 2: 117 244

stdlib_test$106:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$107:	; Parameter 14 string_ldiv_t28102C20329203D202825li2C2025li290A# 6
x47896:	mov word [bp + 20], @13294$string_ldiv_t28102C20329203D202825li2C2025li290A#	; 5: 199 70 20 33 191

stdlib_test$108:	; Parameter 14 li$quot 8
x47901:	mov eax, [bp + 6]	; 4: 102 139 70 6
x47905:	mov [bp + 22], eax	; 4: 102 137 70 22

stdlib_test$109:	; Parameter 14 li$rem 12
x47909:	mov eax, [bp + 10]	; 4: 102 139 70 10
x47913:	mov [bp + 26], eax	; 4: 102 137 70 26

stdlib_test$110:	; Call 14 printf 0
x47917:	mov word [bp + 14], stdlib_test$111	; 5: 199 70 14 64 187
x47922:	mov [bp + 16], bp	; 3: 137 110 16
x47925:	add bp, 14	; 3: 131 197 14
x47928:	mov di, bp	; 2: 137 239
x47930:	add di, 8	; 3: 131 199 8
x47933:	jmp printf	; 3: 233 196 81

stdlib_test$111:	; PostCall 14

stdlib_test$112:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$113:	; ParameterInitSize

stdlib_test$114:	; Parameter 14 li 6
x47936:	mov si, bp	; 2: 137 238
x47938:	add si, 6	; 3: 131 198 6
x47941:	mov di, bp	; 2: 137 239
x47943:	add di, 20	; 3: 131 199 20
x47946:	mov al, 8	; 2: 176 8

stdlib_test$114$Loop:
x47948:	mov ah, [si]	; 2: 138 36
x47950:	mov [di], ah	; 2: 136 37
x47952:	inc si	; 1: 70
x47953:	inc di	; 1: 71
x47954:	dec al	; 2: 254 200
x47956:	cmp al, 0	; 2: 60 0
x47958:	jne stdlib_test$114$Loop	; 2: 117 244

stdlib_test$115:	; Call 14 print_ldiv 0
x47960:	mov word [bp + 14], stdlib_test$116	; 5: 199 70 14 102 187
x47965:	mov [bp + 16], bp	; 3: 137 110 16
x47968:	add bp, 14	; 3: 131 197 14
x47971:	jmp print_ldiv	; 3: 233 118 6

stdlib_test$116:	; PostCall 14

stdlib_test$117:	; GetReturnValue £temporary6086 -> £temporary6087

stdlib_test$118:	; Assign lj £temporary6086 -> £temporary6087
x47974:	mov si, bp	; 2: 137 238
x47976:	add si, 14	; 3: 131 198 14
x47979:	mov al, 8	; 2: 176 8

stdlib_test$118$Loop:
x47981:	mov ah, [bx]	; 2: 138 39
x47983:	mov [si], ah	; 2: 136 36
x47985:	inc bx	; 1: 67
x47986:	inc si	; 1: 70
x47987:	dec al	; 2: 254 200
x47989:	cmp al, 0	; 2: 60 0
x47991:	jne stdlib_test$118$Loop	; 2: 117 244

stdlib_test$119:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$120:	; Parameter 22 string_ldiv_t28102C20329203D202825li2C2025li290A0A# 6
x47993:	mov word [bp + 28], @13301$string_ldiv_t28102C20329203D202825li2C2025li290A0A#	; 5: 199 70 28 61 191

stdlib_test$121:	; Parameter 22 lj$quot 8
x47998:	mov eax, [bp + 14]	; 4: 102 139 70 14
x48002:	mov [bp + 30], eax	; 4: 102 137 70 30

stdlib_test$122:	; Parameter 22 lj$rem 12
x48006:	mov eax, [bp + 18]	; 4: 102 139 70 18
x48010:	mov [bp + 34], eax	; 4: 102 137 70 34

stdlib_test$123:	; Call 22 printf 0
x48014:	mov word [bp + 22], stdlib_test$124	; 5: 199 70 22 161 187
x48019:	mov [bp + 24], bp	; 3: 137 110 24
x48022:	add bp, 22	; 3: 131 197 22
x48025:	mov di, bp	; 2: 137 239
x48027:	add di, 8	; 3: 131 199 8
x48030:	jmp printf	; 3: 233 99 81

stdlib_test$124:	; PostCall 22

stdlib_test$125:	; Assign list[0] 3
x48033:	mov word [bp + 6], 3	; 5: 199 70 6 3 0

stdlib_test$126:	; Assign list[1] 4
x48038:	mov word [bp + 8], 4	; 5: 199 70 8 4 0

stdlib_test$127:	; Assign list[2] 2
x48043:	mov word [bp + 10], 2	; 5: 199 70 10 2 0

stdlib_test$128:	; Assign list[3] 1
x48048:	mov word [bp + 12], 1	; 5: 199 70 12 1 0

stdlib_test$129:	; Assign size 4
x48053:	mov word [bp + 14], 4	; 5: 199 70 14 4 0

stdlib_test$130:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$131:	; Parameter 18 string_0AA20List2013A20# 6
x48058:	mov word [bp + 24], @13326$string_0AA20List2013A20#	; 5: 199 70 24 90 191

stdlib_test$132:	; Call 18 printf 0
x48063:	mov word [bp + 18], stdlib_test$133	; 5: 199 70 18 207 187
x48068:	mov [bp + 20], bp	; 3: 137 110 20
x48071:	add bp, 18	; 3: 131 197 18
x48074:	mov di, bp	; 2: 137 239
x48076:	jmp printf	; 3: 233 53 81

stdlib_test$133:	; PostCall 18

stdlib_test$134:	; Assign index 0
x48079:	mov word [bp + 16], 0	; 5: 199 70 16 0 0

stdlib_test$135:	; SignedGreaterThanEqual 146 index size
x48084:	mov ax, [bp + 14]	; 3: 139 70 14
x48087:	cmp [bp + 16], ax	; 3: 57 70 16
x48090:	jge stdlib_test$146	; 2: 125 50

stdlib_test$136:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$137:	; Parameter 18 string_25i20# 6
x48092:	mov word [bp + 24], @13334$string_25i20#	; 5: 199 70 24 102 191

stdlib_test$138:	; SignedMultiply £temporary6099 index 2
x48097:	mov ax, [bp + 16]	; 3: 139 70 16
x48100:	xor dx, dx	; 2: 49 210
x48102:	imul word [@13336$int2$2#]	; 4: 247 46 106 191

stdlib_test$139:	; BinaryAdd £temporary6100 list £temporary6099
x48106:	mov si, bp	; 2: 137 238
x48108:	add si, 6	; 3: 131 198 6
x48111:	add si, ax	; 2: 1 198

stdlib_test$140:	; Deref £temporary6101 -> £temporary6100 £temporary6100 0

stdlib_test$141:	; Parameter 18 £temporary6101 -> £temporary6100 8
x48113:	mov ax, [si]	; 2: 139 4
x48115:	mov [bp + 26], ax	; 3: 137 70 26

stdlib_test$142:	; Call 18 printf 0
x48118:	mov word [bp + 18], stdlib_test$143	; 5: 199 70 18 9 188
x48123:	mov [bp + 20], bp	; 3: 137 110 20
x48126:	add bp, 18	; 3: 131 197 18
x48129:	mov di, bp	; 2: 137 239
x48131:	add di, 2	; 3: 131 199 2
x48134:	jmp printf	; 3: 233 251 80

stdlib_test$143:	; PostCall 18

stdlib_test$144:	; Increment index
x48137:	inc word [bp + 16]	; 3: 255 70 16

stdlib_test$145:	; Goto 135
x48140:	jmp stdlib_test$135	; 2: 235 198

stdlib_test$146:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$147:	; Parameter 18 string_0AB20List2023A20# 6
x48142:	mov word [bp + 24], @13341$string_0AB20List2023A20#	; 5: 199 70 24 108 191

stdlib_test$148:	; Call 18 printf 0
x48147:	mov word [bp + 18], stdlib_test$149	; 5: 199 70 18 35 188
x48152:	mov [bp + 20], bp	; 3: 137 110 20
x48155:	add bp, 18	; 3: 131 197 18
x48158:	mov di, bp	; 2: 137 239
x48160:	jmp printf	; 3: 233 225 80

stdlib_test$149:	; PostCall 18

stdlib_test$150:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$151:	; Parameter 18 list 6
x48163:	mov [bp + 24], bp	; 3: 137 110 24
x48166:	add word [bp + 24], 6	; 4: 131 70 24 6

stdlib_test$152:	; Parameter 18 size 8
x48170:	mov ax, [bp + 14]	; 3: 139 70 14
x48173:	mov [bp + 26], ax	; 3: 137 70 26

stdlib_test$153:	; Parameter 18 2 10
x48176:	mov word [bp + 28], 2	; 5: 199 70 28 2 0

stdlib_test$154:	; Parameter 18 compare 12
x48181:	mov word [bp + 30], compare	; 5: 199 70 30 120 191

stdlib_test$155:	; Call 18 qsort 0
x48186:	mov word [bp + 18], stdlib_test$156	; 5: 199 70 18 72 188
x48191:	mov [bp + 20], bp	; 3: 137 110 20
x48194:	add bp, 18	; 3: 131 197 18
x48197:	jmp qsort	; 3: 233 237 5

stdlib_test$156:	; PostCall 18

stdlib_test$157:	; Assign index 0
x48200:	mov word [bp + 16], 0	; 5: 199 70 16 0 0

stdlib_test$158:	; SignedGreaterThanEqual 169 index size
x48205:	mov ax, [bp + 14]	; 3: 139 70 14
x48208:	cmp [bp + 16], ax	; 3: 57 70 16
x48211:	jge stdlib_test$169	; 2: 125 50

stdlib_test$159:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$160:	; Parameter 18 string_25i20# 6
x48213:	mov word [bp + 24], @13355$string_25i20#	; 5: 199 70 24 176 191

stdlib_test$161:	; SignedMultiply £temporary6108 index 2
x48218:	mov ax, [bp + 16]	; 3: 139 70 16
x48221:	xor dx, dx	; 2: 49 210
x48223:	imul word [@13357$int2$2#]	; 4: 247 46 180 191

stdlib_test$162:	; BinaryAdd £temporary6109 list £temporary6108
x48227:	mov si, bp	; 2: 137 238
x48229:	add si, 6	; 3: 131 198 6
x48232:	add si, ax	; 2: 1 198

stdlib_test$163:	; Deref £temporary6110 -> £temporary6109 £temporary6109 0

stdlib_test$164:	; Parameter 18 £temporary6110 -> £temporary6109 8
x48234:	mov ax, [si]	; 2: 139 4
x48236:	mov [bp + 26], ax	; 3: 137 70 26

stdlib_test$165:	; Call 18 printf 0
x48239:	mov word [bp + 18], stdlib_test$166	; 5: 199 70 18 130 188
x48244:	mov [bp + 20], bp	; 3: 137 110 20
x48247:	add bp, 18	; 3: 131 197 18
x48250:	mov di, bp	; 2: 137 239
x48252:	add di, 2	; 3: 131 199 2
x48255:	jmp printf	; 3: 233 130 80

stdlib_test$166:	; PostCall 18

stdlib_test$167:	; Increment index
x48258:	inc word [bp + 16]	; 3: 255 70 16

stdlib_test$168:	; Goto 158
x48261:	jmp stdlib_test$158	; 2: 235 198

stdlib_test$169:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$170:	; Parameter 18 string_0AC20List2033A20# 6
x48263:	mov word [bp + 24], @13362$string_0AC20List2033A20#	; 5: 199 70 24 182 191

stdlib_test$171:	; Call 18 printf 0
x48268:	mov word [bp + 18], stdlib_test$172	; 5: 199 70 18 156 188
x48273:	mov [bp + 20], bp	; 3: 137 110 20
x48276:	add bp, 18	; 3: 131 197 18
x48279:	mov di, bp	; 2: 137 239
x48281:	jmp printf	; 3: 233 104 80

stdlib_test$172:	; PostCall 18

stdlib_test$173:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$174:	; Parameter 18 list 6
x48284:	mov [bp + 24], bp	; 3: 137 110 24
x48287:	add word [bp + 24], 6	; 4: 131 70 24 6

stdlib_test$175:	; Parameter 18 size 8
x48291:	mov ax, [bp + 14]	; 3: 139 70 14
x48294:	mov [bp + 26], ax	; 3: 137 70 26

stdlib_test$176:	; Parameter 18 2 10
x48297:	mov word [bp + 28], 2	; 5: 199 70 28 2 0

stdlib_test$177:	; Parameter 18 reverse_compare 12
x48302:	mov word [bp + 30], reverse_compare	; 5: 199 70 30 194 191

stdlib_test$178:	; Call 18 qsort 0
x48307:	mov word [bp + 18], stdlib_test$179	; 5: 199 70 18 193 188
x48312:	mov [bp + 20], bp	; 3: 137 110 20
x48315:	add bp, 18	; 3: 131 197 18
x48318:	jmp qsort	; 3: 233 116 5

stdlib_test$179:	; PostCall 18

stdlib_test$180:	; Assign index 0
x48321:	mov word [bp + 16], 0	; 5: 199 70 16 0 0

stdlib_test$181:	; SignedGreaterThanEqual 192 index size
x48326:	mov ax, [bp + 14]	; 3: 139 70 14
x48329:	cmp [bp + 16], ax	; 3: 57 70 16
x48332:	jge stdlib_test$192	; 2: 125 50

stdlib_test$182:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$183:	; Parameter 18 string_25i20# 6
x48334:	mov word [bp + 24], @13376$string_25i20#	; 5: 199 70 24 250 191

stdlib_test$184:	; SignedMultiply £temporary6117 index 2
x48339:	mov ax, [bp + 16]	; 3: 139 70 16
x48342:	xor dx, dx	; 2: 49 210
x48344:	imul word [@13378$int2$2#]	; 4: 247 46 254 191

stdlib_test$185:	; BinaryAdd £temporary6118 list £temporary6117
x48348:	mov si, bp	; 2: 137 238
x48350:	add si, 6	; 3: 131 198 6
x48353:	add si, ax	; 2: 1 198

stdlib_test$186:	; Deref £temporary6119 -> £temporary6118 £temporary6118 0

stdlib_test$187:	; Parameter 18 £temporary6119 -> £temporary6118 8
x48355:	mov ax, [si]	; 2: 139 4
x48357:	mov [bp + 26], ax	; 3: 137 70 26

stdlib_test$188:	; Call 18 printf 0
x48360:	mov word [bp + 18], stdlib_test$189	; 5: 199 70 18 251 188
x48365:	mov [bp + 20], bp	; 3: 137 110 20
x48368:	add bp, 18	; 3: 131 197 18
x48371:	mov di, bp	; 2: 137 239
x48373:	add di, 2	; 3: 131 199 2
x48376:	jmp printf	; 3: 233 9 80

stdlib_test$189:	; PostCall 18

stdlib_test$190:	; Increment index
x48379:	inc word [bp + 16]	; 3: 255 70 16

stdlib_test$191:	; Goto 181
x48382:	jmp stdlib_test$181	; 2: 235 198

stdlib_test$192:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$193:	; Parameter 18 string_0AB20List2043A20# 6
x48384:	mov word [bp + 24], @13383$string_0AB20List2043A20#	; 5: 199 70 24 0 192

stdlib_test$194:	; Call 18 printf 0
x48389:	mov word [bp + 18], stdlib_test$195	; 5: 199 70 18 21 189
x48394:	mov [bp + 20], bp	; 3: 137 110 20
x48397:	add bp, 18	; 3: 131 197 18
x48400:	mov di, bp	; 2: 137 239
x48402:	jmp printf	; 3: 233 239 79

stdlib_test$195:	; PostCall 18

stdlib_test$196:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$197:	; Parameter 18 list 6
x48405:	mov [bp + 24], bp	; 3: 137 110 24
x48408:	add word [bp + 24], 6	; 4: 131 70 24 6

stdlib_test$198:	; Parameter 18 size 8
x48412:	mov ax, [bp + 14]	; 3: 139 70 14
x48415:	mov [bp + 26], ax	; 3: 137 70 26

stdlib_test$199:	; Parameter 18 2 10
x48418:	mov word [bp + 28], 2	; 5: 199 70 28 2 0

stdlib_test$200:	; Parameter 18 compare 12
x48423:	mov word [bp + 30], compare	; 5: 199 70 30 120 191

stdlib_test$201:	; Call 18 qsort 0
x48428:	mov word [bp + 18], stdlib_test$202	; 5: 199 70 18 58 189
x48433:	mov [bp + 20], bp	; 3: 137 110 20
x48436:	add bp, 18	; 3: 131 197 18
x48439:	jmp qsort	; 3: 233 251 4

stdlib_test$202:	; PostCall 18

stdlib_test$203:	; Assign index 0
x48442:	mov word [bp + 16], 0	; 5: 199 70 16 0 0

stdlib_test$204:	; SignedGreaterThanEqual 215 index size
x48447:	mov ax, [bp + 14]	; 3: 139 70 14
x48450:	cmp [bp + 16], ax	; 3: 57 70 16
x48453:	jge stdlib_test$215	; 2: 125 50

stdlib_test$205:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$206:	; Parameter 18 string_25i20# 6
x48455:	mov word [bp + 24], @13397$string_25i20#	; 5: 199 70 24 12 192

stdlib_test$207:	; SignedMultiply £temporary6126 index 2
x48460:	mov ax, [bp + 16]	; 3: 139 70 16
x48463:	xor dx, dx	; 2: 49 210
x48465:	imul word [@13399$int2$2#]	; 4: 247 46 16 192

stdlib_test$208:	; BinaryAdd £temporary6127 list £temporary6126
x48469:	mov si, bp	; 2: 137 238
x48471:	add si, 6	; 3: 131 198 6
x48474:	add si, ax	; 2: 1 198

stdlib_test$209:	; Deref £temporary6128 -> £temporary6127 £temporary6127 0

stdlib_test$210:	; Parameter 18 £temporary6128 -> £temporary6127 8
x48476:	mov ax, [si]	; 2: 139 4
x48478:	mov [bp + 26], ax	; 3: 137 70 26

stdlib_test$211:	; Call 18 printf 0
x48481:	mov word [bp + 18], stdlib_test$212	; 5: 199 70 18 116 189
x48486:	mov [bp + 20], bp	; 3: 137 110 20
x48489:	add bp, 18	; 3: 131 197 18
x48492:	mov di, bp	; 2: 137 239
x48494:	add di, 2	; 3: 131 199 2
x48497:	jmp printf	; 3: 233 144 79

stdlib_test$212:	; PostCall 18

stdlib_test$213:	; Increment index
x48500:	inc word [bp + 16]	; 3: 255 70 16

stdlib_test$214:	; Goto 204
x48503:	jmp stdlib_test$204	; 2: 235 198

stdlib_test$215:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$216:	; Parameter 18 string_0A0ASearch3A0A# 6
x48505:	mov word [bp + 24], @13404$string_0A0ASearch3A0A#	; 5: 199 70 24 18 192

stdlib_test$217:	; Call 18 printf 0
x48510:	mov word [bp + 18], stdlib_test$218	; 5: 199 70 18 142 189
x48515:	mov [bp + 20], bp	; 3: 137 110 20
x48518:	add bp, 18	; 3: 131 197 18
x48521:	mov di, bp	; 2: 137 239
x48523:	jmp printf	; 3: 233 118 79

stdlib_test$218:	; PostCall 18

stdlib_test$219:	; Assign key 0
x48526:	mov word [bp + 16], 0	; 5: 199 70 16 0 0

stdlib_test$220:	; SignedGreaterThanEqual 247 key 6
x48531:	cmp word [bp + 16], 6	; 4: 131 126 16 6
x48535:	jge stdlib_test$247	; 2: 125 117

stdlib_test$221:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$222:	; address £temporary6133 key
x48537:	mov si, bp	; 2: 137 238
x48539:	add si, 16	; 3: 131 198 16

stdlib_test$223:	; Parameter 18 £temporary6133 6
x48542:	mov [bp + 24], si	; 3: 137 118 24

stdlib_test$224:	; Parameter 18 list 8
x48545:	mov [bp + 26], bp	; 3: 137 110 26
x48548:	add word [bp + 26], 6	; 4: 131 70 26 6

stdlib_test$225:	; Parameter 18 size 10
x48552:	mov ax, [bp + 14]	; 3: 139 70 14
x48555:	mov [bp + 28], ax	; 3: 137 70 28

stdlib_test$226:	; Parameter 18 2 12
x48558:	mov word [bp + 30], 2	; 5: 199 70 30 2 0

stdlib_test$227:	; Parameter 18 compare 14
x48563:	mov word [bp + 32], compare	; 5: 199 70 32 120 191

stdlib_test$228:	; Call 18 bsearch 0
x48568:	mov word [bp + 18], stdlib_test$229	; 5: 199 70 18 198 189
x48573:	mov [bp + 20], bp	; 3: 137 110 20
x48576:	add bp, 18	; 3: 131 197 18
x48579:	jmp bsearch	; 3: 233 92 5

stdlib_test$229:	; PostCall 18

stdlib_test$230:	; GetReturnValue £temporary6135

stdlib_test$231:	; IntegralToIntegral £temporary6136 £temporary6135

stdlib_test$232:	; Assign p £temporary6136
x48582:	mov [bp + 18], bx	; 3: 137 94 18

stdlib_test$233:	; Equal 237 p 0
x48585:	cmp word [bp + 18], 0	; 4: 131 126 18 0
x48589:	je stdlib_test$237	; 2: 116 16

stdlib_test$234:	; BinarySubtract £temporary6138 p list
x48591:	mov ax, [bp + 18]	; 3: 139 70 18
x48594:	sub ax, bp	; 2: 41 232
x48596:	sub ax, 6	; 3: 131 232 6

stdlib_test$235:	; SignedDivide £temporary6143 £temporary6138 2
x48599:	xor dx, dx	; 2: 49 210
x48601:	idiv word [@13428$int2$2#]	; 4: 247 62 29 192

stdlib_test$236:	; Goto 238
x48605:	jmp stdlib_test$238	; 2: 235 3

stdlib_test$237:	; Assign £temporary6143 -1
x48607:	mov ax, -1	; 3: 184 255 255

stdlib_test$238:	; Assign index £temporary6143
x48610:	mov [bp + 20], ax	; 3: 137 70 20

stdlib_test$239:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$240:	; Parameter 22 string_20202825i2C2025i290A# 6
x48613:	mov word [bp + 28], @13439$string_20202825i2C2025i290A#	; 5: 199 70 28 31 192

stdlib_test$241:	; Parameter 22 key 8
x48618:	mov ax, [bp + 16]	; 3: 139 70 16
x48621:	mov [bp + 30], ax	; 3: 137 70 30

stdlib_test$242:	; Parameter 22 index 10
x48624:	mov ax, [bp + 20]	; 3: 139 70 20
x48627:	mov [bp + 32], ax	; 3: 137 70 32

stdlib_test$243:	; Call 22 printf 0
x48630:	mov word [bp + 22], stdlib_test$244	; 5: 199 70 22 9 190
x48635:	mov [bp + 24], bp	; 3: 137 110 24
x48638:	add bp, 22	; 3: 131 197 22
x48641:	mov di, bp	; 2: 137 239
x48643:	add di, 4	; 3: 131 199 4
x48646:	jmp printf	; 3: 233 251 78

stdlib_test$244:	; PostCall 22

stdlib_test$245:	; Increment key
x48649:	inc word [bp + 16]	; 3: 255 70 16

stdlib_test$246:	; Goto 220
x48652:	jmp stdlib_test$220	; 2: 235 133

stdlib_test$247:	; CallHeader 16 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$248:	; Parameter 16 string_0A# 6
x48654:	mov word [bp + 22], @13441$string_0A#	; 5: 199 70 22 43 192

stdlib_test$249:	; Call 16 printf 0
x48659:	mov word [bp + 16], stdlib_test$250	; 5: 199 70 16 35 190
x48664:	mov [bp + 18], bp	; 3: 137 110 18
x48667:	add bp, 16	; 3: 131 197 16
x48670:	mov di, bp	; 2: 137 239
x48672:	jmp printf	; 3: 233 225 78

stdlib_test$250:	; PostCall 16

stdlib_test$251:	; Return 0
x48675:	mov ax, [bp]	; 3: 139 70 0
x48678:	mov di, [bp + 4]	; 3: 139 126 4
x48681:	mov bp, [bp + 2]	; 3: 139 110 2
x48684:	jmp ax	; 2: 255 224

stdlib_test$252:	; FunctionEnd stdlib_test

@13228$string_atof28221232E4562229203D2025f0A#:
x48686:	db "atof(", 34, "123.456", 34, ") = %f", 10, 0	; 22: 97 116 111 102 40 34 49 50 51 46 52 53 54 34 41 32 61 32 37 102 10 0

@13229$string_1232E456#:
x48708:	db "123.456", 0	; 8: 49 50 51 46 52 53 54 0

@13232$string_strtod28221232E456789abc222C2026p29203D202825f2C2025s290A#:
x48716:	db "strtod(", 34, "123.456789abc", 34, ", &p) = (%f, %s)", 10, 0	; 40: 115 116 114 116 111 100 40 34 49 50 51 46 52 53 54 55 56 57 97 98 99 34 44 32 38 112 41 32 61 32 40 37 102 44 32 37 115 41 10 0

@13233$string_1232E456789abc#:
x48756:	db "123.456789abc", 0	; 14: 49 50 51 46 52 53 54 55 56 57 97 98 99 0

@13237$string_0Agetenv2822path2229203D2025s0A#:
x48770:	db 10, "getenv(", 34, "path", 34, ") = %s", 10, 0	; 22: 10 103 101 116 101 110 118 40 34 112 97 116 104 34 41 32 61 32 37 115 10 0

@13238$string_path#:
x48792:	db "path", 0	; 5: 112 97 116 104 0

@13241$string_system2822dir22290A#:
x48797:	db "system(", 34, "dir", 34, ")", 10, 0	; 15: 115 121 115 116 101 109 40 34 100 105 114 34 41 10 0

@13243$string_dir#:
x48812:	db "dir", 0	; 4: 100 105 114 0

@13245$string_0Aabs282D329203D2025i2C20abs28329203D2025i0A#:
x48816:	db 10, "abs(-3) = %i, abs(3) = %i", 10, 0	; 28: 10 97 98 115 40 45 51 41 32 61 32 37 105 44 32 97 98 115 40 51 41 32 61 32 37 105 10 0

@13255$string_labs282D3l29203D2025li2C20labs283l29203D2025li0A0A#:
x48844:	db "labs(-3l) = %li, labs(3l) = %li", 10, 10, 0	; 34: 108 97 98 115 40 45 51 108 41 32 61 32 37 108 105 44 32 108 97 98 115 40 51 108 41 32 61 32 37 108 105 10 10 0

@13274$string_div_t28102C20329203D202825i2C2025i290A#:
x48878:	db "div_t(10, 3) = (%i, %i)", 10, 0	; 25: 100 105 118 95 116 40 49 48 44 32 51 41 32 61 32 40 37 105 44 32 37 105 41 10 0

@13281$string_div_t28102C20329203D202825i2C2025i290A0A#:
x48903:	db "div_t(10, 3) = (%i, %i)", 10, 10, 0	; 26: 100 105 118 95 116 40 49 48 44 32 51 41 32 61 32 40 37 105 44 32 37 105 41 10 10 0

@13294$string_ldiv_t28102C20329203D202825li2C2025li290A#:
x48929:	db "ldiv_t(10, 3) = (%li, %li)", 10, 0	; 28: 108 100 105 118 95 116 40 49 48 44 32 51 41 32 61 32 40 37 108 105 44 32 37 108 105 41 10 0

@13301$string_ldiv_t28102C20329203D202825li2C2025li290A0A#:
x48957:	db "ldiv_t(10, 3) = (%li, %li)", 10, 10, 0	; 29: 108 100 105 118 95 116 40 49 48 44 32 51 41 32 61 32 40 37 108 105 44 32 37 108 105 41 10 10 0

@13326$string_0AA20List2013A20#:
x48986:	db 10, "A List 1: ", 0	; 12: 10 65 32 76 105 115 116 32 49 58 32 0

@13334$string_25i20#:
x48998:	db "%i ", 0	; 4: 37 105 32 0

@13336$int2$2#:
x49002:	dw 2	; 2: 2 0

@13341$string_0AB20List2023A20#:
x49004:	db 10, "B List 2: ", 0	; 12: 10 66 32 76 105 115 116 32 50 58 32 0

compare:	; IntegralToIntegral £temporary5983 valuePtr1
x49016:	mov si, [bp + 6]	; 3: 139 118 6

compare$1:	; Deref £temporary5984 -> £temporary5983 £temporary5983 0

compare$2:	; Assign intValue1 £temporary5984 -> £temporary5983
x49019:	mov ax, [si]	; 2: 139 4
x49021:	mov [bp + 10], ax	; 3: 137 70 10

compare$3:	; IntegralToIntegral £temporary5985 valuePtr2
x49024:	mov si, [bp + 8]	; 3: 139 118 8

compare$4:	; Deref £temporary5986 -> £temporary5985 £temporary5985 0

compare$5:	; Assign intValue2 £temporary5986 -> £temporary5985
x49027:	mov ax, [si]	; 2: 139 4
x49029:	mov [bp + 12], ax	; 3: 137 70 12

compare$6:	; SignedGreaterThanEqual 9 intValue1 intValue2
x49032:	mov ax, [bp + 12]	; 3: 139 70 12
x49035:	cmp [bp + 10], ax	; 3: 57 70 10
x49038:	jge compare$9	; 2: 125 5

compare$7:	; Assign £temporary5996 -1
x49040:	mov bx, -1	; 3: 187 255 255

compare$8:	; Goto 14
x49043:	jmp compare$14	; 2: 235 16

compare$9:	; NotEqual 12 intValue1 intValue2
x49045:	mov ax, [bp + 12]	; 3: 139 70 12
x49048:	cmp [bp + 10], ax	; 3: 57 70 10
x49051:	jne compare$12	; 2: 117 5

compare$10:	; Assign £temporary5992 0
x49053:	mov bx, 0	; 3: 187 0 0

compare$11:	; Goto 13
x49056:	jmp compare$13	; 2: 235 3

compare$12:	; Assign £temporary5992 1
x49058:	mov bx, 1	; 3: 187 1 0

compare$13:	; Assign £temporary5996 £temporary5992

compare$14:	; SetReturnValue £temporary5996

compare$15:	; Return £temporary5996
x49061:	mov ax, [bp]	; 3: 139 70 0
x49064:	mov di, [bp + 4]	; 3: 139 126 4
x49067:	mov bp, [bp + 2]	; 3: 139 110 2
x49070:	jmp ax	; 2: 255 224

compare$16:	; FunctionEnd compare

@13355$string_25i20#:
x49072:	db "%i ", 0	; 4: 37 105 32 0

@13357$int2$2#:
x49076:	dw 2	; 2: 2 0

@13362$string_0AC20List2033A20#:
x49078:	db 10, "C List 3: ", 0	; 12: 10 67 32 76 105 115 116 32 51 58 32 0

reverse_compare:	; IntegralToIntegral £temporary5997 valuePtr1
x49090:	mov si, [bp + 6]	; 3: 139 118 6

reverse_compare$1:	; Deref £temporary5998 -> £temporary5997 £temporary5997 0

reverse_compare$2:	; Assign intValue1 £temporary5998 -> £temporary5997
x49093:	mov ax, [si]	; 2: 139 4
x49095:	mov [bp + 10], ax	; 3: 137 70 10

reverse_compare$3:	; IntegralToIntegral £temporary5999 valuePtr2
x49098:	mov si, [bp + 8]	; 3: 139 118 8

reverse_compare$4:	; Deref £temporary6000 -> £temporary5999 £temporary5999 0

reverse_compare$5:	; Assign intValue2 £temporary6000 -> £temporary5999
x49101:	mov ax, [si]	; 2: 139 4
x49103:	mov [bp + 12], ax	; 3: 137 70 12

reverse_compare$6:	; SignedGreaterThanEqual 9 intValue1 intValue2
x49106:	mov ax, [bp + 12]	; 3: 139 70 12
x49109:	cmp [bp + 10], ax	; 3: 57 70 10
x49112:	jge reverse_compare$9	; 2: 125 5

reverse_compare$7:	; Assign £temporary6010 1
x49114:	mov bx, 1	; 3: 187 1 0

reverse_compare$8:	; Goto 14
x49117:	jmp reverse_compare$14	; 2: 235 16

reverse_compare$9:	; NotEqual 12 intValue1 intValue2
x49119:	mov ax, [bp + 12]	; 3: 139 70 12
x49122:	cmp [bp + 10], ax	; 3: 57 70 10
x49125:	jne reverse_compare$12	; 2: 117 5

reverse_compare$10:	; Assign £temporary6006 0
x49127:	mov bx, 0	; 3: 187 0 0

reverse_compare$11:	; Goto 13
x49130:	jmp reverse_compare$13	; 2: 235 3

reverse_compare$12:	; Assign £temporary6006 -1
x49132:	mov bx, -1	; 3: 187 255 255

reverse_compare$13:	; Assign £temporary6010 £temporary6006

reverse_compare$14:	; SetReturnValue £temporary6010

reverse_compare$15:	; Return £temporary6010
x49135:	mov ax, [bp]	; 3: 139 70 0
x49138:	mov di, [bp + 4]	; 3: 139 126 4
x49141:	mov bp, [bp + 2]	; 3: 139 110 2
x49144:	jmp ax	; 2: 255 224

reverse_compare$16:	; FunctionEnd reverse_compare

@13376$string_25i20#:
x49146:	db "%i ", 0	; 4: 37 105 32 0

@13378$int2$2#:
x49150:	dw 2	; 2: 2 0

@13383$string_0AB20List2043A20#:
x49152:	db 10, "B List 4: ", 0	; 12: 10 66 32 76 105 115 116 32 52 58 32 0

@13397$string_25i20#:
x49164:	db "%i ", 0	; 4: 37 105 32 0

@13399$int2$2#:
x49168:	dw 2	; 2: 2 0

@13404$string_0A0ASearch3A0A#:
x49170:	db 10, 10, "Search:", 10, 0	; 11: 10 10 83 101 97 114 99 104 58 10 0

@13428$int2$2#:
x49181:	dw 2	; 2: 2 0

@13439$string_20202825i2C2025i290A#:
x49183:	db "  (%i, %i)", 10, 0	; 12: 32 32 40 37 105 44 32 37 105 41 10 0

@13441$string_0A#:
x49195:	db 10, 0	; 2: 10 0

atof:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

atof$1:	; Parameter 8 s 6
x49197:	mov ax, [bp + 6]	; 3: 139 70 6
x49200:	mov [bp + 14], ax	; 3: 137 70 14

atof$2:	; Parameter 8 0 8
x49203:	mov word [bp + 16], 0	; 5: 199 70 16 0 0

atof$3:	; Call 8 strtod 0
x49208:	mov word [bp + 8], atof$4	; 5: 199 70 8 70 192
x49213:	mov [bp + 10], bp	; 3: 137 110 10
x49216:	add bp, 8	; 3: 131 197 8
x49219:	nop	; 1: 144
x49220:	jmp strtod	; 2: 235 11

atof$4:	; PostCall 8

atof$5:	; GetReturnValue £temporary2256

atof$6:	; SetReturnValue £temporary2256

atof$7:	; Return £temporary2256
x49222:	mov ax, [bp]	; 3: 139 70 0
x49225:	mov di, [bp + 4]	; 3: 139 126 4
x49228:	mov bp, [bp + 2]	; 3: 139 110 2
x49231:	jmp ax	; 2: 255 224

atof$8:	; FunctionEnd atof

strtod:	; Assign chars 0
x49233:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

strtod$1:	; PushZero
x49238:	fldz	; 2: 217 238

strtod$2:	; PopFloat value
x49240:	fstp qword [bp + 12]	; 3: 221 94 12

strtod$3:	; CallHeader 20 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtod$4:	; Parameter 20 s 6
x49243:	mov ax, [bp + 6]	; 3: 139 70 6
x49246:	mov [bp + 26], ax	; 3: 137 70 26

strtod$5:	; Parameter 20 string_25lf25n# 8
x49249:	mov word [bp + 28], @5142$string_25lf25n#	; 5: 199 70 28 168 192

strtod$6:	; address £temporary2259 value
x49254:	mov si, bp	; 2: 137 238
x49256:	add si, 12	; 3: 131 198 12

strtod$7:	; Parameter 20 £temporary2259 10
x49259:	mov [bp + 30], si	; 3: 137 118 30

strtod$8:	; address £temporary2260 chars
x49262:	mov si, bp	; 2: 137 238
x49264:	add si, 10	; 3: 131 198 10

strtod$9:	; Parameter 20 £temporary2260 12
x49267:	mov [bp + 32], si	; 3: 137 118 32

strtod$10:	; Call 20 sscanf 0
x49270:	mov word [bp + 20], strtod$11	; 5: 199 70 20 137 192
x49275:	mov [bp + 22], bp	; 3: 137 110 22
x49278:	add bp, 20	; 3: 131 197 20
x49281:	mov di, bp	; 2: 137 239
x49283:	add di, 4	; 3: 131 199 4
x49286:	jmp sscanf	; 3: 233 58 234

strtod$11:	; PostCall 20

strtod$12:	; Equal 15 endp 0
x49289:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x49293:	je strtod$15	; 2: 116 11

strtod$13:	; Deref £temporary2263 -> endp endp 0
x49295:	mov si, [bp + 8]	; 3: 139 118 8

strtod$14:	; BinaryAdd £temporary2263 -> endp s chars
x49298:	mov ax, [bp + 6]	; 3: 139 70 6
x49301:	add ax, [bp + 10]	; 3: 3 70 10
x49304:	mov [si], ax	; 2: 137 4

strtod$15:	; PushFloat value
x49306:	fld qword [bp + 12]	; 3: 221 70 12

strtod$16:	; SetReturnValue value

strtod$17:	; Return value
x49309:	mov ax, [bp]	; 3: 139 70 0
x49312:	mov di, [bp + 4]	; 3: 139 126 4
x49315:	mov bp, [bp + 2]	; 3: 139 110 2
x49318:	jmp ax	; 2: 255 224

strtod$18:	; FunctionEnd strtod

@5142$string_25lf25n#:
x49320:	db "%lf%n", 0	; 6: 37 108 102 37 110 0

getenv:	; SetReturnValue 0
x49326:	mov bx, 0	; 3: 187 0 0

getenv$1:	; Return 0
x49329:	mov ax, [bp]	; 3: 139 70 0
x49332:	mov di, [bp + 4]	; 3: 139 126 4
x49335:	mov bp, [bp + 2]	; 3: 139 110 2
x49338:	jmp ax	; 2: 255 224

getenv$2:	; FunctionEnd getenv

system:	; SetReturnValue -1
x49340:	mov bx, -1	; 3: 187 255 255

system$1:	; Return -1
x49343:	mov ax, [bp]	; 3: 139 70 0
x49346:	mov di, [bp + 4]	; 3: 139 126 4
x49349:	mov bp, [bp + 2]	; 3: 139 110 2
x49352:	jmp ax	; 2: 255 224

system$2:	; FunctionEnd system

_abs:	; SignedGreaterThanEqual 4 value 0
x49354:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x49358:	jge _abs$4	; 2: 125 7

_abs$1:	; UnarySubtract £temporary3209 value
x49360:	mov bx, [bp + 6]	; 3: 139 94 6
x49363:	neg bx	; 2: 247 219

_abs$2:	; Assign £temporary3213 £temporary3209

_abs$3:	; Goto 5
x49365:	jmp _abs$5	; 2: 235 3

_abs$4:	; Assign £temporary3213 value
x49367:	mov bx, [bp + 6]	; 3: 139 94 6

_abs$5:	; SetReturnValue £temporary3213

_abs$6:	; Return £temporary3213
x49370:	mov ax, [bp]	; 3: 139 70 0
x49373:	mov di, [bp + 4]	; 3: 139 126 4
x49376:	mov bp, [bp + 2]	; 3: 139 110 2
x49379:	jmp ax	; 2: 255 224

_abs$7:	; FunctionEnd _abs

div:	; Assign result$quot 0
x49381:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

div$1:	; Assign result$rem 0
x49386:	mov word [bp + 12], 0	; 5: 199 70 12 0 0

div$2:	; NotEqual 6 denum 0
x49391:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x49395:	jne div$6	; 2: 117 22

div$3:	; Assign errno 6
x49397:	mov word [errno], 6	; 6: 199 6 230 10 6 0

div$4:	; SetReturnValue result
x49403:	mov bx, bp	; 2: 137 235
x49405:	add bx, 10	; 3: 131 195 10

div$5:	; Return result
x49408:	mov ax, [bp]	; 3: 139 70 0
x49411:	mov di, [bp + 4]	; 3: 139 126 4
x49414:	mov bp, [bp + 2]	; 3: 139 110 2
x49417:	jmp ax	; 2: 255 224

div$6:	; SignedDivide result$quot num denum
x49419:	mov ax, [bp + 6]	; 3: 139 70 6
x49422:	xor dx, dx	; 2: 49 210
x49424:	idiv word [bp + 8]	; 3: 247 126 8
x49427:	mov [bp + 10], ax	; 3: 137 70 10

div$7:	; SignedModulo result$rem num denum
x49430:	mov ax, [bp + 6]	; 3: 139 70 6
x49433:	xor dx, dx	; 2: 49 210
x49435:	idiv word [bp + 8]	; 3: 247 126 8
x49438:	mov [bp + 12], dx	; 3: 137 86 12

div$8:	; SetReturnValue result
x49441:	mov bx, bp	; 2: 137 235
x49443:	add bx, 10	; 3: 131 195 10

div$9:	; Return result
x49446:	mov ax, [bp]	; 3: 139 70 0
x49449:	mov di, [bp + 4]	; 3: 139 126 4
x49452:	mov bp, [bp + 2]	; 3: 139 110 2
x49455:	jmp ax	; 2: 255 224

div$10:	; FunctionEnd div

print_div:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

print_div$1:	; Parameter 10 string_div_t20quot2025i20rem2025i0A# 6
x49457:	mov word [bp + 16], @13157$string_div_t20quot2025i20rem2025i0A#	; 5: 199 70 16 107 193

print_div$2:	; Parameter 10 d$quot 8
x49462:	mov ax, [bp + 6]	; 3: 139 70 6
x49465:	mov [bp + 18], ax	; 3: 137 70 18

print_div$3:	; Parameter 10 d$rem 10
x49468:	mov ax, [bp + 8]	; 3: 139 70 8
x49471:	mov [bp + 20], ax	; 3: 137 70 20

print_div$4:	; Call 10 printf 0
x49474:	mov word [bp + 10], print_div$5	; 5: 199 70 10 85 193
x49479:	mov [bp + 12], bp	; 3: 137 110 12
x49482:	add bp, 10	; 3: 131 197 10
x49485:	mov di, bp	; 2: 137 239
x49487:	add di, 4	; 3: 131 199 4
x49490:	jmp printf	; 3: 233 175 75

print_div$5:	; PostCall 10

print_div$6:	; Increment d$quot
x49493:	inc word [bp + 6]	; 3: 255 70 6

print_div$7:	; Increment d$rem
x49496:	inc word [bp + 8]	; 3: 255 70 8

print_div$8:	; SetReturnValue d
x49499:	mov bx, bp	; 2: 137 235
x49501:	add bx, 6	; 3: 131 195 6

print_div$9:	; Return d
x49504:	mov ax, [bp]	; 3: 139 70 0
x49507:	mov di, [bp + 4]	; 3: 139 126 4
x49510:	mov bp, [bp + 2]	; 3: 139 110 2
x49513:	jmp ax	; 2: 255 224

print_div$10:	; FunctionEnd print_div

@13157$string_div_t20quot2025i20rem2025i0A#:
x49515:	db "div_t quot %i rem %i", 10, 0	; 22: 100 105 118 95 116 32 113 117 111 116 32 37 105 32 114 101 109 32 37 105 10 0

ldiv:	; Assign result$quot 0
x49537:	mov dword [bp + 14], 0	; 8: 102 199 70 14 0 0 0 0

ldiv$1:	; Assign result$rem 0
x49545:	mov dword [bp + 18], 0	; 8: 102 199 70 18 0 0 0 0

ldiv$2:	; NotEqual 6 denum 0
x49553:	cmp dword [bp + 10], 0	; 5: 102 131 126 10 0
x49558:	jne ldiv$6	; 2: 117 22

ldiv$3:	; Assign errno 6
x49560:	mov word [errno], 6	; 6: 199 6 230 10 6 0

ldiv$4:	; SetReturnValue result
x49566:	mov bx, bp	; 2: 137 235
x49568:	add bx, 14	; 3: 131 195 14

ldiv$5:	; Return result
x49571:	mov ax, [bp]	; 3: 139 70 0
x49574:	mov di, [bp + 4]	; 3: 139 126 4
x49577:	mov bp, [bp + 2]	; 3: 139 110 2
x49580:	jmp ax	; 2: 255 224

ldiv$6:	; SignedDivide result$quot num denum
x49582:	mov eax, [bp + 6]	; 4: 102 139 70 6
x49586:	xor edx, edx	; 3: 102 49 210
x49589:	idiv dword [bp + 10]	; 4: 102 247 126 10
x49593:	mov [bp + 14], eax	; 4: 102 137 70 14

ldiv$7:	; SignedModulo result$rem num denum
x49597:	mov eax, [bp + 6]	; 4: 102 139 70 6
x49601:	xor edx, edx	; 3: 102 49 210
x49604:	idiv dword [bp + 10]	; 4: 102 247 126 10
x49608:	mov [bp + 18], edx	; 4: 102 137 86 18

ldiv$8:	; SetReturnValue result
x49612:	mov bx, bp	; 2: 137 235
x49614:	add bx, 14	; 3: 131 195 14

ldiv$9:	; Return result
x49617:	mov ax, [bp]	; 3: 139 70 0
x49620:	mov di, [bp + 4]	; 3: 139 126 4
x49623:	mov bp, [bp + 2]	; 3: 139 110 2
x49626:	jmp ax	; 2: 255 224

ldiv$10:	; FunctionEnd ldiv

print_ldiv:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

print_ldiv$1:	; Parameter 14 string_ldiv_t20quot2025li20rem2025li0A# 6
x49628:	mov word [bp + 20], @13175$string_ldiv_t20quot2025li20rem2025li0A#	; 5: 199 70 20 28 194

print_ldiv$2:	; Parameter 14 ld$quot 8
x49633:	mov eax, [bp + 6]	; 4: 102 139 70 6
x49637:	mov [bp + 22], eax	; 4: 102 137 70 22

print_ldiv$3:	; Parameter 14 ld$rem 12
x49641:	mov eax, [bp + 10]	; 4: 102 139 70 10
x49645:	mov [bp + 26], eax	; 4: 102 137 70 26

print_ldiv$4:	; Call 14 printf 0
x49649:	mov word [bp + 14], print_ldiv$5	; 5: 199 70 14 4 194
x49654:	mov [bp + 16], bp	; 3: 137 110 16
x49657:	add bp, 14	; 3: 131 197 14
x49660:	mov di, bp	; 2: 137 239
x49662:	add di, 8	; 3: 131 199 8
x49665:	jmp printf	; 3: 233 0 75

print_ldiv$5:	; PostCall 14

print_ldiv$6:	; Decrement ld$quot
x49668:	dec dword [bp + 6]	; 4: 102 255 78 6

print_ldiv$7:	; Decrement ld$rem
x49672:	dec dword [bp + 10]	; 4: 102 255 78 10

print_ldiv$8:	; SetReturnValue ld
x49676:	mov bx, bp	; 2: 137 235
x49678:	add bx, 6	; 3: 131 195 6

print_ldiv$9:	; Return ld
x49681:	mov ax, [bp]	; 3: 139 70 0
x49684:	mov di, [bp + 4]	; 3: 139 126 4
x49687:	mov bp, [bp + 2]	; 3: 139 110 2
x49690:	jmp ax	; 2: 255 224

print_ldiv$10:	; FunctionEnd print_ldiv

@13175$string_ldiv_t20quot2025li20rem2025li0A#:
x49692:	db "ldiv_t quot %li rem %li", 10, 0	; 25: 108 100 105 118 95 116 32 113 117 111 116 32 37 108 105 32 114 101 109 32 37 108 105 10 0

qsort:	; IntegralToIntegral £temporary3187 valueList
x49717:	mov ax, [bp + 6]	; 3: 139 70 6

qsort$1:	; Assign charList £temporary3187
x49720:	mov [bp + 14], ax	; 3: 137 70 14

qsort$2:	; BinarySubtract size listSize 1
x49723:	mov ax, [bp + 8]	; 3: 139 70 8
x49726:	dec ax	; 1: 72
x49727:	mov [bp + 16], ax	; 3: 137 70 16

qsort$3:	; SignedLessThanEqual 31 size 0
x49730:	cmp word [bp + 16], 0	; 4: 131 126 16 0
x49734:	jle qsort$31	; 4: 15 142 138 0

qsort$4:	; Assign update 0
x49738:	mov word [bp + 20], 0	; 5: 199 70 20 0 0

qsort$5:	; Assign index 0
x49743:	mov word [bp + 18], 0	; 5: 199 70 18 0 0

qsort$6:	; SignedGreaterThanEqual 28 index size
x49748:	mov ax, [bp + 16]	; 3: 139 70 16
x49751:	cmp [bp + 18], ax	; 3: 57 70 18
x49754:	jge qsort$28	; 2: 125 108

qsort$7:	; SignedMultiply £temporary3193 index valueSize
x49756:	mov ax, [bp + 18]	; 3: 139 70 18
x49759:	xor dx, dx	; 2: 49 210
x49761:	imul word [bp + 10]	; 3: 247 110 10

qsort$8:	; BinaryAdd valuePtr1 charList £temporary3193
x49764:	mov bx, [bp + 14]	; 3: 139 94 14
x49767:	add bx, ax	; 2: 1 195
x49769:	mov [bp + 22], bx	; 3: 137 94 22

qsort$9:	; BinaryAdd £temporary3195 index 1
x49772:	mov ax, [bp + 18]	; 3: 139 70 18
x49775:	inc ax	; 1: 64

qsort$10:	; SignedMultiply £temporary3196 £temporary3195 valueSize
x49776:	xor dx, dx	; 2: 49 210
x49778:	imul word [bp + 10]	; 3: 247 110 10

qsort$11:	; BinaryAdd valuePtr2 charList £temporary3196
x49781:	mov bx, [bp + 14]	; 3: 139 94 14
x49784:	add bx, ax	; 2: 1 195
x49786:	mov [bp + 24], bx	; 3: 137 94 24

qsort$12:	; CallHeader 26 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

qsort$13:	; Parameter 26 valuePtr1 6
x49789:	mov ax, [bp + 22]	; 3: 139 70 22
x49792:	mov [bp + 32], ax	; 3: 137 70 32

qsort$14:	; Parameter 26 valuePtr2 8
x49795:	mov ax, [bp + 24]	; 3: 139 70 24
x49798:	mov [bp + 34], ax	; 3: 137 70 34

qsort$15:	; Call 26 compare 0
x49801:	mov word [bp + 26], qsort$16	; 5: 199 70 26 153 194
x49806:	mov [bp + 28], bp	; 3: 137 110 28
x49809:	mov ax, [bp + 12]	; 3: 139 70 12
x49812:	add bp, 26	; 3: 131 197 26
x49815:	jmp ax	; 2: 255 224

qsort$16:	; PostCall 26

qsort$17:	; GetReturnValue £temporary3198

qsort$18:	; SignedLessThanEqual 26 £temporary3198 0
x49817:	cmp bx, 0	; 3: 131 251 0
x49820:	jle qsort$26	; 2: 126 37

qsort$19:	; CallHeader 26 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

qsort$20:	; Parameter 26 valuePtr1 6
x49822:	mov ax, [bp + 22]	; 3: 139 70 22
x49825:	mov [bp + 32], ax	; 3: 137 70 32

qsort$21:	; Parameter 26 valuePtr2 8
x49828:	mov ax, [bp + 24]	; 3: 139 70 24
x49831:	mov [bp + 34], ax	; 3: 137 70 34

qsort$22:	; Parameter 26 valueSize 10
x49834:	mov ax, [bp + 10]	; 3: 139 70 10
x49837:	mov [bp + 36], ax	; 3: 137 70 36

qsort$23:	; Call 26 memswap 0
x49840:	mov word [bp + 26], qsort$24	; 5: 199 70 26 190 194
x49845:	mov [bp + 28], bp	; 3: 137 110 28
x49848:	add bp, 26	; 3: 131 197 26
x49851:	nop	; 1: 144
x49852:	jmp @7290$memswap	; 2: 235 33

qsort$24:	; PostCall 26

qsort$25:	; Assign update 1
x49854:	mov word [bp + 20], 1	; 5: 199 70 20 1 0

qsort$26:	; Increment index
x49859:	inc word [bp + 18]	; 3: 255 70 18

qsort$27:	; Goto 6
x49862:	jmp qsort$6	; 2: 235 140

qsort$28:	; Equal 31 update 0
x49864:	cmp word [bp + 20], 0	; 4: 131 126 20 0
x49868:	je qsort$31	; 2: 116 6

qsort$29:	; Decrement size
x49870:	dec word [bp + 16]	; 3: 255 78 16

qsort$30:	; Goto 3
x49873:	jmp qsort$3	; 3: 233 110 255

qsort$31:	; Return 0
x49876:	mov ax, [bp]	; 3: 139 70 0
x49879:	mov di, [bp + 4]	; 3: 139 126 4
x49882:	mov bp, [bp + 2]	; 3: 139 110 2
x49885:	jmp ax	; 2: 255 224

qsort$32:	; FunctionEnd qsort

@7290$memswap:	; Assign index 0
x49887:	mov word [bp + 12], 0	; 5: 199 70 12 0 0

@7290$memswap$1:	; SignedGreaterThanEqual 15 index valueSize
x49892:	mov ax, [bp + 10]	; 3: 139 70 10
x49895:	cmp [bp + 12], ax	; 3: 57 70 12
x49898:	jge @7290$memswap$15	; 2: 125 43

@7290$memswap$2:	; BinaryAdd £temporary3180 value1 index
x49900:	mov si, [bp + 6]	; 3: 139 118 6
x49903:	add si, [bp + 12]	; 3: 3 118 12

@7290$memswap$3:	; Deref £temporary3179 -> £temporary3180 £temporary3180 0

@7290$memswap$4:	; Assign tempValue £temporary3179 -> £temporary3180
x49906:	mov al, [si]	; 2: 138 4
x49908:	mov [bp + 14], al	; 3: 136 70 14

@7290$memswap$5:	; BinaryAdd £temporary3182 value1 index
x49911:	mov si, [bp + 6]	; 3: 139 118 6
x49914:	add si, [bp + 12]	; 3: 3 118 12

@7290$memswap$6:	; Deref £temporary3181 -> £temporary3182 £temporary3182 0

@7290$memswap$7:	; BinaryAdd £temporary3184 value2 index
x49917:	mov di, [bp + 8]	; 3: 139 126 8
x49920:	add di, [bp + 12]	; 3: 3 126 12

@7290$memswap$8:	; Deref £temporary3183 -> £temporary3184 £temporary3184 0

@7290$memswap$9:	; Assign £temporary3181 -> £temporary3182 £temporary3183 -> £temporary3184
x49923:	mov al, [di]	; 2: 138 5
x49925:	mov [si], al	; 2: 136 4

@7290$memswap$10:	; BinaryAdd £temporary3186 value2 index
x49927:	mov si, [bp + 8]	; 3: 139 118 8
x49930:	add si, [bp + 12]	; 3: 3 118 12

@7290$memswap$11:	; Deref £temporary3185 -> £temporary3186 £temporary3186 0

@7290$memswap$12:	; Assign £temporary3185 -> £temporary3186 tempValue
x49933:	mov al, [bp + 14]	; 3: 138 70 14
x49936:	mov [si], al	; 2: 136 4

@7290$memswap$13:	; Increment index
x49938:	inc word [bp + 12]	; 3: 255 70 12

@7290$memswap$14:	; Goto 1
x49941:	jmp @7290$memswap$1	; 2: 235 205

@7290$memswap$15:	; Return 0
x49943:	mov ax, [bp]	; 3: 139 70 0
x49946:	mov di, [bp + 4]	; 3: 139 126 4
x49949:	mov bp, [bp + 2]	; 3: 139 110 2
x49952:	jmp ax	; 2: 255 224

@7290$memswap$16:	; FunctionEnd memswap

bsearch:	; Assign firstIndex 0
x49954:	mov word [bp + 16], 0	; 5: 199 70 16 0 0

bsearch$1:	; BinarySubtract lastIndex listSize 1
x49959:	mov ax, [bp + 10]	; 3: 139 70 10
x49962:	dec ax	; 1: 72
x49963:	mov [bp + 18], ax	; 3: 137 70 18

bsearch$2:	; NotEqual 5 listSize 0
x49966:	cmp word [bp + 10], 0	; 4: 131 126 10 0
x49970:	jne bsearch$5	; 2: 117 14

bsearch$3:	; SetReturnValue 0
x49972:	mov bx, 0	; 3: 187 0 0

bsearch$4:	; Return 0
x49975:	mov ax, [bp]	; 3: 139 70 0
x49978:	mov di, [bp + 4]	; 3: 139 126 4
x49981:	mov bp, [bp + 2]	; 3: 139 110 2
x49984:	jmp ax	; 2: 255 224

bsearch$5:	; IntegralToIntegral £temporary3123 valueList
x49986:	mov bx, [bp + 8]	; 3: 139 94 8

bsearch$6:	; SignedMultiply £temporary3124 firstIndex valueSize
x49989:	mov ax, [bp + 16]	; 3: 139 70 16
x49992:	xor dx, dx	; 2: 49 210
x49994:	imul word [bp + 12]	; 3: 247 110 12

bsearch$7:	; BinaryAdd firstValuePtr £temporary3123 £temporary3124
x49997:	add bx, ax	; 2: 1 195
x49999:	mov [bp + 20], bx	; 3: 137 94 20

bsearch$8:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

bsearch$9:	; Parameter 22 keyPtr 6
x50002:	mov ax, [bp + 6]	; 3: 139 70 6
x50005:	mov [bp + 28], ax	; 3: 137 70 28

bsearch$10:	; Parameter 22 firstValuePtr 8
x50008:	mov ax, [bp + 20]	; 3: 139 70 20
x50011:	mov [bp + 30], ax	; 3: 137 70 30

bsearch$11:	; Call 22 compare 0
x50014:	mov word [bp + 22], bsearch$12	; 5: 199 70 22 110 195
x50019:	mov [bp + 24], bp	; 3: 137 110 24
x50022:	mov ax, [bp + 14]	; 3: 139 70 14
x50025:	add bp, 22	; 3: 131 197 22
x50028:	jmp ax	; 2: 255 224

bsearch$12:	; PostCall 22

bsearch$13:	; GetReturnValue £temporary3126

bsearch$14:	; Assign firstCompare £temporary3126
x50030:	mov [bp + 22], bx	; 3: 137 94 22

bsearch$15:	; SignedGreaterThanEqual 18 firstCompare 0
x50033:	cmp word [bp + 22], 0	; 4: 131 126 22 0
x50037:	jge bsearch$18	; 2: 125 14

bsearch$16:	; SetReturnValue 0
x50039:	mov bx, 0	; 3: 187 0 0

bsearch$17:	; Return 0
x50042:	mov ax, [bp]	; 3: 139 70 0
x50045:	mov di, [bp + 4]	; 3: 139 126 4
x50048:	mov bp, [bp + 2]	; 3: 139 110 2
x50051:	jmp ax	; 2: 255 224

bsearch$18:	; NotEqual 21 firstCompare 0
x50053:	cmp word [bp + 22], 0	; 4: 131 126 22 0
x50057:	jne bsearch$21	; 2: 117 14

bsearch$19:	; SetReturnValue firstValuePtr
x50059:	mov bx, [bp + 20]	; 3: 139 94 20

bsearch$20:	; Return firstValuePtr
x50062:	mov ax, [bp]	; 3: 139 70 0
x50065:	mov di, [bp + 4]	; 3: 139 126 4
x50068:	mov bp, [bp + 2]	; 3: 139 110 2
x50071:	jmp ax	; 2: 255 224

bsearch$21:	; IntegralToIntegral £temporary3129 valueList
x50073:	mov bx, [bp + 8]	; 3: 139 94 8

bsearch$22:	; SignedMultiply £temporary3130 lastIndex valueSize
x50076:	mov ax, [bp + 18]	; 3: 139 70 18
x50079:	xor dx, dx	; 2: 49 210
x50081:	imul word [bp + 12]	; 3: 247 110 12

bsearch$23:	; BinaryAdd lastValuePtr £temporary3129 £temporary3130
x50084:	add bx, ax	; 2: 1 195
x50086:	mov [bp + 20], bx	; 3: 137 94 20

bsearch$24:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

bsearch$25:	; Parameter 22 keyPtr 6
x50089:	mov ax, [bp + 6]	; 3: 139 70 6
x50092:	mov [bp + 28], ax	; 3: 137 70 28

bsearch$26:	; Parameter 22 lastValuePtr 8
x50095:	mov ax, [bp + 20]	; 3: 139 70 20
x50098:	mov [bp + 30], ax	; 3: 137 70 30

bsearch$27:	; Call 22 compare 0
x50101:	mov word [bp + 22], bsearch$28	; 5: 199 70 22 197 195
x50106:	mov [bp + 24], bp	; 3: 137 110 24
x50109:	mov ax, [bp + 14]	; 3: 139 70 14
x50112:	add bp, 22	; 3: 131 197 22
x50115:	jmp ax	; 2: 255 224

bsearch$28:	; PostCall 22

bsearch$29:	; GetReturnValue £temporary3132

bsearch$30:	; Assign lastCompare £temporary3132
x50117:	mov [bp + 22], bx	; 3: 137 94 22

bsearch$31:	; SignedLessThanEqual 34 lastCompare 0
x50120:	cmp word [bp + 22], 0	; 4: 131 126 22 0
x50124:	jle bsearch$34	; 2: 126 14

bsearch$32:	; SetReturnValue 0
x50126:	mov bx, 0	; 3: 187 0 0

bsearch$33:	; Return 0
x50129:	mov ax, [bp]	; 3: 139 70 0
x50132:	mov di, [bp + 4]	; 3: 139 126 4
x50135:	mov bp, [bp + 2]	; 3: 139 110 2
x50138:	jmp ax	; 2: 255 224

bsearch$34:	; NotEqual 37 lastCompare 0
x50140:	cmp word [bp + 22], 0	; 4: 131 126 22 0
x50144:	jne bsearch$37	; 2: 117 14

bsearch$35:	; SetReturnValue lastValuePtr
x50146:	mov bx, [bp + 20]	; 3: 139 94 20

bsearch$36:	; Return lastValuePtr
x50149:	mov ax, [bp]	; 3: 139 70 0
x50152:	mov di, [bp + 4]	; 3: 139 126 4
x50155:	mov bp, [bp + 2]	; 3: 139 110 2
x50158:	jmp ax	; 2: 255 224

bsearch$37:	; BinaryAdd £temporary3135 firstIndex lastIndex
x50160:	mov ax, [bp + 16]	; 3: 139 70 16
x50163:	add ax, [bp + 18]	; 3: 3 70 18

bsearch$38:	; SignedDivide middleIndex £temporary3135 2
x50166:	xor dx, dx	; 2: 49 210
x50168:	idiv word [@7190$int2$2#]	; 4: 247 62 90 196
x50172:	mov [bp + 20], ax	; 3: 137 70 20

bsearch$39:	; IntegralToIntegral £temporary3137 valueList
x50175:	mov bx, [bp + 8]	; 3: 139 94 8

bsearch$40:	; SignedMultiply £temporary3138 middleIndex valueSize
x50178:	mov ax, [bp + 20]	; 3: 139 70 20
x50181:	xor dx, dx	; 2: 49 210
x50183:	imul word [bp + 12]	; 3: 247 110 12

bsearch$41:	; BinaryAdd middleValuePtr £temporary3137 £temporary3138
x50186:	add bx, ax	; 2: 1 195
x50188:	mov [bp + 22], bx	; 3: 137 94 22

bsearch$42:	; CallHeader 24 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

bsearch$43:	; Parameter 24 keyPtr 6
x50191:	mov ax, [bp + 6]	; 3: 139 70 6
x50194:	mov [bp + 30], ax	; 3: 137 70 30

bsearch$44:	; Parameter 24 middleValuePtr 8
x50197:	mov ax, [bp + 22]	; 3: 139 70 22
x50200:	mov [bp + 32], ax	; 3: 137 70 32

bsearch$45:	; Call 24 compare 0
x50203:	mov word [bp + 24], bsearch$46	; 5: 199 70 24 43 196
x50208:	mov [bp + 26], bp	; 3: 137 110 26
x50211:	mov ax, [bp + 14]	; 3: 139 70 14
x50214:	add bp, 24	; 3: 131 197 24
x50217:	jmp ax	; 2: 255 224

bsearch$46:	; PostCall 24

bsearch$47:	; GetReturnValue £temporary3140

bsearch$48:	; Assign middleCompare £temporary3140
x50219:	mov [bp + 24], bx	; 3: 137 94 24

bsearch$49:	; SignedGreaterThanEqual 52 middleCompare 0
x50222:	cmp word [bp + 24], 0	; 4: 131 126 24 0
x50226:	jge bsearch$52	; 2: 125 9

bsearch$50:	; Assign lastIndex middleIndex
x50228:	mov ax, [bp + 20]	; 3: 139 70 20
x50231:	mov [bp + 18], ax	; 3: 137 70 18

bsearch$51:	; Goto 5
x50234:	jmp bsearch$5	; 3: 233 5 255

bsearch$52:	; SignedLessThanEqual 55 middleCompare 0
x50237:	cmp word [bp + 24], 0	; 4: 131 126 24 0
x50241:	jle bsearch$55	; 2: 126 9

bsearch$53:	; Assign firstIndex middleIndex
x50243:	mov ax, [bp + 20]	; 3: 139 70 20
x50246:	mov [bp + 16], ax	; 3: 137 70 16

bsearch$54:	; Goto 5
x50249:	jmp bsearch$5	; 3: 233 246 254

bsearch$55:	; SetReturnValue middleValuePtr
x50252:	mov bx, [bp + 22]	; 3: 139 94 22

bsearch$56:	; Return middleValuePtr
x50255:	mov ax, [bp]	; 3: 139 70 0
x50258:	mov di, [bp + 4]	; 3: 139 126 4
x50261:	mov bp, [bp + 2]	; 3: 139 110 2
x50264:	jmp ax	; 2: 255 224

bsearch$57:	; FunctionEnd bsearch

@7190$int2$2#:
x50266:	dw 2	; 2: 2 0

strtol_test:	; Assign base 0
x50268:	mov word [bp + 6], 0	; 5: 199 70 6 0 0

strtol_test$1:	; Assign text[0] 32
x50273:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtol_test$2:	; Assign text[1] 32
x50277:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtol_test$3:	; Assign text[2] 32
x50281:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtol_test$4:	; Assign text[3] 43
x50285:	mov byte [bp + 11], 43	; 4: 198 70 11 43

strtol_test$5:	; Assign text[4] 49
x50289:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtol_test$6:	; Assign text[5] 50
x50293:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtol_test$7:	; Assign text[6] 51
x50297:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtol_test$8:	; Assign text[7] 97
x50301:	mov byte [bp + 15], 97	; 4: 198 70 15 97

strtol_test$9:	; Assign text[8] 98
x50305:	mov byte [bp + 16], 98	; 4: 198 70 16 98

strtol_test$10:	; Assign text[9] 99
x50309:	mov byte [bp + 17], 99	; 4: 198 70 17 99

strtol_test$11:	; Assign text[10] 0
x50313:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtol_test$12:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$13:	; Parameter 21 text 6
x50317:	mov [bp + 27], bp	; 3: 137 110 27
x50320:	add word [bp + 27], 8	; 4: 131 70 27 8

strtol_test$14:	; address £temporary2282 pointer
x50324:	mov si, bp	; 2: 137 238
x50326:	add si, 19	; 3: 131 198 19

strtol_test$15:	; Parameter 21 £temporary2282 8
x50329:	mov [bp + 29], si	; 3: 137 118 29

strtol_test$16:	; Parameter 21 base 10
x50332:	mov ax, [bp + 6]	; 3: 139 70 6
x50335:	mov [bp + 31], ax	; 3: 137 70 31

strtol_test$17:	; Call 21 strtol 0
x50338:	mov word [bp + 21], strtol_test$18	; 5: 199 70 21 176 196
x50343:	mov [bp + 23], bp	; 3: 137 110 23
x50346:	add bp, 21	; 3: 131 197 21
x50349:	jmp strtol	; 3: 233 49 11

strtol_test$18:	; PostCall 21

strtol_test$19:	; GetReturnValue £temporary2283

strtol_test$20:	; Assign value £temporary2283
x50352:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtol_test$21:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$22:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x50356:	mov word [bp + 31], @5201$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 85 206

strtol_test$23:	; Parameter 25 text 8
x50361:	mov [bp + 33], bp	; 3: 137 110 33
x50364:	add word [bp + 33], 8	; 4: 131 70 33 8

strtol_test$24:	; Parameter 25 value 10
x50368:	mov eax, [bp + 21]	; 4: 102 139 70 21
x50372:	mov [bp + 35], eax	; 4: 102 137 70 35

strtol_test$25:	; Parameter 25 pointer 14
x50376:	mov ax, [bp + 19]	; 3: 139 70 19
x50379:	mov [bp + 39], ax	; 3: 137 70 39

strtol_test$26:	; Parameter 25 base 16
x50382:	mov ax, [bp + 6]	; 3: 139 70 6
x50385:	mov [bp + 41], ax	; 3: 137 70 41

strtol_test$27:	; Call 25 printf 0
x50388:	mov word [bp + 25], strtol_test$28	; 5: 199 70 25 231 196
x50393:	mov [bp + 27], bp	; 3: 137 110 27
x50396:	add bp, 25	; 3: 131 197 25
x50399:	mov di, bp	; 2: 137 239
x50401:	add di, 10	; 3: 131 199 10
x50404:	jmp printf	; 3: 233 29 72

strtol_test$28:	; PostCall 25

strtol_test$29:	; Assign base 0
x50407:	mov word [bp + 6], 0	; 5: 199 70 6 0 0

strtol_test$30:	; Assign text[0] 32
x50412:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtol_test$31:	; Assign text[1] 32
x50416:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtol_test$32:	; Assign text[2] 32
x50420:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtol_test$33:	; Assign text[3] 43
x50424:	mov byte [bp + 11], 43	; 4: 198 70 11 43

strtol_test$34:	; Assign text[4] 48
x50428:	mov byte [bp + 12], 48	; 4: 198 70 12 48

strtol_test$35:	; Assign text[5] 49
x50432:	mov byte [bp + 13], 49	; 4: 198 70 13 49

strtol_test$36:	; Assign text[6] 50
x50436:	mov byte [bp + 14], 50	; 4: 198 70 14 50

strtol_test$37:	; Assign text[7] 51
x50440:	mov byte [bp + 15], 51	; 4: 198 70 15 51

strtol_test$38:	; Assign text[8] 97
x50444:	mov byte [bp + 16], 97	; 4: 198 70 16 97

strtol_test$39:	; Assign text[9] 98
x50448:	mov byte [bp + 17], 98	; 4: 198 70 17 98

strtol_test$40:	; Assign text[10] 99
x50452:	mov byte [bp + 18], 99	; 4: 198 70 18 99

strtol_test$41:	; Assign text[11] 0
x50456:	mov byte [bp + 19], 0	; 4: 198 70 19 0

strtol_test$42:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$43:	; Parameter 22 text 6
x50460:	mov [bp + 28], bp	; 3: 137 110 28
x50463:	add word [bp + 28], 8	; 4: 131 70 28 8

strtol_test$44:	; address £temporary2297 pointer
x50467:	mov si, bp	; 2: 137 238
x50469:	add si, 20	; 3: 131 198 20

strtol_test$45:	; Parameter 22 £temporary2297 8
x50472:	mov [bp + 30], si	; 3: 137 118 30

strtol_test$46:	; Parameter 22 base 10
x50475:	mov ax, [bp + 6]	; 3: 139 70 6
x50478:	mov [bp + 32], ax	; 3: 137 70 32

strtol_test$47:	; Call 22 strtol 0
x50481:	mov word [bp + 22], strtol_test$48	; 5: 199 70 22 63 197
x50486:	mov [bp + 24], bp	; 3: 137 110 24
x50489:	add bp, 22	; 3: 131 197 22
x50492:	jmp strtol	; 3: 233 162 10

strtol_test$48:	; PostCall 22

strtol_test$49:	; GetReturnValue £temporary2298

strtol_test$50:	; Assign value £temporary2298
x50495:	mov [bp + 22], ebx	; 4: 102 137 94 22

strtol_test$51:	; CallHeader 26 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$52:	; Parameter 26 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x50499:	mov word [bp + 32], @5248$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 32 107 206

strtol_test$53:	; Parameter 26 text 8
x50504:	mov [bp + 34], bp	; 3: 137 110 34
x50507:	add word [bp + 34], 8	; 4: 131 70 34 8

strtol_test$54:	; Parameter 26 value 10
x50511:	mov eax, [bp + 22]	; 4: 102 139 70 22
x50515:	mov [bp + 36], eax	; 4: 102 137 70 36

strtol_test$55:	; Parameter 26 pointer 14
x50519:	mov ax, [bp + 20]	; 3: 139 70 20
x50522:	mov [bp + 40], ax	; 3: 137 70 40

strtol_test$56:	; Parameter 26 base 16
x50525:	mov ax, [bp + 6]	; 3: 139 70 6
x50528:	mov [bp + 42], ax	; 3: 137 70 42

strtol_test$57:	; Call 26 printf 0
x50531:	mov word [bp + 26], strtol_test$58	; 5: 199 70 26 118 197
x50536:	mov [bp + 28], bp	; 3: 137 110 28
x50539:	add bp, 26	; 3: 131 197 26
x50542:	mov di, bp	; 2: 137 239
x50544:	add di, 10	; 3: 131 199 10
x50547:	jmp printf	; 3: 233 142 71

strtol_test$58:	; PostCall 26

strtol_test$59:	; Assign base 0
x50550:	mov word [bp + 6], 0	; 5: 199 70 6 0 0

strtol_test$60:	; Assign text[0] 32
x50555:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtol_test$61:	; Assign text[1] 32
x50559:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtol_test$62:	; Assign text[2] 32
x50563:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtol_test$63:	; Assign text[3] 43
x50567:	mov byte [bp + 11], 43	; 4: 198 70 11 43

strtol_test$64:	; Assign text[4] 48
x50571:	mov byte [bp + 12], 48	; 4: 198 70 12 48

strtol_test$65:	; Assign text[5] 120
x50575:	mov byte [bp + 13], 120	; 4: 198 70 13 120

strtol_test$66:	; Assign text[6] 49
x50579:	mov byte [bp + 14], 49	; 4: 198 70 14 49

strtol_test$67:	; Assign text[7] 50
x50583:	mov byte [bp + 15], 50	; 4: 198 70 15 50

strtol_test$68:	; Assign text[8] 51
x50587:	mov byte [bp + 16], 51	; 4: 198 70 16 51

strtol_test$69:	; Assign text[9] 65
x50591:	mov byte [bp + 17], 65	; 4: 198 70 17 65

strtol_test$70:	; Assign text[10] 66
x50595:	mov byte [bp + 18], 66	; 4: 198 70 18 66

strtol_test$71:	; Assign text[11] 67
x50599:	mov byte [bp + 19], 67	; 4: 198 70 19 67

strtol_test$72:	; Assign text[12] 0
x50603:	mov byte [bp + 20], 0	; 4: 198 70 20 0

strtol_test$73:	; CallHeader 23 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$74:	; Parameter 23 text 6
x50607:	mov [bp + 29], bp	; 3: 137 110 29
x50610:	add word [bp + 29], 8	; 4: 131 70 29 8

strtol_test$75:	; address £temporary2313 pointer
x50614:	mov si, bp	; 2: 137 238
x50616:	add si, 21	; 3: 131 198 21

strtol_test$76:	; Parameter 23 £temporary2313 8
x50619:	mov [bp + 31], si	; 3: 137 118 31

strtol_test$77:	; Parameter 23 base 10
x50622:	mov ax, [bp + 6]	; 3: 139 70 6
x50625:	mov [bp + 33], ax	; 3: 137 70 33

strtol_test$78:	; Call 23 strtol 0
x50628:	mov word [bp + 23], strtol_test$79	; 5: 199 70 23 210 197
x50633:	mov [bp + 25], bp	; 3: 137 110 25
x50636:	add bp, 23	; 3: 131 197 23
x50639:	jmp strtol	; 3: 233 15 10

strtol_test$79:	; PostCall 23

strtol_test$80:	; GetReturnValue £temporary2314

strtol_test$81:	; Assign value £temporary2314
x50642:	mov [bp + 23], ebx	; 4: 102 137 94 23

strtol_test$82:	; CallHeader 27 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$83:	; Parameter 27 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x50646:	mov word [bp + 33], @5298$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 33 129 206

strtol_test$84:	; Parameter 27 text 8
x50651:	mov [bp + 35], bp	; 3: 137 110 35
x50654:	add word [bp + 35], 8	; 4: 131 70 35 8

strtol_test$85:	; Parameter 27 value 10
x50658:	mov eax, [bp + 23]	; 4: 102 139 70 23
x50662:	mov [bp + 37], eax	; 4: 102 137 70 37

strtol_test$86:	; Parameter 27 pointer 14
x50666:	mov ax, [bp + 21]	; 3: 139 70 21
x50669:	mov [bp + 41], ax	; 3: 137 70 41

strtol_test$87:	; Parameter 27 base 16
x50672:	mov ax, [bp + 6]	; 3: 139 70 6
x50675:	mov [bp + 43], ax	; 3: 137 70 43

strtol_test$88:	; Call 27 printf 0
x50678:	mov word [bp + 27], strtol_test$89	; 5: 199 70 27 9 198
x50683:	mov [bp + 29], bp	; 3: 137 110 29
x50686:	add bp, 27	; 3: 131 197 27
x50689:	mov di, bp	; 2: 137 239
x50691:	add di, 10	; 3: 131 199 10
x50694:	jmp printf	; 3: 233 251 70

strtol_test$89:	; PostCall 27

strtol_test$90:	; Assign base 0
x50697:	mov word [bp + 6], 0	; 5: 199 70 6 0 0

strtol_test$91:	; Assign text[0] 32
x50702:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtol_test$92:	; Assign text[1] 32
x50706:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtol_test$93:	; Assign text[2] 32
x50710:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtol_test$94:	; Assign text[3] 43
x50714:	mov byte [bp + 11], 43	; 4: 198 70 11 43

strtol_test$95:	; Assign text[4] 48
x50718:	mov byte [bp + 12], 48	; 4: 198 70 12 48

strtol_test$96:	; Assign text[5] 88
x50722:	mov byte [bp + 13], 88	; 4: 198 70 13 88

strtol_test$97:	; Assign text[6] 49
x50726:	mov byte [bp + 14], 49	; 4: 198 70 14 49

strtol_test$98:	; Assign text[7] 50
x50730:	mov byte [bp + 15], 50	; 4: 198 70 15 50

strtol_test$99:	; Assign text[8] 51
x50734:	mov byte [bp + 16], 51	; 4: 198 70 16 51

strtol_test$100:	; Assign text[9] 97
x50738:	mov byte [bp + 17], 97	; 4: 198 70 17 97

strtol_test$101:	; Assign text[10] 98
x50742:	mov byte [bp + 18], 98	; 4: 198 70 18 98

strtol_test$102:	; Assign text[11] 99
x50746:	mov byte [bp + 19], 99	; 4: 198 70 19 99

strtol_test$103:	; Assign text[12] 0
x50750:	mov byte [bp + 20], 0	; 4: 198 70 20 0

strtol_test$104:	; CallHeader 23 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$105:	; Parameter 23 text 6
x50754:	mov [bp + 29], bp	; 3: 137 110 29
x50757:	add word [bp + 29], 8	; 4: 131 70 29 8

strtol_test$106:	; address £temporary2329 pointer
x50761:	mov si, bp	; 2: 137 238
x50763:	add si, 21	; 3: 131 198 21

strtol_test$107:	; Parameter 23 £temporary2329 8
x50766:	mov [bp + 31], si	; 3: 137 118 31

strtol_test$108:	; Parameter 23 base 10
x50769:	mov ax, [bp + 6]	; 3: 139 70 6
x50772:	mov [bp + 33], ax	; 3: 137 70 33

strtol_test$109:	; Call 23 strtol 0
x50775:	mov word [bp + 23], strtol_test$110	; 5: 199 70 23 101 198
x50780:	mov [bp + 25], bp	; 3: 137 110 25
x50783:	add bp, 23	; 3: 131 197 23
x50786:	jmp strtol	; 3: 233 124 9

strtol_test$110:	; PostCall 23

strtol_test$111:	; GetReturnValue £temporary2330

strtol_test$112:	; Assign value £temporary2330
x50789:	mov [bp + 23], ebx	; 4: 102 137 94 23

strtol_test$113:	; CallHeader 27 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$114:	; Parameter 27 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x50793:	mov word [bp + 33], @5348$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 33 151 206

strtol_test$115:	; Parameter 27 text 8
x50798:	mov [bp + 35], bp	; 3: 137 110 35
x50801:	add word [bp + 35], 8	; 4: 131 70 35 8

strtol_test$116:	; Parameter 27 value 10
x50805:	mov eax, [bp + 23]	; 4: 102 139 70 23
x50809:	mov [bp + 37], eax	; 4: 102 137 70 37

strtol_test$117:	; Parameter 27 pointer 14
x50813:	mov ax, [bp + 21]	; 3: 139 70 21
x50816:	mov [bp + 41], ax	; 3: 137 70 41

strtol_test$118:	; Parameter 27 base 16
x50819:	mov ax, [bp + 6]	; 3: 139 70 6
x50822:	mov [bp + 43], ax	; 3: 137 70 43

strtol_test$119:	; Call 27 printf 0
x50825:	mov word [bp + 27], strtol_test$120	; 5: 199 70 27 156 198
x50830:	mov [bp + 29], bp	; 3: 137 110 29
x50833:	add bp, 27	; 3: 131 197 27
x50836:	mov di, bp	; 2: 137 239
x50838:	add di, 10	; 3: 131 199 10
x50841:	jmp printf	; 3: 233 104 70

strtol_test$120:	; PostCall 27

strtol_test$121:	; Assign base 0
x50844:	mov word [bp + 6], 0	; 5: 199 70 6 0 0

strtol_test$122:	; Assign text[0] 32
x50849:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtol_test$123:	; Assign text[1] 32
x50853:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtol_test$124:	; Assign text[2] 32
x50857:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtol_test$125:	; Assign text[3] 45
x50861:	mov byte [bp + 11], 45	; 4: 198 70 11 45

strtol_test$126:	; Assign text[4] 49
x50865:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtol_test$127:	; Assign text[5] 50
x50869:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtol_test$128:	; Assign text[6] 51
x50873:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtol_test$129:	; Assign text[7] 97
x50877:	mov byte [bp + 15], 97	; 4: 198 70 15 97

strtol_test$130:	; Assign text[8] 98
x50881:	mov byte [bp + 16], 98	; 4: 198 70 16 98

strtol_test$131:	; Assign text[9] 99
x50885:	mov byte [bp + 17], 99	; 4: 198 70 17 99

strtol_test$132:	; Assign text[10] 0
x50889:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtol_test$133:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$134:	; Parameter 21 text 6
x50893:	mov [bp + 27], bp	; 3: 137 110 27
x50896:	add word [bp + 27], 8	; 4: 131 70 27 8

strtol_test$135:	; address £temporary2343 pointer
x50900:	mov si, bp	; 2: 137 238
x50902:	add si, 19	; 3: 131 198 19

strtol_test$136:	; Parameter 21 £temporary2343 8
x50905:	mov [bp + 29], si	; 3: 137 118 29

strtol_test$137:	; Parameter 21 base 10
x50908:	mov ax, [bp + 6]	; 3: 139 70 6
x50911:	mov [bp + 31], ax	; 3: 137 70 31

strtol_test$138:	; Call 21 strtol 0
x50914:	mov word [bp + 21], strtol_test$139	; 5: 199 70 21 240 198
x50919:	mov [bp + 23], bp	; 3: 137 110 23
x50922:	add bp, 21	; 3: 131 197 21
x50925:	jmp strtol	; 3: 233 241 8

strtol_test$139:	; PostCall 21

strtol_test$140:	; GetReturnValue £temporary2344

strtol_test$141:	; Assign value £temporary2344
x50928:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtol_test$142:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$143:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x50932:	mov word [bp + 31], @5392$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 173 206

strtol_test$144:	; Parameter 25 text 8
x50937:	mov [bp + 33], bp	; 3: 137 110 33
x50940:	add word [bp + 33], 8	; 4: 131 70 33 8

strtol_test$145:	; Parameter 25 value 10
x50944:	mov eax, [bp + 21]	; 4: 102 139 70 21
x50948:	mov [bp + 35], eax	; 4: 102 137 70 35

strtol_test$146:	; Parameter 25 pointer 14
x50952:	mov ax, [bp + 19]	; 3: 139 70 19
x50955:	mov [bp + 39], ax	; 3: 137 70 39

strtol_test$147:	; Parameter 25 base 16
x50958:	mov ax, [bp + 6]	; 3: 139 70 6
x50961:	mov [bp + 41], ax	; 3: 137 70 41

strtol_test$148:	; Call 25 printf 0
x50964:	mov word [bp + 25], strtol_test$149	; 5: 199 70 25 39 199
x50969:	mov [bp + 27], bp	; 3: 137 110 27
x50972:	add bp, 25	; 3: 131 197 25
x50975:	mov di, bp	; 2: 137 239
x50977:	add di, 10	; 3: 131 199 10
x50980:	jmp printf	; 3: 233 221 69

strtol_test$149:	; PostCall 25

strtol_test$150:	; Assign base 0
x50983:	mov word [bp + 6], 0	; 5: 199 70 6 0 0

strtol_test$151:	; Assign text[0] 32
x50988:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtol_test$152:	; Assign text[1] 32
x50992:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtol_test$153:	; Assign text[2] 32
x50996:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtol_test$154:	; Assign text[3] 45
x51000:	mov byte [bp + 11], 45	; 4: 198 70 11 45

strtol_test$155:	; Assign text[4] 48
x51004:	mov byte [bp + 12], 48	; 4: 198 70 12 48

strtol_test$156:	; Assign text[5] 49
x51008:	mov byte [bp + 13], 49	; 4: 198 70 13 49

strtol_test$157:	; Assign text[6] 50
x51012:	mov byte [bp + 14], 50	; 4: 198 70 14 50

strtol_test$158:	; Assign text[7] 51
x51016:	mov byte [bp + 15], 51	; 4: 198 70 15 51

strtol_test$159:	; Assign text[8] 97
x51020:	mov byte [bp + 16], 97	; 4: 198 70 16 97

strtol_test$160:	; Assign text[9] 98
x51024:	mov byte [bp + 17], 98	; 4: 198 70 17 98

strtol_test$161:	; Assign text[10] 99
x51028:	mov byte [bp + 18], 99	; 4: 198 70 18 99

strtol_test$162:	; Assign text[11] 0
x51032:	mov byte [bp + 19], 0	; 4: 198 70 19 0

strtol_test$163:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$164:	; Parameter 22 text 6
x51036:	mov [bp + 28], bp	; 3: 137 110 28
x51039:	add word [bp + 28], 8	; 4: 131 70 28 8

strtol_test$165:	; address £temporary2358 pointer
x51043:	mov si, bp	; 2: 137 238
x51045:	add si, 20	; 3: 131 198 20

strtol_test$166:	; Parameter 22 £temporary2358 8
x51048:	mov [bp + 30], si	; 3: 137 118 30

strtol_test$167:	; Parameter 22 base 10
x51051:	mov ax, [bp + 6]	; 3: 139 70 6
x51054:	mov [bp + 32], ax	; 3: 137 70 32

strtol_test$168:	; Call 22 strtol 0
x51057:	mov word [bp + 22], strtol_test$169	; 5: 199 70 22 127 199
x51062:	mov [bp + 24], bp	; 3: 137 110 24
x51065:	add bp, 22	; 3: 131 197 22
x51068:	jmp strtol	; 3: 233 98 8

strtol_test$169:	; PostCall 22

strtol_test$170:	; GetReturnValue £temporary2359

strtol_test$171:	; Assign value £temporary2359
x51071:	mov [bp + 22], ebx	; 4: 102 137 94 22

strtol_test$172:	; CallHeader 26 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$173:	; Parameter 26 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x51075:	mov word [bp + 32], @5439$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 32 195 206

strtol_test$174:	; Parameter 26 text 8
x51080:	mov [bp + 34], bp	; 3: 137 110 34
x51083:	add word [bp + 34], 8	; 4: 131 70 34 8

strtol_test$175:	; Parameter 26 value 10
x51087:	mov eax, [bp + 22]	; 4: 102 139 70 22
x51091:	mov [bp + 36], eax	; 4: 102 137 70 36

strtol_test$176:	; Parameter 26 pointer 14
x51095:	mov ax, [bp + 20]	; 3: 139 70 20
x51098:	mov [bp + 40], ax	; 3: 137 70 40

strtol_test$177:	; Parameter 26 base 16
x51101:	mov ax, [bp + 6]	; 3: 139 70 6
x51104:	mov [bp + 42], ax	; 3: 137 70 42

strtol_test$178:	; Call 26 printf 0
x51107:	mov word [bp + 26], strtol_test$179	; 5: 199 70 26 182 199
x51112:	mov [bp + 28], bp	; 3: 137 110 28
x51115:	add bp, 26	; 3: 131 197 26
x51118:	mov di, bp	; 2: 137 239
x51120:	add di, 10	; 3: 131 199 10
x51123:	jmp printf	; 3: 233 78 69

strtol_test$179:	; PostCall 26

strtol_test$180:	; Assign base 0
x51126:	mov word [bp + 6], 0	; 5: 199 70 6 0 0

strtol_test$181:	; Assign text[0] 32
x51131:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtol_test$182:	; Assign text[1] 32
x51135:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtol_test$183:	; Assign text[2] 32
x51139:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtol_test$184:	; Assign text[3] 45
x51143:	mov byte [bp + 11], 45	; 4: 198 70 11 45

strtol_test$185:	; Assign text[4] 48
x51147:	mov byte [bp + 12], 48	; 4: 198 70 12 48

strtol_test$186:	; Assign text[5] 120
x51151:	mov byte [bp + 13], 120	; 4: 198 70 13 120

strtol_test$187:	; Assign text[6] 49
x51155:	mov byte [bp + 14], 49	; 4: 198 70 14 49

strtol_test$188:	; Assign text[7] 50
x51159:	mov byte [bp + 15], 50	; 4: 198 70 15 50

strtol_test$189:	; Assign text[8] 51
x51163:	mov byte [bp + 16], 51	; 4: 198 70 16 51

strtol_test$190:	; Assign text[9] 65
x51167:	mov byte [bp + 17], 65	; 4: 198 70 17 65

strtol_test$191:	; Assign text[10] 66
x51171:	mov byte [bp + 18], 66	; 4: 198 70 18 66

strtol_test$192:	; Assign text[11] 67
x51175:	mov byte [bp + 19], 67	; 4: 198 70 19 67

strtol_test$193:	; Assign text[12] 0
x51179:	mov byte [bp + 20], 0	; 4: 198 70 20 0

strtol_test$194:	; CallHeader 23 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$195:	; Parameter 23 text 6
x51183:	mov [bp + 29], bp	; 3: 137 110 29
x51186:	add word [bp + 29], 8	; 4: 131 70 29 8

strtol_test$196:	; address £temporary2374 pointer
x51190:	mov si, bp	; 2: 137 238
x51192:	add si, 21	; 3: 131 198 21

strtol_test$197:	; Parameter 23 £temporary2374 8
x51195:	mov [bp + 31], si	; 3: 137 118 31

strtol_test$198:	; Parameter 23 base 10
x51198:	mov ax, [bp + 6]	; 3: 139 70 6
x51201:	mov [bp + 33], ax	; 3: 137 70 33

strtol_test$199:	; Call 23 strtol 0
x51204:	mov word [bp + 23], strtol_test$200	; 5: 199 70 23 18 200
x51209:	mov [bp + 25], bp	; 3: 137 110 25
x51212:	add bp, 23	; 3: 131 197 23
x51215:	jmp strtol	; 3: 233 207 7

strtol_test$200:	; PostCall 23

strtol_test$201:	; GetReturnValue £temporary2375

strtol_test$202:	; Assign value £temporary2375
x51218:	mov [bp + 23], ebx	; 4: 102 137 94 23

strtol_test$203:	; CallHeader 27 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$204:	; Parameter 27 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x51222:	mov word [bp + 33], @5489$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 33 217 206

strtol_test$205:	; Parameter 27 text 8
x51227:	mov [bp + 35], bp	; 3: 137 110 35
x51230:	add word [bp + 35], 8	; 4: 131 70 35 8

strtol_test$206:	; Parameter 27 value 10
x51234:	mov eax, [bp + 23]	; 4: 102 139 70 23
x51238:	mov [bp + 37], eax	; 4: 102 137 70 37

strtol_test$207:	; Parameter 27 pointer 14
x51242:	mov ax, [bp + 21]	; 3: 139 70 21
x51245:	mov [bp + 41], ax	; 3: 137 70 41

strtol_test$208:	; Parameter 27 base 16
x51248:	mov ax, [bp + 6]	; 3: 139 70 6
x51251:	mov [bp + 43], ax	; 3: 137 70 43

strtol_test$209:	; Call 27 printf 0
x51254:	mov word [bp + 27], strtol_test$210	; 5: 199 70 27 73 200
x51259:	mov [bp + 29], bp	; 3: 137 110 29
x51262:	add bp, 27	; 3: 131 197 27
x51265:	mov di, bp	; 2: 137 239
x51267:	add di, 10	; 3: 131 199 10
x51270:	jmp printf	; 3: 233 187 68

strtol_test$210:	; PostCall 27

strtol_test$211:	; Assign base 0
x51273:	mov word [bp + 6], 0	; 5: 199 70 6 0 0

strtol_test$212:	; Assign text[0] 32
x51278:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtol_test$213:	; Assign text[1] 32
x51282:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtol_test$214:	; Assign text[2] 32
x51286:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtol_test$215:	; Assign text[3] 45
x51290:	mov byte [bp + 11], 45	; 4: 198 70 11 45

strtol_test$216:	; Assign text[4] 48
x51294:	mov byte [bp + 12], 48	; 4: 198 70 12 48

strtol_test$217:	; Assign text[5] 88
x51298:	mov byte [bp + 13], 88	; 4: 198 70 13 88

strtol_test$218:	; Assign text[6] 49
x51302:	mov byte [bp + 14], 49	; 4: 198 70 14 49

strtol_test$219:	; Assign text[7] 50
x51306:	mov byte [bp + 15], 50	; 4: 198 70 15 50

strtol_test$220:	; Assign text[8] 51
x51310:	mov byte [bp + 16], 51	; 4: 198 70 16 51

strtol_test$221:	; Assign text[9] 97
x51314:	mov byte [bp + 17], 97	; 4: 198 70 17 97

strtol_test$222:	; Assign text[10] 98
x51318:	mov byte [bp + 18], 98	; 4: 198 70 18 98

strtol_test$223:	; Assign text[11] 99
x51322:	mov byte [bp + 19], 99	; 4: 198 70 19 99

strtol_test$224:	; Assign text[12] 0
x51326:	mov byte [bp + 20], 0	; 4: 198 70 20 0

strtol_test$225:	; CallHeader 23 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$226:	; Parameter 23 text 6
x51330:	mov [bp + 29], bp	; 3: 137 110 29
x51333:	add word [bp + 29], 8	; 4: 131 70 29 8

strtol_test$227:	; address £temporary2390 pointer
x51337:	mov si, bp	; 2: 137 238
x51339:	add si, 21	; 3: 131 198 21

strtol_test$228:	; Parameter 23 £temporary2390 8
x51342:	mov [bp + 31], si	; 3: 137 118 31

strtol_test$229:	; Parameter 23 base 10
x51345:	mov ax, [bp + 6]	; 3: 139 70 6
x51348:	mov [bp + 33], ax	; 3: 137 70 33

strtol_test$230:	; Call 23 strtol 0
x51351:	mov word [bp + 23], strtol_test$231	; 5: 199 70 23 165 200
x51356:	mov [bp + 25], bp	; 3: 137 110 25
x51359:	add bp, 23	; 3: 131 197 23
x51362:	jmp strtol	; 3: 233 60 7

strtol_test$231:	; PostCall 23

strtol_test$232:	; GetReturnValue £temporary2391

strtol_test$233:	; Assign value £temporary2391
x51365:	mov [bp + 23], ebx	; 4: 102 137 94 23

strtol_test$234:	; CallHeader 27 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$235:	; Parameter 27 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x51369:	mov word [bp + 33], @5539$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 33 239 206

strtol_test$236:	; Parameter 27 text 8
x51374:	mov [bp + 35], bp	; 3: 137 110 35
x51377:	add word [bp + 35], 8	; 4: 131 70 35 8

strtol_test$237:	; Parameter 27 value 10
x51381:	mov eax, [bp + 23]	; 4: 102 139 70 23
x51385:	mov [bp + 37], eax	; 4: 102 137 70 37

strtol_test$238:	; Parameter 27 pointer 14
x51389:	mov ax, [bp + 21]	; 3: 139 70 21
x51392:	mov [bp + 41], ax	; 3: 137 70 41

strtol_test$239:	; Parameter 27 base 16
x51395:	mov ax, [bp + 6]	; 3: 139 70 6
x51398:	mov [bp + 43], ax	; 3: 137 70 43

strtol_test$240:	; Call 27 printf 0
x51401:	mov word [bp + 27], strtol_test$241	; 5: 199 70 27 220 200
x51406:	mov [bp + 29], bp	; 3: 137 110 29
x51409:	add bp, 27	; 3: 131 197 27
x51412:	mov di, bp	; 2: 137 239
x51414:	add di, 10	; 3: 131 199 10
x51417:	jmp printf	; 3: 233 40 68

strtol_test$241:	; PostCall 27

strtol_test$242:	; Assign base 9
x51420:	mov word [bp + 6], 9	; 5: 199 70 6 9 0

strtol_test$243:	; Assign text[0] 32
x51425:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtol_test$244:	; Assign text[1] 32
x51429:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtol_test$245:	; Assign text[2] 32
x51433:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtol_test$246:	; Assign text[3] 43
x51437:	mov byte [bp + 11], 43	; 4: 198 70 11 43

strtol_test$247:	; Assign text[4] 49
x51441:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtol_test$248:	; Assign text[5] 50
x51445:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtol_test$249:	; Assign text[6] 51
x51449:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtol_test$250:	; Assign text[7] 97
x51453:	mov byte [bp + 15], 97	; 4: 198 70 15 97

strtol_test$251:	; Assign text[8] 98
x51457:	mov byte [bp + 16], 98	; 4: 198 70 16 98

strtol_test$252:	; Assign text[9] 99
x51461:	mov byte [bp + 17], 99	; 4: 198 70 17 99

strtol_test$253:	; Assign text[10] 0
x51465:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtol_test$254:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$255:	; Parameter 21 text 6
x51469:	mov [bp + 27], bp	; 3: 137 110 27
x51472:	add word [bp + 27], 8	; 4: 131 70 27 8

strtol_test$256:	; address £temporary2404 pointer
x51476:	mov si, bp	; 2: 137 238
x51478:	add si, 19	; 3: 131 198 19

strtol_test$257:	; Parameter 21 £temporary2404 8
x51481:	mov [bp + 29], si	; 3: 137 118 29

strtol_test$258:	; Parameter 21 base 10
x51484:	mov ax, [bp + 6]	; 3: 139 70 6
x51487:	mov [bp + 31], ax	; 3: 137 70 31

strtol_test$259:	; Call 21 strtol 0
x51490:	mov word [bp + 21], strtol_test$260	; 5: 199 70 21 48 201
x51495:	mov [bp + 23], bp	; 3: 137 110 23
x51498:	add bp, 21	; 3: 131 197 21
x51501:	jmp strtol	; 3: 233 177 6

strtol_test$260:	; PostCall 21

strtol_test$261:	; GetReturnValue £temporary2405

strtol_test$262:	; Assign value £temporary2405
x51504:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtol_test$263:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$264:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x51508:	mov word [bp + 31], @5583$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 5 207

strtol_test$265:	; Parameter 25 text 8
x51513:	mov [bp + 33], bp	; 3: 137 110 33
x51516:	add word [bp + 33], 8	; 4: 131 70 33 8

strtol_test$266:	; Parameter 25 value 10
x51520:	mov eax, [bp + 21]	; 4: 102 139 70 21
x51524:	mov [bp + 35], eax	; 4: 102 137 70 35

strtol_test$267:	; Parameter 25 pointer 14
x51528:	mov ax, [bp + 19]	; 3: 139 70 19
x51531:	mov [bp + 39], ax	; 3: 137 70 39

strtol_test$268:	; Parameter 25 base 16
x51534:	mov ax, [bp + 6]	; 3: 139 70 6
x51537:	mov [bp + 41], ax	; 3: 137 70 41

strtol_test$269:	; Call 25 printf 0
x51540:	mov word [bp + 25], strtol_test$270	; 5: 199 70 25 103 201
x51545:	mov [bp + 27], bp	; 3: 137 110 27
x51548:	add bp, 25	; 3: 131 197 25
x51551:	mov di, bp	; 2: 137 239
x51553:	add di, 10	; 3: 131 199 10
x51556:	jmp printf	; 3: 233 157 67

strtol_test$270:	; PostCall 25

strtol_test$271:	; Assign base 10
x51559:	mov word [bp + 6], 10	; 5: 199 70 6 10 0

strtol_test$272:	; Assign text[0] 32
x51564:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtol_test$273:	; Assign text[1] 32
x51568:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtol_test$274:	; Assign text[2] 32
x51572:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtol_test$275:	; Assign text[3] 43
x51576:	mov byte [bp + 11], 43	; 4: 198 70 11 43

strtol_test$276:	; Assign text[4] 49
x51580:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtol_test$277:	; Assign text[5] 50
x51584:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtol_test$278:	; Assign text[6] 51
x51588:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtol_test$279:	; Assign text[7] 97
x51592:	mov byte [bp + 15], 97	; 4: 198 70 15 97

strtol_test$280:	; Assign text[8] 98
x51596:	mov byte [bp + 16], 98	; 4: 198 70 16 98

strtol_test$281:	; Assign text[9] 99
x51600:	mov byte [bp + 17], 99	; 4: 198 70 17 99

strtol_test$282:	; Assign text[10] 0
x51604:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtol_test$283:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$284:	; Parameter 21 text 6
x51608:	mov [bp + 27], bp	; 3: 137 110 27
x51611:	add word [bp + 27], 8	; 4: 131 70 27 8

strtol_test$285:	; address £temporary2418 pointer
x51615:	mov si, bp	; 2: 137 238
x51617:	add si, 19	; 3: 131 198 19

strtol_test$286:	; Parameter 21 £temporary2418 8
x51620:	mov [bp + 29], si	; 3: 137 118 29

strtol_test$287:	; Parameter 21 base 10
x51623:	mov ax, [bp + 6]	; 3: 139 70 6
x51626:	mov [bp + 31], ax	; 3: 137 70 31

strtol_test$288:	; Call 21 strtol 0
x51629:	mov word [bp + 21], strtol_test$289	; 5: 199 70 21 187 201
x51634:	mov [bp + 23], bp	; 3: 137 110 23
x51637:	add bp, 21	; 3: 131 197 21
x51640:	jmp strtol	; 3: 233 38 6

strtol_test$289:	; PostCall 21

strtol_test$290:	; GetReturnValue £temporary2419

strtol_test$291:	; Assign value £temporary2419
x51643:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtol_test$292:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$293:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x51647:	mov word [bp + 31], @5627$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 27 207

strtol_test$294:	; Parameter 25 text 8
x51652:	mov [bp + 33], bp	; 3: 137 110 33
x51655:	add word [bp + 33], 8	; 4: 131 70 33 8

strtol_test$295:	; Parameter 25 value 10
x51659:	mov eax, [bp + 21]	; 4: 102 139 70 21
x51663:	mov [bp + 35], eax	; 4: 102 137 70 35

strtol_test$296:	; Parameter 25 pointer 14
x51667:	mov ax, [bp + 19]	; 3: 139 70 19
x51670:	mov [bp + 39], ax	; 3: 137 70 39

strtol_test$297:	; Parameter 25 base 16
x51673:	mov ax, [bp + 6]	; 3: 139 70 6
x51676:	mov [bp + 41], ax	; 3: 137 70 41

strtol_test$298:	; Call 25 printf 0
x51679:	mov word [bp + 25], strtol_test$299	; 5: 199 70 25 242 201
x51684:	mov [bp + 27], bp	; 3: 137 110 27
x51687:	add bp, 25	; 3: 131 197 25
x51690:	mov di, bp	; 2: 137 239
x51692:	add di, 10	; 3: 131 199 10
x51695:	jmp printf	; 3: 233 18 67

strtol_test$299:	; PostCall 25

strtol_test$300:	; Assign base 11
x51698:	mov word [bp + 6], 11	; 5: 199 70 6 11 0

strtol_test$301:	; Assign text[0] 32
x51703:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtol_test$302:	; Assign text[1] 32
x51707:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtol_test$303:	; Assign text[2] 32
x51711:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtol_test$304:	; Assign text[3] 43
x51715:	mov byte [bp + 11], 43	; 4: 198 70 11 43

strtol_test$305:	; Assign text[4] 49
x51719:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtol_test$306:	; Assign text[5] 50
x51723:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtol_test$307:	; Assign text[6] 51
x51727:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtol_test$308:	; Assign text[7] 97
x51731:	mov byte [bp + 15], 97	; 4: 198 70 15 97

strtol_test$309:	; Assign text[8] 98
x51735:	mov byte [bp + 16], 98	; 4: 198 70 16 98

strtol_test$310:	; Assign text[9] 99
x51739:	mov byte [bp + 17], 99	; 4: 198 70 17 99

strtol_test$311:	; Assign text[10] 0
x51743:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtol_test$312:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$313:	; Parameter 21 text 6
x51747:	mov [bp + 27], bp	; 3: 137 110 27
x51750:	add word [bp + 27], 8	; 4: 131 70 27 8

strtol_test$314:	; address £temporary2432 pointer
x51754:	mov si, bp	; 2: 137 238
x51756:	add si, 19	; 3: 131 198 19

strtol_test$315:	; Parameter 21 £temporary2432 8
x51759:	mov [bp + 29], si	; 3: 137 118 29

strtol_test$316:	; Parameter 21 base 10
x51762:	mov ax, [bp + 6]	; 3: 139 70 6
x51765:	mov [bp + 31], ax	; 3: 137 70 31

strtol_test$317:	; Call 21 strtol 0
x51768:	mov word [bp + 21], strtol_test$318	; 5: 199 70 21 70 202
x51773:	mov [bp + 23], bp	; 3: 137 110 23
x51776:	add bp, 21	; 3: 131 197 21
x51779:	jmp strtol	; 3: 233 155 5

strtol_test$318:	; PostCall 21

strtol_test$319:	; GetReturnValue £temporary2433

strtol_test$320:	; Assign value £temporary2433
x51782:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtol_test$321:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$322:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x51786:	mov word [bp + 31], @5671$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 49 207

strtol_test$323:	; Parameter 25 text 8
x51791:	mov [bp + 33], bp	; 3: 137 110 33
x51794:	add word [bp + 33], 8	; 4: 131 70 33 8

strtol_test$324:	; Parameter 25 value 10
x51798:	mov eax, [bp + 21]	; 4: 102 139 70 21
x51802:	mov [bp + 35], eax	; 4: 102 137 70 35

strtol_test$325:	; Parameter 25 pointer 14
x51806:	mov ax, [bp + 19]	; 3: 139 70 19
x51809:	mov [bp + 39], ax	; 3: 137 70 39

strtol_test$326:	; Parameter 25 base 16
x51812:	mov ax, [bp + 6]	; 3: 139 70 6
x51815:	mov [bp + 41], ax	; 3: 137 70 41

strtol_test$327:	; Call 25 printf 0
x51818:	mov word [bp + 25], strtol_test$328	; 5: 199 70 25 125 202
x51823:	mov [bp + 27], bp	; 3: 137 110 27
x51826:	add bp, 25	; 3: 131 197 25
x51829:	mov di, bp	; 2: 137 239
x51831:	add di, 10	; 3: 131 199 10
x51834:	jmp printf	; 3: 233 135 66

strtol_test$328:	; PostCall 25

strtol_test$329:	; Assign base 12
x51837:	mov word [bp + 6], 12	; 5: 199 70 6 12 0

strtol_test$330:	; Assign text[0] 32
x51842:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtol_test$331:	; Assign text[1] 32
x51846:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtol_test$332:	; Assign text[2] 32
x51850:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtol_test$333:	; Assign text[3] 43
x51854:	mov byte [bp + 11], 43	; 4: 198 70 11 43

strtol_test$334:	; Assign text[4] 49
x51858:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtol_test$335:	; Assign text[5] 50
x51862:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtol_test$336:	; Assign text[6] 51
x51866:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtol_test$337:	; Assign text[7] 65
x51870:	mov byte [bp + 15], 65	; 4: 198 70 15 65

strtol_test$338:	; Assign text[8] 66
x51874:	mov byte [bp + 16], 66	; 4: 198 70 16 66

strtol_test$339:	; Assign text[9] 67
x51878:	mov byte [bp + 17], 67	; 4: 198 70 17 67

strtol_test$340:	; Assign text[10] 0
x51882:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtol_test$341:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$342:	; Parameter 21 text 6
x51886:	mov [bp + 27], bp	; 3: 137 110 27
x51889:	add word [bp + 27], 8	; 4: 131 70 27 8

strtol_test$343:	; address £temporary2446 pointer
x51893:	mov si, bp	; 2: 137 238
x51895:	add si, 19	; 3: 131 198 19

strtol_test$344:	; Parameter 21 £temporary2446 8
x51898:	mov [bp + 29], si	; 3: 137 118 29

strtol_test$345:	; Parameter 21 base 10
x51901:	mov ax, [bp + 6]	; 3: 139 70 6
x51904:	mov [bp + 31], ax	; 3: 137 70 31

strtol_test$346:	; Call 21 strtol 0
x51907:	mov word [bp + 21], strtol_test$347	; 5: 199 70 21 209 202
x51912:	mov [bp + 23], bp	; 3: 137 110 23
x51915:	add bp, 21	; 3: 131 197 21
x51918:	jmp strtol	; 3: 233 16 5

strtol_test$347:	; PostCall 21

strtol_test$348:	; GetReturnValue £temporary2447

strtol_test$349:	; Assign value £temporary2447
x51921:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtol_test$350:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$351:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x51925:	mov word [bp + 31], @5715$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 71 207

strtol_test$352:	; Parameter 25 text 8
x51930:	mov [bp + 33], bp	; 3: 137 110 33
x51933:	add word [bp + 33], 8	; 4: 131 70 33 8

strtol_test$353:	; Parameter 25 value 10
x51937:	mov eax, [bp + 21]	; 4: 102 139 70 21
x51941:	mov [bp + 35], eax	; 4: 102 137 70 35

strtol_test$354:	; Parameter 25 pointer 14
x51945:	mov ax, [bp + 19]	; 3: 139 70 19
x51948:	mov [bp + 39], ax	; 3: 137 70 39

strtol_test$355:	; Parameter 25 base 16
x51951:	mov ax, [bp + 6]	; 3: 139 70 6
x51954:	mov [bp + 41], ax	; 3: 137 70 41

strtol_test$356:	; Call 25 printf 0
x51957:	mov word [bp + 25], strtol_test$357	; 5: 199 70 25 8 203
x51962:	mov [bp + 27], bp	; 3: 137 110 27
x51965:	add bp, 25	; 3: 131 197 25
x51968:	mov di, bp	; 2: 137 239
x51970:	add di, 10	; 3: 131 199 10
x51973:	jmp printf	; 3: 233 252 65

strtol_test$357:	; PostCall 25

strtol_test$358:	; Assign base 13
x51976:	mov word [bp + 6], 13	; 5: 199 70 6 13 0

strtol_test$359:	; Assign text[0] 32
x51981:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtol_test$360:	; Assign text[1] 32
x51985:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtol_test$361:	; Assign text[2] 32
x51989:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtol_test$362:	; Assign text[3] 43
x51993:	mov byte [bp + 11], 43	; 4: 198 70 11 43

strtol_test$363:	; Assign text[4] 49
x51997:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtol_test$364:	; Assign text[5] 50
x52001:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtol_test$365:	; Assign text[6] 51
x52005:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtol_test$366:	; Assign text[7] 97
x52009:	mov byte [bp + 15], 97	; 4: 198 70 15 97

strtol_test$367:	; Assign text[8] 98
x52013:	mov byte [bp + 16], 98	; 4: 198 70 16 98

strtol_test$368:	; Assign text[9] 99
x52017:	mov byte [bp + 17], 99	; 4: 198 70 17 99

strtol_test$369:	; Assign text[10] 0
x52021:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtol_test$370:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$371:	; Parameter 21 text 6
x52025:	mov [bp + 27], bp	; 3: 137 110 27
x52028:	add word [bp + 27], 8	; 4: 131 70 27 8

strtol_test$372:	; address £temporary2460 pointer
x52032:	mov si, bp	; 2: 137 238
x52034:	add si, 19	; 3: 131 198 19

strtol_test$373:	; Parameter 21 £temporary2460 8
x52037:	mov [bp + 29], si	; 3: 137 118 29

strtol_test$374:	; Parameter 21 base 10
x52040:	mov ax, [bp + 6]	; 3: 139 70 6
x52043:	mov [bp + 31], ax	; 3: 137 70 31

strtol_test$375:	; Call 21 strtol 0
x52046:	mov word [bp + 21], strtol_test$376	; 5: 199 70 21 92 203
x52051:	mov [bp + 23], bp	; 3: 137 110 23
x52054:	add bp, 21	; 3: 131 197 21
x52057:	jmp strtol	; 3: 233 133 4

strtol_test$376:	; PostCall 21

strtol_test$377:	; GetReturnValue £temporary2461

strtol_test$378:	; Assign value £temporary2461
x52060:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtol_test$379:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$380:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x52064:	mov word [bp + 31], @5759$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 93 207

strtol_test$381:	; Parameter 25 text 8
x52069:	mov [bp + 33], bp	; 3: 137 110 33
x52072:	add word [bp + 33], 8	; 4: 131 70 33 8

strtol_test$382:	; Parameter 25 value 10
x52076:	mov eax, [bp + 21]	; 4: 102 139 70 21
x52080:	mov [bp + 35], eax	; 4: 102 137 70 35

strtol_test$383:	; Parameter 25 pointer 14
x52084:	mov ax, [bp + 19]	; 3: 139 70 19
x52087:	mov [bp + 39], ax	; 3: 137 70 39

strtol_test$384:	; Parameter 25 base 16
x52090:	mov ax, [bp + 6]	; 3: 139 70 6
x52093:	mov [bp + 41], ax	; 3: 137 70 41

strtol_test$385:	; Call 25 printf 0
x52096:	mov word [bp + 25], strtol_test$386	; 5: 199 70 25 147 203
x52101:	mov [bp + 27], bp	; 3: 137 110 27
x52104:	add bp, 25	; 3: 131 197 25
x52107:	mov di, bp	; 2: 137 239
x52109:	add di, 10	; 3: 131 199 10
x52112:	jmp printf	; 3: 233 113 65

strtol_test$386:	; PostCall 25

strtol_test$387:	; Assign base 9
x52115:	mov word [bp + 6], 9	; 5: 199 70 6 9 0

strtol_test$388:	; Assign text[0] 32
x52120:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtol_test$389:	; Assign text[1] 32
x52124:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtol_test$390:	; Assign text[2] 32
x52128:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtol_test$391:	; Assign text[3] 45
x52132:	mov byte [bp + 11], 45	; 4: 198 70 11 45

strtol_test$392:	; Assign text[4] 49
x52136:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtol_test$393:	; Assign text[5] 50
x52140:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtol_test$394:	; Assign text[6] 51
x52144:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtol_test$395:	; Assign text[7] 97
x52148:	mov byte [bp + 15], 97	; 4: 198 70 15 97

strtol_test$396:	; Assign text[8] 98
x52152:	mov byte [bp + 16], 98	; 4: 198 70 16 98

strtol_test$397:	; Assign text[9] 99
x52156:	mov byte [bp + 17], 99	; 4: 198 70 17 99

strtol_test$398:	; Assign text[10] 0
x52160:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtol_test$399:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$400:	; Parameter 21 text 6
x52164:	mov [bp + 27], bp	; 3: 137 110 27
x52167:	add word [bp + 27], 8	; 4: 131 70 27 8

strtol_test$401:	; address £temporary2474 pointer
x52171:	mov si, bp	; 2: 137 238
x52173:	add si, 19	; 3: 131 198 19

strtol_test$402:	; Parameter 21 £temporary2474 8
x52176:	mov [bp + 29], si	; 3: 137 118 29

strtol_test$403:	; Parameter 21 base 10
x52179:	mov ax, [bp + 6]	; 3: 139 70 6
x52182:	mov [bp + 31], ax	; 3: 137 70 31

strtol_test$404:	; Call 21 strtol 0
x52185:	mov word [bp + 21], strtol_test$405	; 5: 199 70 21 231 203
x52190:	mov [bp + 23], bp	; 3: 137 110 23
x52193:	add bp, 21	; 3: 131 197 21
x52196:	jmp strtol	; 3: 233 250 3

strtol_test$405:	; PostCall 21

strtol_test$406:	; GetReturnValue £temporary2475

strtol_test$407:	; Assign value £temporary2475
x52199:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtol_test$408:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$409:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x52203:	mov word [bp + 31], @5803$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 115 207

strtol_test$410:	; Parameter 25 text 8
x52208:	mov [bp + 33], bp	; 3: 137 110 33
x52211:	add word [bp + 33], 8	; 4: 131 70 33 8

strtol_test$411:	; Parameter 25 value 10
x52215:	mov eax, [bp + 21]	; 4: 102 139 70 21
x52219:	mov [bp + 35], eax	; 4: 102 137 70 35

strtol_test$412:	; Parameter 25 pointer 14
x52223:	mov ax, [bp + 19]	; 3: 139 70 19
x52226:	mov [bp + 39], ax	; 3: 137 70 39

strtol_test$413:	; Parameter 25 base 16
x52229:	mov ax, [bp + 6]	; 3: 139 70 6
x52232:	mov [bp + 41], ax	; 3: 137 70 41

strtol_test$414:	; Call 25 printf 0
x52235:	mov word [bp + 25], strtol_test$415	; 5: 199 70 25 30 204
x52240:	mov [bp + 27], bp	; 3: 137 110 27
x52243:	add bp, 25	; 3: 131 197 25
x52246:	mov di, bp	; 2: 137 239
x52248:	add di, 10	; 3: 131 199 10
x52251:	jmp printf	; 3: 233 230 64

strtol_test$415:	; PostCall 25

strtol_test$416:	; Assign base 10
x52254:	mov word [bp + 6], 10	; 5: 199 70 6 10 0

strtol_test$417:	; Assign text[0] 32
x52259:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtol_test$418:	; Assign text[1] 32
x52263:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtol_test$419:	; Assign text[2] 32
x52267:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtol_test$420:	; Assign text[3] 45
x52271:	mov byte [bp + 11], 45	; 4: 198 70 11 45

strtol_test$421:	; Assign text[4] 49
x52275:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtol_test$422:	; Assign text[5] 50
x52279:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtol_test$423:	; Assign text[6] 51
x52283:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtol_test$424:	; Assign text[7] 97
x52287:	mov byte [bp + 15], 97	; 4: 198 70 15 97

strtol_test$425:	; Assign text[8] 98
x52291:	mov byte [bp + 16], 98	; 4: 198 70 16 98

strtol_test$426:	; Assign text[9] 99
x52295:	mov byte [bp + 17], 99	; 4: 198 70 17 99

strtol_test$427:	; Assign text[10] 0
x52299:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtol_test$428:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$429:	; Parameter 21 text 6
x52303:	mov [bp + 27], bp	; 3: 137 110 27
x52306:	add word [bp + 27], 8	; 4: 131 70 27 8

strtol_test$430:	; address £temporary2488 pointer
x52310:	mov si, bp	; 2: 137 238
x52312:	add si, 19	; 3: 131 198 19

strtol_test$431:	; Parameter 21 £temporary2488 8
x52315:	mov [bp + 29], si	; 3: 137 118 29

strtol_test$432:	; Parameter 21 base 10
x52318:	mov ax, [bp + 6]	; 3: 139 70 6
x52321:	mov [bp + 31], ax	; 3: 137 70 31

strtol_test$433:	; Call 21 strtol 0
x52324:	mov word [bp + 21], strtol_test$434	; 5: 199 70 21 114 204
x52329:	mov [bp + 23], bp	; 3: 137 110 23
x52332:	add bp, 21	; 3: 131 197 21
x52335:	jmp strtol	; 3: 233 111 3

strtol_test$434:	; PostCall 21

strtol_test$435:	; GetReturnValue £temporary2489

strtol_test$436:	; Assign value £temporary2489
x52338:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtol_test$437:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$438:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x52342:	mov word [bp + 31], @5847$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 137 207

strtol_test$439:	; Parameter 25 text 8
x52347:	mov [bp + 33], bp	; 3: 137 110 33
x52350:	add word [bp + 33], 8	; 4: 131 70 33 8

strtol_test$440:	; Parameter 25 value 10
x52354:	mov eax, [bp + 21]	; 4: 102 139 70 21
x52358:	mov [bp + 35], eax	; 4: 102 137 70 35

strtol_test$441:	; Parameter 25 pointer 14
x52362:	mov ax, [bp + 19]	; 3: 139 70 19
x52365:	mov [bp + 39], ax	; 3: 137 70 39

strtol_test$442:	; Parameter 25 base 16
x52368:	mov ax, [bp + 6]	; 3: 139 70 6
x52371:	mov [bp + 41], ax	; 3: 137 70 41

strtol_test$443:	; Call 25 printf 0
x52374:	mov word [bp + 25], strtol_test$444	; 5: 199 70 25 169 204
x52379:	mov [bp + 27], bp	; 3: 137 110 27
x52382:	add bp, 25	; 3: 131 197 25
x52385:	mov di, bp	; 2: 137 239
x52387:	add di, 10	; 3: 131 199 10
x52390:	jmp printf	; 3: 233 91 64

strtol_test$444:	; PostCall 25

strtol_test$445:	; Assign base 11
x52393:	mov word [bp + 6], 11	; 5: 199 70 6 11 0

strtol_test$446:	; Assign text[0] 32
x52398:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtol_test$447:	; Assign text[1] 32
x52402:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtol_test$448:	; Assign text[2] 32
x52406:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtol_test$449:	; Assign text[3] 45
x52410:	mov byte [bp + 11], 45	; 4: 198 70 11 45

strtol_test$450:	; Assign text[4] 49
x52414:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtol_test$451:	; Assign text[5] 50
x52418:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtol_test$452:	; Assign text[6] 51
x52422:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtol_test$453:	; Assign text[7] 97
x52426:	mov byte [bp + 15], 97	; 4: 198 70 15 97

strtol_test$454:	; Assign text[8] 98
x52430:	mov byte [bp + 16], 98	; 4: 198 70 16 98

strtol_test$455:	; Assign text[9] 99
x52434:	mov byte [bp + 17], 99	; 4: 198 70 17 99

strtol_test$456:	; Assign text[10] 0
x52438:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtol_test$457:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$458:	; Parameter 21 text 6
x52442:	mov [bp + 27], bp	; 3: 137 110 27
x52445:	add word [bp + 27], 8	; 4: 131 70 27 8

strtol_test$459:	; address £temporary2502 pointer
x52449:	mov si, bp	; 2: 137 238
x52451:	add si, 19	; 3: 131 198 19

strtol_test$460:	; Parameter 21 £temporary2502 8
x52454:	mov [bp + 29], si	; 3: 137 118 29

strtol_test$461:	; Parameter 21 base 10
x52457:	mov ax, [bp + 6]	; 3: 139 70 6
x52460:	mov [bp + 31], ax	; 3: 137 70 31

strtol_test$462:	; Call 21 strtol 0
x52463:	mov word [bp + 21], strtol_test$463	; 5: 199 70 21 253 204
x52468:	mov [bp + 23], bp	; 3: 137 110 23
x52471:	add bp, 21	; 3: 131 197 21
x52474:	jmp strtol	; 3: 233 228 2

strtol_test$463:	; PostCall 21

strtol_test$464:	; GetReturnValue £temporary2503

strtol_test$465:	; Assign value £temporary2503
x52477:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtol_test$466:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$467:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x52481:	mov word [bp + 31], @5891$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 159 207

strtol_test$468:	; Parameter 25 text 8
x52486:	mov [bp + 33], bp	; 3: 137 110 33
x52489:	add word [bp + 33], 8	; 4: 131 70 33 8

strtol_test$469:	; Parameter 25 value 10
x52493:	mov eax, [bp + 21]	; 4: 102 139 70 21
x52497:	mov [bp + 35], eax	; 4: 102 137 70 35

strtol_test$470:	; Parameter 25 pointer 14
x52501:	mov ax, [bp + 19]	; 3: 139 70 19
x52504:	mov [bp + 39], ax	; 3: 137 70 39

strtol_test$471:	; Parameter 25 base 16
x52507:	mov ax, [bp + 6]	; 3: 139 70 6
x52510:	mov [bp + 41], ax	; 3: 137 70 41

strtol_test$472:	; Call 25 printf 0
x52513:	mov word [bp + 25], strtol_test$473	; 5: 199 70 25 52 205
x52518:	mov [bp + 27], bp	; 3: 137 110 27
x52521:	add bp, 25	; 3: 131 197 25
x52524:	mov di, bp	; 2: 137 239
x52526:	add di, 10	; 3: 131 199 10
x52529:	jmp printf	; 3: 233 208 63

strtol_test$473:	; PostCall 25

strtol_test$474:	; Assign base 12
x52532:	mov word [bp + 6], 12	; 5: 199 70 6 12 0

strtol_test$475:	; Assign text[0] 32
x52537:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtol_test$476:	; Assign text[1] 32
x52541:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtol_test$477:	; Assign text[2] 32
x52545:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtol_test$478:	; Assign text[3] 45
x52549:	mov byte [bp + 11], 45	; 4: 198 70 11 45

strtol_test$479:	; Assign text[4] 49
x52553:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtol_test$480:	; Assign text[5] 50
x52557:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtol_test$481:	; Assign text[6] 51
x52561:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtol_test$482:	; Assign text[7] 65
x52565:	mov byte [bp + 15], 65	; 4: 198 70 15 65

strtol_test$483:	; Assign text[8] 66
x52569:	mov byte [bp + 16], 66	; 4: 198 70 16 66

strtol_test$484:	; Assign text[9] 67
x52573:	mov byte [bp + 17], 67	; 4: 198 70 17 67

strtol_test$485:	; Assign text[10] 0
x52577:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtol_test$486:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$487:	; Parameter 21 text 6
x52581:	mov [bp + 27], bp	; 3: 137 110 27
x52584:	add word [bp + 27], 8	; 4: 131 70 27 8

strtol_test$488:	; address £temporary2516 pointer
x52588:	mov si, bp	; 2: 137 238
x52590:	add si, 19	; 3: 131 198 19

strtol_test$489:	; Parameter 21 £temporary2516 8
x52593:	mov [bp + 29], si	; 3: 137 118 29

strtol_test$490:	; Parameter 21 base 10
x52596:	mov ax, [bp + 6]	; 3: 139 70 6
x52599:	mov [bp + 31], ax	; 3: 137 70 31

strtol_test$491:	; Call 21 strtol 0
x52602:	mov word [bp + 21], strtol_test$492	; 5: 199 70 21 136 205
x52607:	mov [bp + 23], bp	; 3: 137 110 23
x52610:	add bp, 21	; 3: 131 197 21
x52613:	jmp strtol	; 3: 233 89 2

strtol_test$492:	; PostCall 21

strtol_test$493:	; GetReturnValue £temporary2517

strtol_test$494:	; Assign value £temporary2517
x52616:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtol_test$495:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$496:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x52620:	mov word [bp + 31], @5935$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 181 207

strtol_test$497:	; Parameter 25 text 8
x52625:	mov [bp + 33], bp	; 3: 137 110 33
x52628:	add word [bp + 33], 8	; 4: 131 70 33 8

strtol_test$498:	; Parameter 25 value 10
x52632:	mov eax, [bp + 21]	; 4: 102 139 70 21
x52636:	mov [bp + 35], eax	; 4: 102 137 70 35

strtol_test$499:	; Parameter 25 pointer 14
x52640:	mov ax, [bp + 19]	; 3: 139 70 19
x52643:	mov [bp + 39], ax	; 3: 137 70 39

strtol_test$500:	; Parameter 25 base 16
x52646:	mov ax, [bp + 6]	; 3: 139 70 6
x52649:	mov [bp + 41], ax	; 3: 137 70 41

strtol_test$501:	; Call 25 printf 0
x52652:	mov word [bp + 25], strtol_test$502	; 5: 199 70 25 191 205
x52657:	mov [bp + 27], bp	; 3: 137 110 27
x52660:	add bp, 25	; 3: 131 197 25
x52663:	mov di, bp	; 2: 137 239
x52665:	add di, 10	; 3: 131 199 10
x52668:	jmp printf	; 3: 233 69 63

strtol_test$502:	; PostCall 25

strtol_test$503:	; Assign base 13
x52671:	mov word [bp + 6], 13	; 5: 199 70 6 13 0

strtol_test$504:	; Assign text[0] 32
x52676:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtol_test$505:	; Assign text[1] 32
x52680:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtol_test$506:	; Assign text[2] 32
x52684:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtol_test$507:	; Assign text[3] 45
x52688:	mov byte [bp + 11], 45	; 4: 198 70 11 45

strtol_test$508:	; Assign text[4] 49
x52692:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtol_test$509:	; Assign text[5] 50
x52696:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtol_test$510:	; Assign text[6] 51
x52700:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtol_test$511:	; Assign text[7] 97
x52704:	mov byte [bp + 15], 97	; 4: 198 70 15 97

strtol_test$512:	; Assign text[8] 98
x52708:	mov byte [bp + 16], 98	; 4: 198 70 16 98

strtol_test$513:	; Assign text[9] 99
x52712:	mov byte [bp + 17], 99	; 4: 198 70 17 99

strtol_test$514:	; Assign text[10] 0
x52716:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtol_test$515:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$516:	; Parameter 21 text 6
x52720:	mov [bp + 27], bp	; 3: 137 110 27
x52723:	add word [bp + 27], 8	; 4: 131 70 27 8

strtol_test$517:	; address £temporary2530 pointer
x52727:	mov si, bp	; 2: 137 238
x52729:	add si, 19	; 3: 131 198 19

strtol_test$518:	; Parameter 21 £temporary2530 8
x52732:	mov [bp + 29], si	; 3: 137 118 29

strtol_test$519:	; Parameter 21 base 10
x52735:	mov ax, [bp + 6]	; 3: 139 70 6
x52738:	mov [bp + 31], ax	; 3: 137 70 31

strtol_test$520:	; Call 21 strtol 0
x52741:	mov word [bp + 21], strtol_test$521	; 5: 199 70 21 19 206
x52746:	mov [bp + 23], bp	; 3: 137 110 23
x52749:	add bp, 21	; 3: 131 197 21
x52752:	jmp strtol	; 3: 233 206 1

strtol_test$521:	; PostCall 21

strtol_test$522:	; GetReturnValue £temporary2531

strtol_test$523:	; Assign value £temporary2531
x52755:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtol_test$524:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$525:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x52759:	mov word [bp + 31], @5979$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 203 207

strtol_test$526:	; Parameter 25 text 8
x52764:	mov [bp + 33], bp	; 3: 137 110 33
x52767:	add word [bp + 33], 8	; 4: 131 70 33 8

strtol_test$527:	; Parameter 25 value 10
x52771:	mov eax, [bp + 21]	; 4: 102 139 70 21
x52775:	mov [bp + 35], eax	; 4: 102 137 70 35

strtol_test$528:	; Parameter 25 pointer 14
x52779:	mov ax, [bp + 19]	; 3: 139 70 19
x52782:	mov [bp + 39], ax	; 3: 137 70 39

strtol_test$529:	; Parameter 25 base 16
x52785:	mov ax, [bp + 6]	; 3: 139 70 6
x52788:	mov [bp + 41], ax	; 3: 137 70 41

strtol_test$530:	; Call 25 printf 0
x52791:	mov word [bp + 25], strtol_test$531	; 5: 199 70 25 74 206
x52796:	mov [bp + 27], bp	; 3: 137 110 27
x52799:	add bp, 25	; 3: 131 197 25
x52802:	mov di, bp	; 2: 137 239
x52804:	add di, 10	; 3: 131 199 10
x52807:	jmp printf	; 3: 233 186 62

strtol_test$531:	; PostCall 25

strtol_test$532:	; Return 0
x52810:	mov ax, [bp]	; 3: 139 70 0
x52813:	mov di, [bp + 4]	; 3: 139 126 4
x52816:	mov bp, [bp + 2]	; 3: 139 110 2
x52819:	jmp ax	; 2: 255 224

strtol_test$533:	; FunctionEnd strtol_test

@5201$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x52821:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@5248$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x52843:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@5298$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x52865:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@5348$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x52887:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@5392$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x52909:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@5439$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x52931:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@5489$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x52953:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@5539$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x52975:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@5583$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x52997:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@5627$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x53019:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@5671$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x53041:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@5715$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x53063:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@5759$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x53085:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@5803$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x53107:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@5847$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x53129:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@5891$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x53151:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@5935$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x53173:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@5979$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x53195:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

strtol:	; Assign g_inStatus 1
x53217:	mov word [g_inStatus], 1	; 6: 199 6 184 95 1 0

strtol$1:	; Assign g_inDevice s
x53223:	mov ax, [bp + 6]	; 3: 139 70 6
x53226:	mov [g_inDevice], ax	; 3: 163 186 95

strtol$2:	; Assign g_inChars 0
x53229:	mov word [g_inChars], 0	; 6: 199 6 221 100 0 0

strtol$3:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol$4:	; Parameter 12 base 6
x53235:	mov ax, [bp + 10]	; 3: 139 70 10
x53238:	mov [bp + 18], ax	; 3: 137 70 18

strtol$5:	; Call 12 scanLongInt 0
x53241:	mov word [bp + 12], strtol$6	; 5: 199 70 12 7 208
x53246:	mov [bp + 14], bp	; 3: 137 110 14
x53249:	add bp, 12	; 3: 131 197 12
x53252:	jmp scanLongInt	; 3: 233 203 151

strtol$6:	; PostCall 12

strtol$7:	; GetReturnValue £temporary2246

strtol$8:	; Assign value £temporary2246
x53255:	mov [bp + 12], ebx	; 4: 102 137 94 12

strtol$9:	; Equal 12 endp 0
x53259:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x53263:	je strtol$12	; 2: 116 12

strtol$10:	; Deref £temporary2248 -> endp endp 0
x53265:	mov si, [bp + 8]	; 3: 139 118 8

strtol$11:	; BinaryAdd £temporary2248 -> endp s g_inChars
x53268:	mov ax, [bp + 6]	; 3: 139 70 6
x53271:	add ax, [g_inChars]	; 4: 3 6 221 100
x53275:	mov [si], ax	; 2: 137 4

strtol$12:	; SetReturnValue value
x53277:	mov ebx, [bp + 12]	; 4: 102 139 94 12

strtol$13:	; Return value
x53281:	mov ax, [bp]	; 3: 139 70 0
x53284:	mov di, [bp + 4]	; 3: 139 126 4
x53287:	mov bp, [bp + 2]	; 3: 139 110 2
x53290:	jmp ax	; 2: 255 224

strtol$14:	; FunctionEnd strtol

strtoul_test:	; Assign base 0
x53292:	mov word [bp + 6], 0	; 5: 199 70 6 0 0

strtoul_test$1:	; Assign text[0] 32
x53297:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtoul_test$2:	; Assign text[1] 32
x53301:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtoul_test$3:	; Assign text[2] 32
x53305:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtoul_test$4:	; Assign text[3] 43
x53309:	mov byte [bp + 11], 43	; 4: 198 70 11 43

strtoul_test$5:	; Assign text[4] 49
x53313:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtoul_test$6:	; Assign text[5] 50
x53317:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtoul_test$7:	; Assign text[6] 51
x53321:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtoul_test$8:	; Assign text[7] 97
x53325:	mov byte [bp + 15], 97	; 4: 198 70 15 97

strtoul_test$9:	; Assign text[8] 98
x53329:	mov byte [bp + 16], 98	; 4: 198 70 16 98

strtoul_test$10:	; Assign text[9] 99
x53333:	mov byte [bp + 17], 99	; 4: 198 70 17 99

strtoul_test$11:	; Assign text[10] 0
x53337:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtoul_test$12:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$13:	; Parameter 21 text 6
x53341:	mov [bp + 27], bp	; 3: 137 110 27
x53344:	add word [bp + 27], 8	; 4: 131 70 27 8

strtoul_test$14:	; address £temporary2706 pointer
x53348:	mov si, bp	; 2: 137 238
x53350:	add si, 19	; 3: 131 198 19

strtoul_test$15:	; Parameter 21 £temporary2706 8
x53353:	mov [bp + 29], si	; 3: 137 118 29

strtoul_test$16:	; Parameter 21 base 10
x53356:	mov ax, [bp + 6]	; 3: 139 70 6
x53359:	mov [bp + 31], ax	; 3: 137 70 31

strtoul_test$17:	; Call 21 strtoul 0
x53362:	mov word [bp + 21], strtoul_test$18	; 5: 199 70 21 128 208
x53367:	mov [bp + 23], bp	; 3: 137 110 23
x53370:	add bp, 21	; 3: 131 197 21
x53373:	jmp strtoul	; 3: 233 49 11

strtoul_test$18:	; PostCall 21

strtoul_test$19:	; GetReturnValue £temporary2707

strtoul_test$20:	; Assign value £temporary2707
x53376:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtoul_test$21:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$22:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x53380:	mov word [bp + 31], @6186$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 37 218

strtoul_test$23:	; Parameter 25 text 8
x53385:	mov [bp + 33], bp	; 3: 137 110 33
x53388:	add word [bp + 33], 8	; 4: 131 70 33 8

strtoul_test$24:	; Parameter 25 value 10
x53392:	mov eax, [bp + 21]	; 4: 102 139 70 21
x53396:	mov [bp + 35], eax	; 4: 102 137 70 35

strtoul_test$25:	; Parameter 25 pointer 14
x53400:	mov ax, [bp + 19]	; 3: 139 70 19
x53403:	mov [bp + 39], ax	; 3: 137 70 39

strtoul_test$26:	; Parameter 25 base 16
x53406:	mov ax, [bp + 6]	; 3: 139 70 6
x53409:	mov [bp + 41], ax	; 3: 137 70 41

strtoul_test$27:	; Call 25 printf 0
x53412:	mov word [bp + 25], strtoul_test$28	; 5: 199 70 25 183 208
x53417:	mov [bp + 27], bp	; 3: 137 110 27
x53420:	add bp, 25	; 3: 131 197 25
x53423:	mov di, bp	; 2: 137 239
x53425:	add di, 10	; 3: 131 199 10
x53428:	jmp printf	; 3: 233 77 60

strtoul_test$28:	; PostCall 25

strtoul_test$29:	; Assign base 0
x53431:	mov word [bp + 6], 0	; 5: 199 70 6 0 0

strtoul_test$30:	; Assign text[0] 32
x53436:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtoul_test$31:	; Assign text[1] 32
x53440:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtoul_test$32:	; Assign text[2] 32
x53444:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtoul_test$33:	; Assign text[3] 43
x53448:	mov byte [bp + 11], 43	; 4: 198 70 11 43

strtoul_test$34:	; Assign text[4] 48
x53452:	mov byte [bp + 12], 48	; 4: 198 70 12 48

strtoul_test$35:	; Assign text[5] 49
x53456:	mov byte [bp + 13], 49	; 4: 198 70 13 49

strtoul_test$36:	; Assign text[6] 50
x53460:	mov byte [bp + 14], 50	; 4: 198 70 14 50

strtoul_test$37:	; Assign text[7] 51
x53464:	mov byte [bp + 15], 51	; 4: 198 70 15 51

strtoul_test$38:	; Assign text[8] 97
x53468:	mov byte [bp + 16], 97	; 4: 198 70 16 97

strtoul_test$39:	; Assign text[9] 98
x53472:	mov byte [bp + 17], 98	; 4: 198 70 17 98

strtoul_test$40:	; Assign text[10] 99
x53476:	mov byte [bp + 18], 99	; 4: 198 70 18 99

strtoul_test$41:	; Assign text[11] 0
x53480:	mov byte [bp + 19], 0	; 4: 198 70 19 0

strtoul_test$42:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$43:	; Parameter 22 text 6
x53484:	mov [bp + 28], bp	; 3: 137 110 28
x53487:	add word [bp + 28], 8	; 4: 131 70 28 8

strtoul_test$44:	; address £temporary2721 pointer
x53491:	mov si, bp	; 2: 137 238
x53493:	add si, 20	; 3: 131 198 20

strtoul_test$45:	; Parameter 22 £temporary2721 8
x53496:	mov [bp + 30], si	; 3: 137 118 30

strtoul_test$46:	; Parameter 22 base 10
x53499:	mov ax, [bp + 6]	; 3: 139 70 6
x53502:	mov [bp + 32], ax	; 3: 137 70 32

strtoul_test$47:	; Call 22 strtoul 0
x53505:	mov word [bp + 22], strtoul_test$48	; 5: 199 70 22 15 209
x53510:	mov [bp + 24], bp	; 3: 137 110 24
x53513:	add bp, 22	; 3: 131 197 22
x53516:	jmp strtoul	; 3: 233 162 10

strtoul_test$48:	; PostCall 22

strtoul_test$49:	; GetReturnValue £temporary2722

strtoul_test$50:	; Assign value £temporary2722
x53519:	mov [bp + 22], ebx	; 4: 102 137 94 22

strtoul_test$51:	; CallHeader 26 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$52:	; Parameter 26 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x53523:	mov word [bp + 32], @6233$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 32 59 218

strtoul_test$53:	; Parameter 26 text 8
x53528:	mov [bp + 34], bp	; 3: 137 110 34
x53531:	add word [bp + 34], 8	; 4: 131 70 34 8

strtoul_test$54:	; Parameter 26 value 10
x53535:	mov eax, [bp + 22]	; 4: 102 139 70 22
x53539:	mov [bp + 36], eax	; 4: 102 137 70 36

strtoul_test$55:	; Parameter 26 pointer 14
x53543:	mov ax, [bp + 20]	; 3: 139 70 20
x53546:	mov [bp + 40], ax	; 3: 137 70 40

strtoul_test$56:	; Parameter 26 base 16
x53549:	mov ax, [bp + 6]	; 3: 139 70 6
x53552:	mov [bp + 42], ax	; 3: 137 70 42

strtoul_test$57:	; Call 26 printf 0
x53555:	mov word [bp + 26], strtoul_test$58	; 5: 199 70 26 70 209
x53560:	mov [bp + 28], bp	; 3: 137 110 28
x53563:	add bp, 26	; 3: 131 197 26
x53566:	mov di, bp	; 2: 137 239
x53568:	add di, 10	; 3: 131 199 10
x53571:	jmp printf	; 3: 233 190 59

strtoul_test$58:	; PostCall 26

strtoul_test$59:	; Assign base 0
x53574:	mov word [bp + 6], 0	; 5: 199 70 6 0 0

strtoul_test$60:	; Assign text[0] 32
x53579:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtoul_test$61:	; Assign text[1] 32
x53583:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtoul_test$62:	; Assign text[2] 32
x53587:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtoul_test$63:	; Assign text[3] 43
x53591:	mov byte [bp + 11], 43	; 4: 198 70 11 43

strtoul_test$64:	; Assign text[4] 48
x53595:	mov byte [bp + 12], 48	; 4: 198 70 12 48

strtoul_test$65:	; Assign text[5] 120
x53599:	mov byte [bp + 13], 120	; 4: 198 70 13 120

strtoul_test$66:	; Assign text[6] 49
x53603:	mov byte [bp + 14], 49	; 4: 198 70 14 49

strtoul_test$67:	; Assign text[7] 50
x53607:	mov byte [bp + 15], 50	; 4: 198 70 15 50

strtoul_test$68:	; Assign text[8] 51
x53611:	mov byte [bp + 16], 51	; 4: 198 70 16 51

strtoul_test$69:	; Assign text[9] 65
x53615:	mov byte [bp + 17], 65	; 4: 198 70 17 65

strtoul_test$70:	; Assign text[10] 66
x53619:	mov byte [bp + 18], 66	; 4: 198 70 18 66

strtoul_test$71:	; Assign text[11] 67
x53623:	mov byte [bp + 19], 67	; 4: 198 70 19 67

strtoul_test$72:	; Assign text[12] 0
x53627:	mov byte [bp + 20], 0	; 4: 198 70 20 0

strtoul_test$73:	; CallHeader 23 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$74:	; Parameter 23 text 6
x53631:	mov [bp + 29], bp	; 3: 137 110 29
x53634:	add word [bp + 29], 8	; 4: 131 70 29 8

strtoul_test$75:	; address £temporary2737 pointer
x53638:	mov si, bp	; 2: 137 238
x53640:	add si, 21	; 3: 131 198 21

strtoul_test$76:	; Parameter 23 £temporary2737 8
x53643:	mov [bp + 31], si	; 3: 137 118 31

strtoul_test$77:	; Parameter 23 base 10
x53646:	mov ax, [bp + 6]	; 3: 139 70 6
x53649:	mov [bp + 33], ax	; 3: 137 70 33

strtoul_test$78:	; Call 23 strtoul 0
x53652:	mov word [bp + 23], strtoul_test$79	; 5: 199 70 23 162 209
x53657:	mov [bp + 25], bp	; 3: 137 110 25
x53660:	add bp, 23	; 3: 131 197 23
x53663:	jmp strtoul	; 3: 233 15 10

strtoul_test$79:	; PostCall 23

strtoul_test$80:	; GetReturnValue £temporary2738

strtoul_test$81:	; Assign value £temporary2738
x53666:	mov [bp + 23], ebx	; 4: 102 137 94 23

strtoul_test$82:	; CallHeader 27 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$83:	; Parameter 27 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x53670:	mov word [bp + 33], @6283$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 33 81 218

strtoul_test$84:	; Parameter 27 text 8
x53675:	mov [bp + 35], bp	; 3: 137 110 35
x53678:	add word [bp + 35], 8	; 4: 131 70 35 8

strtoul_test$85:	; Parameter 27 value 10
x53682:	mov eax, [bp + 23]	; 4: 102 139 70 23
x53686:	mov [bp + 37], eax	; 4: 102 137 70 37

strtoul_test$86:	; Parameter 27 pointer 14
x53690:	mov ax, [bp + 21]	; 3: 139 70 21
x53693:	mov [bp + 41], ax	; 3: 137 70 41

strtoul_test$87:	; Parameter 27 base 16
x53696:	mov ax, [bp + 6]	; 3: 139 70 6
x53699:	mov [bp + 43], ax	; 3: 137 70 43

strtoul_test$88:	; Call 27 printf 0
x53702:	mov word [bp + 27], strtoul_test$89	; 5: 199 70 27 217 209
x53707:	mov [bp + 29], bp	; 3: 137 110 29
x53710:	add bp, 27	; 3: 131 197 27
x53713:	mov di, bp	; 2: 137 239
x53715:	add di, 10	; 3: 131 199 10
x53718:	jmp printf	; 3: 233 43 59

strtoul_test$89:	; PostCall 27

strtoul_test$90:	; Assign base 0
x53721:	mov word [bp + 6], 0	; 5: 199 70 6 0 0

strtoul_test$91:	; Assign text[0] 32
x53726:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtoul_test$92:	; Assign text[1] 32
x53730:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtoul_test$93:	; Assign text[2] 32
x53734:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtoul_test$94:	; Assign text[3] 43
x53738:	mov byte [bp + 11], 43	; 4: 198 70 11 43

strtoul_test$95:	; Assign text[4] 48
x53742:	mov byte [bp + 12], 48	; 4: 198 70 12 48

strtoul_test$96:	; Assign text[5] 88
x53746:	mov byte [bp + 13], 88	; 4: 198 70 13 88

strtoul_test$97:	; Assign text[6] 49
x53750:	mov byte [bp + 14], 49	; 4: 198 70 14 49

strtoul_test$98:	; Assign text[7] 50
x53754:	mov byte [bp + 15], 50	; 4: 198 70 15 50

strtoul_test$99:	; Assign text[8] 51
x53758:	mov byte [bp + 16], 51	; 4: 198 70 16 51

strtoul_test$100:	; Assign text[9] 97
x53762:	mov byte [bp + 17], 97	; 4: 198 70 17 97

strtoul_test$101:	; Assign text[10] 98
x53766:	mov byte [bp + 18], 98	; 4: 198 70 18 98

strtoul_test$102:	; Assign text[11] 99
x53770:	mov byte [bp + 19], 99	; 4: 198 70 19 99

strtoul_test$103:	; Assign text[12] 0
x53774:	mov byte [bp + 20], 0	; 4: 198 70 20 0

strtoul_test$104:	; CallHeader 23 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$105:	; Parameter 23 text 6
x53778:	mov [bp + 29], bp	; 3: 137 110 29
x53781:	add word [bp + 29], 8	; 4: 131 70 29 8

strtoul_test$106:	; address £temporary2753 pointer
x53785:	mov si, bp	; 2: 137 238
x53787:	add si, 21	; 3: 131 198 21

strtoul_test$107:	; Parameter 23 £temporary2753 8
x53790:	mov [bp + 31], si	; 3: 137 118 31

strtoul_test$108:	; Parameter 23 base 10
x53793:	mov ax, [bp + 6]	; 3: 139 70 6
x53796:	mov [bp + 33], ax	; 3: 137 70 33

strtoul_test$109:	; Call 23 strtoul 0
x53799:	mov word [bp + 23], strtoul_test$110	; 5: 199 70 23 53 210
x53804:	mov [bp + 25], bp	; 3: 137 110 25
x53807:	add bp, 23	; 3: 131 197 23
x53810:	jmp strtoul	; 3: 233 124 9

strtoul_test$110:	; PostCall 23

strtoul_test$111:	; GetReturnValue £temporary2754

strtoul_test$112:	; Assign value £temporary2754
x53813:	mov [bp + 23], ebx	; 4: 102 137 94 23

strtoul_test$113:	; CallHeader 27 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$114:	; Parameter 27 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x53817:	mov word [bp + 33], @6333$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 33 103 218

strtoul_test$115:	; Parameter 27 text 8
x53822:	mov [bp + 35], bp	; 3: 137 110 35
x53825:	add word [bp + 35], 8	; 4: 131 70 35 8

strtoul_test$116:	; Parameter 27 value 10
x53829:	mov eax, [bp + 23]	; 4: 102 139 70 23
x53833:	mov [bp + 37], eax	; 4: 102 137 70 37

strtoul_test$117:	; Parameter 27 pointer 14
x53837:	mov ax, [bp + 21]	; 3: 139 70 21
x53840:	mov [bp + 41], ax	; 3: 137 70 41

strtoul_test$118:	; Parameter 27 base 16
x53843:	mov ax, [bp + 6]	; 3: 139 70 6
x53846:	mov [bp + 43], ax	; 3: 137 70 43

strtoul_test$119:	; Call 27 printf 0
x53849:	mov word [bp + 27], strtoul_test$120	; 5: 199 70 27 108 210
x53854:	mov [bp + 29], bp	; 3: 137 110 29
x53857:	add bp, 27	; 3: 131 197 27
x53860:	mov di, bp	; 2: 137 239
x53862:	add di, 10	; 3: 131 199 10
x53865:	jmp printf	; 3: 233 152 58

strtoul_test$120:	; PostCall 27

strtoul_test$121:	; Assign base 0
x53868:	mov word [bp + 6], 0	; 5: 199 70 6 0 0

strtoul_test$122:	; Assign text[0] 32
x53873:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtoul_test$123:	; Assign text[1] 32
x53877:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtoul_test$124:	; Assign text[2] 32
x53881:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtoul_test$125:	; Assign text[3] 45
x53885:	mov byte [bp + 11], 45	; 4: 198 70 11 45

strtoul_test$126:	; Assign text[4] 49
x53889:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtoul_test$127:	; Assign text[5] 50
x53893:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtoul_test$128:	; Assign text[6] 51
x53897:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtoul_test$129:	; Assign text[7] 97
x53901:	mov byte [bp + 15], 97	; 4: 198 70 15 97

strtoul_test$130:	; Assign text[8] 98
x53905:	mov byte [bp + 16], 98	; 4: 198 70 16 98

strtoul_test$131:	; Assign text[9] 99
x53909:	mov byte [bp + 17], 99	; 4: 198 70 17 99

strtoul_test$132:	; Assign text[10] 0
x53913:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtoul_test$133:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$134:	; Parameter 21 text 6
x53917:	mov [bp + 27], bp	; 3: 137 110 27
x53920:	add word [bp + 27], 8	; 4: 131 70 27 8

strtoul_test$135:	; address £temporary2767 pointer
x53924:	mov si, bp	; 2: 137 238
x53926:	add si, 19	; 3: 131 198 19

strtoul_test$136:	; Parameter 21 £temporary2767 8
x53929:	mov [bp + 29], si	; 3: 137 118 29

strtoul_test$137:	; Parameter 21 base 10
x53932:	mov ax, [bp + 6]	; 3: 139 70 6
x53935:	mov [bp + 31], ax	; 3: 137 70 31

strtoul_test$138:	; Call 21 strtoul 0
x53938:	mov word [bp + 21], strtoul_test$139	; 5: 199 70 21 192 210
x53943:	mov [bp + 23], bp	; 3: 137 110 23
x53946:	add bp, 21	; 3: 131 197 21
x53949:	jmp strtoul	; 3: 233 241 8

strtoul_test$139:	; PostCall 21

strtoul_test$140:	; GetReturnValue £temporary2768

strtoul_test$141:	; Assign value £temporary2768
x53952:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtoul_test$142:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$143:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x53956:	mov word [bp + 31], @6377$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 125 218

strtoul_test$144:	; Parameter 25 text 8
x53961:	mov [bp + 33], bp	; 3: 137 110 33
x53964:	add word [bp + 33], 8	; 4: 131 70 33 8

strtoul_test$145:	; Parameter 25 value 10
x53968:	mov eax, [bp + 21]	; 4: 102 139 70 21
x53972:	mov [bp + 35], eax	; 4: 102 137 70 35

strtoul_test$146:	; Parameter 25 pointer 14
x53976:	mov ax, [bp + 19]	; 3: 139 70 19
x53979:	mov [bp + 39], ax	; 3: 137 70 39

strtoul_test$147:	; Parameter 25 base 16
x53982:	mov ax, [bp + 6]	; 3: 139 70 6
x53985:	mov [bp + 41], ax	; 3: 137 70 41

strtoul_test$148:	; Call 25 printf 0
x53988:	mov word [bp + 25], strtoul_test$149	; 5: 199 70 25 247 210
x53993:	mov [bp + 27], bp	; 3: 137 110 27
x53996:	add bp, 25	; 3: 131 197 25
x53999:	mov di, bp	; 2: 137 239
x54001:	add di, 10	; 3: 131 199 10
x54004:	jmp printf	; 3: 233 13 58

strtoul_test$149:	; PostCall 25

strtoul_test$150:	; Assign base 0
x54007:	mov word [bp + 6], 0	; 5: 199 70 6 0 0

strtoul_test$151:	; Assign text[0] 32
x54012:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtoul_test$152:	; Assign text[1] 32
x54016:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtoul_test$153:	; Assign text[2] 32
x54020:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtoul_test$154:	; Assign text[3] 45
x54024:	mov byte [bp + 11], 45	; 4: 198 70 11 45

strtoul_test$155:	; Assign text[4] 48
x54028:	mov byte [bp + 12], 48	; 4: 198 70 12 48

strtoul_test$156:	; Assign text[5] 49
x54032:	mov byte [bp + 13], 49	; 4: 198 70 13 49

strtoul_test$157:	; Assign text[6] 50
x54036:	mov byte [bp + 14], 50	; 4: 198 70 14 50

strtoul_test$158:	; Assign text[7] 51
x54040:	mov byte [bp + 15], 51	; 4: 198 70 15 51

strtoul_test$159:	; Assign text[8] 97
x54044:	mov byte [bp + 16], 97	; 4: 198 70 16 97

strtoul_test$160:	; Assign text[9] 98
x54048:	mov byte [bp + 17], 98	; 4: 198 70 17 98

strtoul_test$161:	; Assign text[10] 99
x54052:	mov byte [bp + 18], 99	; 4: 198 70 18 99

strtoul_test$162:	; Assign text[11] 0
x54056:	mov byte [bp + 19], 0	; 4: 198 70 19 0

strtoul_test$163:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$164:	; Parameter 22 text 6
x54060:	mov [bp + 28], bp	; 3: 137 110 28
x54063:	add word [bp + 28], 8	; 4: 131 70 28 8

strtoul_test$165:	; address £temporary2782 pointer
x54067:	mov si, bp	; 2: 137 238
x54069:	add si, 20	; 3: 131 198 20

strtoul_test$166:	; Parameter 22 £temporary2782 8
x54072:	mov [bp + 30], si	; 3: 137 118 30

strtoul_test$167:	; Parameter 22 base 10
x54075:	mov ax, [bp + 6]	; 3: 139 70 6
x54078:	mov [bp + 32], ax	; 3: 137 70 32

strtoul_test$168:	; Call 22 strtoul 0
x54081:	mov word [bp + 22], strtoul_test$169	; 5: 199 70 22 79 211
x54086:	mov [bp + 24], bp	; 3: 137 110 24
x54089:	add bp, 22	; 3: 131 197 22
x54092:	jmp strtoul	; 3: 233 98 8

strtoul_test$169:	; PostCall 22

strtoul_test$170:	; GetReturnValue £temporary2783

strtoul_test$171:	; Assign value £temporary2783
x54095:	mov [bp + 22], ebx	; 4: 102 137 94 22

strtoul_test$172:	; CallHeader 26 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$173:	; Parameter 26 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x54099:	mov word [bp + 32], @6424$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 32 147 218

strtoul_test$174:	; Parameter 26 text 8
x54104:	mov [bp + 34], bp	; 3: 137 110 34
x54107:	add word [bp + 34], 8	; 4: 131 70 34 8

strtoul_test$175:	; Parameter 26 value 10
x54111:	mov eax, [bp + 22]	; 4: 102 139 70 22
x54115:	mov [bp + 36], eax	; 4: 102 137 70 36

strtoul_test$176:	; Parameter 26 pointer 14
x54119:	mov ax, [bp + 20]	; 3: 139 70 20
x54122:	mov [bp + 40], ax	; 3: 137 70 40

strtoul_test$177:	; Parameter 26 base 16
x54125:	mov ax, [bp + 6]	; 3: 139 70 6
x54128:	mov [bp + 42], ax	; 3: 137 70 42

strtoul_test$178:	; Call 26 printf 0
x54131:	mov word [bp + 26], strtoul_test$179	; 5: 199 70 26 134 211
x54136:	mov [bp + 28], bp	; 3: 137 110 28
x54139:	add bp, 26	; 3: 131 197 26
x54142:	mov di, bp	; 2: 137 239
x54144:	add di, 10	; 3: 131 199 10
x54147:	jmp printf	; 3: 233 126 57

strtoul_test$179:	; PostCall 26

strtoul_test$180:	; Assign base 0
x54150:	mov word [bp + 6], 0	; 5: 199 70 6 0 0

strtoul_test$181:	; Assign text[0] 32
x54155:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtoul_test$182:	; Assign text[1] 32
x54159:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtoul_test$183:	; Assign text[2] 32
x54163:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtoul_test$184:	; Assign text[3] 45
x54167:	mov byte [bp + 11], 45	; 4: 198 70 11 45

strtoul_test$185:	; Assign text[4] 48
x54171:	mov byte [bp + 12], 48	; 4: 198 70 12 48

strtoul_test$186:	; Assign text[5] 120
x54175:	mov byte [bp + 13], 120	; 4: 198 70 13 120

strtoul_test$187:	; Assign text[6] 49
x54179:	mov byte [bp + 14], 49	; 4: 198 70 14 49

strtoul_test$188:	; Assign text[7] 50
x54183:	mov byte [bp + 15], 50	; 4: 198 70 15 50

strtoul_test$189:	; Assign text[8] 51
x54187:	mov byte [bp + 16], 51	; 4: 198 70 16 51

strtoul_test$190:	; Assign text[9] 65
x54191:	mov byte [bp + 17], 65	; 4: 198 70 17 65

strtoul_test$191:	; Assign text[10] 66
x54195:	mov byte [bp + 18], 66	; 4: 198 70 18 66

strtoul_test$192:	; Assign text[11] 67
x54199:	mov byte [bp + 19], 67	; 4: 198 70 19 67

strtoul_test$193:	; Assign text[12] 0
x54203:	mov byte [bp + 20], 0	; 4: 198 70 20 0

strtoul_test$194:	; CallHeader 23 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$195:	; Parameter 23 text 6
x54207:	mov [bp + 29], bp	; 3: 137 110 29
x54210:	add word [bp + 29], 8	; 4: 131 70 29 8

strtoul_test$196:	; address £temporary2798 pointer
x54214:	mov si, bp	; 2: 137 238
x54216:	add si, 21	; 3: 131 198 21

strtoul_test$197:	; Parameter 23 £temporary2798 8
x54219:	mov [bp + 31], si	; 3: 137 118 31

strtoul_test$198:	; Parameter 23 base 10
x54222:	mov ax, [bp + 6]	; 3: 139 70 6
x54225:	mov [bp + 33], ax	; 3: 137 70 33

strtoul_test$199:	; Call 23 strtoul 0
x54228:	mov word [bp + 23], strtoul_test$200	; 5: 199 70 23 226 211
x54233:	mov [bp + 25], bp	; 3: 137 110 25
x54236:	add bp, 23	; 3: 131 197 23
x54239:	jmp strtoul	; 3: 233 207 7

strtoul_test$200:	; PostCall 23

strtoul_test$201:	; GetReturnValue £temporary2799

strtoul_test$202:	; Assign value £temporary2799
x54242:	mov [bp + 23], ebx	; 4: 102 137 94 23

strtoul_test$203:	; CallHeader 27 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$204:	; Parameter 27 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x54246:	mov word [bp + 33], @6474$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 33 169 218

strtoul_test$205:	; Parameter 27 text 8
x54251:	mov [bp + 35], bp	; 3: 137 110 35
x54254:	add word [bp + 35], 8	; 4: 131 70 35 8

strtoul_test$206:	; Parameter 27 value 10
x54258:	mov eax, [bp + 23]	; 4: 102 139 70 23
x54262:	mov [bp + 37], eax	; 4: 102 137 70 37

strtoul_test$207:	; Parameter 27 pointer 14
x54266:	mov ax, [bp + 21]	; 3: 139 70 21
x54269:	mov [bp + 41], ax	; 3: 137 70 41

strtoul_test$208:	; Parameter 27 base 16
x54272:	mov ax, [bp + 6]	; 3: 139 70 6
x54275:	mov [bp + 43], ax	; 3: 137 70 43

strtoul_test$209:	; Call 27 printf 0
x54278:	mov word [bp + 27], strtoul_test$210	; 5: 199 70 27 25 212
x54283:	mov [bp + 29], bp	; 3: 137 110 29
x54286:	add bp, 27	; 3: 131 197 27
x54289:	mov di, bp	; 2: 137 239
x54291:	add di, 10	; 3: 131 199 10
x54294:	jmp printf	; 3: 233 235 56

strtoul_test$210:	; PostCall 27

strtoul_test$211:	; Assign base 0
x54297:	mov word [bp + 6], 0	; 5: 199 70 6 0 0

strtoul_test$212:	; Assign text[0] 32
x54302:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtoul_test$213:	; Assign text[1] 32
x54306:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtoul_test$214:	; Assign text[2] 32
x54310:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtoul_test$215:	; Assign text[3] 45
x54314:	mov byte [bp + 11], 45	; 4: 198 70 11 45

strtoul_test$216:	; Assign text[4] 48
x54318:	mov byte [bp + 12], 48	; 4: 198 70 12 48

strtoul_test$217:	; Assign text[5] 88
x54322:	mov byte [bp + 13], 88	; 4: 198 70 13 88

strtoul_test$218:	; Assign text[6] 49
x54326:	mov byte [bp + 14], 49	; 4: 198 70 14 49

strtoul_test$219:	; Assign text[7] 50
x54330:	mov byte [bp + 15], 50	; 4: 198 70 15 50

strtoul_test$220:	; Assign text[8] 51
x54334:	mov byte [bp + 16], 51	; 4: 198 70 16 51

strtoul_test$221:	; Assign text[9] 97
x54338:	mov byte [bp + 17], 97	; 4: 198 70 17 97

strtoul_test$222:	; Assign text[10] 98
x54342:	mov byte [bp + 18], 98	; 4: 198 70 18 98

strtoul_test$223:	; Assign text[11] 99
x54346:	mov byte [bp + 19], 99	; 4: 198 70 19 99

strtoul_test$224:	; Assign text[12] 0
x54350:	mov byte [bp + 20], 0	; 4: 198 70 20 0

strtoul_test$225:	; CallHeader 23 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$226:	; Parameter 23 text 6
x54354:	mov [bp + 29], bp	; 3: 137 110 29
x54357:	add word [bp + 29], 8	; 4: 131 70 29 8

strtoul_test$227:	; address £temporary2814 pointer
x54361:	mov si, bp	; 2: 137 238
x54363:	add si, 21	; 3: 131 198 21

strtoul_test$228:	; Parameter 23 £temporary2814 8
x54366:	mov [bp + 31], si	; 3: 137 118 31

strtoul_test$229:	; Parameter 23 base 10
x54369:	mov ax, [bp + 6]	; 3: 139 70 6
x54372:	mov [bp + 33], ax	; 3: 137 70 33

strtoul_test$230:	; Call 23 strtoul 0
x54375:	mov word [bp + 23], strtoul_test$231	; 5: 199 70 23 117 212
x54380:	mov [bp + 25], bp	; 3: 137 110 25
x54383:	add bp, 23	; 3: 131 197 23
x54386:	jmp strtoul	; 3: 233 60 7

strtoul_test$231:	; PostCall 23

strtoul_test$232:	; GetReturnValue £temporary2815

strtoul_test$233:	; Assign value £temporary2815
x54389:	mov [bp + 23], ebx	; 4: 102 137 94 23

strtoul_test$234:	; CallHeader 27 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$235:	; Parameter 27 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x54393:	mov word [bp + 33], @6524$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 33 191 218

strtoul_test$236:	; Parameter 27 text 8
x54398:	mov [bp + 35], bp	; 3: 137 110 35
x54401:	add word [bp + 35], 8	; 4: 131 70 35 8

strtoul_test$237:	; Parameter 27 value 10
x54405:	mov eax, [bp + 23]	; 4: 102 139 70 23
x54409:	mov [bp + 37], eax	; 4: 102 137 70 37

strtoul_test$238:	; Parameter 27 pointer 14
x54413:	mov ax, [bp + 21]	; 3: 139 70 21
x54416:	mov [bp + 41], ax	; 3: 137 70 41

strtoul_test$239:	; Parameter 27 base 16
x54419:	mov ax, [bp + 6]	; 3: 139 70 6
x54422:	mov [bp + 43], ax	; 3: 137 70 43

strtoul_test$240:	; Call 27 printf 0
x54425:	mov word [bp + 27], strtoul_test$241	; 5: 199 70 27 172 212
x54430:	mov [bp + 29], bp	; 3: 137 110 29
x54433:	add bp, 27	; 3: 131 197 27
x54436:	mov di, bp	; 2: 137 239
x54438:	add di, 10	; 3: 131 199 10
x54441:	jmp printf	; 3: 233 88 56

strtoul_test$241:	; PostCall 27

strtoul_test$242:	; Assign base 9
x54444:	mov word [bp + 6], 9	; 5: 199 70 6 9 0

strtoul_test$243:	; Assign text[0] 32
x54449:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtoul_test$244:	; Assign text[1] 32
x54453:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtoul_test$245:	; Assign text[2] 32
x54457:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtoul_test$246:	; Assign text[3] 43
x54461:	mov byte [bp + 11], 43	; 4: 198 70 11 43

strtoul_test$247:	; Assign text[4] 49
x54465:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtoul_test$248:	; Assign text[5] 50
x54469:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtoul_test$249:	; Assign text[6] 51
x54473:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtoul_test$250:	; Assign text[7] 97
x54477:	mov byte [bp + 15], 97	; 4: 198 70 15 97

strtoul_test$251:	; Assign text[8] 98
x54481:	mov byte [bp + 16], 98	; 4: 198 70 16 98

strtoul_test$252:	; Assign text[9] 99
x54485:	mov byte [bp + 17], 99	; 4: 198 70 17 99

strtoul_test$253:	; Assign text[10] 0
x54489:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtoul_test$254:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$255:	; Parameter 21 text 6
x54493:	mov [bp + 27], bp	; 3: 137 110 27
x54496:	add word [bp + 27], 8	; 4: 131 70 27 8

strtoul_test$256:	; address £temporary2828 pointer
x54500:	mov si, bp	; 2: 137 238
x54502:	add si, 19	; 3: 131 198 19

strtoul_test$257:	; Parameter 21 £temporary2828 8
x54505:	mov [bp + 29], si	; 3: 137 118 29

strtoul_test$258:	; Parameter 21 base 10
x54508:	mov ax, [bp + 6]	; 3: 139 70 6
x54511:	mov [bp + 31], ax	; 3: 137 70 31

strtoul_test$259:	; Call 21 strtoul 0
x54514:	mov word [bp + 21], strtoul_test$260	; 5: 199 70 21 0 213
x54519:	mov [bp + 23], bp	; 3: 137 110 23
x54522:	add bp, 21	; 3: 131 197 21
x54525:	jmp strtoul	; 3: 233 177 6

strtoul_test$260:	; PostCall 21

strtoul_test$261:	; GetReturnValue £temporary2829

strtoul_test$262:	; Assign value £temporary2829
x54528:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtoul_test$263:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$264:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x54532:	mov word [bp + 31], @6568$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 213 218

strtoul_test$265:	; Parameter 25 text 8
x54537:	mov [bp + 33], bp	; 3: 137 110 33
x54540:	add word [bp + 33], 8	; 4: 131 70 33 8

strtoul_test$266:	; Parameter 25 value 10
x54544:	mov eax, [bp + 21]	; 4: 102 139 70 21
x54548:	mov [bp + 35], eax	; 4: 102 137 70 35

strtoul_test$267:	; Parameter 25 pointer 14
x54552:	mov ax, [bp + 19]	; 3: 139 70 19
x54555:	mov [bp + 39], ax	; 3: 137 70 39

strtoul_test$268:	; Parameter 25 base 16
x54558:	mov ax, [bp + 6]	; 3: 139 70 6
x54561:	mov [bp + 41], ax	; 3: 137 70 41

strtoul_test$269:	; Call 25 printf 0
x54564:	mov word [bp + 25], strtoul_test$270	; 5: 199 70 25 55 213
x54569:	mov [bp + 27], bp	; 3: 137 110 27
x54572:	add bp, 25	; 3: 131 197 25
x54575:	mov di, bp	; 2: 137 239
x54577:	add di, 10	; 3: 131 199 10
x54580:	jmp printf	; 3: 233 205 55

strtoul_test$270:	; PostCall 25

strtoul_test$271:	; Assign base 10
x54583:	mov word [bp + 6], 10	; 5: 199 70 6 10 0

strtoul_test$272:	; Assign text[0] 32
x54588:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtoul_test$273:	; Assign text[1] 32
x54592:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtoul_test$274:	; Assign text[2] 32
x54596:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtoul_test$275:	; Assign text[3] 43
x54600:	mov byte [bp + 11], 43	; 4: 198 70 11 43

strtoul_test$276:	; Assign text[4] 49
x54604:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtoul_test$277:	; Assign text[5] 50
x54608:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtoul_test$278:	; Assign text[6] 51
x54612:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtoul_test$279:	; Assign text[7] 97
x54616:	mov byte [bp + 15], 97	; 4: 198 70 15 97

strtoul_test$280:	; Assign text[8] 98
x54620:	mov byte [bp + 16], 98	; 4: 198 70 16 98

strtoul_test$281:	; Assign text[9] 99
x54624:	mov byte [bp + 17], 99	; 4: 198 70 17 99

strtoul_test$282:	; Assign text[10] 0
x54628:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtoul_test$283:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$284:	; Parameter 21 text 6
x54632:	mov [bp + 27], bp	; 3: 137 110 27
x54635:	add word [bp + 27], 8	; 4: 131 70 27 8

strtoul_test$285:	; address £temporary2842 pointer
x54639:	mov si, bp	; 2: 137 238
x54641:	add si, 19	; 3: 131 198 19

strtoul_test$286:	; Parameter 21 £temporary2842 8
x54644:	mov [bp + 29], si	; 3: 137 118 29

strtoul_test$287:	; Parameter 21 base 10
x54647:	mov ax, [bp + 6]	; 3: 139 70 6
x54650:	mov [bp + 31], ax	; 3: 137 70 31

strtoul_test$288:	; Call 21 strtoul 0
x54653:	mov word [bp + 21], strtoul_test$289	; 5: 199 70 21 139 213
x54658:	mov [bp + 23], bp	; 3: 137 110 23
x54661:	add bp, 21	; 3: 131 197 21
x54664:	jmp strtoul	; 3: 233 38 6

strtoul_test$289:	; PostCall 21

strtoul_test$290:	; GetReturnValue £temporary2843

strtoul_test$291:	; Assign value £temporary2843
x54667:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtoul_test$292:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$293:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x54671:	mov word [bp + 31], @6612$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 235 218

strtoul_test$294:	; Parameter 25 text 8
x54676:	mov [bp + 33], bp	; 3: 137 110 33
x54679:	add word [bp + 33], 8	; 4: 131 70 33 8

strtoul_test$295:	; Parameter 25 value 10
x54683:	mov eax, [bp + 21]	; 4: 102 139 70 21
x54687:	mov [bp + 35], eax	; 4: 102 137 70 35

strtoul_test$296:	; Parameter 25 pointer 14
x54691:	mov ax, [bp + 19]	; 3: 139 70 19
x54694:	mov [bp + 39], ax	; 3: 137 70 39

strtoul_test$297:	; Parameter 25 base 16
x54697:	mov ax, [bp + 6]	; 3: 139 70 6
x54700:	mov [bp + 41], ax	; 3: 137 70 41

strtoul_test$298:	; Call 25 printf 0
x54703:	mov word [bp + 25], strtoul_test$299	; 5: 199 70 25 194 213
x54708:	mov [bp + 27], bp	; 3: 137 110 27
x54711:	add bp, 25	; 3: 131 197 25
x54714:	mov di, bp	; 2: 137 239
x54716:	add di, 10	; 3: 131 199 10
x54719:	jmp printf	; 3: 233 66 55

strtoul_test$299:	; PostCall 25

strtoul_test$300:	; Assign base 11
x54722:	mov word [bp + 6], 11	; 5: 199 70 6 11 0

strtoul_test$301:	; Assign text[0] 32
x54727:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtoul_test$302:	; Assign text[1] 32
x54731:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtoul_test$303:	; Assign text[2] 32
x54735:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtoul_test$304:	; Assign text[3] 43
x54739:	mov byte [bp + 11], 43	; 4: 198 70 11 43

strtoul_test$305:	; Assign text[4] 49
x54743:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtoul_test$306:	; Assign text[5] 50
x54747:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtoul_test$307:	; Assign text[6] 51
x54751:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtoul_test$308:	; Assign text[7] 97
x54755:	mov byte [bp + 15], 97	; 4: 198 70 15 97

strtoul_test$309:	; Assign text[8] 98
x54759:	mov byte [bp + 16], 98	; 4: 198 70 16 98

strtoul_test$310:	; Assign text[9] 99
x54763:	mov byte [bp + 17], 99	; 4: 198 70 17 99

strtoul_test$311:	; Assign text[10] 0
x54767:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtoul_test$312:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$313:	; Parameter 21 text 6
x54771:	mov [bp + 27], bp	; 3: 137 110 27
x54774:	add word [bp + 27], 8	; 4: 131 70 27 8

strtoul_test$314:	; address £temporary2856 pointer
x54778:	mov si, bp	; 2: 137 238
x54780:	add si, 19	; 3: 131 198 19

strtoul_test$315:	; Parameter 21 £temporary2856 8
x54783:	mov [bp + 29], si	; 3: 137 118 29

strtoul_test$316:	; Parameter 21 base 10
x54786:	mov ax, [bp + 6]	; 3: 139 70 6
x54789:	mov [bp + 31], ax	; 3: 137 70 31

strtoul_test$317:	; Call 21 strtoul 0
x54792:	mov word [bp + 21], strtoul_test$318	; 5: 199 70 21 22 214
x54797:	mov [bp + 23], bp	; 3: 137 110 23
x54800:	add bp, 21	; 3: 131 197 21
x54803:	jmp strtoul	; 3: 233 155 5

strtoul_test$318:	; PostCall 21

strtoul_test$319:	; GetReturnValue £temporary2857

strtoul_test$320:	; Assign value £temporary2857
x54806:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtoul_test$321:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$322:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x54810:	mov word [bp + 31], @6656$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 1 219

strtoul_test$323:	; Parameter 25 text 8
x54815:	mov [bp + 33], bp	; 3: 137 110 33
x54818:	add word [bp + 33], 8	; 4: 131 70 33 8

strtoul_test$324:	; Parameter 25 value 10
x54822:	mov eax, [bp + 21]	; 4: 102 139 70 21
x54826:	mov [bp + 35], eax	; 4: 102 137 70 35

strtoul_test$325:	; Parameter 25 pointer 14
x54830:	mov ax, [bp + 19]	; 3: 139 70 19
x54833:	mov [bp + 39], ax	; 3: 137 70 39

strtoul_test$326:	; Parameter 25 base 16
x54836:	mov ax, [bp + 6]	; 3: 139 70 6
x54839:	mov [bp + 41], ax	; 3: 137 70 41

strtoul_test$327:	; Call 25 printf 0
x54842:	mov word [bp + 25], strtoul_test$328	; 5: 199 70 25 77 214
x54847:	mov [bp + 27], bp	; 3: 137 110 27
x54850:	add bp, 25	; 3: 131 197 25
x54853:	mov di, bp	; 2: 137 239
x54855:	add di, 10	; 3: 131 199 10
x54858:	jmp printf	; 3: 233 183 54

strtoul_test$328:	; PostCall 25

strtoul_test$329:	; Assign base 12
x54861:	mov word [bp + 6], 12	; 5: 199 70 6 12 0

strtoul_test$330:	; Assign text[0] 32
x54866:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtoul_test$331:	; Assign text[1] 32
x54870:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtoul_test$332:	; Assign text[2] 32
x54874:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtoul_test$333:	; Assign text[3] 43
x54878:	mov byte [bp + 11], 43	; 4: 198 70 11 43

strtoul_test$334:	; Assign text[4] 49
x54882:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtoul_test$335:	; Assign text[5] 50
x54886:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtoul_test$336:	; Assign text[6] 51
x54890:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtoul_test$337:	; Assign text[7] 65
x54894:	mov byte [bp + 15], 65	; 4: 198 70 15 65

strtoul_test$338:	; Assign text[8] 66
x54898:	mov byte [bp + 16], 66	; 4: 198 70 16 66

strtoul_test$339:	; Assign text[9] 67
x54902:	mov byte [bp + 17], 67	; 4: 198 70 17 67

strtoul_test$340:	; Assign text[10] 0
x54906:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtoul_test$341:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$342:	; Parameter 21 text 6
x54910:	mov [bp + 27], bp	; 3: 137 110 27
x54913:	add word [bp + 27], 8	; 4: 131 70 27 8

strtoul_test$343:	; address £temporary2870 pointer
x54917:	mov si, bp	; 2: 137 238
x54919:	add si, 19	; 3: 131 198 19

strtoul_test$344:	; Parameter 21 £temporary2870 8
x54922:	mov [bp + 29], si	; 3: 137 118 29

strtoul_test$345:	; Parameter 21 base 10
x54925:	mov ax, [bp + 6]	; 3: 139 70 6
x54928:	mov [bp + 31], ax	; 3: 137 70 31

strtoul_test$346:	; Call 21 strtoul 0
x54931:	mov word [bp + 21], strtoul_test$347	; 5: 199 70 21 161 214
x54936:	mov [bp + 23], bp	; 3: 137 110 23
x54939:	add bp, 21	; 3: 131 197 21
x54942:	jmp strtoul	; 3: 233 16 5

strtoul_test$347:	; PostCall 21

strtoul_test$348:	; GetReturnValue £temporary2871

strtoul_test$349:	; Assign value £temporary2871
x54945:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtoul_test$350:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$351:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x54949:	mov word [bp + 31], @6700$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 23 219

strtoul_test$352:	; Parameter 25 text 8
x54954:	mov [bp + 33], bp	; 3: 137 110 33
x54957:	add word [bp + 33], 8	; 4: 131 70 33 8

strtoul_test$353:	; Parameter 25 value 10
x54961:	mov eax, [bp + 21]	; 4: 102 139 70 21
x54965:	mov [bp + 35], eax	; 4: 102 137 70 35

strtoul_test$354:	; Parameter 25 pointer 14
x54969:	mov ax, [bp + 19]	; 3: 139 70 19
x54972:	mov [bp + 39], ax	; 3: 137 70 39

strtoul_test$355:	; Parameter 25 base 16
x54975:	mov ax, [bp + 6]	; 3: 139 70 6
x54978:	mov [bp + 41], ax	; 3: 137 70 41

strtoul_test$356:	; Call 25 printf 0
x54981:	mov word [bp + 25], strtoul_test$357	; 5: 199 70 25 216 214
x54986:	mov [bp + 27], bp	; 3: 137 110 27
x54989:	add bp, 25	; 3: 131 197 25
x54992:	mov di, bp	; 2: 137 239
x54994:	add di, 10	; 3: 131 199 10
x54997:	jmp printf	; 3: 233 44 54

strtoul_test$357:	; PostCall 25

strtoul_test$358:	; Assign base 13
x55000:	mov word [bp + 6], 13	; 5: 199 70 6 13 0

strtoul_test$359:	; Assign text[0] 32
x55005:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtoul_test$360:	; Assign text[1] 32
x55009:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtoul_test$361:	; Assign text[2] 32
x55013:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtoul_test$362:	; Assign text[3] 43
x55017:	mov byte [bp + 11], 43	; 4: 198 70 11 43

strtoul_test$363:	; Assign text[4] 49
x55021:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtoul_test$364:	; Assign text[5] 50
x55025:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtoul_test$365:	; Assign text[6] 51
x55029:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtoul_test$366:	; Assign text[7] 97
x55033:	mov byte [bp + 15], 97	; 4: 198 70 15 97

strtoul_test$367:	; Assign text[8] 98
x55037:	mov byte [bp + 16], 98	; 4: 198 70 16 98

strtoul_test$368:	; Assign text[9] 99
x55041:	mov byte [bp + 17], 99	; 4: 198 70 17 99

strtoul_test$369:	; Assign text[10] 0
x55045:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtoul_test$370:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$371:	; Parameter 21 text 6
x55049:	mov [bp + 27], bp	; 3: 137 110 27
x55052:	add word [bp + 27], 8	; 4: 131 70 27 8

strtoul_test$372:	; address £temporary2884 pointer
x55056:	mov si, bp	; 2: 137 238
x55058:	add si, 19	; 3: 131 198 19

strtoul_test$373:	; Parameter 21 £temporary2884 8
x55061:	mov [bp + 29], si	; 3: 137 118 29

strtoul_test$374:	; Parameter 21 base 10
x55064:	mov ax, [bp + 6]	; 3: 139 70 6
x55067:	mov [bp + 31], ax	; 3: 137 70 31

strtoul_test$375:	; Call 21 strtoul 0
x55070:	mov word [bp + 21], strtoul_test$376	; 5: 199 70 21 44 215
x55075:	mov [bp + 23], bp	; 3: 137 110 23
x55078:	add bp, 21	; 3: 131 197 21
x55081:	jmp strtoul	; 3: 233 133 4

strtoul_test$376:	; PostCall 21

strtoul_test$377:	; GetReturnValue £temporary2885

strtoul_test$378:	; Assign value £temporary2885
x55084:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtoul_test$379:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$380:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x55088:	mov word [bp + 31], @6744$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 45 219

strtoul_test$381:	; Parameter 25 text 8
x55093:	mov [bp + 33], bp	; 3: 137 110 33
x55096:	add word [bp + 33], 8	; 4: 131 70 33 8

strtoul_test$382:	; Parameter 25 value 10
x55100:	mov eax, [bp + 21]	; 4: 102 139 70 21
x55104:	mov [bp + 35], eax	; 4: 102 137 70 35

strtoul_test$383:	; Parameter 25 pointer 14
x55108:	mov ax, [bp + 19]	; 3: 139 70 19
x55111:	mov [bp + 39], ax	; 3: 137 70 39

strtoul_test$384:	; Parameter 25 base 16
x55114:	mov ax, [bp + 6]	; 3: 139 70 6
x55117:	mov [bp + 41], ax	; 3: 137 70 41

strtoul_test$385:	; Call 25 printf 0
x55120:	mov word [bp + 25], strtoul_test$386	; 5: 199 70 25 99 215
x55125:	mov [bp + 27], bp	; 3: 137 110 27
x55128:	add bp, 25	; 3: 131 197 25
x55131:	mov di, bp	; 2: 137 239
x55133:	add di, 10	; 3: 131 199 10
x55136:	jmp printf	; 3: 233 161 53

strtoul_test$386:	; PostCall 25

strtoul_test$387:	; Assign base 9
x55139:	mov word [bp + 6], 9	; 5: 199 70 6 9 0

strtoul_test$388:	; Assign text[0] 32
x55144:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtoul_test$389:	; Assign text[1] 32
x55148:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtoul_test$390:	; Assign text[2] 32
x55152:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtoul_test$391:	; Assign text[3] 45
x55156:	mov byte [bp + 11], 45	; 4: 198 70 11 45

strtoul_test$392:	; Assign text[4] 49
x55160:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtoul_test$393:	; Assign text[5] 50
x55164:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtoul_test$394:	; Assign text[6] 51
x55168:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtoul_test$395:	; Assign text[7] 97
x55172:	mov byte [bp + 15], 97	; 4: 198 70 15 97

strtoul_test$396:	; Assign text[8] 98
x55176:	mov byte [bp + 16], 98	; 4: 198 70 16 98

strtoul_test$397:	; Assign text[9] 99
x55180:	mov byte [bp + 17], 99	; 4: 198 70 17 99

strtoul_test$398:	; Assign text[10] 0
x55184:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtoul_test$399:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$400:	; Parameter 21 text 6
x55188:	mov [bp + 27], bp	; 3: 137 110 27
x55191:	add word [bp + 27], 8	; 4: 131 70 27 8

strtoul_test$401:	; address £temporary2898 pointer
x55195:	mov si, bp	; 2: 137 238
x55197:	add si, 19	; 3: 131 198 19

strtoul_test$402:	; Parameter 21 £temporary2898 8
x55200:	mov [bp + 29], si	; 3: 137 118 29

strtoul_test$403:	; Parameter 21 base 10
x55203:	mov ax, [bp + 6]	; 3: 139 70 6
x55206:	mov [bp + 31], ax	; 3: 137 70 31

strtoul_test$404:	; Call 21 strtoul 0
x55209:	mov word [bp + 21], strtoul_test$405	; 5: 199 70 21 183 215
x55214:	mov [bp + 23], bp	; 3: 137 110 23
x55217:	add bp, 21	; 3: 131 197 21
x55220:	jmp strtoul	; 3: 233 250 3

strtoul_test$405:	; PostCall 21

strtoul_test$406:	; GetReturnValue £temporary2899

strtoul_test$407:	; Assign value £temporary2899
x55223:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtoul_test$408:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$409:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x55227:	mov word [bp + 31], @6788$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 67 219

strtoul_test$410:	; Parameter 25 text 8
x55232:	mov [bp + 33], bp	; 3: 137 110 33
x55235:	add word [bp + 33], 8	; 4: 131 70 33 8

strtoul_test$411:	; Parameter 25 value 10
x55239:	mov eax, [bp + 21]	; 4: 102 139 70 21
x55243:	mov [bp + 35], eax	; 4: 102 137 70 35

strtoul_test$412:	; Parameter 25 pointer 14
x55247:	mov ax, [bp + 19]	; 3: 139 70 19
x55250:	mov [bp + 39], ax	; 3: 137 70 39

strtoul_test$413:	; Parameter 25 base 16
x55253:	mov ax, [bp + 6]	; 3: 139 70 6
x55256:	mov [bp + 41], ax	; 3: 137 70 41

strtoul_test$414:	; Call 25 printf 0
x55259:	mov word [bp + 25], strtoul_test$415	; 5: 199 70 25 238 215
x55264:	mov [bp + 27], bp	; 3: 137 110 27
x55267:	add bp, 25	; 3: 131 197 25
x55270:	mov di, bp	; 2: 137 239
x55272:	add di, 10	; 3: 131 199 10
x55275:	jmp printf	; 3: 233 22 53

strtoul_test$415:	; PostCall 25

strtoul_test$416:	; Assign base 10
x55278:	mov word [bp + 6], 10	; 5: 199 70 6 10 0

strtoul_test$417:	; Assign text[0] 32
x55283:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtoul_test$418:	; Assign text[1] 32
x55287:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtoul_test$419:	; Assign text[2] 32
x55291:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtoul_test$420:	; Assign text[3] 45
x55295:	mov byte [bp + 11], 45	; 4: 198 70 11 45

strtoul_test$421:	; Assign text[4] 49
x55299:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtoul_test$422:	; Assign text[5] 50
x55303:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtoul_test$423:	; Assign text[6] 51
x55307:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtoul_test$424:	; Assign text[7] 97
x55311:	mov byte [bp + 15], 97	; 4: 198 70 15 97

strtoul_test$425:	; Assign text[8] 98
x55315:	mov byte [bp + 16], 98	; 4: 198 70 16 98

strtoul_test$426:	; Assign text[9] 99
x55319:	mov byte [bp + 17], 99	; 4: 198 70 17 99

strtoul_test$427:	; Assign text[10] 0
x55323:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtoul_test$428:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$429:	; Parameter 21 text 6
x55327:	mov [bp + 27], bp	; 3: 137 110 27
x55330:	add word [bp + 27], 8	; 4: 131 70 27 8

strtoul_test$430:	; address £temporary2912 pointer
x55334:	mov si, bp	; 2: 137 238
x55336:	add si, 19	; 3: 131 198 19

strtoul_test$431:	; Parameter 21 £temporary2912 8
x55339:	mov [bp + 29], si	; 3: 137 118 29

strtoul_test$432:	; Parameter 21 base 10
x55342:	mov ax, [bp + 6]	; 3: 139 70 6
x55345:	mov [bp + 31], ax	; 3: 137 70 31

strtoul_test$433:	; Call 21 strtoul 0
x55348:	mov word [bp + 21], strtoul_test$434	; 5: 199 70 21 66 216
x55353:	mov [bp + 23], bp	; 3: 137 110 23
x55356:	add bp, 21	; 3: 131 197 21
x55359:	jmp strtoul	; 3: 233 111 3

strtoul_test$434:	; PostCall 21

strtoul_test$435:	; GetReturnValue £temporary2913

strtoul_test$436:	; Assign value £temporary2913
x55362:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtoul_test$437:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$438:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x55366:	mov word [bp + 31], @6832$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 89 219

strtoul_test$439:	; Parameter 25 text 8
x55371:	mov [bp + 33], bp	; 3: 137 110 33
x55374:	add word [bp + 33], 8	; 4: 131 70 33 8

strtoul_test$440:	; Parameter 25 value 10
x55378:	mov eax, [bp + 21]	; 4: 102 139 70 21
x55382:	mov [bp + 35], eax	; 4: 102 137 70 35

strtoul_test$441:	; Parameter 25 pointer 14
x55386:	mov ax, [bp + 19]	; 3: 139 70 19
x55389:	mov [bp + 39], ax	; 3: 137 70 39

strtoul_test$442:	; Parameter 25 base 16
x55392:	mov ax, [bp + 6]	; 3: 139 70 6
x55395:	mov [bp + 41], ax	; 3: 137 70 41

strtoul_test$443:	; Call 25 printf 0
x55398:	mov word [bp + 25], strtoul_test$444	; 5: 199 70 25 121 216
x55403:	mov [bp + 27], bp	; 3: 137 110 27
x55406:	add bp, 25	; 3: 131 197 25
x55409:	mov di, bp	; 2: 137 239
x55411:	add di, 10	; 3: 131 199 10
x55414:	jmp printf	; 3: 233 139 52

strtoul_test$444:	; PostCall 25

strtoul_test$445:	; Assign base 11
x55417:	mov word [bp + 6], 11	; 5: 199 70 6 11 0

strtoul_test$446:	; Assign text[0] 32
x55422:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtoul_test$447:	; Assign text[1] 32
x55426:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtoul_test$448:	; Assign text[2] 32
x55430:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtoul_test$449:	; Assign text[3] 45
x55434:	mov byte [bp + 11], 45	; 4: 198 70 11 45

strtoul_test$450:	; Assign text[4] 49
x55438:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtoul_test$451:	; Assign text[5] 50
x55442:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtoul_test$452:	; Assign text[6] 51
x55446:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtoul_test$453:	; Assign text[7] 97
x55450:	mov byte [bp + 15], 97	; 4: 198 70 15 97

strtoul_test$454:	; Assign text[8] 98
x55454:	mov byte [bp + 16], 98	; 4: 198 70 16 98

strtoul_test$455:	; Assign text[9] 99
x55458:	mov byte [bp + 17], 99	; 4: 198 70 17 99

strtoul_test$456:	; Assign text[10] 0
x55462:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtoul_test$457:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$458:	; Parameter 21 text 6
x55466:	mov [bp + 27], bp	; 3: 137 110 27
x55469:	add word [bp + 27], 8	; 4: 131 70 27 8

strtoul_test$459:	; address £temporary2926 pointer
x55473:	mov si, bp	; 2: 137 238
x55475:	add si, 19	; 3: 131 198 19

strtoul_test$460:	; Parameter 21 £temporary2926 8
x55478:	mov [bp + 29], si	; 3: 137 118 29

strtoul_test$461:	; Parameter 21 base 10
x55481:	mov ax, [bp + 6]	; 3: 139 70 6
x55484:	mov [bp + 31], ax	; 3: 137 70 31

strtoul_test$462:	; Call 21 strtoul 0
x55487:	mov word [bp + 21], strtoul_test$463	; 5: 199 70 21 205 216
x55492:	mov [bp + 23], bp	; 3: 137 110 23
x55495:	add bp, 21	; 3: 131 197 21
x55498:	jmp strtoul	; 3: 233 228 2

strtoul_test$463:	; PostCall 21

strtoul_test$464:	; GetReturnValue £temporary2927

strtoul_test$465:	; Assign value £temporary2927
x55501:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtoul_test$466:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$467:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x55505:	mov word [bp + 31], @6876$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 111 219

strtoul_test$468:	; Parameter 25 text 8
x55510:	mov [bp + 33], bp	; 3: 137 110 33
x55513:	add word [bp + 33], 8	; 4: 131 70 33 8

strtoul_test$469:	; Parameter 25 value 10
x55517:	mov eax, [bp + 21]	; 4: 102 139 70 21
x55521:	mov [bp + 35], eax	; 4: 102 137 70 35

strtoul_test$470:	; Parameter 25 pointer 14
x55525:	mov ax, [bp + 19]	; 3: 139 70 19
x55528:	mov [bp + 39], ax	; 3: 137 70 39

strtoul_test$471:	; Parameter 25 base 16
x55531:	mov ax, [bp + 6]	; 3: 139 70 6
x55534:	mov [bp + 41], ax	; 3: 137 70 41

strtoul_test$472:	; Call 25 printf 0
x55537:	mov word [bp + 25], strtoul_test$473	; 5: 199 70 25 4 217
x55542:	mov [bp + 27], bp	; 3: 137 110 27
x55545:	add bp, 25	; 3: 131 197 25
x55548:	mov di, bp	; 2: 137 239
x55550:	add di, 10	; 3: 131 199 10
x55553:	jmp printf	; 3: 233 0 52

strtoul_test$473:	; PostCall 25

strtoul_test$474:	; Assign base 12
x55556:	mov word [bp + 6], 12	; 5: 199 70 6 12 0

strtoul_test$475:	; Assign text[0] 32
x55561:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtoul_test$476:	; Assign text[1] 32
x55565:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtoul_test$477:	; Assign text[2] 32
x55569:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtoul_test$478:	; Assign text[3] 45
x55573:	mov byte [bp + 11], 45	; 4: 198 70 11 45

strtoul_test$479:	; Assign text[4] 49
x55577:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtoul_test$480:	; Assign text[5] 50
x55581:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtoul_test$481:	; Assign text[6] 51
x55585:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtoul_test$482:	; Assign text[7] 65
x55589:	mov byte [bp + 15], 65	; 4: 198 70 15 65

strtoul_test$483:	; Assign text[8] 66
x55593:	mov byte [bp + 16], 66	; 4: 198 70 16 66

strtoul_test$484:	; Assign text[9] 67
x55597:	mov byte [bp + 17], 67	; 4: 198 70 17 67

strtoul_test$485:	; Assign text[10] 0
x55601:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtoul_test$486:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$487:	; Parameter 21 text 6
x55605:	mov [bp + 27], bp	; 3: 137 110 27
x55608:	add word [bp + 27], 8	; 4: 131 70 27 8

strtoul_test$488:	; address £temporary2940 pointer
x55612:	mov si, bp	; 2: 137 238
x55614:	add si, 19	; 3: 131 198 19

strtoul_test$489:	; Parameter 21 £temporary2940 8
x55617:	mov [bp + 29], si	; 3: 137 118 29

strtoul_test$490:	; Parameter 21 base 10
x55620:	mov ax, [bp + 6]	; 3: 139 70 6
x55623:	mov [bp + 31], ax	; 3: 137 70 31

strtoul_test$491:	; Call 21 strtoul 0
x55626:	mov word [bp + 21], strtoul_test$492	; 5: 199 70 21 88 217
x55631:	mov [bp + 23], bp	; 3: 137 110 23
x55634:	add bp, 21	; 3: 131 197 21
x55637:	jmp strtoul	; 3: 233 89 2

strtoul_test$492:	; PostCall 21

strtoul_test$493:	; GetReturnValue £temporary2941

strtoul_test$494:	; Assign value £temporary2941
x55640:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtoul_test$495:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$496:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x55644:	mov word [bp + 31], @6920$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 133 219

strtoul_test$497:	; Parameter 25 text 8
x55649:	mov [bp + 33], bp	; 3: 137 110 33
x55652:	add word [bp + 33], 8	; 4: 131 70 33 8

strtoul_test$498:	; Parameter 25 value 10
x55656:	mov eax, [bp + 21]	; 4: 102 139 70 21
x55660:	mov [bp + 35], eax	; 4: 102 137 70 35

strtoul_test$499:	; Parameter 25 pointer 14
x55664:	mov ax, [bp + 19]	; 3: 139 70 19
x55667:	mov [bp + 39], ax	; 3: 137 70 39

strtoul_test$500:	; Parameter 25 base 16
x55670:	mov ax, [bp + 6]	; 3: 139 70 6
x55673:	mov [bp + 41], ax	; 3: 137 70 41

strtoul_test$501:	; Call 25 printf 0
x55676:	mov word [bp + 25], strtoul_test$502	; 5: 199 70 25 143 217
x55681:	mov [bp + 27], bp	; 3: 137 110 27
x55684:	add bp, 25	; 3: 131 197 25
x55687:	mov di, bp	; 2: 137 239
x55689:	add di, 10	; 3: 131 199 10
x55692:	jmp printf	; 3: 233 117 51

strtoul_test$502:	; PostCall 25

strtoul_test$503:	; Assign base 13
x55695:	mov word [bp + 6], 13	; 5: 199 70 6 13 0

strtoul_test$504:	; Assign text[0] 32
x55700:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtoul_test$505:	; Assign text[1] 32
x55704:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtoul_test$506:	; Assign text[2] 32
x55708:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtoul_test$507:	; Assign text[3] 45
x55712:	mov byte [bp + 11], 45	; 4: 198 70 11 45

strtoul_test$508:	; Assign text[4] 49
x55716:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtoul_test$509:	; Assign text[5] 50
x55720:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtoul_test$510:	; Assign text[6] 51
x55724:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtoul_test$511:	; Assign text[7] 97
x55728:	mov byte [bp + 15], 97	; 4: 198 70 15 97

strtoul_test$512:	; Assign text[8] 98
x55732:	mov byte [bp + 16], 98	; 4: 198 70 16 98

strtoul_test$513:	; Assign text[9] 99
x55736:	mov byte [bp + 17], 99	; 4: 198 70 17 99

strtoul_test$514:	; Assign text[10] 0
x55740:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtoul_test$515:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$516:	; Parameter 21 text 6
x55744:	mov [bp + 27], bp	; 3: 137 110 27
x55747:	add word [bp + 27], 8	; 4: 131 70 27 8

strtoul_test$517:	; address £temporary2954 pointer
x55751:	mov si, bp	; 2: 137 238
x55753:	add si, 19	; 3: 131 198 19

strtoul_test$518:	; Parameter 21 £temporary2954 8
x55756:	mov [bp + 29], si	; 3: 137 118 29

strtoul_test$519:	; Parameter 21 base 10
x55759:	mov ax, [bp + 6]	; 3: 139 70 6
x55762:	mov [bp + 31], ax	; 3: 137 70 31

strtoul_test$520:	; Call 21 strtoul 0
x55765:	mov word [bp + 21], strtoul_test$521	; 5: 199 70 21 227 217
x55770:	mov [bp + 23], bp	; 3: 137 110 23
x55773:	add bp, 21	; 3: 131 197 21
x55776:	jmp strtoul	; 3: 233 206 1

strtoul_test$521:	; PostCall 21

strtoul_test$522:	; GetReturnValue £temporary2955

strtoul_test$523:	; Assign value £temporary2955
x55779:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtoul_test$524:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$525:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x55783:	mov word [bp + 31], @6964$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 155 219

strtoul_test$526:	; Parameter 25 text 8
x55788:	mov [bp + 33], bp	; 3: 137 110 33
x55791:	add word [bp + 33], 8	; 4: 131 70 33 8

strtoul_test$527:	; Parameter 25 value 10
x55795:	mov eax, [bp + 21]	; 4: 102 139 70 21
x55799:	mov [bp + 35], eax	; 4: 102 137 70 35

strtoul_test$528:	; Parameter 25 pointer 14
x55803:	mov ax, [bp + 19]	; 3: 139 70 19
x55806:	mov [bp + 39], ax	; 3: 137 70 39

strtoul_test$529:	; Parameter 25 base 16
x55809:	mov ax, [bp + 6]	; 3: 139 70 6
x55812:	mov [bp + 41], ax	; 3: 137 70 41

strtoul_test$530:	; Call 25 printf 0
x55815:	mov word [bp + 25], strtoul_test$531	; 5: 199 70 25 26 218
x55820:	mov [bp + 27], bp	; 3: 137 110 27
x55823:	add bp, 25	; 3: 131 197 25
x55826:	mov di, bp	; 2: 137 239
x55828:	add di, 10	; 3: 131 199 10
x55831:	jmp printf	; 3: 233 234 50

strtoul_test$531:	; PostCall 25

strtoul_test$532:	; Return 0
x55834:	mov ax, [bp]	; 3: 139 70 0
x55837:	mov di, [bp + 4]	; 3: 139 126 4
x55840:	mov bp, [bp + 2]	; 3: 139 110 2
x55843:	jmp ax	; 2: 255 224

strtoul_test$533:	; FunctionEnd strtoul_test

@6186$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x55845:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@6233$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x55867:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@6283$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x55889:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@6333$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x55911:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@6377$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x55933:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@6424$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x55955:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@6474$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x55977:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@6524$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x55999:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@6568$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x56021:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@6612$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x56043:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@6656$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x56065:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@6700$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x56087:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@6744$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x56109:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@6788$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x56131:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@6832$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x56153:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@6876$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x56175:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@6920$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x56197:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@6964$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x56219:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

strtoul:	; Assign g_inStatus 1
x56241:	mov word [g_inStatus], 1	; 6: 199 6 184 95 1 0

strtoul$1:	; Assign g_inDevice s
x56247:	mov ax, [bp + 6]	; 3: 139 70 6
x56250:	mov [g_inDevice], ax	; 3: 163 186 95

strtoul$2:	; Assign g_inChars 0
x56253:	mov word [g_inChars], 0	; 6: 199 6 221 100 0 0

strtoul$3:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul$4:	; Parameter 12 base 6
x56259:	mov ax, [bp + 10]	; 3: 139 70 10
x56262:	mov [bp + 18], ax	; 3: 137 70 18

strtoul$5:	; Call 12 scanUnsignedLongInt 0
x56265:	mov word [bp + 12], strtoul$6	; 5: 199 70 12 215 219
x56270:	mov [bp + 14], bp	; 3: 137 110 14
x56273:	add bp, 12	; 3: 131 197 12
x56276:	jmp scanUnsignedLongInt	; 3: 233 53 144

strtoul$6:	; PostCall 12

strtoul$7:	; GetReturnValue £temporary2251

strtoul$8:	; Assign unsignedLongValue £temporary2251
x56279:	mov [bp + 12], ebx	; 4: 102 137 94 12

strtoul$9:	; Equal 12 endp 0
x56283:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x56287:	je strtoul$12	; 2: 116 12

strtoul$10:	; Deref £temporary2253 -> endp endp 0
x56289:	mov si, [bp + 8]	; 3: 139 118 8

strtoul$11:	; BinaryAdd £temporary2253 -> endp s g_inChars
x56292:	mov ax, [bp + 6]	; 3: 139 70 6
x56295:	add ax, [g_inChars]	; 4: 3 6 221 100
x56299:	mov [si], ax	; 2: 137 4

strtoul$12:	; SetReturnValue unsignedLongValue
x56301:	mov ebx, [bp + 12]	; 4: 102 139 94 12

strtoul$13:	; Return unsignedLongValue
x56305:	mov ax, [bp]	; 3: 139 70 0
x56308:	mov di, [bp + 4]	; 3: 139 126 4
x56311:	mov bp, [bp + 2]	; 3: 139 110 2
x56314:	jmp ax	; 2: 255 224

strtoul$14:	; FunctionEnd strtoul

character_test:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_test$1:	; Parameter 6 97 6
x56316:	mov byte [bp + 12], 97	; 4: 198 70 12 97

character_test$2:	; Call 6 character_testX 0
x56320:	mov word [bp + 6], character_test$3	; 5: 199 70 6 14 220
x56325:	mov [bp + 8], bp	; 3: 137 110 8
x56328:	add bp, 6	; 3: 131 197 6
x56331:	nop	; 1: 144
x56332:	jmp character_testX	; 2: 235 119

character_test$3:	; PostCall 6

character_test$4:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_test$5:	; Parameter 6 66 6
x56334:	mov byte [bp + 12], 66	; 4: 198 70 12 66

character_test$6:	; Call 6 character_testX 0
x56338:	mov word [bp + 6], character_test$7	; 5: 199 70 6 32 220
x56343:	mov [bp + 8], bp	; 3: 137 110 8
x56346:	add bp, 6	; 3: 131 197 6
x56349:	nop	; 1: 144
x56350:	jmp character_testX	; 2: 235 101

character_test$7:	; PostCall 6

character_test$8:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_test$9:	; Parameter 6 49 6
x56352:	mov byte [bp + 12], 49	; 4: 198 70 12 49

character_test$10:	; Call 6 character_testX 0
x56356:	mov word [bp + 6], character_test$11	; 5: 199 70 6 50 220
x56361:	mov [bp + 8], bp	; 3: 137 110 8
x56364:	add bp, 6	; 3: 131 197 6
x56367:	nop	; 1: 144
x56368:	jmp character_testX	; 2: 235 83

character_test$11:	; PostCall 6

character_test$12:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_test$13:	; Parameter 6 46 6
x56370:	mov byte [bp + 12], 46	; 4: 198 70 12 46

character_test$14:	; Call 6 character_testX 0
x56374:	mov word [bp + 6], character_test$15	; 5: 199 70 6 68 220
x56379:	mov [bp + 8], bp	; 3: 137 110 8
x56382:	add bp, 6	; 3: 131 197 6
x56385:	nop	; 1: 144
x56386:	jmp character_testX	; 2: 235 65

character_test$15:	; PostCall 6

character_test$16:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_test$17:	; Parameter 6 10 6
x56388:	mov byte [bp + 12], 10	; 4: 198 70 12 10

character_test$18:	; Call 6 character_testX 0
x56392:	mov word [bp + 6], character_test$19	; 5: 199 70 6 86 220
x56397:	mov [bp + 8], bp	; 3: 137 110 8
x56400:	add bp, 6	; 3: 131 197 6
x56403:	nop	; 1: 144
x56404:	jmp character_testX	; 2: 235 47

character_test$19:	; PostCall 6

character_test$20:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_test$21:	; Parameter 6 102 6
x56406:	mov byte [bp + 12], 102	; 4: 198 70 12 102

character_test$22:	; Call 6 character_testX 0
x56410:	mov word [bp + 6], character_test$23	; 5: 199 70 6 104 220
x56415:	mov [bp + 8], bp	; 3: 137 110 8
x56418:	add bp, 6	; 3: 131 197 6
x56421:	nop	; 1: 144
x56422:	jmp character_testX	; 2: 235 29

character_test$23:	; PostCall 6

character_test$24:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_test$25:	; Parameter 6 103 6
x56424:	mov byte [bp + 12], 103	; 4: 198 70 12 103

character_test$26:	; Call 6 character_testX 0
x56428:	mov word [bp + 6], character_test$27	; 5: 199 70 6 122 220
x56433:	mov [bp + 8], bp	; 3: 137 110 8
x56436:	add bp, 6	; 3: 131 197 6
x56439:	nop	; 1: 144
x56440:	jmp character_testX	; 2: 235 11

character_test$27:	; PostCall 6

character_test$28:	; Return 0
x56442:	mov ax, [bp]	; 3: 139 70 0
x56445:	mov di, [bp + 4]	; 3: 139 126 4
x56448:	mov bp, [bp + 2]	; 3: 139 110 2
x56451:	jmp ax	; 2: 255 224

character_test$29:	; FunctionEnd character_test

character_testX:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$1:	; Parameter 7 string_ascii2025i0A# 6
x56453:	mov word [bp + 13], @9185$string_ascii2025i0A#	; 5: 199 70 13 67 225

character_testX$2:	; IntegralToIntegral £temporary4042 c
x56458:	mov al, [bp + 6]	; 3: 138 70 6
x56461:	and ax, 255	; 3: 37 255 0
x56464:	cmp al, 0	; 2: 60 0
x56466:	jge character_testX$3	; 2: 125 4
x56468:	neg al	; 2: 246 216
x56470:	neg ax	; 2: 247 216

character_testX$3:	; Parameter 7 £temporary4042 8
x56472:	mov [bp + 15], ax	; 3: 137 70 15

character_testX$4:	; Call 7 printf 0
x56475:	mov word [bp + 7], character_testX$5	; 5: 199 70 7 174 220
x56480:	mov [bp + 9], bp	; 3: 137 110 9
x56483:	add bp, 7	; 3: 131 197 7
x56486:	mov di, bp	; 2: 137 239
x56488:	add di, 2	; 3: 131 199 2
x56491:	jmp printf	; 3: 233 86 48

character_testX$5:	; PostCall 7

character_testX$6:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$7:	; Parameter 7 string_islower282725c2729203D2025s0A# 6
x56494:	mov word [bp + 13], @9188$string_islower282725c2729203D2025s0A#	; 5: 199 70 13 77 225

character_testX$8:	; IntegralToIntegral £temporary4044 c
x56499:	mov al, [bp + 6]	; 3: 138 70 6
x56502:	and ax, 255	; 3: 37 255 0
x56505:	cmp al, 0	; 2: 60 0
x56507:	jge character_testX$9	; 2: 125 4
x56509:	neg al	; 2: 246 216
x56511:	neg ax	; 2: 247 216

character_testX$9:	; Parameter 7 £temporary4044 8
x56513:	mov [bp + 15], ax	; 3: 137 70 15

character_testX$10:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$11:	; IntegralToIntegral £temporary4045 c
x56516:	mov al, [bp + 6]	; 3: 138 70 6
x56519:	and ax, 255	; 3: 37 255 0
x56522:	cmp al, 0	; 2: 60 0
x56524:	jge character_testX$12	; 2: 125 4
x56526:	neg al	; 2: 246 216
x56528:	neg ax	; 2: 247 216

character_testX$12:	; Parameter 7 £temporary4045 16
x56530:	mov [bp + 23], ax	; 3: 137 70 23

character_testX$13:	; Call 7 islower 10
x56533:	mov word [bp + 17], character_testX$14	; 5: 199 70 17 227 220
x56538:	mov [bp + 19], bp	; 3: 137 110 19
x56541:	add bp, 17	; 3: 131 197 17
x56544:	jmp islower	; 3: 233 192 141

character_testX$14:	; PostCall 7

character_testX$15:	; GetReturnValue £temporary4046

character_testX$16:	; Equal 19 £temporary4046 0
x56547:	cmp bx, 0	; 3: 131 251 0
x56550:	je character_testX$19	; 2: 116 5

character_testX$17:	; Assign £temporary4051 string_Yes#
x56552:	mov ax, @9195$string_Yes#	; 3: 184 97 225

character_testX$18:	; Goto 20
x56555:	jmp character_testX$20	; 2: 235 3

character_testX$19:	; Assign £temporary4051 string_No#
x56557:	mov ax, @9196$string_No#	; 3: 184 101 225

character_testX$20:	; Parameter 7 £temporary4051 10
x56560:	mov [bp + 17], ax	; 3: 137 70 17

character_testX$21:	; Call 7 printf 0
x56563:	mov word [bp + 7], character_testX$22	; 5: 199 70 7 6 221
x56568:	mov [bp + 9], bp	; 3: 137 110 9
x56571:	add bp, 7	; 3: 131 197 7
x56574:	mov di, bp	; 2: 137 239
x56576:	add di, 4	; 3: 131 199 4
x56579:	jmp printf	; 3: 233 254 47

character_testX$22:	; PostCall 7

character_testX$23:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$24:	; Parameter 7 string_isupper282725c2729203D2025s0A# 6
x56582:	mov word [bp + 13], @9204$string_isupper282725c2729203D2025s0A#	; 5: 199 70 13 104 225

character_testX$25:	; IntegralToIntegral £temporary4053 c
x56587:	mov al, [bp + 6]	; 3: 138 70 6
x56590:	and ax, 255	; 3: 37 255 0
x56593:	cmp al, 0	; 2: 60 0
x56595:	jge character_testX$26	; 2: 125 4
x56597:	neg al	; 2: 246 216
x56599:	neg ax	; 2: 247 216

character_testX$26:	; Parameter 7 £temporary4053 8
x56601:	mov [bp + 15], ax	; 3: 137 70 15

character_testX$27:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$28:	; IntegralToIntegral £temporary4054 c
x56604:	mov al, [bp + 6]	; 3: 138 70 6
x56607:	and ax, 255	; 3: 37 255 0
x56610:	cmp al, 0	; 2: 60 0
x56612:	jge character_testX$29	; 2: 125 4
x56614:	neg al	; 2: 246 216
x56616:	neg ax	; 2: 247 216

character_testX$29:	; Parameter 7 £temporary4054 16
x56618:	mov [bp + 23], ax	; 3: 137 70 23

character_testX$30:	; Call 7 isupper 10
x56621:	mov word [bp + 17], character_testX$31	; 5: 199 70 17 59 221
x56626:	mov [bp + 19], bp	; 3: 137 110 19
x56629:	add bp, 17	; 3: 131 197 17
x56632:	jmp isupper	; 3: 233 207 64

character_testX$31:	; PostCall 7

character_testX$32:	; GetReturnValue £temporary4055

character_testX$33:	; Equal 36 £temporary4055 0
x56635:	cmp bx, 0	; 3: 131 251 0
x56638:	je character_testX$36	; 2: 116 5

character_testX$34:	; Assign £temporary4060 string_Yes#
x56640:	mov ax, @9211$string_Yes#	; 3: 184 124 225

character_testX$35:	; Goto 37
x56643:	jmp character_testX$37	; 2: 235 3

character_testX$36:	; Assign £temporary4060 string_No#
x56645:	mov ax, @9212$string_No#	; 3: 184 128 225

character_testX$37:	; Parameter 7 £temporary4060 10
x56648:	mov [bp + 17], ax	; 3: 137 70 17

character_testX$38:	; Call 7 printf 0
x56651:	mov word [bp + 7], character_testX$39	; 5: 199 70 7 94 221
x56656:	mov [bp + 9], bp	; 3: 137 110 9
x56659:	add bp, 7	; 3: 131 197 7
x56662:	mov di, bp	; 2: 137 239
x56664:	add di, 4	; 3: 131 199 4
x56667:	jmp printf	; 3: 233 166 47

character_testX$39:	; PostCall 7

character_testX$40:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$41:	; Parameter 7 string_isalpha282725c2729203D2025s0A# 6
x56670:	mov word [bp + 13], @9220$string_isalpha282725c2729203D2025s0A#	; 5: 199 70 13 131 225

character_testX$42:	; IntegralToIntegral £temporary4062 c
x56675:	mov al, [bp + 6]	; 3: 138 70 6
x56678:	and ax, 255	; 3: 37 255 0
x56681:	cmp al, 0	; 2: 60 0
x56683:	jge character_testX$43	; 2: 125 4
x56685:	neg al	; 2: 246 216
x56687:	neg ax	; 2: 247 216

character_testX$43:	; Parameter 7 £temporary4062 8
x56689:	mov [bp + 15], ax	; 3: 137 70 15

character_testX$44:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$45:	; IntegralToIntegral £temporary4063 c
x56692:	mov al, [bp + 6]	; 3: 138 70 6
x56695:	and ax, 255	; 3: 37 255 0
x56698:	cmp al, 0	; 2: 60 0
x56700:	jge character_testX$46	; 2: 125 4
x56702:	neg al	; 2: 246 216
x56704:	neg ax	; 2: 247 216

character_testX$46:	; Parameter 7 £temporary4063 16
x56706:	mov [bp + 23], ax	; 3: 137 70 23

character_testX$47:	; Call 7 isalpha 10
x56709:	mov word [bp + 17], character_testX$48	; 5: 199 70 17 147 221
x56714:	mov [bp + 19], bp	; 3: 137 110 19
x56717:	add bp, 17	; 3: 131 197 17
x56720:	jmp isalpha	; 3: 233 17 5

character_testX$48:	; PostCall 7

character_testX$49:	; GetReturnValue £temporary4064

character_testX$50:	; Equal 53 £temporary4064 0
x56723:	cmp bx, 0	; 3: 131 251 0
x56726:	je character_testX$53	; 2: 116 5

character_testX$51:	; Assign £temporary4069 string_Yes#
x56728:	mov ax, @9227$string_Yes#	; 3: 184 151 225

character_testX$52:	; Goto 54
x56731:	jmp character_testX$54	; 2: 235 3

character_testX$53:	; Assign £temporary4069 string_No#
x56733:	mov ax, @9228$string_No#	; 3: 184 155 225

character_testX$54:	; Parameter 7 £temporary4069 10
x56736:	mov [bp + 17], ax	; 3: 137 70 17

character_testX$55:	; Call 7 printf 0
x56739:	mov word [bp + 7], character_testX$56	; 5: 199 70 7 182 221
x56744:	mov [bp + 9], bp	; 3: 137 110 9
x56747:	add bp, 7	; 3: 131 197 7
x56750:	mov di, bp	; 2: 137 239
x56752:	add di, 4	; 3: 131 199 4
x56755:	jmp printf	; 3: 233 78 47

character_testX$56:	; PostCall 7

character_testX$57:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$58:	; Parameter 7 string_isdigit282725c2729203D2025s0A# 6
x56758:	mov word [bp + 13], @9236$string_isdigit282725c2729203D2025s0A#	; 5: 199 70 13 158 225

character_testX$59:	; IntegralToIntegral £temporary4071 c
x56763:	mov al, [bp + 6]	; 3: 138 70 6
x56766:	and ax, 255	; 3: 37 255 0
x56769:	cmp al, 0	; 2: 60 0
x56771:	jge character_testX$60	; 2: 125 4
x56773:	neg al	; 2: 246 216
x56775:	neg ax	; 2: 247 216

character_testX$60:	; Parameter 7 £temporary4071 8
x56777:	mov [bp + 15], ax	; 3: 137 70 15

character_testX$61:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$62:	; IntegralToIntegral £temporary4072 c
x56780:	mov al, [bp + 6]	; 3: 138 70 6
x56783:	and ax, 255	; 3: 37 255 0
x56786:	cmp al, 0	; 2: 60 0
x56788:	jge character_testX$63	; 2: 125 4
x56790:	neg al	; 2: 246 216
x56792:	neg ax	; 2: 247 216

character_testX$63:	; Parameter 7 £temporary4072 16
x56794:	mov [bp + 23], ax	; 3: 137 70 23

character_testX$64:	; Call 7 isdigit 10
x56797:	mov word [bp + 17], character_testX$65	; 5: 199 70 17 235 221
x56802:	mov [bp + 19], bp	; 3: 137 110 19
x56805:	add bp, 17	; 3: 131 197 17
x56808:	jmp isdigit	; 3: 233 120 77

character_testX$65:	; PostCall 7

character_testX$66:	; GetReturnValue £temporary4073

character_testX$67:	; Equal 70 £temporary4073 0
x56811:	cmp bx, 0	; 3: 131 251 0
x56814:	je character_testX$70	; 2: 116 5

character_testX$68:	; Assign £temporary4078 string_Yes#
x56816:	mov ax, @9243$string_Yes#	; 3: 184 178 225

character_testX$69:	; Goto 71
x56819:	jmp character_testX$71	; 2: 235 3

character_testX$70:	; Assign £temporary4078 string_No#
x56821:	mov ax, @9244$string_No#	; 3: 184 182 225

character_testX$71:	; Parameter 7 £temporary4078 10
x56824:	mov [bp + 17], ax	; 3: 137 70 17

character_testX$72:	; Call 7 printf 0
x56827:	mov word [bp + 7], character_testX$73	; 5: 199 70 7 14 222
x56832:	mov [bp + 9], bp	; 3: 137 110 9
x56835:	add bp, 7	; 3: 131 197 7
x56838:	mov di, bp	; 2: 137 239
x56840:	add di, 4	; 3: 131 199 4
x56843:	jmp printf	; 3: 233 246 46

character_testX$73:	; PostCall 7

character_testX$74:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$75:	; Parameter 7 string_isalnum282725c2729203D2025s0A# 6
x56846:	mov word [bp + 13], @9252$string_isalnum282725c2729203D2025s0A#	; 5: 199 70 13 185 225

character_testX$76:	; IntegralToIntegral £temporary4080 c
x56851:	mov al, [bp + 6]	; 3: 138 70 6
x56854:	and ax, 255	; 3: 37 255 0
x56857:	cmp al, 0	; 2: 60 0
x56859:	jge character_testX$77	; 2: 125 4
x56861:	neg al	; 2: 246 216
x56863:	neg ax	; 2: 247 216

character_testX$77:	; Parameter 7 £temporary4080 8
x56865:	mov [bp + 15], ax	; 3: 137 70 15

character_testX$78:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$79:	; IntegralToIntegral £temporary4081 c
x56868:	mov al, [bp + 6]	; 3: 138 70 6
x56871:	and ax, 255	; 3: 37 255 0
x56874:	cmp al, 0	; 2: 60 0
x56876:	jge character_testX$80	; 2: 125 4
x56878:	neg al	; 2: 246 216
x56880:	neg ax	; 2: 247 216

character_testX$80:	; Parameter 7 £temporary4081 16
x56882:	mov [bp + 23], ax	; 3: 137 70 23

character_testX$81:	; Call 7 isalnum 10
x56885:	mov word [bp + 17], character_testX$82	; 5: 199 70 17 67 222
x56890:	mov [bp + 19], bp	; 3: 137 110 19
x56893:	add bp, 17	; 3: 131 197 17
x56896:	jmp isalnum	; 3: 233 166 4

character_testX$82:	; PostCall 7

character_testX$83:	; GetReturnValue £temporary4082

character_testX$84:	; Equal 87 £temporary4082 0
x56899:	cmp bx, 0	; 3: 131 251 0
x56902:	je character_testX$87	; 2: 116 5

character_testX$85:	; Assign £temporary4087 string_Yes#
x56904:	mov ax, @9259$string_Yes#	; 3: 184 205 225

character_testX$86:	; Goto 88
x56907:	jmp character_testX$88	; 2: 235 3

character_testX$87:	; Assign £temporary4087 string_No#
x56909:	mov ax, @9260$string_No#	; 3: 184 209 225

character_testX$88:	; Parameter 7 £temporary4087 10
x56912:	mov [bp + 17], ax	; 3: 137 70 17

character_testX$89:	; Call 7 printf 0
x56915:	mov word [bp + 7], character_testX$90	; 5: 199 70 7 102 222
x56920:	mov [bp + 9], bp	; 3: 137 110 9
x56923:	add bp, 7	; 3: 131 197 7
x56926:	mov di, bp	; 2: 137 239
x56928:	add di, 4	; 3: 131 199 4
x56931:	jmp printf	; 3: 233 158 46

character_testX$90:	; PostCall 7

character_testX$91:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$92:	; Parameter 7 string_isxdigit282725c2729203D2025s0A# 6
x56934:	mov word [bp + 13], @9268$string_isxdigit282725c2729203D2025s0A#	; 5: 199 70 13 212 225

character_testX$93:	; IntegralToIntegral £temporary4089 c
x56939:	mov al, [bp + 6]	; 3: 138 70 6
x56942:	and ax, 255	; 3: 37 255 0
x56945:	cmp al, 0	; 2: 60 0
x56947:	jge character_testX$94	; 2: 125 4
x56949:	neg al	; 2: 246 216
x56951:	neg ax	; 2: 247 216

character_testX$94:	; Parameter 7 £temporary4089 8
x56953:	mov [bp + 15], ax	; 3: 137 70 15

character_testX$95:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$96:	; IntegralToIntegral £temporary4090 c
x56956:	mov al, [bp + 6]	; 3: 138 70 6
x56959:	and ax, 255	; 3: 37 255 0
x56962:	cmp al, 0	; 2: 60 0
x56964:	jge character_testX$97	; 2: 125 4
x56966:	neg al	; 2: 246 216
x56968:	neg ax	; 2: 247 216

character_testX$97:	; Parameter 7 £temporary4090 16
x56970:	mov [bp + 23], ax	; 3: 137 70 23

character_testX$98:	; Call 7 isxdigit 10
x56973:	mov word [bp + 17], character_testX$99	; 5: 199 70 17 155 222
x56978:	mov [bp + 19], bp	; 3: 137 110 19
x56981:	add bp, 17	; 3: 131 197 17
x56984:	jmp isxdigit	; 3: 233 147 4

character_testX$99:	; PostCall 7

character_testX$100:	; GetReturnValue £temporary4091

character_testX$101:	; Equal 104 £temporary4091 0
x56987:	cmp bx, 0	; 3: 131 251 0
x56990:	je character_testX$104	; 2: 116 5

character_testX$102:	; Assign £temporary4096 string_Yes#
x56992:	mov ax, @9275$string_Yes#	; 3: 184 233 225

character_testX$103:	; Goto 105
x56995:	jmp character_testX$105	; 2: 235 3

character_testX$104:	; Assign £temporary4096 string_No#
x56997:	mov ax, @9276$string_No#	; 3: 184 237 225

character_testX$105:	; Parameter 7 £temporary4096 10
x57000:	mov [bp + 17], ax	; 3: 137 70 17

character_testX$106:	; Call 7 printf 0
x57003:	mov word [bp + 7], character_testX$107	; 5: 199 70 7 190 222
x57008:	mov [bp + 9], bp	; 3: 137 110 9
x57011:	add bp, 7	; 3: 131 197 7
x57014:	mov di, bp	; 2: 137 239
x57016:	add di, 4	; 3: 131 199 4
x57019:	jmp printf	; 3: 233 70 46

character_testX$107:	; PostCall 7

character_testX$108:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$109:	; Parameter 7 string_isgraph282725c2729203D2025s0A# 6
x57022:	mov word [bp + 13], @9284$string_isgraph282725c2729203D2025s0A#	; 5: 199 70 13 240 225

character_testX$110:	; IntegralToIntegral £temporary4098 c
x57027:	mov al, [bp + 6]	; 3: 138 70 6
x57030:	and ax, 255	; 3: 37 255 0
x57033:	cmp al, 0	; 2: 60 0
x57035:	jge character_testX$111	; 2: 125 4
x57037:	neg al	; 2: 246 216
x57039:	neg ax	; 2: 247 216

character_testX$111:	; Parameter 7 £temporary4098 8
x57041:	mov [bp + 15], ax	; 3: 137 70 15

character_testX$112:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$113:	; IntegralToIntegral £temporary4099 c
x57044:	mov al, [bp + 6]	; 3: 138 70 6
x57047:	and ax, 255	; 3: 37 255 0
x57050:	cmp al, 0	; 2: 60 0
x57052:	jge character_testX$114	; 2: 125 4
x57054:	neg al	; 2: 246 216
x57056:	neg ax	; 2: 247 216

character_testX$114:	; Parameter 7 £temporary4099 16
x57058:	mov [bp + 23], ax	; 3: 137 70 23

character_testX$115:	; Call 7 isgraph 10
x57061:	mov word [bp + 17], character_testX$116	; 5: 199 70 17 243 222
x57066:	mov [bp + 19], bp	; 3: 137 110 19
x57069:	add bp, 17	; 3: 131 197 17
x57072:	jmp isgraph	; 3: 233 127 4

character_testX$116:	; PostCall 7

character_testX$117:	; GetReturnValue £temporary4100

character_testX$118:	; Equal 121 £temporary4100 0
x57075:	cmp bx, 0	; 3: 131 251 0
x57078:	je character_testX$121	; 2: 116 5

character_testX$119:	; Assign £temporary4105 string_Yes#
x57080:	mov ax, @9291$string_Yes#	; 3: 184 4 226

character_testX$120:	; Goto 122
x57083:	jmp character_testX$122	; 2: 235 3

character_testX$121:	; Assign £temporary4105 string_No#
x57085:	mov ax, @9292$string_No#	; 3: 184 8 226

character_testX$122:	; Parameter 7 £temporary4105 10
x57088:	mov [bp + 17], ax	; 3: 137 70 17

character_testX$123:	; Call 7 printf 0
x57091:	mov word [bp + 7], character_testX$124	; 5: 199 70 7 22 223
x57096:	mov [bp + 9], bp	; 3: 137 110 9
x57099:	add bp, 7	; 3: 131 197 7
x57102:	mov di, bp	; 2: 137 239
x57104:	add di, 4	; 3: 131 199 4
x57107:	jmp printf	; 3: 233 238 45

character_testX$124:	; PostCall 7

character_testX$125:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$126:	; Parameter 7 string_isprint282725c2729203D2025s0A# 6
x57110:	mov word [bp + 13], @9300$string_isprint282725c2729203D2025s0A#	; 5: 199 70 13 11 226

character_testX$127:	; IntegralToIntegral £temporary4107 c
x57115:	mov al, [bp + 6]	; 3: 138 70 6
x57118:	and ax, 255	; 3: 37 255 0
x57121:	cmp al, 0	; 2: 60 0
x57123:	jge character_testX$128	; 2: 125 4
x57125:	neg al	; 2: 246 216
x57127:	neg ax	; 2: 247 216

character_testX$128:	; Parameter 7 £temporary4107 8
x57129:	mov [bp + 15], ax	; 3: 137 70 15

character_testX$129:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$130:	; IntegralToIntegral £temporary4108 c
x57132:	mov al, [bp + 6]	; 3: 138 70 6
x57135:	and ax, 255	; 3: 37 255 0
x57138:	cmp al, 0	; 2: 60 0
x57140:	jge character_testX$131	; 2: 125 4
x57142:	neg al	; 2: 246 216
x57144:	neg ax	; 2: 247 216

character_testX$131:	; Parameter 7 £temporary4108 16
x57146:	mov [bp + 23], ax	; 3: 137 70 23

character_testX$132:	; Call 7 isprint 10
x57149:	mov word [bp + 17], character_testX$133	; 5: 199 70 17 75 223
x57154:	mov [bp + 19], bp	; 3: 137 110 19
x57157:	add bp, 17	; 3: 131 197 17
x57160:	jmp isprint	; 3: 233 70 4

character_testX$133:	; PostCall 7

character_testX$134:	; GetReturnValue £temporary4109

character_testX$135:	; Equal 138 £temporary4109 0
x57163:	cmp bx, 0	; 3: 131 251 0
x57166:	je character_testX$138	; 2: 116 5

character_testX$136:	; Assign £temporary4114 string_Yes#
x57168:	mov ax, @9307$string_Yes#	; 3: 184 31 226

character_testX$137:	; Goto 139
x57171:	jmp character_testX$139	; 2: 235 3

character_testX$138:	; Assign £temporary4114 string_No#
x57173:	mov ax, @9308$string_No#	; 3: 184 35 226

character_testX$139:	; Parameter 7 £temporary4114 10
x57176:	mov [bp + 17], ax	; 3: 137 70 17

character_testX$140:	; Call 7 printf 0
x57179:	mov word [bp + 7], character_testX$141	; 5: 199 70 7 110 223
x57184:	mov [bp + 9], bp	; 3: 137 110 9
x57187:	add bp, 7	; 3: 131 197 7
x57190:	mov di, bp	; 2: 137 239
x57192:	add di, 4	; 3: 131 199 4
x57195:	jmp printf	; 3: 233 150 45

character_testX$141:	; PostCall 7

character_testX$142:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$143:	; Parameter 7 string_ispunct282725c2729203D2025s0A# 6
x57198:	mov word [bp + 13], @9316$string_ispunct282725c2729203D2025s0A#	; 5: 199 70 13 38 226

character_testX$144:	; IntegralToIntegral £temporary4116 c
x57203:	mov al, [bp + 6]	; 3: 138 70 6
x57206:	and ax, 255	; 3: 37 255 0
x57209:	cmp al, 0	; 2: 60 0
x57211:	jge character_testX$145	; 2: 125 4
x57213:	neg al	; 2: 246 216
x57215:	neg ax	; 2: 247 216

character_testX$145:	; Parameter 7 £temporary4116 8
x57217:	mov [bp + 15], ax	; 3: 137 70 15

character_testX$146:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$147:	; IntegralToIntegral £temporary4117 c
x57220:	mov al, [bp + 6]	; 3: 138 70 6
x57223:	and ax, 255	; 3: 37 255 0
x57226:	cmp al, 0	; 2: 60 0
x57228:	jge character_testX$148	; 2: 125 4
x57230:	neg al	; 2: 246 216
x57232:	neg ax	; 2: 247 216

character_testX$148:	; Parameter 7 £temporary4117 16
x57234:	mov [bp + 23], ax	; 3: 137 70 23

character_testX$149:	; Call 7 ispunct 10
x57237:	mov word [bp + 17], character_testX$150	; 5: 199 70 17 163 223
x57242:	mov [bp + 19], bp	; 3: 137 110 19
x57245:	add bp, 17	; 3: 131 197 17
x57248:	jmp ispunct	; 3: 233 32 4

character_testX$150:	; PostCall 7

character_testX$151:	; GetReturnValue £temporary4118

character_testX$152:	; Equal 155 £temporary4118 0
x57251:	cmp bx, 0	; 3: 131 251 0
x57254:	je character_testX$155	; 2: 116 5

character_testX$153:	; Assign £temporary4123 string_Yes#
x57256:	mov ax, @9323$string_Yes#	; 3: 184 58 226

character_testX$154:	; Goto 156
x57259:	jmp character_testX$156	; 2: 235 3

character_testX$155:	; Assign £temporary4123 string_No#
x57261:	mov ax, @9324$string_No#	; 3: 184 62 226

character_testX$156:	; Parameter 7 £temporary4123 10
x57264:	mov [bp + 17], ax	; 3: 137 70 17

character_testX$157:	; Call 7 printf 0
x57267:	mov word [bp + 7], character_testX$158	; 5: 199 70 7 198 223
x57272:	mov [bp + 9], bp	; 3: 137 110 9
x57275:	add bp, 7	; 3: 131 197 7
x57278:	mov di, bp	; 2: 137 239
x57280:	add di, 4	; 3: 131 199 4
x57283:	jmp printf	; 3: 233 62 45

character_testX$158:	; PostCall 7

character_testX$159:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$160:	; Parameter 7 string_iscntrl282725c2729203D2025s0A# 6
x57286:	mov word [bp + 13], @9332$string_iscntrl282725c2729203D2025s0A#	; 5: 199 70 13 65 226

character_testX$161:	; IntegralToIntegral £temporary4125 c
x57291:	mov al, [bp + 6]	; 3: 138 70 6
x57294:	and ax, 255	; 3: 37 255 0
x57297:	cmp al, 0	; 2: 60 0
x57299:	jge character_testX$162	; 2: 125 4
x57301:	neg al	; 2: 246 216
x57303:	neg ax	; 2: 247 216

character_testX$162:	; Parameter 7 £temporary4125 8
x57305:	mov [bp + 15], ax	; 3: 137 70 15

character_testX$163:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$164:	; IntegralToIntegral £temporary4126 c
x57308:	mov al, [bp + 6]	; 3: 138 70 6
x57311:	and ax, 255	; 3: 37 255 0
x57314:	cmp al, 0	; 2: 60 0
x57316:	jge character_testX$165	; 2: 125 4
x57318:	neg al	; 2: 246 216
x57320:	neg ax	; 2: 247 216

character_testX$165:	; Parameter 7 £temporary4126 16
x57322:	mov [bp + 23], ax	; 3: 137 70 23

character_testX$166:	; Call 7 iscntrl 10
x57325:	mov word [bp + 17], character_testX$167	; 5: 199 70 17 251 223
x57330:	mov [bp + 19], bp	; 3: 137 110 19
x57333:	add bp, 17	; 3: 131 197 17
x57336:	jmp iscntrl	; 3: 233 13 4

character_testX$167:	; PostCall 7

character_testX$168:	; GetReturnValue £temporary4127

character_testX$169:	; Equal 172 £temporary4127 0
x57339:	cmp bx, 0	; 3: 131 251 0
x57342:	je character_testX$172	; 2: 116 5

character_testX$170:	; Assign £temporary4132 string_Yes#
x57344:	mov ax, @9339$string_Yes#	; 3: 184 85 226

character_testX$171:	; Goto 173
x57347:	jmp character_testX$173	; 2: 235 3

character_testX$172:	; Assign £temporary4132 string_No#
x57349:	mov ax, @9340$string_No#	; 3: 184 89 226

character_testX$173:	; Parameter 7 £temporary4132 10
x57352:	mov [bp + 17], ax	; 3: 137 70 17

character_testX$174:	; Call 7 printf 0
x57355:	mov word [bp + 7], character_testX$175	; 5: 199 70 7 30 224
x57360:	mov [bp + 9], bp	; 3: 137 110 9
x57363:	add bp, 7	; 3: 131 197 7
x57366:	mov di, bp	; 2: 137 239
x57368:	add di, 4	; 3: 131 199 4
x57371:	jmp printf	; 3: 233 230 44

character_testX$175:	; PostCall 7

character_testX$176:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$177:	; Parameter 7 string_isspace282725c2729203D2025s0A# 6
x57374:	mov word [bp + 13], @9348$string_isspace282725c2729203D2025s0A#	; 5: 199 70 13 92 226

character_testX$178:	; IntegralToIntegral £temporary4134 c
x57379:	mov al, [bp + 6]	; 3: 138 70 6
x57382:	and ax, 255	; 3: 37 255 0
x57385:	cmp al, 0	; 2: 60 0
x57387:	jge character_testX$179	; 2: 125 4
x57389:	neg al	; 2: 246 216
x57391:	neg ax	; 2: 247 216

character_testX$179:	; Parameter 7 £temporary4134 8
x57393:	mov [bp + 15], ax	; 3: 137 70 15

character_testX$180:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$181:	; IntegralToIntegral £temporary4135 c
x57396:	mov al, [bp + 6]	; 3: 138 70 6
x57399:	and ax, 255	; 3: 37 255 0
x57402:	cmp al, 0	; 2: 60 0
x57404:	jge character_testX$182	; 2: 125 4
x57406:	neg al	; 2: 246 216
x57408:	neg ax	; 2: 247 216

character_testX$182:	; Parameter 7 £temporary4135 16
x57410:	mov [bp + 23], ax	; 3: 137 70 23

character_testX$183:	; Call 7 isspace 10
x57413:	mov word [bp + 17], character_testX$184	; 5: 199 70 17 83 224
x57418:	mov [bp + 19], bp	; 3: 137 110 19
x57421:	add bp, 17	; 3: 131 197 17
x57424:	jmp isspace	; 3: 233 72 135

character_testX$184:	; PostCall 7

character_testX$185:	; GetReturnValue £temporary4136

character_testX$186:	; Equal 189 £temporary4136 0
x57427:	cmp bx, 0	; 3: 131 251 0
x57430:	je character_testX$189	; 2: 116 5

character_testX$187:	; Assign £temporary4141 string_Yes#
x57432:	mov ax, @9355$string_Yes#	; 3: 184 112 226

character_testX$188:	; Goto 190
x57435:	jmp character_testX$190	; 2: 235 3

character_testX$189:	; Assign £temporary4141 string_No#
x57437:	mov ax, @9356$string_No#	; 3: 184 116 226

character_testX$190:	; Parameter 7 £temporary4141 10
x57440:	mov [bp + 17], ax	; 3: 137 70 17

character_testX$191:	; Call 7 printf 0
x57443:	mov word [bp + 7], character_testX$192	; 5: 199 70 7 118 224
x57448:	mov [bp + 9], bp	; 3: 137 110 9
x57451:	add bp, 7	; 3: 131 197 7
x57454:	mov di, bp	; 2: 137 239
x57456:	add di, 4	; 3: 131 199 4
x57459:	jmp printf	; 3: 233 142 44

character_testX$192:	; PostCall 7

character_testX$193:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$194:	; Parameter 7 string_tolower282725c2729203D202725c270A# 6
x57462:	mov word [bp + 13], @9364$string_tolower282725c2729203D202725c270A#	; 5: 199 70 13 119 226

character_testX$195:	; IntegralToIntegral £temporary4143 c
x57467:	mov al, [bp + 6]	; 3: 138 70 6
x57470:	and ax, 255	; 3: 37 255 0
x57473:	cmp al, 0	; 2: 60 0
x57475:	jge character_testX$196	; 2: 125 4
x57477:	neg al	; 2: 246 216
x57479:	neg ax	; 2: 247 216

character_testX$196:	; Parameter 7 £temporary4143 8
x57481:	mov [bp + 15], ax	; 3: 137 70 15

character_testX$197:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$198:	; IntegralToIntegral £temporary4144 c
x57484:	mov al, [bp + 6]	; 3: 138 70 6
x57487:	and ax, 255	; 3: 37 255 0
x57490:	cmp al, 0	; 2: 60 0
x57492:	jge character_testX$199	; 2: 125 4
x57494:	neg al	; 2: 246 216
x57496:	neg ax	; 2: 247 216

character_testX$199:	; Parameter 7 £temporary4144 16
x57498:	mov [bp + 23], ax	; 3: 137 70 23

character_testX$200:	; Call 7 tolower 10
x57501:	mov word [bp + 17], character_testX$201	; 5: 199 70 17 171 224
x57506:	mov [bp + 19], bp	; 3: 137 110 19
x57509:	add bp, 17	; 3: 131 197 17
x57512:	jmp tolower	; 3: 233 110 68

character_testX$201:	; PostCall 7

character_testX$202:	; GetReturnValue £temporary4145

character_testX$203:	; IntegralToIntegral £temporary4146 £temporary4145
x57515:	cmp bx, 0	; 3: 131 251 0
x57518:	jge character_testX$204	; 2: 125 4
x57520:	neg bx	; 2: 247 219
x57522:	neg bl	; 2: 246 219

character_testX$204:	; IntegralToIntegral £temporary4147 £temporary4146
x57524:	and bx, 255	; 4: 129 227 255 0
x57528:	cmp bl, 0	; 3: 128 251 0
x57531:	jge character_testX$205	; 2: 125 4
x57533:	neg bl	; 2: 246 219
x57535:	neg bx	; 2: 247 219

character_testX$205:	; Parameter 7 £temporary4147 10
x57537:	mov [bp + 17], bx	; 3: 137 94 17

character_testX$206:	; Call 7 printf 0
x57540:	mov word [bp + 7], character_testX$207	; 5: 199 70 7 215 224
x57545:	mov [bp + 9], bp	; 3: 137 110 9
x57548:	add bp, 7	; 3: 131 197 7
x57551:	mov di, bp	; 2: 137 239
x57553:	add di, 4	; 3: 131 199 4
x57556:	jmp printf	; 3: 233 45 44

character_testX$207:	; PostCall 7

character_testX$208:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$209:	; Parameter 7 string_toupper282725c2729203D202725c270A0A# 6
x57559:	mov word [bp + 13], @9371$string_toupper282725c2729203D202725c270A0A#	; 5: 199 70 13 141 226

character_testX$210:	; IntegralToIntegral £temporary4149 c
x57564:	mov al, [bp + 6]	; 3: 138 70 6
x57567:	and ax, 255	; 3: 37 255 0
x57570:	cmp al, 0	; 2: 60 0
x57572:	jge character_testX$211	; 2: 125 4
x57574:	neg al	; 2: 246 216
x57576:	neg ax	; 2: 247 216

character_testX$211:	; Parameter 7 £temporary4149 8
x57578:	mov [bp + 15], ax	; 3: 137 70 15

character_testX$212:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$213:	; IntegralToIntegral £temporary4150 c
x57581:	mov al, [bp + 6]	; 3: 138 70 6
x57584:	and ax, 255	; 3: 37 255 0
x57587:	cmp al, 0	; 2: 60 0
x57589:	jge character_testX$214	; 2: 125 4
x57591:	neg al	; 2: 246 216
x57593:	neg ax	; 2: 247 216

character_testX$214:	; Parameter 7 £temporary4150 16
x57595:	mov [bp + 23], ax	; 3: 137 70 23

character_testX$215:	; Call 7 toupper 10
x57598:	mov word [bp + 17], character_testX$216	; 5: 199 70 17 12 225
x57603:	mov [bp + 19], bp	; 3: 137 110 19
x57606:	add bp, 17	; 3: 131 197 17
x57609:	jmp toupper	; 3: 233 40 3

character_testX$216:	; PostCall 7

character_testX$217:	; GetReturnValue £temporary4151

character_testX$218:	; IntegralToIntegral £temporary4152 £temporary4151
x57612:	cmp bx, 0	; 3: 131 251 0
x57615:	jge character_testX$219	; 2: 125 4
x57617:	neg bx	; 2: 247 219
x57619:	neg bl	; 2: 246 219

character_testX$219:	; IntegralToIntegral £temporary4153 £temporary4152
x57621:	and bx, 255	; 4: 129 227 255 0
x57625:	cmp bl, 0	; 3: 128 251 0
x57628:	jge character_testX$220	; 2: 125 4
x57630:	neg bl	; 2: 246 219
x57632:	neg bx	; 2: 247 219

character_testX$220:	; Parameter 7 £temporary4153 10
x57634:	mov [bp + 17], bx	; 3: 137 94 17

character_testX$221:	; Call 7 printf 0
x57637:	mov word [bp + 7], character_testX$222	; 5: 199 70 7 56 225
x57642:	mov [bp + 9], bp	; 3: 137 110 9
x57645:	add bp, 7	; 3: 131 197 7
x57648:	mov di, bp	; 2: 137 239
x57650:	add di, 4	; 3: 131 199 4
x57653:	jmp printf	; 3: 233 204 43

character_testX$222:	; PostCall 7

character_testX$223:	; Return 0
x57656:	mov ax, [bp]	; 3: 139 70 0
x57659:	mov di, [bp + 4]	; 3: 139 126 4
x57662:	mov bp, [bp + 2]	; 3: 139 110 2
x57665:	jmp ax	; 2: 255 224

character_testX$224:	; FunctionEnd character_testX

@9185$string_ascii2025i0A#:
x57667:	db "ascii %i", 10, 0	; 10: 97 115 99 105 105 32 37 105 10 0

@9188$string_islower282725c2729203D2025s0A#:
x57677:	db "islower(", 39, "%c", 39, ") = %s", 10, 0	; 20: 105 115 108 111 119 101 114 40 39 37 99 39 41 32 61 32 37 115 10 0

@9195$string_Yes#:
x57697:	db "Yes", 0	; 4: 89 101 115 0

@9196$string_No#:
x57701:	db "No", 0	; 3: 78 111 0

@9204$string_isupper282725c2729203D2025s0A#:
x57704:	db "isupper(", 39, "%c", 39, ") = %s", 10, 0	; 20: 105 115 117 112 112 101 114 40 39 37 99 39 41 32 61 32 37 115 10 0

@9211$string_Yes#:
x57724:	db "Yes", 0	; 4: 89 101 115 0

@9212$string_No#:
x57728:	db "No", 0	; 3: 78 111 0

@9220$string_isalpha282725c2729203D2025s0A#:
x57731:	db "isalpha(", 39, "%c", 39, ") = %s", 10, 0	; 20: 105 115 97 108 112 104 97 40 39 37 99 39 41 32 61 32 37 115 10 0

@9227$string_Yes#:
x57751:	db "Yes", 0	; 4: 89 101 115 0

@9228$string_No#:
x57755:	db "No", 0	; 3: 78 111 0

@9236$string_isdigit282725c2729203D2025s0A#:
x57758:	db "isdigit(", 39, "%c", 39, ") = %s", 10, 0	; 20: 105 115 100 105 103 105 116 40 39 37 99 39 41 32 61 32 37 115 10 0

@9243$string_Yes#:
x57778:	db "Yes", 0	; 4: 89 101 115 0

@9244$string_No#:
x57782:	db "No", 0	; 3: 78 111 0

@9252$string_isalnum282725c2729203D2025s0A#:
x57785:	db "isalnum(", 39, "%c", 39, ") = %s", 10, 0	; 20: 105 115 97 108 110 117 109 40 39 37 99 39 41 32 61 32 37 115 10 0

@9259$string_Yes#:
x57805:	db "Yes", 0	; 4: 89 101 115 0

@9260$string_No#:
x57809:	db "No", 0	; 3: 78 111 0

@9268$string_isxdigit282725c2729203D2025s0A#:
x57812:	db "isxdigit(", 39, "%c", 39, ") = %s", 10, 0	; 21: 105 115 120 100 105 103 105 116 40 39 37 99 39 41 32 61 32 37 115 10 0

@9275$string_Yes#:
x57833:	db "Yes", 0	; 4: 89 101 115 0

@9276$string_No#:
x57837:	db "No", 0	; 3: 78 111 0

@9284$string_isgraph282725c2729203D2025s0A#:
x57840:	db "isgraph(", 39, "%c", 39, ") = %s", 10, 0	; 20: 105 115 103 114 97 112 104 40 39 37 99 39 41 32 61 32 37 115 10 0

@9291$string_Yes#:
x57860:	db "Yes", 0	; 4: 89 101 115 0

@9292$string_No#:
x57864:	db "No", 0	; 3: 78 111 0

@9300$string_isprint282725c2729203D2025s0A#:
x57867:	db "isprint(", 39, "%c", 39, ") = %s", 10, 0	; 20: 105 115 112 114 105 110 116 40 39 37 99 39 41 32 61 32 37 115 10 0

@9307$string_Yes#:
x57887:	db "Yes", 0	; 4: 89 101 115 0

@9308$string_No#:
x57891:	db "No", 0	; 3: 78 111 0

@9316$string_ispunct282725c2729203D2025s0A#:
x57894:	db "ispunct(", 39, "%c", 39, ") = %s", 10, 0	; 20: 105 115 112 117 110 99 116 40 39 37 99 39 41 32 61 32 37 115 10 0

@9323$string_Yes#:
x57914:	db "Yes", 0	; 4: 89 101 115 0

@9324$string_No#:
x57918:	db "No", 0	; 3: 78 111 0

@9332$string_iscntrl282725c2729203D2025s0A#:
x57921:	db "iscntrl(", 39, "%c", 39, ") = %s", 10, 0	; 20: 105 115 99 110 116 114 108 40 39 37 99 39 41 32 61 32 37 115 10 0

@9339$string_Yes#:
x57941:	db "Yes", 0	; 4: 89 101 115 0

@9340$string_No#:
x57945:	db "No", 0	; 3: 78 111 0

@9348$string_isspace282725c2729203D2025s0A#:
x57948:	db "isspace(", 39, "%c", 39, ") = %s", 10, 0	; 20: 105 115 115 112 97 99 101 40 39 37 99 39 41 32 61 32 37 115 10 0

@9355$string_Yes#:
x57968:	db "Yes", 0	; 4: 89 101 115 0

@9356$string_No#:
x57972:	db "No", 0	; 3: 78 111 0

@9364$string_tolower282725c2729203D202725c270A#:
x57975:	db "tolower(", 39, "%c", 39, ") = ", 39, "%c", 39, 10, 0	; 22: 116 111 108 111 119 101 114 40 39 37 99 39 41 32 61 32 39 37 99 39 10 0

@9371$string_toupper282725c2729203D202725c270A0A#:
x57997:	db "toupper(", 39, "%c", 39, ") = ", 39, "%c", 39, 10, 10, 0	; 23: 116 111 117 112 112 101 114 40 39 37 99 39 41 32 61 32 39 37 99 39 10 10 0

isalpha:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

isalpha$1:	; Parameter 8 c 6
x58020:	mov ax, [bp + 6]	; 3: 139 70 6
x58023:	mov [bp + 14], ax	; 3: 137 70 14

isalpha$2:	; Call 8 islower 0
x58026:	mov word [bp + 8], isalpha$3	; 5: 199 70 8 184 226
x58031:	mov [bp + 10], bp	; 3: 137 110 10
x58034:	add bp, 8	; 3: 131 197 8
x58037:	jmp islower	; 3: 233 235 135

isalpha$3:	; PostCall 8

isalpha$4:	; GetReturnValue £temporary184

isalpha$5:	; NotEqual 12 £temporary184 0
x58040:	cmp bx, 0	; 3: 131 251 0
x58043:	jne isalpha$12	; 2: 117 25

isalpha$6:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

isalpha$7:	; Parameter 8 c 6
x58045:	mov ax, [bp + 6]	; 3: 139 70 6
x58048:	mov [bp + 14], ax	; 3: 137 70 14

isalpha$8:	; Call 8 isupper 0
x58051:	mov word [bp + 8], isalpha$9	; 5: 199 70 8 209 226
x58056:	mov [bp + 10], bp	; 3: 137 110 10
x58059:	add bp, 8	; 3: 131 197 8
x58062:	jmp isupper	; 3: 233 57 59

isalpha$9:	; PostCall 8

isalpha$10:	; GetReturnValue £temporary185

isalpha$11:	; Equal 14 £temporary185 0
x58065:	cmp bx, 0	; 3: 131 251 0
x58068:	je isalpha$14	; 2: 116 5

isalpha$12:	; Assign £temporary189 1
x58070:	mov bx, 1	; 3: 187 1 0

isalpha$13:	; Goto 15
x58073:	jmp isalpha$15	; 2: 235 3

isalpha$14:	; Assign £temporary189 0
x58075:	mov bx, 0	; 3: 187 0 0

isalpha$15:	; SetReturnValue £temporary189

isalpha$16:	; Return £temporary189
x58078:	mov ax, [bp]	; 3: 139 70 0
x58081:	mov di, [bp + 4]	; 3: 139 126 4
x58084:	mov bp, [bp + 2]	; 3: 139 110 2
x58087:	jmp ax	; 2: 255 224

isalpha$17:	; FunctionEnd isalpha

isalnum:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

isalnum$1:	; Parameter 8 c 6
x58089:	mov ax, [bp + 6]	; 3: 139 70 6
x58092:	mov [bp + 14], ax	; 3: 137 70 14

isalnum$2:	; Call 8 isalpha 0
x58095:	mov word [bp + 8], isalnum$3	; 5: 199 70 8 253 226
x58100:	mov [bp + 10], bp	; 3: 137 110 10
x58103:	add bp, 8	; 3: 131 197 8
x58106:	nop	; 1: 144
x58107:	jmp isalpha	; 2: 235 167

isalnum$3:	; PostCall 8

isalnum$4:	; GetReturnValue £temporary196

isalnum$5:	; NotEqual 12 £temporary196 0
x58109:	cmp bx, 0	; 3: 131 251 0
x58112:	jne isalnum$12	; 2: 117 25

isalnum$6:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

isalnum$7:	; Parameter 8 c 6
x58114:	mov ax, [bp + 6]	; 3: 139 70 6
x58117:	mov [bp + 14], ax	; 3: 137 70 14

isalnum$8:	; Call 8 isdigit 0
x58120:	mov word [bp + 8], isalnum$9	; 5: 199 70 8 22 227
x58125:	mov [bp + 10], bp	; 3: 137 110 10
x58128:	add bp, 8	; 3: 131 197 8
x58131:	jmp isdigit	; 3: 233 77 72

isalnum$9:	; PostCall 8

isalnum$10:	; GetReturnValue £temporary197

isalnum$11:	; Equal 14 £temporary197 0
x58134:	cmp bx, 0	; 3: 131 251 0
x58137:	je isalnum$14	; 2: 116 5

isalnum$12:	; Assign £temporary201 1
x58139:	mov bx, 1	; 3: 187 1 0

isalnum$13:	; Goto 15
x58142:	jmp isalnum$15	; 2: 235 3

isalnum$14:	; Assign £temporary201 0
x58144:	mov bx, 0	; 3: 187 0 0

isalnum$15:	; SetReturnValue £temporary201

isalnum$16:	; Return £temporary201
x58147:	mov ax, [bp]	; 3: 139 70 0
x58150:	mov di, [bp + 4]	; 3: 139 126 4
x58153:	mov bp, [bp + 2]	; 3: 139 110 2
x58156:	jmp ax	; 2: 255 224

isalnum$17:	; FunctionEnd isalnum

isxdigit:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

isxdigit$1:	; Parameter 8 c 6
x58158:	mov ax, [bp + 6]	; 3: 139 70 6
x58161:	mov [bp + 14], ax	; 3: 137 70 14

isxdigit$2:	; Call 8 isdigit 0
x58164:	mov word [bp + 8], isxdigit$3	; 5: 199 70 8 66 227
x58169:	mov [bp + 10], bp	; 3: 137 110 10
x58172:	add bp, 8	; 3: 131 197 8
x58175:	jmp isdigit	; 3: 233 33 72

isxdigit$3:	; PostCall 8

isxdigit$4:	; GetReturnValue £temporary204

isxdigit$5:	; NotEqual 10 £temporary204 0
x58178:	cmp bx, 0	; 3: 131 251 0
x58181:	jne isxdigit$10	; 2: 117 24

isxdigit$6:	; SignedLessThan 8 c 97
x58183:	cmp word [bp + 6], 97	; 4: 131 126 6 97
x58187:	jl isxdigit$8	; 2: 124 6

isxdigit$7:	; SignedLessThanEqual 10 c 102
x58189:	cmp word [bp + 6], 102	; 4: 131 126 6 102
x58193:	jle isxdigit$10	; 2: 126 12

isxdigit$8:	; SignedLessThan 12 c 65
x58195:	cmp word [bp + 6], 65	; 4: 131 126 6 65
x58199:	jl isxdigit$12	; 2: 124 11

isxdigit$9:	; SignedGreaterThan 12 c 70
x58201:	cmp word [bp + 6], 70	; 4: 131 126 6 70
x58205:	jg isxdigit$12	; 2: 127 5

isxdigit$10:	; Assign £temporary214 1
x58207:	mov bx, 1	; 3: 187 1 0

isxdigit$11:	; Goto 13
x58210:	jmp isxdigit$13	; 2: 235 3

isxdigit$12:	; Assign £temporary214 0
x58212:	mov bx, 0	; 3: 187 0 0

isxdigit$13:	; SetReturnValue £temporary214

isxdigit$14:	; Return £temporary214
x58215:	mov ax, [bp]	; 3: 139 70 0
x58218:	mov di, [bp + 4]	; 3: 139 126 4
x58221:	mov bp, [bp + 2]	; 3: 139 110 2
x58224:	jmp ax	; 2: 255 224

isxdigit$15:	; FunctionEnd isxdigit

isgraph:	; SignedLessThan 4 c 32
x58226:	cmp word [bp + 6], 32	; 4: 131 126 6 32
x58230:	jl isgraph$4	; 2: 124 11

isgraph$1:	; SignedGreaterThan 4 c 126
x58232:	cmp word [bp + 6], 126	; 4: 131 126 6 126
x58236:	jg isgraph$4	; 2: 127 5

isgraph$2:	; Assign £temporary219 1
x58238:	mov bx, 1	; 3: 187 1 0

isgraph$3:	; Goto 5
x58241:	jmp isgraph$5	; 2: 235 3

isgraph$4:	; Assign £temporary219 0
x58243:	mov bx, 0	; 3: 187 0 0

isgraph$5:	; SetReturnValue £temporary219

isgraph$6:	; Return £temporary219
x58246:	mov ax, [bp]	; 3: 139 70 0
x58249:	mov di, [bp + 4]	; 3: 139 126 4
x58252:	mov bp, [bp + 2]	; 3: 139 110 2
x58255:	jmp ax	; 2: 255 224

isgraph$7:	; FunctionEnd isgraph

isprint:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

isprint$1:	; Parameter 8 c 6
x58257:	mov ax, [bp + 6]	; 3: 139 70 6
x58260:	mov [bp + 14], ax	; 3: 137 70 14

isprint$2:	; Call 8 isgraph 0
x58263:	mov word [bp + 8], isprint$3	; 5: 199 70 8 165 227
x58268:	mov [bp + 10], bp	; 3: 137 110 10
x58271:	add bp, 8	; 3: 131 197 8
x58274:	nop	; 1: 144
x58275:	jmp isgraph	; 2: 235 205

isprint$3:	; PostCall 8

isprint$4:	; GetReturnValue £temporary220

isprint$5:	; Equal 9 £temporary220 0
x58277:	cmp bx, 0	; 3: 131 251 0
x58280:	je isprint$9	; 2: 116 11

isprint$6:	; Equal 9 c 32
x58282:	cmp word [bp + 6], 32	; 4: 131 126 6 32
x58286:	je isprint$9	; 2: 116 5

isprint$7:	; Assign £temporary224 1
x58288:	mov bx, 1	; 3: 187 1 0

isprint$8:	; Goto 10
x58291:	jmp isprint$10	; 2: 235 3

isprint$9:	; Assign £temporary224 0
x58293:	mov bx, 0	; 3: 187 0 0

isprint$10:	; SetReturnValue £temporary224

isprint$11:	; Return £temporary224
x58296:	mov ax, [bp]	; 3: 139 70 0
x58299:	mov di, [bp + 4]	; 3: 139 126 4
x58302:	mov bp, [bp + 2]	; 3: 139 110 2
x58305:	jmp ax	; 2: 255 224

isprint$12:	; FunctionEnd isprint

ispunct:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

ispunct$1:	; Parameter 8 c 6
x58307:	mov ax, [bp + 6]	; 3: 139 70 6
x58310:	mov [bp + 14], ax	; 3: 137 70 14

ispunct$2:	; Call 8 isgraph 0
x58313:	mov word [bp + 8], ispunct$3	; 5: 199 70 8 215 227
x58318:	mov [bp + 10], bp	; 3: 137 110 10
x58321:	add bp, 8	; 3: 131 197 8
x58324:	nop	; 1: 144
x58325:	jmp isgraph	; 2: 235 155

ispunct$3:	; PostCall 8

ispunct$4:	; GetReturnValue £temporary226

ispunct$5:	; Equal 14 £temporary226 0
x58327:	cmp bx, 0	; 3: 131 251 0
x58330:	je ispunct$14	; 2: 116 30

ispunct$6:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

ispunct$7:	; Parameter 8 c 6
x58332:	mov ax, [bp + 6]	; 3: 139 70 6
x58335:	mov [bp + 14], ax	; 3: 137 70 14

ispunct$8:	; Call 8 isalnum 0
x58338:	mov word [bp + 8], ispunct$9	; 5: 199 70 8 240 227
x58343:	mov [bp + 10], bp	; 3: 137 110 10
x58346:	add bp, 8	; 3: 131 197 8
x58349:	jmp isalnum	; 3: 233 249 254

ispunct$9:	; PostCall 8

ispunct$10:	; GetReturnValue £temporary227

ispunct$11:	; NotEqual 14 £temporary227 0
x58352:	cmp bx, 0	; 3: 131 251 0
x58355:	jne ispunct$14	; 2: 117 5

ispunct$12:	; Assign £temporary232 1
x58357:	mov bx, 1	; 3: 187 1 0

ispunct$13:	; Goto 15
x58360:	jmp ispunct$15	; 2: 235 3

ispunct$14:	; Assign £temporary232 0
x58362:	mov bx, 0	; 3: 187 0 0

ispunct$15:	; SetReturnValue £temporary232

ispunct$16:	; Return £temporary232
x58365:	mov ax, [bp]	; 3: 139 70 0
x58368:	mov di, [bp + 4]	; 3: 139 126 4
x58371:	mov bp, [bp + 2]	; 3: 139 110 2
x58374:	jmp ax	; 2: 255 224

ispunct$17:	; FunctionEnd ispunct

iscntrl:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

iscntrl$1:	; Parameter 8 c 6
x58376:	mov ax, [bp + 6]	; 3: 139 70 6
x58379:	mov [bp + 14], ax	; 3: 137 70 14

iscntrl$2:	; Call 8 isprint 0
x58382:	mov word [bp + 8], iscntrl$3	; 5: 199 70 8 28 228
x58387:	mov [bp + 10], bp	; 3: 137 110 10
x58390:	add bp, 8	; 3: 131 197 8
x58393:	jmp isprint	; 3: 233 117 255

iscntrl$3:	; PostCall 8

iscntrl$4:	; GetReturnValue £temporary235

iscntrl$5:	; NotEqual 8 £temporary235 0
x58396:	cmp bx, 0	; 3: 131 251 0
x58399:	jne iscntrl$8	; 2: 117 5

iscntrl$6:	; Assign £temporary238 1
x58401:	mov bx, 1	; 3: 187 1 0

iscntrl$7:	; Goto 9
x58404:	jmp iscntrl$9	; 2: 235 3

iscntrl$8:	; Assign £temporary238 0
x58406:	mov bx, 0	; 3: 187 0 0

iscntrl$9:	; SetReturnValue £temporary238

iscntrl$10:	; Return £temporary238
x58409:	mov ax, [bp]	; 3: 139 70 0
x58412:	mov di, [bp + 4]	; 3: 139 126 4
x58415:	mov bp, [bp + 2]	; 3: 139 110 2
x58418:	jmp ax	; 2: 255 224

iscntrl$11:	; FunctionEnd iscntrl

toupper:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

toupper$1:	; Parameter 8 c 6
x58420:	mov ax, [bp + 6]	; 3: 139 70 6
x58423:	mov [bp + 14], ax	; 3: 137 70 14

toupper$2:	; Call 8 islower 0
x58426:	mov word [bp + 8], toupper$3	; 5: 199 70 8 72 228
x58431:	mov [bp + 10], bp	; 3: 137 110 10
x58434:	add bp, 8	; 3: 131 197 8
x58437:	jmp islower	; 3: 233 91 134

toupper$3:	; PostCall 8

toupper$4:	; GetReturnValue £temporary267

toupper$5:	; Equal 31 £temporary267 0
x58440:	cmp bx, 0	; 3: 131 251 0
x58443:	je toupper$31	; 2: 116 122

toupper$6:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

toupper$7:	; Call 8 localeconv 0
x58445:	mov word [bp + 8], toupper$8	; 5: 199 70 8 91 228
x58450:	mov [bp + 10], bp	; 3: 137 110 10
x58453:	add bp, 8	; 3: 131 197 8
x58456:	jmp localeconv	; 3: 233 26 58

toupper$8:	; PostCall 8

toupper$9:	; GetReturnValue £temporary268

toupper$10:	; Assign localeConvPtr £temporary268
x58459:	mov [bp + 8], bx	; 3: 137 94 8

toupper$11:	; Equal 28 localeConvPtr 0
x58462:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x58466:	je toupper$28	; 2: 116 82

toupper$12:	; Deref £temporary270 -> localeConvPtr localeConvPtr 12
x58468:	mov si, [bp + 8]	; 3: 139 118 8

toupper$13:	; Assign lowerCase £temporary270 -> localeConvPtr
x58471:	mov ax, [si + 12]	; 3: 139 68 12
x58474:	mov [bp + 10], ax	; 3: 137 70 10

toupper$14:	; Deref £temporary271 -> localeConvPtr localeConvPtr 14
x58477:	mov si, [bp + 8]	; 3: 139 118 8

toupper$15:	; Assign upperCase £temporary271 -> localeConvPtr
x58480:	mov ax, [si + 14]	; 3: 139 68 14
x58483:	mov [bp + 12], ax	; 3: 137 70 12

toupper$16:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

toupper$17:	; Parameter 14 lowerCase 6
x58486:	mov ax, [bp + 10]	; 3: 139 70 10
x58489:	mov [bp + 20], ax	; 3: 137 70 20

toupper$18:	; Parameter 14 c 8
x58492:	mov ax, [bp + 6]	; 3: 139 70 6
x58495:	mov [bp + 22], ax	; 3: 137 70 22

toupper$19:	; Call 14 strchr 0
x58498:	mov word [bp + 14], toupper$20	; 5: 199 70 14 144 228
x58503:	mov [bp + 16], bp	; 3: 137 110 16
x58506:	add bp, 14	; 3: 131 197 14
x58509:	jmp strchr	; 3: 233 43 61

toupper$20:	; PostCall 14

toupper$21:	; GetReturnValue £temporary272

toupper$22:	; BinarySubtract index £temporary272 lowerCase
x58512:	sub bx, [bp + 10]	; 3: 43 94 10
x58515:	mov [bp + 14], bx	; 3: 137 94 14

toupper$23:	; BinaryAdd £temporary275 upperCase index
x58518:	mov si, [bp + 12]	; 3: 139 118 12
x58521:	add si, [bp + 14]	; 3: 3 118 14

toupper$24:	; Deref £temporary274 -> £temporary275 £temporary275 0

toupper$25:	; IntegralToIntegral £temporary276 £temporary274 -> £temporary275
x58524:	mov bl, [si]	; 2: 138 28
x58526:	and bx, 255	; 4: 129 227 255 0
x58530:	cmp bl, 0	; 3: 128 251 0
x58533:	jge toupper$26	; 2: 125 4
x58535:	neg bl	; 2: 246 219
x58537:	neg bx	; 2: 247 219

toupper$26:	; SetReturnValue £temporary276

toupper$27:	; Return £temporary276
x58539:	mov ax, [bp]	; 3: 139 70 0
x58542:	mov di, [bp + 4]	; 3: 139 126 4
x58545:	mov bp, [bp + 2]	; 3: 139 110 2
x58548:	jmp ax	; 2: 255 224

toupper$28:	; BinarySubtract £temporary277 c 32
x58550:	mov bx, [bp + 6]	; 3: 139 94 6
x58553:	sub bx, 32	; 3: 131 235 32

toupper$29:	; SetReturnValue £temporary277

toupper$30:	; Return £temporary277
x58556:	mov ax, [bp]	; 3: 139 70 0
x58559:	mov di, [bp + 4]	; 3: 139 126 4
x58562:	mov bp, [bp + 2]	; 3: 139 110 2
x58565:	jmp ax	; 2: 255 224

toupper$31:	; SetReturnValue c
x58567:	mov bx, [bp + 6]	; 3: 139 94 6

toupper$32:	; Return c
x58570:	mov ax, [bp]	; 3: 139 70 0
x58573:	mov di, [bp + 4]	; 3: 139 126 4
x58576:	mov bp, [bp + 2]	; 3: 139 110 2
x58579:	jmp ax	; 2: 255 224

toupper$33:	; FunctionEnd toupper

locale_test:	; Empty

locale_test$1:	; Return 0
x58581:	mov ax, [bp]	; 3: 139 70 0
x58584:	mov di, [bp + 4]	; 3: 139 126 4
x58587:	mov bp, [bp + 2]	; 3: 139 110 2
x58590:	jmp ax	; 2: 255 224

locale_test$2:	; FunctionEnd locale_test

$StackTop:
x58592:
